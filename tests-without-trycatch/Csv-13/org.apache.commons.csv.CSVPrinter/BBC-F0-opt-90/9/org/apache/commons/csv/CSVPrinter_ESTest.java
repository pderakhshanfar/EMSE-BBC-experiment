/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:53:18 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(460);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1", false);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
      char char0 = '';
      char[] charArray0 = new char[6];
      objectArray0[3] = (Object) '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
//      try { 
        cSVPrinter1.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String string0 = "Unexpected Quote value: ";
      MockFile mockFile0 = new MockFile("Unexpected Quote value: ", "Unexpected Quote value: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.println();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Unexpected Quote value: ");
      String string1 = "RV$D ^.5-w\\9&ldGY";
      EvoSuiteFile evoSuiteFile0 = null;
      cSVFormat1.withDelimiter('');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("RV$D ^.5-w9&ldGY", "RV$D ^.5-w9&ldGY", 308, sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLTransientConnectionException1);
      cSVPrinter0.print(sQLTransientConnectionException0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentMarker('[');
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SkipHeaderRecord:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("E],u");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "E],u";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');
      Character character0 = new Character('M');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{~TF";
      stringArray0[1] = "#\"YCB!\"h*?'a9`.[t";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("");
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("f");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "f");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment("");
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A,}b*-`n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("X ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`Y5Grj_-+hJh*");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`Y5Grj_-+hJh*");
      cSVFormat0.withNullString("$ALUES");
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~Cwk`ZPo$z~=");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[22];
      objectArray0[18] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) charset0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0`y~9");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CSVPrinter cSVPrinter3 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter3.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) character0;
      CSVFormat cSVFormat5 = cSVFormat1.withNullString("$VALUES");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat5);
      Object object1 = new Object();
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(">y*?v");
      Character character0 = new Character('');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('m');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      Charset.defaultCharset();
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 57);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.printComment("rnyr.Vv:\"hdWo.$wi");
      // Undeclared exception!
//      try { 
        cSVPrinter0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("N Euztsmodeet butn escape hiractr is s");
      Character character0 = new Character('');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.printComment("CSVRecord [comment=");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('.');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) set0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I/)/K86^<T8)Vj]0";
      stringArray0[1] = "out";
      stringArray0[2] = "/`A'&EZ>t8VXYx>[|pS";
      stringArray0[3] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      Character.valueOf('|');
      Character.valueOf('X');
      Character character0 = new Character('f');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      StringWriter stringWriter1 = new StringWriter(1953);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printComment((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      PipedReader pipedReader0 = new PipedReader(4817);
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      StringWriter stringWriter1 = new StringWriter(2363);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("FCg;D");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("f&HF+<\"]5SRN:");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[12];
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      PipedReader pipedReader0 = new PipedReader(4817);
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      StringWriter stringWriter1 = new StringWriter(5);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("");
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      PipedReader pipedReader0 = new PipedReader(4817);
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[13];
      cSVFormat1.withEscape('f');
      objectArray0[1] = (Object) stringWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      PriorityQueue<Float> priorityQueue1 = new PriorityQueue<Float>(29);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Float float0 = new Float(0.0);
      cSVPrinter0.print(float0);
      cSVPrinter0.print(cSVPrinter1);
//      try { 
        MockURI.URI("yu6o(9{3DC^CG&kq;");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Illegal character in path at index 6: yu6o(9{3DC^CG&kq;
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = 'I';
      charArray0[2] = 'Y';
      charArray0[3] = 'x';
      charArray0[4] = '~';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      Character character0 = new Character('~');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter(848);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RFC4180";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) quoteMode0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      StringWriter stringWriter0 = new StringWriter(15);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 32);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(bufferedWriter0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>(15, comparator0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat2.withRecordSeparator("");
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charArrayWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVFormat0.withIgnoreHeaderCase();
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Escape=<");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Escape=<";
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "Escape=<", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray1 = new Object[0];
      String[] stringArray0 = Locale.getISOCountries();
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.close();
      mockPrintStream0.close();
      cSVPrinter0.printComment("Lv]xEFf9 xaaxR(8P");
      cSVPrinter0.printComment("Lv]xEFf9 xaaxR(8P");
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printComment("Escape=<");
      // Undeclared exception!
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('h');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('h');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      BufferedWriter bufferedWriter1 = new BufferedWriter(charArrayWriter0);
      bufferedWriter1.write(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter1, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("format", "NsrD_ix7E]fC<VHyCT");
      cSVPrinter1.print(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "format", 0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLNonTransientConnectionException1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferedWriter0;
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVPrinter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('I');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('I');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('U');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat4;
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      cSVFormat2.withDelimiter('\'');
      cSVPrinter0.print(cSVFormat1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charArrayWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(110, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", charArrayWriter0.toString());
      assertEquals(28, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVFormat1.withDelimiter('p');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('h');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('h');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      BufferedWriter bufferedWriter1 = new BufferedWriter(charArrayWriter0);
      bufferedWriter1.write(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter1, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("format", "NsrD_ix7E]fC<VHyCT");
      cSVPrinter1.print(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "format", 0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLNonTransientConnectionException1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferedWriter0;
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(54, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>(comparator0);
      cSVFormat1.withDelimiter('s');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 10);
      DataTruncation dataTruncation0 = new DataTruncation(85, false, false, 85, 86);
      cSVPrinter0.print(dataTruncation0);
      cSVPrinter0.printRecord((Iterable<?>) dataTruncation0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) dataTruncation0;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      StringWriter stringWriter0 = new StringWriter();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
      assertEquals(269, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.spliterator();
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      assertEquals(224, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withSkipHeaderRecord(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charset0);
      InputStreamReader inputStreamReader1 = new InputStreamReader(dataInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader1);
      PushbackReader pushbackReader1 = new PushbackReader(inputStreamReader0);
      priorityQueue0.add(pushbackReader1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertEquals(34, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter0);
      Object object1 = new Object();
      CSVPrinter cSVPrinter2 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[9];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) charArrayWriter0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVPrinter1;
      cSVPrinter2.printRecords(objectArray0);
      assertEquals(353, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('1');
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withIgnoreHeaderCase();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat1);
      assertEquals(46, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withSkipHeaderRecord(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)cSVPrinter0.getOut();
      assertEquals(229, charArrayWriter0.size());
      assertEquals(229, charArrayWriter1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      cSVFormat1.withRecordSeparator('&');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('P');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('k');
      cSVPrinter0.print("Q");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      cSVPrinter1.print(mockPrintWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = object0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('v');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>((Comparator<? super SQLRecoverableException>) null);
      cSVFormat1.withDelimiter('v');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat2.withIgnoreHeaderCase(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      cSVPrinter0.getOut();
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('v');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>((Comparator<? super SQLRecoverableException>) null);
      cSVFormat1.withDelimiter('v');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 85);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(pushbackInputStream0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Character character0 = new Character('a');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat2.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(559, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('h');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('h');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      cSVFormat0.withIgnoreHeaderCase();
      charArray0[7] = 'h';
      bufferedWriter0.write(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'h';
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) 'h';
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(bufferedWriter0);
      cSVPrinter0.printComment("No quotes mode set but no escape character is set");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) character0;
      CSVFormat cSVFormat5 = cSVFormat1.withNullString("$VALUES");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat5);
      Object object1 = new Object();
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(284, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('v');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[1] = '#';
      charArray0[2] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat3.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
//      try { 
        cSVPrinter0.print(charset0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>(21);
      vector0.add((ByteArrayOutputStream) null);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      assertEquals(426, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('i');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[1] = '#';
      charArray0[2] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Appendable appendable0 = cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(appendable0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) priorityQueue0;
      objectArray0[1] = (Object) cSVFormat4;
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '?';
      charArray0[2] = 'O';
      charArray0[3] = 'p';
      charArray0[4] = 't';
      charArray0[5] = 'P';
      charArray0[5] = '$';
      charArray0[8] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter1.close();
      cSVPrinter0.getOut();
      cSVPrinter1.println();
      assertArrayEquals(new char[] {'\r', '\n', '\r', '\n', '\r', '\n', '\u0000', '\u0000', 'B'}, charArray0);
      assertEquals(3, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('i');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      charArray0[1] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      cSVPrinter0.close();
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      priorityQueue0.add(pushbackReader0);
      cSVPrinter0.printComment("W(mR{{d!V");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = '$';
      charArray0[2] = 't';
      charArray0[3] = '!';
      charArray0[4] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      LinkedHashSet<DataInputStream> linkedHashSet0 = new LinkedHashSet<DataInputStream>();
      LinkedHashSet<FilterInputStream> linkedHashSet1 = new LinkedHashSet<FilterInputStream>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      assertNotNull(appendable0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character.valueOf('W');
      Character character0 = new Character('Y');
      cSVFormat0.withQuote(character0);
      cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(356, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charArrayWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat4;
      Object object1 = new Object();
      objectArray0[3] = object1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      assertEquals(143, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat1.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter1.printRecord(objectArray0);
      PriorityQueue<DataInputStream> priorityQueue0 = new PriorityQueue<DataInputStream>();
      PriorityQueue<FilterInputStream> priorityQueue1 = new PriorityQueue<FilterInputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("");
      assertEquals(10, charArrayWriter0.size());
      assertEquals("YY,,,,\r\n\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('R');
      cSVFormat2.withEscape('M');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVFormat0.withDelimiter('_');
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
//      try { 
        cSVPrinter1.print((Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      PipedReader pipedReader0 = new PipedReader(4817);
      PriorityQueue<PushbackReader> priorityQueue1 = new PriorityQueue<PushbackReader>();
      PipedReader pipedReader1 = new PipedReader(4817);
      MockFile mockFile0 = new MockFile("')");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      TreeSet<Byte> treeSet0 = new TreeSet<Byte>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withEscape(character0);
      StringWriter stringWriter0 = new StringWriter(122);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.print(stringWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1", false);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVPrinter0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      CharBuffer.wrap(charArray0);
      cSVFormat0.print(mockFileWriter0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(arrayDeque0);
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque0);
//      try { 
        cSVPrinter1.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter1.println();
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = '';
      charArray0[2] = 'U';
      charArray0[3] = 'I';
      charArray0[4] = '';
      charArray0[5] = '';
      CharBuffer.wrap(charArray0);
      cSVFormat0.print(mockPrintWriter0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      cSVFormat2.print(mockPrintWriter0);
      Appendable appendable0 = cSVPrinter1.getOut();
      assertSame(appendable0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) pipedWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
//      try { 
        cSVPrinter0.print(pipedWriter0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      cSVFormat3.withDelimiter(']');
      cSVPrinter0.print(cSVFormat2);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print(cSVFormat3);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      cSVPrinter0.close();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1", false);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('W');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('v');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[1] = '#';
      charArray0[2] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>(comparator0);
      cSVFormat3.withDelimiter(']');
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.print(cSVFormat3);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.println();
      cSVPrinter0.close();
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintWriter0, appendable0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'P';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('\'');
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat0.withRecordSeparator('R');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'R';
      charArray0[2] = '.';
      charArray0[3] = 'n';
      charArray0[4] = ';';
      charArray0[5] = ';';
      charArray0[6] = '1';
      CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      cSVPrinter1.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter1.printComment((String) null);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//      try { 
        cSVPrinter1.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1", false);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('W');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.close();
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockFileWriter0;
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      Iterable<FilterInputStream> iterable0 = null;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1", false);
      Object object0 = new Object();
      CSVFormat.newFormat('W');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = object1;
      cSVPrinter0.printRecord(objectArray0);
      PriorityQueue<DataInputStream> priorityQueue0 = new PriorityQueue<DataInputStream>();
      PriorityQueue<FilterInputStream> priorityQueue1 = new PriorityQueue<FilterInputStream>(priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue1);
      cSVPrinter0.printComment("o{<2\"t1");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) character0;
      StringWriter stringWriter0 = new StringWriter(122);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecords((ResultSet) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat1.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charArrayWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(182, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = 'R';
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat0.withRecordSeparator('R');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat0.withRecordSeparator('R');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
//      try { 
        cSVPrinter0.printRecord(objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>(comparator0);
      cSVFormat3.withDelimiter(']');
      cSVPrinter0.print(cSVFormat2);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(resultSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVPrinter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      char[] charArray0 = new char[1];
      CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(arrayDeque0);
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      Appendable appendable0 = cSVPrinter1.getOut();
      assertSame(stringWriter0, appendable0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('v');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[1] = '#';
      charArray0[2] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      priorityQueue0.add(pushbackReader0);
      cSVPrinter0.printComment("W(mR{{d!V");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '?';
      charArray0[2] = 'O';
      charArray0[3] = 'p';
      charArray0[4] = 'e';
      charArray0[5] = 'P';
      charArray0[6] = '$';
      charArray0[7] = '&';
      charArray0[8] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      LinkedHashSet<DataInputStream> linkedHashSet0 = new LinkedHashSet<DataInputStream>();
      HashSet<FilterInputStream> hashSet0 = new HashSet<FilterInputStream>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('9');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter$1";
      stringArray0[1] = "";
      stringArray0[2] = "*2JW$XOU;t";
      stringArray0[3] = "Unexpected Quote value: ";
      stringArray0[4] = "XT\"<PnTK";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('F');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      assertEquals(144, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'q';
      charArray0[2] = ';';
      charArray0[3] = 'D';
      charArray0[4] = '6';
      charArray0[5] = '.';
      charArray0[6] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("W(mR{{d!V");
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      assertArrayEquals(new char[] {'\r', '\n', '\r', '\n', '6', '.', 'n'}, charArray0);
      assertEquals(4, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVPrinter$1", false);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('W');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withSkipHeaderRecord(false);
      Character character1 = Character.valueOf('v');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'v';
      cSVFormat0.withRecordSeparator('f');
      charArray0[5] = 'v';
      charArray0[6] = 'P';
      charArray0[7] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'P';
      objectArray0[1] = (Object) '#';
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) 'P';
      objectArray0[6] = (Object) 'P';
      objectArray0[7] = (Object) cSVFormat1;
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords(objectArray0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = new PipedWriter();
      CSVPrinter cSVPrinter0 = null;
//      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter1, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator('R');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
//      try { 
        cSVPrinter0.println();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(9);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      Character character1 = new Character('3');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      cSVPrinter0.println();
      int int0 = (-1726);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Comparator<Object> comparator0 = null;
      cSVFormat2.withIgnoreHeaderCase(false);
      String string0 = "F&vFwmJa";
      // Undeclared exception!
//      try { 
        CSVFormat.valueOf("F&vFwmJa");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.F&vFwmJa
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charBuffer0);
      LinkedHashSet<DataInputStream> linkedHashSet0 = new LinkedHashSet<DataInputStream>();
      HashSet<FilterInputStream> hashSet0 = new HashSet<FilterInputStream>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      cSVPrinter1.printRecords((Iterable<?>) hashSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter1.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      Character.valueOf('v');
      cSVFormat0.withEscape((Character) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[1] = '#';
      charArray0[2] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.getOut();
      PriorityQueue<PushbackReader> priorityQueue0 = new PriorityQueue<PushbackReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0, charset0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      priorityQueue0.add(pushbackReader0);
      cSVPrinter0.printComment("W(mR{{d!V");
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '?';
      charArray0[2] = 'O';
      charArray0[3] = 'p';
      charArray0[4] = 'e';
      charArray0[5] = 'P';
      charArray0[6] = '$';
      charArray0[7] = '&';
      charArray0[8] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      LinkedHashSet<DataInputStream> linkedHashSet0 = new LinkedHashSet<DataInputStream>();
      HashSet<FilterInputStream> hashSet0 = new HashSet<FilterInputStream>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      // Undeclared exception!
//      try { 
        cSVPrinter0.printRecord((Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'q';
      charArray0[2] = ';';
      charArray0[3] = 'D';
      charArray0[4] = '6';
      charArray0[5] = '.';
      charArray0[6] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      TreeSet<PushbackInputStream> treeSet0 = new TreeSet<PushbackInputStream>();
      PriorityQueue<PushbackInputStream> priorityQueue0 = new PriorityQueue<PushbackInputStream>((SortedSet<? extends PushbackInputStream>) treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int int0 = (-4086);
      // Undeclared exception!
//      try { 
        stringWriter0.write(charArray0, (-4086), (-4086));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = Character.valueOf('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(286, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("url");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("oS7Ru");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
//      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-708));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative initial size: -708
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('z');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " EmptyLines:ignored";
      stringArray0[1] = "SD";
      stringArray0[2] = "The escape character cannot be a line break";
      stringArray0[3] = "T";
      stringArray0[4] = "The header contains a duplicate entry: '";
      stringArray0[5] = "7O=ZxF5G7o";
      stringArray0[6] = "  9k+";
      stringArray0[7] = "The delimiter cannot be a line break";
      stringArray0[8] = "@zh5s)6b[35x)FQyaEh";
      cSVFormat1.withHeader(stringArray0);
      // Undeclared exception!
//      try { 
        cSVFormat3.print((Appendable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'out' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
