/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:55:07 GMT 2021
 */

package org.apache.commons.codec.language;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.language.Soundex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Soundex_ESTest extends Soundex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Soundex soundex0 = new Soundex("* M:7Z\"W*V%");
      String string0 = soundex0.US_ENGLISH.soundex("* M:7Z\"W*V%");
      assertEquals("M210", string0);
      assertEquals(4, soundex0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Soundex soundex0 = new Soundex("Parameter supplied to Soundex encode is not of type java.lang.String");
      String string0 = soundex0.encode("KIXGz");
      assertEquals("Krot", string0);
      assertEquals(4, soundex0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Soundex soundex0 = new Soundex("9S_Cf-[+B*;Ca+g.~H");
      int int0 = soundex0.difference("q=GnA)G)M8/P Sc", "");
      assertEquals(4, soundex0.getMaxLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Soundex soundex0 = new Soundex();
      assertEquals(4, soundex0.getMaxLength());
      
      soundex0.setMaxLength(0);
      int int0 = soundex0.getMaxLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Soundex soundex0 = new Soundex("sr");
      soundex0.setMaxLength((-1061));
      int int0 = soundex0.getMaxLength();
      assertEquals((-1061), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      String string0 = soundex0.encode(";");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      int int0 = soundex0.difference("org.apache.commons.codec.language.Soundex", "org.apache.commons.codec.language.Soundex");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Soundex soundex0 = new Soundex("jCHa-phv ,$F$ub&)=");
      // Undeclared exception!
//      try { 
        soundex0.soundex("&s");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The character is not mapped: S
//         //
//         verifyException("org.apache.commons.codec.language.Soundex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Soundex soundex0 = new Soundex("j74qVK");
      // Undeclared exception!
//      try { 
        soundex0.encode((Object) "J120");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The character is not mapped: J
//         //
//         verifyException("org.apache.commons.codec.language.Soundex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Soundex soundex0 = null;
//      try {
        soundex0 = new Soundex((char[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.language.Soundex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Soundex soundex0 = null;
//      try {
        soundex0 = new Soundex((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.language.Soundex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Soundex soundex0 = new Soundex();
      String string0 = soundex0.soundex("\u0001$n`}6q?JD*u+jO5");
      assertEquals(4, soundex0.getMaxLength());
      assertEquals("N232", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      String string0 = soundex0.soundex("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Soundex soundex0 = new Soundex();
      soundex0.soundex((String) null);
      assertEquals(4, soundex0.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      String string0 = soundex0.encode((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Soundex soundex0 = new Soundex("* M:7Z\"W*V%");
      // Undeclared exception!
//      try { 
        soundex0.difference("M210", "* M:7Z\"W*V%");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The character is not mapped: M
//         //
//         verifyException("org.apache.commons.codec.language.Soundex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      String string0 = soundex0.encode("d+hCvI<xq");
      assertEquals("D212", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      String string0 = soundex0.US_ENGLISH.soundex("bhvOX^");
      assertEquals("B200", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      String string0 = soundex0.soundex("gF}T'E6W7_{hj");
      assertEquals("G130", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Soundex soundex0 = new Soundex("sr");
      Object object0 = new Object();
//      try { 
        soundex0.encode(object0);
//        fail("Expecting exception: Exception");
      
//      } catch(Exception e) {
//         //
//         // Parameter supplied to Soundex encode is not of type java.lang.String
//         //
//         verifyException("org.apache.commons.codec.language.Soundex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH;
      Object object0 = soundex0.encode((Object) "");
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[3];
      Soundex soundex0 = new Soundex(charArray0);
      // Undeclared exception!
//      try { 
        soundex0.encode("HJKX{AtY");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The character is not mapped: H
//         //
//         verifyException("org.apache.commons.codec.language.Soundex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Soundex soundex0 = new Soundex();
      String string0 = soundex0.soundex("0.BM@eHW$&glD|M");
      assertEquals(4, soundex0.getMaxLength());
      assertEquals("B543", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Soundex soundex0 = new Soundex("Parameter supplied to Soundex encode is not of type java.lang.String");
      int int0 = soundex0.getMaxLength();
      assertEquals(4, int0);
  }
}
