/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:21:40 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.attribute.FileTime;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)80;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(0);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(1024L);
      assertEquals(0L, long0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertFalse(boolean0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(41, byteArray0.length);
      assertEquals(41, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(41, byteArray0.length);
      assertEquals(41, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(41, byteArray0.length);
      assertEquals(41, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(41, byteArray0.length);
      assertEquals(41, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      assertNotNull(arjArchiveEntry0);
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-29);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 400);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-97), (byte) (-61), (byte)54, (byte) (-61), (byte) (-100), (byte) (-29)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 3945);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      assertNotNull(bufferedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)30;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-114);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)4);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-87), (byte)4, (byte)0, (byte)30, (byte)0, (byte) (-59), (byte) (-114)}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte) (-87), (byte)4, (byte)0, (byte)30, (byte)0, (byte) (-59), (byte) (-114)}, byteArray0);
      
      System.setCurrentTimeMillis(715L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(67324752L);
      assertEquals(0L, long0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-55);
//      try { 
        zipArchiveInputStream0.read(byteArray0, 5381, 7);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(0);
      assertEquals(0L, long0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry1);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-92);
//      try { 
        zipArchiveInputStream0.read(byteArray0, 83, (int) (byte)44);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      MockFile mockFile0 = new MockFile("Truncated ZIP entry: ", "dD%XSj-\"XA");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "a *.q<KS(nIe)");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      zipArchiveInputStream1.mark((byte)108);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean1 = zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
//      try { 
        zipArchiveInputStream0.skip(1438L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (-4452));
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)125, (byte)46, (byte) (-1), (byte) (-99), (byte) (-71), (byte) (-100), (byte)98, (byte)0}, byteArray0);
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, (byte)46);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)125, (byte)46, (byte) (-1), (byte) (-99), (byte) (-71), (byte) (-100), (byte)98, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int0 = zipArchiveInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(67324752L);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.mark((-1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ax");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ZipArchiveInputStream.matches(byteArray0, 0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[14];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray1.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(14, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(zipArchiveInputStream0);
      assertEquals(14, byteArray1.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(zipArchiveEntry0);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, zipArchiveInputStream0.getCount());
      assertEquals(14L, zipArchiveInputStream0.getBytesRead());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(archiveEntry0);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, zipArchiveInputStream0.getCount());
      assertEquals(14L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(zipArchiveEntry1);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, zipArchiveInputStream0.getCount());
      assertEquals(14L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip((byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0L, long0);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, zipArchiveInputStream0.getCount());
      assertEquals(14L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      MockFile mockFile0 = new MockFile("@Q}:w]#~b*g)", "a *.q<KS(nIe)");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "a *.q<KS(nIe)");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile1, "a *.q<KS(nIe)");
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(zipArchiveEntry1);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("a *.q<KS(nIe)", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/@Q}:w]#~b*g)", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canRead());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)/a *.q<KS(nIe)", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("a *.q<KS(nIe)", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertNull(zipArchiveEntry1.getComment());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.toString());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.getName());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      boolean boolean0 = zipArchiveInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("a *.q<KS(nIe)", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/@Q}:w]#~b*g)", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.canRead());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)/a *.q<KS(nIe)", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("a *.q<KS(nIe)", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertNull(zipArchiveEntry1.getComment());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.toString());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.getName());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      long long0 = zipArchiveInputStream0.skip(0);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(1L);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream1.markSupported();
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertFalse(boolean0);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      ZipArchiveInputStream zipArchiveInputStream2 = null;
//      try {
        zipArchiveInputStream2 = new ZipArchiveInputStream((InputStream) null, ":wY%(7bO)>", false, false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // :wY%(7bO)>
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("@Q}:w]#~b*g)/a *.q<KS(nIe)/a *.q<KS(nIe)");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry");
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("@Q}:w]#~b*g)", "a *.q<KS(nIe)");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "a *.q<KS(nIe)");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile1, "a *.q<KS(nIe)");
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(zipArchiveEntry1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/@Q}:w]#~b*g)", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("a *.q<KS(nIe)", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertEquals("a *.q<KS(nIe)", mockFile1.getName());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(77L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)/a *.q<KS(nIe)", mockFile1.toString());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(77L, zipArchiveEntry1.getSize());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.getName());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.toString());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/@Q}:w]#~b*g)", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("a *.q<KS(nIe)", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertEquals("a *.q<KS(nIe)", mockFile1.getName());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isHidden());
      assertEquals(77L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)/a *.q<KS(nIe)", mockFile1.toString());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(77L, zipArchiveEntry1.getSize());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.getName());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.toString());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      byte[] byteArray0 = new byte[4];
      long long0 = zipArchiveInputStream0.skip(16L);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry2 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry2);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean2 = ZipArchiveInputStream.matches(byteArray0, 892);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.skip((-963L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 40);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-112);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)53;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 84446, 26);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray1.length);
      assertEquals((-84440), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-64), (byte)0, (byte)53, (byte)0, (byte)0}, byteArray1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(zipArchiveInputStream0);
      assertEquals(6, byteArray1.length);
      assertEquals((-84440), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-64), (byte)0, (byte)53, (byte)0, (byte)0}, byteArray1);
      
      zipArchiveInputStream0.close();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-84440), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-64), (byte)0, (byte)53, (byte)0, (byte)0}, byteArray1);
      
      zipArchiveInputStream0.close();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-84440), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-64), (byte)0, (byte)53, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      MockFile mockFile0 = new MockFile("@Q}:w]#~b*g)", "a *.q<KS(nIe)");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "a *.q<KS(nIe)");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile1, "a *.q<KS(nIe)");
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(zipArchiveEntry1);
      assertEquals("/experiment/@Q}:w]#~b*g)", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("a *.q<KS(nIe)", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals("a *.q<KS(nIe)", mockFile1.getName());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile1.getParent());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)/a *.q<KS(nIe)", mockFile1.toString());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.toString());
      assertNull(zipArchiveEntry1.getComment());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.getName());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals("/experiment/@Q}:w]#~b*g)", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("a *.q<KS(nIe)", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals("a *.q<KS(nIe)", mockFile1.getName());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)", mockFile1.getParent());
      assertEquals("/experiment/@Q}:w]#~b*g)/a *.q<KS(nIe)/a *.q<KS(nIe)", mockFile1.toString());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.toString());
      assertNull(zipArchiveEntry1.getComment());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals("a *.q<KS(nIe)", zipArchiveEntry1.getName());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-62);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("The stream is closed");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("The stream is closed", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("The stream is closed", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      FileTime fileTime0 = zipArchiveEntry0.getLastModifiedTime();
      assertNull(fileTime0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("The stream is closed", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("The stream is closed", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte)8, (int) (byte) (-62));
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      assertFalse(boolean0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("The stream is closed", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("The stream is closed", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("The stream is closed", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("The stream is closed", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, 0, 727);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, byteArray0.length);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byte byte0 = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-88));
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-53)}, byteArray0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-53)}, byteArray0);
      
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(",%%dgV]qyv8.");
      assertNotNull(cpioArchiveEntry0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(0, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(1, cpioArchiveEntry0.getHeaderPadCount());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(",%%dgV]qyv8.", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      
      // Undeclared exception!
//      try { 
        cpioArchiveEntry0.setDevice((byte) (-53));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)55}, byteArray1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(zipArchiveInputStream0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)55}, byteArray1);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(archiveEntry0);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, zipArchiveInputStream0.getCount());
      assertEquals(2L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)55}, byteArray1);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(zipArchiveEntry0);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, zipArchiveInputStream0.getCount());
      assertEquals(2L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)55}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-62), (byte)24, (byte)0, (byte)1}, byteArray0);
      
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      assertNotNull(arjArchiveEntry0);
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(arjArchiveEntry0);
      assertFalse(boolean0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-4);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)16);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)16, (byte) (-112), (byte)12, (byte) (-4)}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)16);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "0Qj1Q(z}L2:D_--8:E;");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 0Qj1Q(z}L2:D_--8:E;
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int0 = zipArchiveInputStream0.available();
      assertEquals(0, int0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean0 = zipArchiveInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int1 = zipArchiveInputStream0.read((byte[]) null, 2425, 3612);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean1 = zipArchiveInputStream0.markSupported();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = null;
//      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(67324752L);
      assertEquals(0L, long0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int0 = zipArchiveInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long1 = zipArchiveInputStream0.skip(67324752L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 4004;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches((byte[]) null, 4004);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(zipArchiveInputStream0, (InputStream) null);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveInputStream zipArchiveInputStream1 = null;
//      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0, "");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "crc checksum is required for STORED method when not writing to a file", false, true);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // crc checksum is required for STORED method when not writing to a file
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "Ihm4Wo'Lsx", false, false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // Ihm4Wo'Lsx
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ZipArchiveInputStream.matches(byteArray0, (-3030));
      int int0 = (-1325);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3030), (-1325));
      byteArrayInputStream0.skip((-1325));
      byteArrayInputStream0.markSupported();
      String string0 = "NK(gf@U~GAMRHN)";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "NK(gf@U~GAMRHN)", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // NK(gf@U~GAMRHN)
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte)57, (int) (byte)66);
      assertEquals((-1), int0);
  }
}
