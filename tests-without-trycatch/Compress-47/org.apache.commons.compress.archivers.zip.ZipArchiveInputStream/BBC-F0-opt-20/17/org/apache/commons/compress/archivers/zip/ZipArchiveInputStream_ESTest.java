/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 13:16:29 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Date;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byte byte0 = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-19);
      int int0 = 642;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-67), 642);
      assertEquals(76, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-115), (byte) (-67), (byte)46, (byte)3, (byte)120, (byte) (-87), (byte)4, (byte) (-19)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      byteArrayInputStream0.close();
      assertEquals(76, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-115), (byte) (-67), (byte)46, (byte)3, (byte)120, (byte) (-87), (byte)4, (byte) (-19)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(76, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-115), (byte) (-67), (byte)46, (byte)3, (byte)120, (byte) (-87), (byte)4, (byte) (-19)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(30, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(30, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(30, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      assertEquals(30, byteArray0.length);
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)80;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)80);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-86), (byte)21, (byte)80}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(30, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(30, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(30, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      assertEquals(30, byteArray0.length);
      
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1335), 8);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(16, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(16, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      assertEquals(16, byteArray0.length);
      
      long long0 = zipArchiveInputStream0.skip(1777L);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      assertEquals(16, byteArray0.length);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)35;
      byteArray0[0] = (byte)35;
      byte byte1 = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)46;
      byte byte2 = (byte) (-19);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-1);
      byte byte3 = (byte)14;
      byteArray0[5] = (byte)14;
      byte byte4 = (byte)44;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-101);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byteArray0[8] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)23, (byte)46, (byte) (-19), (byte) (-1), (byte)14, (byte)44, (byte) (-101), (byte) (-32)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      int int0 = sequenceInputStream0.read(byteArray0, (int) (byte)4, (-754));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)126, (byte) (-127), (byte) (-19), (byte)4, (byte)16, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "H", true, true);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      int int0 = zipArchiveInputStream0.read();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1), int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      long long0 = zipArchiveInputStream1.skip(1024L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, long0);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)4;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)4);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)4, (byte)12, (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "UNSHRINKING", false);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5L, zipArchiveInputStream0.getBytesRead());
      assertEquals(5, zipArchiveInputStream0.getCount());
      assertNull(archiveEntry0);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotNull(zipArchiveInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      long long0 = zipArchiveInputStream1.skip((byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0L, long0);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "ADDR");
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(boolean0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      long long0 = zipArchiveInputStream0.skip((byte)13);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      System.setCurrentTimeMillis((-1875L));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-118);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)108);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-118)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("<BId,DHtHS!C5h=c,", (-1772L));
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals((-1772L), arArchiveEntry0.getLength());
      assertEquals((-1772L), arArchiveEntry0.getSize());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertNotNull(arArchiveEntry0);
      
      Date date0 = arArchiveEntry0.getLastModifiedDate();
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals((-1772L), arArchiveEntry0.getLength());
      assertEquals((-1772L), arArchiveEntry0.getSize());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals((-1772L), arArchiveEntry0.getLength());
      assertEquals((-1772L), arArchiveEntry0.getSize());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertFalse(boolean0);
      
//      try { 
        zipArchiveInputStream0.skip(454L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = zipArchiveInputStream0.skip(1426L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ZipArchiveInputStream.matches((byte[]) null, (-351));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("<BId,DHtHS!C5h=c,", 0L);
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals(0L, arArchiveEntry0.getLength());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0L, arArchiveEntry0.getSize());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertNotNull(arArchiveEntry0);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals(0L, arArchiveEntry0.getLength());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0L, arArchiveEntry0.getSize());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      Date date0 = arArchiveEntry0.getLastModifiedDate();
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals(0L, arArchiveEntry0.getLength());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0L, arArchiveEntry0.getSize());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(archiveEntry0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)41;
      byte byte0 = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)41;
//      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte)122, (-2372));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("<BId,DHtHS!C5h=c,", 0L);
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertEquals(0L, arArchiveEntry0.getSize());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertEquals(0L, arArchiveEntry0.getLength());
      assertNotNull(arArchiveEntry0);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertEquals(0L, arArchiveEntry0.getSize());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertEquals(0L, arArchiveEntry0.getLength());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      Date date0 = arArchiveEntry0.getLastModifiedDate();
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertEquals(0L, arArchiveEntry0.getSize());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals("<BId,DHtHS!C5h=c,", arArchiveEntry0.getName());
      assertEquals(0L, arArchiveEntry0.getLength());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      ArArchiveEntry arArchiveEntry1 = new ArArchiveEntry("!<arch>\n", 2573L);
      assertEquals(0, arArchiveEntry1.getGroupId());
      assertEquals("!<arch>\n", arArchiveEntry1.getName());
      assertEquals(0, arArchiveEntry1.getUserId());
      assertEquals(2573L, arArchiveEntry1.getSize());
      assertEquals(33188, arArchiveEntry1.getMode());
      assertEquals(2573L, arArchiveEntry1.getLength());
      assertFalse(arArchiveEntry1.isDirectory());
      assertEquals(1392409281L, arArchiveEntry1.getLastModified());
      assertNotNull(arArchiveEntry1);
      assertFalse(arArchiveEntry1.equals((Object)arArchiveEntry0));
      
      boolean boolean2 = zipArchiveInputStream0.canReadEntryData(arArchiveEntry1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, arArchiveEntry1.getGroupId());
      assertEquals("!<arch>\n", arArchiveEntry1.getName());
      assertEquals(0, arArchiveEntry1.getUserId());
      assertEquals(2573L, arArchiveEntry1.getSize());
      assertEquals(33188, arArchiveEntry1.getMode());
      assertEquals(2573L, arArchiveEntry1.getLength());
      assertFalse(arArchiveEntry1.isDirectory());
      assertEquals(1392409281L, arArchiveEntry1.getLastModified());
      assertFalse(boolean2);
      assertNotSame(arArchiveEntry1, arArchiveEntry0);
      assertFalse(arArchiveEntry1.equals((Object)arArchiveEntry0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
//      try { 
        zipArchiveInputStream0.skip(4171L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = zipArchiveInputStream0.markSupported();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-349), (int) (byte)1);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.skip((-2670L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1601);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "I-W");
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      byte[] byteArray0 = new byte[1];
      pipedOutputStream0.write(1601);
      pipedInputStream0.mark(1601);
      assertEquals(1, pipedInputStream0.available());
      
      byte byte0 = (byte)111;
      byteArray0[0] = (byte)111;
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertNotNull(arjArchiveEntry0);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(arjArchiveEntry0);
      assertEquals(1, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertFalse(boolean0);
      
      pipedOutputStream0.flush();
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = arjArchiveEntry0.getName();
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertNull(string0);
      
      pipedOutputStream0.close();
      int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte)111, (-803));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry0);
      
      int int1 = (-128);
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry1);
      
//      try { 
        pushbackInputStream0.unread(byteArray0, 2890, (-1256));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      zipArchiveInputStream1.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1601);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "I-W");
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      byte[] byteArray0 = new byte[1];
      pipedOutputStream0.write(1601);
      pipedInputStream0.mark(1601);
      assertEquals(1, pipedInputStream0.available());
      
      byte byte0 = (byte)111;
      byteArray0[0] = (byte)111;
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      assertEquals(0, arjArchiveEntry0.getMode());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertNotNull(arjArchiveEntry0);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(arjArchiveEntry0);
      assertEquals(1, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertFalse(boolean0);
      
      pipedOutputStream0.flush();
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = arjArchiveEntry0.getName();
      assertEquals(0, arjArchiveEntry0.getMode());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertNull(string0);
      
      pipedOutputStream0.close();
      int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte)111, (-803));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int1 = (-128);
//      try { 
        pushbackInputStream0.unread(byteArray0, 2890, (-1256));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      int int0 = sequenceInputStream0.read(byteArray0, (int) (byte)4, (-754));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)126, (byte) (-127), (byte) (-19), (byte)4, (byte)16, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "H", true, true);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-75);
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte) (-63);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)16;
      byteArray1[8] = (byte)0;
      ZipArchiveInputStream.matches(byteArray1, (byte)16);
      int int0 = 30;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, 30);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      zipArchiveInputStream0.getNextEntry();
      assertEquals(5L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches((byte[]) null, 16);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byte byte0 = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      int int0 = 0;
      ZipArchiveInputStream.matches(byteArray0, 0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.read();
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, ";~sSY>7O<q");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // ;~sSY>7O<q
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("<BId,DHtHS!C5h=c,", 0L);
      zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1773);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "org.apache.commons.compress.archivers.arj.ArjArchiveEntry", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-32);
      zipArchiveInputStream0.read(byteArray0);
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 122;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, 122);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-98);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = (-1239);
      ZipArchiveInputStream.matches(byteArray0, (-1239));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "pk`_", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // pk`_
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      int int0 = zipArchiveInputStream0.read(byteArray0, (-1082), (-567));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", true, true);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }
}
