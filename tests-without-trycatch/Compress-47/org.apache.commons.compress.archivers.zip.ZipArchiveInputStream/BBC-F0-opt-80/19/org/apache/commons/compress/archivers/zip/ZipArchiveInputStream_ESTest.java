/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 13:25:35 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)24;
      byteArray0[6] = (byte) (-92);
      zipArchiveEntry0.getGeneralPurposeBit();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)17;
      GeneralPurposeBit generalPurposeBit0 = GeneralPurposeBit.parse(byteArray0, 3);
      zipArchiveEntry0.setGeneralPurposeBit(generalPurposeBit0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte) (-65), (byte)46);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1);
      zipArchiveInputStream0.mark(30);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(1024L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read(byteArray0, 618, (-1660));
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-6);
      ZipArchiveInputStream.matches(byteArray0, 1319);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-126);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-59);
      ZipArchiveInputStream.matches(byteArray0, (byte)12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
//      try { 
        zipArchiveInputStream0.reset();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // mark/reset not supported
//         //
//         verifyException("java.io.InputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      zipArchiveInputStream0.read(byteArray0);
      zipArchiveInputStream0.close();
//      try { 
        zipArchiveInputStream0.skip(3444L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(692);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      int int0 = 2286;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches((byte[]) null, 2286);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "LcvZ");
      zipArchiveInputStream0.read(byteArray0, 21, 20);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1);
      zipArchiveInputStream2.getNextZipEntry();
      zipArchiveInputStream0.skip((byte)0);
      ZipArchiveInputStream zipArchiveInputStream3 = new ZipArchiveInputStream(zipArchiveInputStream0, "LcvZ", false, false);
      zipArchiveInputStream3.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream3.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1, "i", true, false);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (-1052), (-1052));
      zipArchiveInputStream0.read(byteArray1, (int) (byte) (-19), (-814));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream1);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.skip(3444L);
      zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "z", false, false);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray0, (-91));
      zipArchiveInputStream0.getNextZipEntry();
      ZipArchiveInputStream.matches(byteArray0, 26128);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1, "i", false, true);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)118, (int) (byte) (-19));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(bufferedInputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveInputStream1.skip((byte)118);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null);
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      ZipArchiveInputStream.matches(byteArray0, 950);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(sequenceInputStream0, "USER_EXEC", true, true);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream2.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-23);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "i", true, false);
      zipArchiveInputStream0.close();
//      try { 
        zipArchiveInputStream0.read(byteArray0, (-4322), (int) (byte) (-2));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, 3248);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "i", true, true);
      zipArchiveInputStream0.read(byteArray0, (-4322), 26);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream1.skip(30L);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "i", false, true);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)118);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream1.getNextZipEntry();
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.skip((byte) (-19));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-19));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      zipArchiveInputStream1.read((byte[]) null, (int) (byte)0, 4719);
      zipArchiveInputStream1.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)4;
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveInputStream.matches(byteArray0, (-4322));
      ZipArchiveInputStream.matches(byteArray0, (byte)2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)25;
      byteArray0[0] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-70);
      ZipArchiveInputStream.matches(byteArray0, 950);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0);
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "i", false, true);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)102;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-70);
      ZipArchiveInputStream.matches(byteArray0, 950);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.read(byteArray0, 0, 0);
      ZipArchiveInputStream.matches(byteArray0, 0);
      zipArchiveInputStream0.read(byteArray0, 126, (-2));
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveInputStream.matches(byteArray0, 1037);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)102;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)25;
      byteArray0[7] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "i", true, true);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, 2887);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "UTF8", false, true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      pipedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "<Z");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // <Z
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-45);
      ZipArchiveInputStream.matches(byteArray0, (byte)4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "org.apache.commons.compress.archivers.zip.X000A_NTFS";
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.X000A_NTFS");
      byte[] byteArray0 = new byte[1];
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.X000A_NTFS", (String) null);
//      try { 
        MockFile.createTempFile("!<arch>\n", (String) null, file0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(23);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", false, false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }
}
