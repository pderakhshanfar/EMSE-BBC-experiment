/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 13:25:05 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.attribute.FileTime;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip((byte)0);
      zipArchiveInputStream0.skip(1024L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)112;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
      JarArchiveEntry jarArchiveEntry1 = null;
//      try {
        jarArchiveEntry1 = new JarArchiveEntry((ZipEntry) jarArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", false);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      ZipArchiveInputStream.matches(byteArray0, (byte)122);
      ZipArchiveInputStream.matches(byteArray0, (-5));
      zipArchiveInputStream0.skip(18L);
      ZipArchiveInputStream.matches(byteArray0, 4);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1048), (byte)49);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      zipArchiveInputStream0.read();
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray0, 1);
//      try { 
        zipArchiveInputStream0.read(byteArray0, 0, (-2146335873));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, (byte)36);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 498, (byte)112);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "D3_D", false);
      ZipArchiveInputStream.matches(byteArray0, (byte)12);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)83;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null, false);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[1] = (byte) (-78);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "DES", true, false);
      zipArchiveInputStream0.mark(1000);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)0;
      sequenceInputStream0.read();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-112);
      zipArchiveInputStream0.read(byteArray0);
      ZipArchiveInputStream.matches(byteArray0, 0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.skip(1000);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.skip(0L);
      ZipArchiveInputStream.matches(byteArray0, 20);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "UF8");
      zipArchiveInputStream0.mark(364);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("UF8");
      zipArchiveInputStream0.skip(364);
      zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.read((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.InputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-78), (byte)112);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, true);
      ZipArchiveInputStream.matches(byteArray0, (byte)12);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      zipArchiveInputStream0.skip((byte)36);
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches((byte[]) null, 46);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
//      try { 
        zipArchiveInputStream0.skip(3031);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "DES", true, false);
      zipArchiveInputStream0.mark(1000);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)0;
      sequenceInputStream0.read();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-112);
      zipArchiveInputStream0.read(byteArray0);
      ZipArchiveInputStream.matches(byteArray0, 0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.skip(1000);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.skip(0L);
      ZipArchiveInputStream.matches(byteArray0, 20);
//      try { 
        zipArchiveInputStream0.skip(3109L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)83;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null, false);
      zipArchiveInputStream0.read(byteArray0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.skip(1);
      ZipArchiveInputStream.matches(byteArray0, (byte) (-31));
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      ZipArchiveInputStream.matches(byteArray0, (byte) (-31));
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true, true);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (-24));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 149, 8);
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1, (String) null, true);
      ZipArchiveInputStream.matches(byteArray0, 255);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      ZipArchiveInputStream.matches(byteArray0, 8);
      zipArchiveInputStream0.skip(0L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-97);
      ZipArchiveInputStream.matches(byteArray0, 38);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      ZipArchiveInputStream zipArchiveInputStream1 = null;
//      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "SWUS?", false, true);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // SWUS?
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(3031);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "DES", true, false);
      zipArchiveInputStream0.mark(1000);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)0;
      sequenceInputStream0.read();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-112);
      zipArchiveInputStream0.read(byteArray0);
      ZipArchiveInputStream.matches(byteArray0, 0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.skip(1000);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.skip(0L);
      ZipArchiveInputStream.matches(byteArray0, 20);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      zipArchiveInputStream0.mark((byte) (-89));
      zipArchiveInputStream0.available();
      byteArray0[1] = (byte)12;
      byte byte0 = (byte) (-4);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)29;
      zipArchiveInputStream0.close();
      byte byte1 = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)3;
//      try { 
        zipArchiveInputStream0.read(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "UTF8");
      zipArchiveInputStream0.mark(364);
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-97);
      ZipArchiveInputStream.matches(byteArray0, 38);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, ", compressedSize=", true);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // , compressedSize=
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = null;
      ZipArchiveInputStream.matches((byte[]) null, (-932));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      int int0 = 0;
      zipArchiveInputStream0.read((byte[]) null, (-932), 0);
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      String string0 = "6?u[qlhX2ROyx";
      boolean boolean0 = false;
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "6?u[qlhX2ROyx", false, false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 6?u[qlhX2ROyx
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)96;
      int int0 = (-674);
      zipArchiveInputStream0.read(byteArray0, (int) (byte) (-72), (-674));
      ZipArchiveInputStream zipArchiveInputStream1 = null;
//      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "/2'z8hmG>\"", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // /2'z8hmG>\"
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "qtg]6-`h8ei";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "qtg]6-`h8ei");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // qtg]6-`h8ei
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 8);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      pushbackInputStream0.mark((-2772));
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark(8);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.skip((-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, false);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.mark((-1586));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 4);
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "^A_0QnLBV5E3/S,Iy", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // ^A_0QnLBV5E3/S,Iy
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }
}
