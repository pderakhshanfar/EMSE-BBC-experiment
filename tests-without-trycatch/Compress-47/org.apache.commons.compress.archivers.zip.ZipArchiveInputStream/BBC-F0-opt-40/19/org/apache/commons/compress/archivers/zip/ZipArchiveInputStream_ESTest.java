/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 13:24:28 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Date;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[47];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(47, byteArrayInputStream0.available());
      assertEquals(47, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(47, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(47, byteArray0.length);
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[47];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(47, byteArrayInputStream0.available());
      assertEquals(47, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(47, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(47, byteArray0.length);
      
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // Unexpected record signature: 0X0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 17);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-12), (byte)13, (byte)0, (byte)26, (byte) (-115), (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(1024L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1793), 1980);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertEquals(1795, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertEquals(1795, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertEquals(1795, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray0.length);
      
      long long0 = zipArchiveInputStream0.skip((byte)81);
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertEquals(1795, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      assertEquals(2, byteArray0.length);
      
      long long1 = zipArchiveInputStream0.skip((byte)81);
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertEquals(1795, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long1);
      assertEquals(2, byteArray0.length);
      assertTrue(long1 == long0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0, "Pmn", true, false);
      assertNotNull(zipArchiveInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertEquals(1795, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(2, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      zipArchiveInputStream1.mark((-2134145239));
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertEquals(1795, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(2, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(306L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream");
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", zipArchiveEntry0.toString());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      
      zipArchiveEntry0.setName((String) null);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", zipArchiveEntry0.toString());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", zipArchiveEntry0.toString());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)26;
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 4);
      assertArrayEquals(new byte[] {(byte)33, (byte)43, (byte) (-123), (byte)0, (byte)26}, byteArray0);
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.mark(98496370);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int0 = zipArchiveInputStream0.available();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, int0);
      
      long long0 = zipArchiveInputStream0.skip(2229L);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
//      try { 
        zipArchiveInputStream0.skip(1871L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)81;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)81);
      assertArrayEquals(new byte[] {(byte)81, (byte)81, (byte)81, (byte) (-61), (byte)81, (byte)81, (byte)81, (byte)81}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte byte0 = (byte)42;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, (byte)42);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)100;
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)49, (byte)100}, byteArray0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      
      long long0 = zipArchiveInputStream0.skip(328L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long1 = zipArchiveInputStream0.skip(0L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(328L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long1 = zipArchiveInputStream0.skip(0L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      long long0 = sequenceInputStream0.skip(2600L);
      assertEquals(0L, long0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      System.setCurrentTimeMillis((-2683L));
      long long1 = sequenceInputStream0.skip(2600L);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int0 = zipArchiveInputStream0.available();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, int0);
      
      long long2 = zipArchiveInputStream0.skip(4294967296L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long2);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      System.setCurrentTimeMillis(649L);
      long long3 = zipArchiveInputStream0.skip(10000L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long3);
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      
      System.setCurrentTimeMillis(0L);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("9(6vxn");
      assertNotNull(zipArchiveEntry1);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals("9(6vxn", zipArchiveEntry1.getName());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals("9(6vxn", zipArchiveEntry1.toString());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      
      zipArchiveEntry1.setName("");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals("", zipArchiveEntry1.getName());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals("", zipArchiveEntry1.toString());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry1);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry1.getNameSource());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals("", zipArchiveEntry1.getName());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals("", zipArchiveEntry1.toString());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry1.getCommentSource());
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(1429L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-31);
      int int1 = zipArchiveInputStream0.read(byteArray0, 3, (int) (byte) (-2));
      assertArrayEquals(new byte[] {(byte) (-2), (byte)39, (byte) (-31)}, byteArray0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int1);
      assertEquals(3, byteArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream1);
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      long long0 = zipArchiveInputStream1.skip(328L);
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0L, long0);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      System.setCurrentTimeMillis(649L);
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream0, "org.apache.commons.compress.archivers.zip.Zip64RequiredException");
      assertNotNull(zipArchiveInputStream2);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream2.getBytesRead());
      assertEquals(0, zipArchiveInputStream2.getCount());
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream0));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream1));
      
      long long1 = zipArchiveInputStream2.skip(2229L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream2.getBytesRead());
      assertEquals(0, zipArchiveInputStream2.getCount());
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream2);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream0);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream1);
      assertEquals(0L, long1);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream2));
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream0));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream1));
      assertTrue(long1 == long0);
      
      System.setCurrentTimeMillis(2229L);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      
      zipArchiveEntry0.setName("9(6vxn");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9(6vxn", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9(6vxn", zipArchiveEntry0.getName());
      
      boolean boolean0 = zipArchiveInputStream1.canReadEntryData(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9(6vxn", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9(6vxn", zipArchiveEntry0.getName());
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream2);
      assertFalse(boolean0);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream2));
      
      System.setCurrentTimeMillis(309L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)39;
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream2.getNextZipEntry();
      assertNull(zipArchiveEntry1);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream2.getBytesRead());
      assertEquals(0, zipArchiveInputStream2.getCount());
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream2);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream0);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream2));
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream0));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream1));
      
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte) (-31);
      int int0 = zipArchiveInputStream2.read(byteArray0, 2140556281, (int) (byte) (-31));
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31), (byte)46, (byte) (-31), (byte) (-2), (byte) (-2), (byte)39, (byte) (-17), (byte) (-31)}, byteArray0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream2.getBytesRead());
      assertEquals(0, zipArchiveInputStream2.getCount());
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream2);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream0);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream1);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream2));
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream0));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream1));
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(ZipArchiveEntry.CommentSource.COMMENT, zipArchiveEntry0.getCommentSource());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9(6vxn", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(ZipArchiveEntry.NameSource.NAME, zipArchiveEntry0.getNameSource());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9(6vxn", zipArchiveEntry0.getName());
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream2);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertFalse(boolean1);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream2));
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(1095216660480L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[14];
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int0);
      assertEquals(14, byteArray0.length);
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      String string0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)15;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)90, (byte)90, (byte)15}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read((byte[]) null, 0, 2586);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.skip((-3387L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)65);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = zipArchiveInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = null;
      int int1 = zipArchiveInputStream0.read((byte[]) null, (-1164), 0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-113));
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113)}, byteArray0);
      assertEquals((-113), byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113)}, byteArray0);
      assertEquals((-113), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null, false, true);
      assertNotNull(zipArchiveInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113)}, byteArray0);
      assertEquals((-113), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(2, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream1.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113)}, byteArray0);
      assertEquals((-113), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(2, byteArray0.length);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches((byte[]) null, 540);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int0 = zipArchiveInputStream0.available();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, int0);
      
//      try { 
        zipArchiveInputStream0.reset();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // mark/reset not supported
//         //
//         verifyException("java.io.InputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1729;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1729);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = false;
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)34, (byte)71, (byte)8, (byte) (-111), (byte) (-102), (byte)0, (byte)92, (byte)10, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "", true, true);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)28;
//      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte)89, 30);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(539L);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.close();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&A spwu0z_X](?Hu_", true);
      assertNotNull(tarArchiveEntry0);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("&A spwu0z_X](?Hu_", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      
      tarArchiveEntry0.setNames("&A spwu0z_X](?Hu_", "&A spwu0z_X](?Hu_");
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("&A spwu0z_X](?Hu_", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("&A spwu0z_X](?Hu_", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("&A spwu0z_X](?Hu_", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isOldGNUSparse());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getLongUserId());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("&A spwu0z_X](?Hu_", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("&A spwu0z_X](?Hu_", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("&A spwu0z_X](?Hu_", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isStarSparse());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(328L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long1 = zipArchiveInputStream0.skip(0L);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.mark(0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(0L);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[3];
//      try { 
        zipArchiveInputStream0.read(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1131, 2128);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)71, (byte) (-1), (byte)0, (byte)5, (byte) (-111), (byte)0, (byte)112, (byte)0}, byteArray0);
      assertEquals((-1123), byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)71, (byte) (-1), (byte)0, (byte)5, (byte) (-111), (byte)0, (byte)112, (byte)0}, byteArray0);
      assertEquals((-1123), byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      assertNotNull(arjArchiveEntry0);
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertEquals(0, arjArchiveEntry0.getMode());
      
      Date date0 = arjArchiveEntry0.getLastModifiedDate();
      assertNotNull(date0);
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(arjArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(arjArchiveEntry0.isDirectory());
      assertEquals(0L, arjArchiveEntry0.getSize());
      assertEquals(0, arjArchiveEntry0.getHostOs());
      assertEquals(0, arjArchiveEntry0.getUnixMode());
      assertFalse(arjArchiveEntry0.isHostOsUnix());
      assertEquals(0, arjArchiveEntry0.getMode());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-37);
//      try { 
        zipArchiveInputStream0.read(byteArray0, (-1411), 2885);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }
}
