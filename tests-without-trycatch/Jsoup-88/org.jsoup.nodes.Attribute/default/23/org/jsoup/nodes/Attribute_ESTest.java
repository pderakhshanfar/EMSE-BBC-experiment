/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:35:56 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("ismap", "ismap");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("_Wm1J2w\"<", "_Wm1J2w\"<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_Wm1J2w\"<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("default", "default", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-cz)HNt7Lmg`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("oq|(]o#hA-Js");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("width must be > 0", (String) null, attributes0);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("_Wm1J2w\"<", "_Wm1J2w\"<");
      String string0 = attribute0.getValue();
      assertEquals("_Wm1J2w\"<", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("<", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("command", "command");
      String string0 = attribute0.getKey();
      assertEquals("command", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.shouldCollapseAttribute("E", "E", (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("E", "E");
      // Undeclared exception!
//      try { 
        attribute0.setValue("E");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("d\"at[-", "d\"at[-");
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      Attribute attribute0 = new Attribute("d\"at[-", "d\"at[-", attributes0);
      // Undeclared exception!
//      try { 
        attribute0.setValue("d\"at[-");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("'y-s+dg~.vsnmu!x", true);
      attributes0.keys = null;
      Attribute attribute0 = new Attribute("eATl{hx9dK}FA\"dU", "eATl{hx9dK}FA\"dU", attributes0);
      // Undeclared exception!
//      try { 
        attribute0.setKey("eATl{hx9dK}FA\"dU");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("]pary,))\"_", "]pary,))\"_");
      // Undeclared exception!
//      try { 
        attribute0.setKey((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("data-", "data-");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
//      try { 
        attribute0.setKey("data-");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isDataAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isBooleanAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "E");
      // Undeclared exception!
//      try { 
        Attribute.html("E", "E", (Appendable) charBuffer0, (Document.OutputSettings) null);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html("cQ-di}/c", "cQ-di}/c", (Appendable) null, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        Attribute.html("Dc^)G", "Dc^)G", (Appendable) pipedWriter0, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("E", "E");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "E");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("E", "E");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("we", "we");
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        attribute0.html((Appendable) pipedWriter0, (Document.OutputSettings) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute("", "", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("data-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("Jqr", (String) null, (Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html("E", "E", (Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[%s=%s]", "[%s=%s]", attributes0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("[%s=%s]");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = new Attribute("LJyE>]~(4r,')CeI4O}", "LJyE>]~(4r,')CeI4O}");
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = new Attribute("|r(D2?*g4sb", (String) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("E", "E");
      Attribute attribute1 = new Attribute("E", (String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("A", "A");
      Attribute attribute1 = new Attribute("A", "A");
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(".j$?u8u'm1jinmj", "D");
      Attribute attribute1 = new Attribute("D", ".j$?u8u'm1jinmj");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("D", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals(".j$?u8u'm1jinmj", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("async", "async", attributes0);
      boolean boolean0 = attribute0.equals("async");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("sortable", "S_}2y", attributes0);
      boolean boolean0 = attribute0.equals(attribute0);
      assertEquals("S_}2y", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("sortable", "S_}2y", attributes0);
      boolean boolean0 = attribute0.equals((Object) null);
      assertEquals("S_}2y", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "data-");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("wFnkL!H3", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", ",#uK#&,k6n!a4-yo/");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals(",#uK#&,k6n!a4-yo/", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute((String) null, (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("7", "7", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("ismap", "ismap");
      String string0 = attribute0.toString();
      assertEquals("ismap", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("async", "async");
      Attribute attribute0 = new Attribute("async", "async", attributes1);
      attribute0.setValue("CdataSection");
      assertEquals("CdataSection", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("async", "async", attributes0);
      attribute0.setValue("CdataSection");
      assertEquals("CdataSection", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("d=ta-", "d=ta-", attributes0);
      attribute0.setKey("data-e");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data", "data");
      attribute0.setKey("data");
      assertEquals("data", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("|q", "|q", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("D", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("d=ta-", "d=ta-", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("data-", "data-");
      attributes0.put(attribute0);
      attribute0.setKey("data-");
      assertEquals("data-", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("sortable", "S_}2y", attributes0);
      String string0 = attribute0.html();
      assertEquals("sortable=\"S_}2y\"", string0);
  }
}
