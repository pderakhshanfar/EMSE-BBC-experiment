/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:24:36 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("default", "default");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("truespeed", "P\"O#r");
      assertEquals("P\"O#r", attribute0.getValue());
      assertEquals("truespeed", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("}}\"Zg", "org.jsoup.nodes.BooleanAttribute");
      MockFileWriter mockFileWriter0 = new MockFileWriter("          ");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals("org.jsoup.nodes.BooleanAttribute", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("nowrap", "nowrap", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute((String) null, (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute((String) null, "V\"", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("V\"", "V\"");
      attribute0.setKey("data-itemscope");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("required");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("51%*7r>Bi=G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("D|48v~d`%:kau_Sl'", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = new Attribute("B.mVN8z[H+7S[c", "B.mVN8z[H+7S[c");
      String string0 = attribute0.getValue();
      assertEquals("B.mVN8z[H+7S[c", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("\"Yo&,zLP$.@']_%`rGa", "\"Yo&,zLP$.@']_%`rGa", attributes0);
      attribute0.setValue("");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("textarea", "CTZvI9]Y1CKzw8o /4", attributes0);
      attribute0.getKey();
      assertEquals("CTZvI9]Y1CKzw8o /4", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      // Undeclared exception!
//      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.shouldCollapseAttribute("", "Nq$9]#P", (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("* {xU", "");
      // Undeclared exception!
//      try { 
        attribute0.setValue("I510rN(k\f>&:%1p");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("}x-,0", "org.j");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("}x-,0=\"org.j\"", "");
      attributes1.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
//      try { 
        attribute0.setValue("}x-,0");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = new Attribute("}x-,0", "}x-,0");
      // Undeclared exception!
//      try { 
        attribute0.setKey((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("data,", "ScriptDataLessthanSign");
      attributes2.put("KYm\"", true);
      Attribute attribute0 = new Attribute("KYm\"", "KYm\"", attributes1);
      String[] stringArray0 = new String[1];
      attributes1.keys = stringArray0;
      // Undeclared exception!
//      try { 
        attribute0.setKey("KYm\"");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isDataAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isBooleanAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "x>4?<tebyr2%%z'k!z|");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html("-k", "x>4?<tebyr2%%z'k!z|", (Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
//      try { 
        Attribute.html("N:@HI!", (String) null, (Appendable) charBuffer0, (Document.OutputSettings) null);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html("zQsTvZ5Tz2*`", "data-uxvm,6WAiQRf3k", (Appendable) null, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        Attribute.html("data-", "data-", (Appendable) pipedWriter0, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("lgMK?vB", "lgMK?vB");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "lgMK?vB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("itemscope", "itemscope");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("aS12I'pQ\"f|", "aS12I'pQ\"f|");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute("", "quirks", (Attributes) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute((String) null, "h1");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^b%+9-;~^dCO}m");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html((String) null, (String) null, (Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(4L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("UTF8", (String) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("<jvDKUdM>J>", "<jvDKUdM>J>", attributes0);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("}x-,0", "org.j");
      attribute0.setKey("}x-,0=\"org.j\"");
      Attribute attribute1 = new Attribute("}x-,0=\"org.j\"", (String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("}x-,0", "org.j");
      attribute0.setKey("}x-,0=\"org.j\"");
      Attribute attribute1 = new Attribute("}x-,0=\"org.j\"", "}x-,0");
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("}x-,0", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("uxvm,6waiqrf3k", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("default", "default");
      boolean boolean0 = attribute0.equals("data-4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("V\"", "V\"");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("}x-,0", "org.j");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
      assertEquals("org.j", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("required", "required");
      Attribute attribute1 = new Attribute("Y", "Nk\"");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("Nk\"", attribute1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("uxvm,6waiqrf3k", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("required", "required");
      attribute0.setKey("org.jsoup.nodes.Element");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Attributes");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("zpE^{q2U86[", "-k", (Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "");
      String string0 = attribute0.toString();
      assertEquals("data-=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("S !+;QPFtBw7Sx*v;^", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attribute.html("required", "formnovalidate", (Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = new Attribute("v\"", "v\"");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setValue("e");
      assertEquals("e", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = new Attribute("zpE^{q2U86[", "data-org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      assertEquals("zpE^{q2U86[", attribute0.getKey());
      
      attribute0.setKey("921-c#%\"sxF}0$B");
      assertEquals("data-org.jsoup.nodes.Element", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("KYm\"", "KYm\"", attributes0);
      attribute0.setKey("KYm\"");
      assertEquals("KYm\"", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("}0oLjg,- 1\"u", "}0oLjg,- 1\"u");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.html();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = new Attribute("GpSjd|mVqF`gO!3Mk_:", "GpSjd|mVqF`gO!3Mk_:");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data+/r-", "data+/r-");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("data+/r-");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }
}
