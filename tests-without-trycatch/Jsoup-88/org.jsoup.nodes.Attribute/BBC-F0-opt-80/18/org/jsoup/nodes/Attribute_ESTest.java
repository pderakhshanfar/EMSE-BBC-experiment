/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:35:03 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "data-");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = new Attribute("inert", "inert");
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute((String) null, (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute((String) null, "typemustmatch", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("XE`N/", "formnovalidate");
      attributes0.put(attribute0);
      attribute0.setValue("n>2qok\"u!jlo)r9-");
      assertEquals("n>2qok\"u!jlo)r9-", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-disabled");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute(":;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("disabled");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = new Attribute("%XkYeG", (String) null);
      String string0 = attribute0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Z", "Z", attributes0);
      String string0 = attribute0.setValue("");
      String string1 = attribute0.getValue();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("jh`vRLlX&NUFA6V~=g", "");
      // Undeclared exception!
//      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.shouldCollapseAttribute("nowrap", "nowrap", (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("7jq'm2ysrhiw_mm", (String) null);
      // Undeclared exception!
//      try { 
        attribute0.setValue("data-:;");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("j", "]VsnR9L9#`^}");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      Attribute attribute0 = new Attribute("j", "j", attributes1);
      // Undeclared exception!
//      try { 
        attribute0.setValue("j");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("8Qtc>xRo1d(1U", "3/xlysD*kR[?[.");
      Attribute attribute0 = new Attribute("3/xlysD*kR[?[.", "<.8,f1", attributes1);
      attributes1.keys = null;
      // Undeclared exception!
//      try { 
        attribute0.setKey("<.8,f1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = new Attribute(":;", ":;");
      // Undeclared exception!
//      try { 
        attribute0.setKey("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("8nK", true);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Attribute attribute0 = new Attribute("DoctypeSystemIdentifier_doubleQuoted", "8nK", attributes1);
      // Undeclared exception!
//      try { 
        attribute0.setKey("data-");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isDataAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.isBooleanAttribute((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "cdm)) 4]cTXJz");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html("org.jsoup.nodes.Attribute", ")J%", (Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        Attribute.html("i", "=$lCB(H'29(", (Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      // Undeclared exception!
//      try { 
        Attribute.html((String) null, (String) null, (Appendable) bufferedWriter0, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attribute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        Attribute.html("Z", "autofocus", (Appendable) pipedWriter0, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("nosha", "nosha");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "nosha");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("dsta-", "dsta-");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Attribute.createFromEncoded((String) null, "disabled");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute("", "ascii", (Attributes) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute attribute0 = null;
//      try {
        attribute0 = new Attribute((String) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html(":matches(%s)", (String) null, (Appendable) charArrayWriter0, document_OutputSettings0);
      assertEquals(12, charArrayWriter0.size());
      assertEquals(":matches(%s)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("disabled", "noresiue", attributes0);
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("muted", (String) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("muted", "muted");
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("Z", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("R|r'C ", "R|r'C ");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("R|r'C ", attribute1.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute(":;", ":;");
      Attributes attributes0 = new Attributes();
      Attribute attribute1 = new Attribute("qU", "to!u]", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("to!u]", attribute1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("N", (String) null);
      Attribute attribute1 = new Attribute("N", "\"x;>\"/MaK");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("R|r'C ", "R|r'C ");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("R|r'C ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("R|r'C ", "R|r'C ");
      boolean boolean0 = attribute0.equals(attribute0);
      assertEquals("R|r'C ", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "i");
      boolean boolean0 = attribute0.equals("noshade");
      assertFalse(boolean0);
      assertEquals("i", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("R|r'C ", "R|r'C ");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
      assertEquals("R|r'C ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("(um{hjb}.v/", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("muted", "muted");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("jh`vRLlX&NUFA6V~=g", "");
      String string0 = attribute0.toString();
      assertEquals("jh`vRLlX&NUFA6V~=g=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("0]v-n.!$q\"V;", "(Um{HJb}.V/");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings1);
      assertEquals("(Um{HJb}.V/", attribute0.getValue());
      assertEquals("0]v-n.!$q\"V;", attribute0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-\"vVT3D&+UL}qyp=Dk'=\"\"", "data-\"vVT3D&+UL}qyp=Dk'=\"\"");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "j4S>ap:%");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("data-", attribute0.getKey());
      assertFalse(boolean0);
      assertEquals("j4S>ap:%", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("jh`vR", "3G.V@dd:./it#!?6");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setKey("svg");
      assertEquals("svg", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("3/xlysD*kR[?[.", "<.8,f1", attributes0);
      assertEquals("3/xlysD*kR[?[.", attribute0.getKey());
      
      attribute0.setKey("<.8,f1");
      assertEquals("<.8,f1", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = new Attribute(")bC(O1/o4SGA.TQk9/=", ")bC(O1/o4SGA.TQk9/=");
      attribute0.setKey(",kIZ |M");
      assertEquals(")bC(O1/o4SGA.TQk9/=", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.toString();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "i");
      String string0 = attribute0.getValue();
      assertEquals("noshade", attribute0.getKey());
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("R|2'C ", "R|2'C ");
      String string0 = attribute0.getKey();
      assertEquals("R|2'C", string0);
      assertEquals("R|2'C ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("noshade", "i");
      attribute0.html();
  }
}
