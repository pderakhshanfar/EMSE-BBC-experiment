/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:43:37 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)58;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      bitInputStream0.readBits(1);
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, (ByteOrder) null);
      bitInputStream1.readBits((byte)58);
      // Undeclared exception!
//      try { 
        bitInputStream1.readBits((-459));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      int int0 = 63;
//      try { 
        bitInputStream0.readBits(63);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)58;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      bitInputStream0.readBits(3);
      BitInputStream bitInputStream1 = new BitInputStream(sequenceInputStream0, (ByteOrder) null);
      bitInputStream1.readBits(3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)58;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder1);
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      bitInputStream0.readBits((byte)0);
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, byteOrder2);
      BitInputStream bitInputStream2 = new BitInputStream(sequenceInputStream0, byteOrder1);
      bitInputStream0.close();
      bitInputStream0.readBits((byte)58);
      // Undeclared exception!
//      try { 
        bitInputStream1.readBits(105);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-30);
      pipedOutputStream0.write(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, sequenceInputStream0);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream1 = new BitInputStream(sequenceInputStream1, byteOrder2);
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      bitInputStream0.readBits((byte)20);
      BitInputStream bitInputStream2 = new BitInputStream(sequenceInputStream1, byteOrder3);
      int int0 = 2135748764;
      // Undeclared exception!
//      try { 
        bitInputStream1.readBits(2135748764);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      bitInputStream0.readBits(0);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)58;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      bitInputStream0.readBits(3);
      BitInputStream bitInputStream1 = new BitInputStream(sequenceInputStream0, (ByteOrder) null);
      int int0 = (-799);
      // Undeclared exception!
//      try { 
        bitInputStream1.readBits((-799));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      long long0 = bitInputStream0.readBits(0);
      long long1 = bitInputStream0.readBits(0);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, (ByteOrder) null);
      int int0 = 1;
//      try { 
        bitInputStream0.readBits(1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      // Undeclared exception!
//      try { 
        bitInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)49, 712);
      byteArrayInputStream0.close();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, (ByteOrder) null);
      byteArrayInputStream0.markSupported();
      bitInputStream0.close();
      bitInputStream0.close();
      bitInputStream0.close();
      bitInputStream0.close();
      bitInputStream0.readBits(0);
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(712);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      int int0 = (-1);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
//      try { 
        pipedInputStream0.reset();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // mark/reset not supported
//         //
//         verifyException("java.io.InputStream", e);
//      }
  }
}
