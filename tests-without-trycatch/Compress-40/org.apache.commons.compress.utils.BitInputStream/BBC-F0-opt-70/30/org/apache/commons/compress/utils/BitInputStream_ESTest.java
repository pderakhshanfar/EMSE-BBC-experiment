/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 22:01:03 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 39);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, (ByteOrder) null);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(bitInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = bitInputStream0.readBits(39);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1L), long0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)47;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(bitInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0}, byteArray0);
      
      long long0 = bitInputStream0.readBits((byte)47);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1L), long0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, (ByteOrder) null);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(bitInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = bitInputStream0.readBits(0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = bitInputStream0.readBits(8);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(47L, long0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-65), 39);
      assertEquals(39, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, (ByteOrder) null);
      assertEquals(39, byteArrayInputStream0.available());
      assertNotNull(bitInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      bitInputStream0.readBits(39);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
//      try { 
        bitInputStream0.readBits(63);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      // Undeclared exception!
//      try { 
        bitInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1);
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, (ByteOrder) null);
      long long0 = bitInputStream0.readBits(1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(2061);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits((byte) (-57));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      bitInputStream0.close();
  }
}
