/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:57:34 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)1;
      int int0 = 8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 8);
      ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)1, 8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream1, (ByteOrder) null);
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      bitInputStream0.readBits((byte)0);
      bitInputStream0.clearBitCache();
      bitInputStream0.readBits((byte)1);
      bitInputStream0.readBits(0);
      bitInputStream0.readBits(8);
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(933);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-6), (byte)1);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits((byte)1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -6
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)64);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      bitInputStream0.readBits(63);
      bitInputStream0.clearBitCache();
      bitInputStream0.readBits(30);
      bitInputStream0.readBits(63);
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
//      try { 
        bitInputStream1.readBits(1459);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)1);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      bitInputStream0.readBits((byte)1);
      bitInputStream0.clearBitCache();
      bitInputStream0.readBits((byte)1);
      bitInputStream0.readBits((byte)1);
      bitInputStream0.readBits((byte)1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)113;
      byteArray0[4] = (byte)0;
      ByteOrder.nativeOrder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, (ByteOrder) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
//      try { 
        bitInputStream0.readBits(8);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 8);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)1, 8);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(2, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream1, (ByteOrder) null);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertNotNull(bitInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(2, byteArray0.length);
      
      bitInputStream0.close();
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      bitInputStream0.clearBitCache();
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      long long0 = bitInputStream0.readBits((byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      bitInputStream0.clearBitCache();
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      long long1 = bitInputStream0.readBits((byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertNotNull(bitInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, byteArray0.length);
      
      long long2 = bitInputStream1.readBits(0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(0L, long2);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream0);
      
      long long3 = bitInputStream1.readBits(8);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals(1L, long3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream0);
      
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(933);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder2);
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertNotSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)22, (byte) (-113), (byte)1, (byte) (-20)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertFalse(byteOrder3.equals((Object)byteOrder2));
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertNotSame(byteOrder3, byteOrder2);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder3);
      assertArrayEquals(new byte[] {(byte)1, (byte)22, (byte) (-113), (byte)1, (byte) (-20)}, byteArray0);
      assertNotNull(bitInputStream0);
      assertFalse(byteOrder3.equals((Object)byteOrder2));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertEquals(5, byteArray0.length);
      
      long long0 = bitInputStream0.readBits((byte)22);
      assertArrayEquals(new byte[] {(byte)1, (byte)22, (byte) (-113), (byte)1, (byte) (-20)}, byteArray0);
      assertFalse(byteOrder3.equals((Object)byteOrder2));
      assertEquals(988673L, long0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertEquals(5, byteArray0.length);
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertNotSame(byteOrder3, byteOrder2);
      
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits((-921));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[0];
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      bitInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      
      bitInputStream0.clearBitCache();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      
      bitInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder4);
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      assertSame(byteOrder4, byteOrder1);
      assertSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder2);
      
      bitInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder4);
      assertSame(byteOrder0, byteOrder2);
      
      bitInputStream0.clearBitCache();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder4);
      assertSame(byteOrder0, byteOrder2);
      
      long long1 = bitInputStream0.readBits(0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder4);
      assertSame(byteOrder0, byteOrder2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder2);
      
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits((-4916));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      // Undeclared exception!
//      try { 
        bitInputStream0.readBits(2419);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // count must not be negative or greater than 63
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)45, 3624);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-36), byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals((-36), byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(dataInputStream0, byteOrder0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertNotNull(bitInputStream0);
      assertEquals((-36), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertEquals((-36), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArray0.length);
      assertSame(byteOrder0, byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      
      long long0 = dataInputStream0.skip(1439L);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertEquals((-36L), long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      bitInputStream0.close();
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArray0.length);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      
      bitInputStream0.clearBitCache();
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArray0.length);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      
      bitInputStream0.clearBitCache();
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)45, (byte) (-28), (byte) (-103), (byte)65, (byte) (-105), (byte)52, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArray0.length);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      int int0 = 0;
      ByteOrder.nativeOrder();
      bitInputStream0.readBits(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)0;
//      try { 
        pipedInputStream0.read(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        bitInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
//      }
  }
}
