/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 22:56:50 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.rhino.Node;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessClosurePrimitives_ESTest extends ProcessClosurePrimitives_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      Node node0 = new Node(940, 85, (-1));
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
      Node node1 = new Node(105);
      // Undeclared exception!
//      try { 
        processClosurePrimitives0.visit(nodeTraversal0, node1, node0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler1.parseSyntheticCode(">D2bF\"zQH23IoD\"OSo", "goog.base");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("Orering. aturam()", "Orering. aturam()");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      ProcessClosurePrimitives processClosurePrimitives0 = null;
//      try {
        processClosurePrimitives0 = new ProcessClosurePrimitives((AbstractCompiler) null, (PreprocessorSymbolTable) null, checkLevel0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.ProcessClosurePrimitives", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
      Node node0 = Node.newString("Miss4ng m/dule Jraph");
      Node node1 = new Node(37, node0, node0, node0, 2143, 2442);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
      processClosurePrimitives0.visit(nodeTraversal0, node1, node1);
      assertFalse(node1.isObjectLit());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
      Node node0 = Node.newString("Miss4ng m/dule Jraph");
      Node node1 = new Node(86, node0, node0, node0, 2, (-1636));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
      processClosurePrimitives0.visit(nodeTraversal0, node1, node1);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("Orering= aturam()", "Orering= aturam()");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.cunt - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n", "var __allocStats; \nvar __alloc = function(obj, sourcePosition, id, typeName) { \n  if (!__allocStats) { \n    __allocStats = { \n      reset: function() { \n        this.counts = [{ type:typeName, line:'total', count:0 }]; \n      }, \n      report: function(opt_n) { \n        this.counts.filter(function(x) { \n          return x; \n        }).sort(function(a, b) { \n          return b.cunt - a.count; \n        }).splice(0, opt_n || 50).reverse().forEach(function (x) { \n          if (window.console) { \n            window.console.log(x.count + ' (' + x.type + ') : ' + x.line); \n          } \n        }); \n      } \n    }; \n    __allocStats.reset(); \n    if (window.parent) { \n      window.parent['__allocStats'] = __allocStats; \n    } \n  } \n  if (!__allocStats.counts[id]) { \n    __allocStats.counts[id] = { type:typeName, line:sourcePosition, count:0 }; \n  } \n  __allocStats.counts[0].count++; \n  __allocStats.counts[id].count++; \n  return obj;\n}; \n");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
      Node node0 = Node.newString("", 102, (-331));
      Node node1 = new Node(86, node0, node0, node0, 38, (-1639));
      // Undeclared exception!
//      try { 
        processClosurePrimitives0.process(node0, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
      Node node0 = new Node(37, (-1605), (-1605));
      // Undeclared exception!
//      try { 
        processClosurePrimitives0.visit(nodeTraversal0, node0, node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.ProcessClosurePrimitives", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, compilerOptions0.checkMissingReturn);
      Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
//      try { 
        compiler1.parseSyntheticCode("com.Roogle.javascr|pt.jscomp.Typed&copeCreatoo", "goog.base");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }
}
