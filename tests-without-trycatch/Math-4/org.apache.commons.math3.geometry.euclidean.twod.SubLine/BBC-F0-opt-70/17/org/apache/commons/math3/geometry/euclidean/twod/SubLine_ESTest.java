/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:17:19 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.ONE;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 1.0E-10);
      SubLine subLine0 = line0.wholeHyperplane();
      Line line1 = new Line(vector2D1, vector2D1);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line1);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.5850973129272461);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      line0.setOriginOffset((-1.0E-10));
      Line line1 = new Line(vector2D0, 0.5850973129272461);
      Side side0 = subLine0.side(line1);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.ONE;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 1.0E-10);
      SubLine subLine0 = line0.wholeHyperplane();
      Line line1 = new Line(vector2D1, vector2D1);
      Side side0 = subLine0.side(line1);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      assertFalse(subLine0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1408.89491175);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      line0.setOriginOffset((-0.8600655609302599));
      Line line1 = new Line(vector2D0, (-1.0));
      SubLine subLine1 = line1.wholeHyperplane();
      Vector2D vector2D1 = subLine1.intersection(subLine0, true);
      assertNotSame(vector2D0, vector2D1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-0.28653177460474183);
      Vector2D vector2D0 = new Vector2D(doubleArray0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, (-0.28653177460474183));
      SubLine subLine1 = line0.wholeHyperplane();
      Vector2D vector2D1 = subLine0.intersection(subLine1, true);
      assertEquals(0.28653177460474183, vector2D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-519.43);
      Vector2D vector2D0 = new Vector2D(doubleArray0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 37.07020959850348);
      SubLine subLine1 = line0.wholeHyperplane();
      Vector2D vector2D1 = subLine0.intersection(subLine1, true);
      assertEquals(269807.52489999996, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(1483.4997, 1483.4997);
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getPlus();
      IntervalsSet intervalsSet1 = new IntervalsSet(bSPTree1);
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.buildNew(line0, intervalsSet1);
      assertTrue(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      IntervalsSet intervalsSet0 = new IntervalsSet((-0.45684355503732044), 1.0E-10);
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.buildNew(line0, intervalsSet0);
      assertFalse(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-4063.716550395672), (-632.36));
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      // Undeclared exception!
//      try { 
        subLine0.split((Hyperplane<Euclidean2D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>((SubHyperplane<Euclidean1D>) null, bSPTree0, bSPTree0, vector2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree1);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
//      try { 
        subLine0.split(line0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.math3.geometry.euclidean.twod.Vector2D cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine((Hyperplane<Euclidean2D>) null, intervalsSet0);
      // Undeclared exception!
//      try { 
        subLine0.side((Hyperplane<Euclidean2D>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.twod.SubLine", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Euclidean2D euclidean2D0 = Euclidean2D.getInstance();
      Euclidean1D euclidean1D0 = euclidean2D0.getSubSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(euclidean1D0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
//      try { 
        subLine0.side(line0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      // Undeclared exception!
//      try { 
        subLine0.intersection(subLine0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Hyperplane<Euclidean2D> hyperplane0 = subLine0.getHyperplane();
      Euclidean2D euclidean2D0 = Euclidean2D.getInstance();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(euclidean2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine1 = new SubLine(hyperplane0, intervalsSet0);
      // Undeclared exception!
//      try { 
        subLine0.intersection(subLine1, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, (-1.0E-10));
      SubLine subLine0 = new SubLine(line0, (Region<Euclidean1D>) null);
      // Undeclared exception!
//      try { 
        subLine0.getSegments();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.twod.SubLine", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 321.08);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(subHyperplane_SplitSubHyperplane0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
//      try { 
        subLine1.getSegments();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(vector2D0, (Vector2D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, (Vector2D) null, line0);
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(segment0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D1);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.5850973129272461);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      line0.setOriginOffset(2825.8039036314444);
      Line line1 = new Line(vector2D0, 0.5850973129272461);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line1);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1962.96019429), (-1962.96019429));
      Line line0 = new Line(vector2D0, (-1962.96019429));
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Line line1 = new Line(vector2D0, vector2D0);
      Side side0 = subLine0.side(line1);
      assertEquals(Side.BOTH, side0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D(1819.0163628, 1819.0163628);
      Line line0 = new Line(vector2D1, vector2D1);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.5850973129272461);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      line0.setOriginOffset(2825.8039036314444);
      Line line1 = new Line(vector2D0, 0.5850973129272461);
      Side side0 = subLine0.side(line1);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, (-1.0E-10));
      SubLine subLine0 = line0.wholeHyperplane();
      Line line1 = new Line(vector2D0, vector2D0);
      SubLine subLine1 = line1.wholeHyperplane();
      Vector2D vector2D1 = subLine1.intersection(subLine0, false);
      assertEquals(Double.NaN, vector2D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine0, false);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine1 = line0.wholeHyperplane();
      Vector2D vector2D1 = subLine1.intersection(subLine0, true);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine0, true);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Vector2D vector2D0 = new Vector2D(doubleArray0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 37.07020959850348);
      SubLine subLine1 = line0.wholeHyperplane();
      Vector2D vector2D1 = subLine0.intersection(subLine1, true);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, (-1962.96019429));
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, false);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      List<Segment> list0 = subLine0.getSegments();
      assertFalse(list0.isEmpty());
  }
}
