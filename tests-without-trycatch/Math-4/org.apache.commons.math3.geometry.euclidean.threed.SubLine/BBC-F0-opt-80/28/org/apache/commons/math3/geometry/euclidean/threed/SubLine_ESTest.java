/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:13:25 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(115.17951, (-1821.765));
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-0.16624882440418567), 0.9808930158615112);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertFalse(vector3D2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(115.17951, (-2819.01922773));
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-0.16624882440418567), 0.9808930158615112);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertEquals((-0.23168208864125703), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertEquals(0.0, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Plane plane0 = new Plane(vector3D0);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Plane plane1 = new Plane(vector3D0, vector3D1);
      Line line0 = plane0.intersection(plane1);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(1.0, vector3D0, 1.0, vector3D0, (-1.7168146928204135), vector3D0, 9.219544613762692E-9, vector3D0);
      Plane plane0 = new Plane(vector3D1);
      Line line0 = plane0.intersection(plane0);
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      // Undeclared exception!
//      try { 
        subLine0.intersection(subLine0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      SubLine subLine0 = line0.wholeLine();
      Vector1D vector1D0 = Vector1D.ZERO;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>("N%DtRwp0{ lzv*ybTh");
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
//      try { 
        subLine0.intersection(subLine1, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.String cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Segment segment0 = new Segment(vector3D1, vector3D0, (Line) null);
      SubLine subLine0 = new SubLine(segment0);
      // Undeclared exception!
//      try { 
        subLine0.getSegments();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(vector3D0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
//      try { 
        subLine0.getSegments();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.math3.geometry.euclidean.threed.Vector3D cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine((Vector3D) null, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(0.9999999999, vector3D0, 0.9999999999, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D1, vector3D1, line0);
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(segment0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Segment segment0 = new Segment((Vector3D) null, vector3D0, (Line) null);
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(segment0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector3D vector3D2 = subLine0.intersection(subLine1, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-3686.3885097900443), vector3D0, 0.0, vector3D0, (-2294.1343459), vector3D0);
      Vector3D vector3D2 = new Vector3D((-2294.1343459), vector3D1, 0.0, vector3D0, 4.9E-324, vector3D1, 1819.1376, vector3D0);
      Line line0 = new Line(vector3D2, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, false);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0, 2292.0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      IntervalsSet intervalsSet0 = new IntervalsSet((-697.15), 1.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      IntervalsSet intervalsSet1 = new IntervalsSet(0.0, (-0.5));
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      Vector3D vector3D2 = subLine0.intersection(subLine1, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(2292.0, vector3D0, 2292.0, vector3D0, (-572.8132073932), vector3D0, (-572.8132073932), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-1543.3), 140.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      SubLine subLine1 = new SubLine(vector3D0, vector3D1);
      Vector3D vector3D2 = subLine1.intersection(subLine0, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(2292.0, vector3D0, 2292.0, vector3D0, (-572.8132073932), vector3D0, (-572.8132073932), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-1543.3), 140.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertEquals((-2.589082788158552E-13), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2290.321989375737, vector3D0, 2290.321989375737, vector3D0, (-572.8132073932), vector3D0, (-572.8132073932), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-1543.3), 140.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertFalse(vector3D2.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2290.321989375737, vector3D0, 2290.321989375737, vector3D0, (-572.8132073932), vector3D0, (-572.8132073932), vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-1543.3), 140.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      List<Segment> list0 = subLine0.getSegments();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }
}
