/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 12:55:37 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Interval;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-279.02289619647), (-15.959436501114912), 3.4028234663852886E38);
      Vector3D vector3D1 = new Vector3D((-279.02289619647), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      SubLine subLine1 = new SubLine(vector3D0, vector3D1);
      Vector3D vector3D2 = subLine1.intersection(subLine0, false);
      assertFalse(vector3D2.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNotSame(vector3D2, vector3D1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0);
      Line line0 = plane0.intersection(plane0);
      SubLine subLine0 = line0.wholeLine();
      // Undeclared exception!
//      try { 
        subLine0.intersection(subLine0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D vector3D2 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D2, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(orientedPoint0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
//      try { 
        subLine0.intersection(subLine1, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine0 = new SubLine((Line) null, intervalsSet0);
      // Undeclared exception!
//      try { 
        subLine0.getSegments();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 269.5642483731);
      Plane plane0 = new Plane(vector3D0);
      Line line0 = plane0.intersection(plane0);
      Interval interval0 = new Interval(0.0, (-279.02289619647));
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(interval0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
//      try { 
        subLine0.getSegments();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.math3.geometry.euclidean.oned.Interval cannot be cast to java.lang.Boolean
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-279.02289619647), 0.0, 3.4028234663852886E38);
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(vector3D0, (Vector3D) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(segment0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine((Segment) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-3870.280012111), (-3870.280012111), (-3870.280012111));
      Vector3D vector3D2 = new Vector3D((-2086.889893708691), vector3D1, 0.0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D2, vector3D1);
      Vector3D vector3D3 = new Vector3D(0.0, vector3D0, (-2.5857668567479893E-8), vector3D1);
      SubLine subLine1 = new SubLine(vector3D0, vector3D3);
      Vector3D vector3D4 = subLine0.intersection(subLine1, false);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-1.0E-6), (-1.0E-6), (-1.0E-6));
      SubLine subLine0 = new SubLine(vector3D0, vector3D1);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-918.86855402), (-918.86855402), 0.0);
      Vector3D vector3D2 = new Vector3D((-618.31879486394), vector3D0, (-1.0), vector3D1, 925.91, vector3D0, 0.6409968137741089, vector3D0);
      Line line0 = new Line(vector3D0, vector3D2);
      Segment segment0 = new Segment(vector3D2, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      IntervalsSet intervalsSet0 = new IntervalsSet((-1.0), (-918.86855402));
      SubLine subLine1 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D3 = subLine0.intersection(subLine1, true);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-918.86855402), (-918.86855402), 0.0);
      Vector3D vector3D2 = new Vector3D((-618.31879486394), vector3D0, (-1.0), vector3D1, 925.91, vector3D0, 0.6409968137741089, vector3D0);
      Line line0 = new Line(vector3D1, vector3D2);
      Segment segment0 = new Segment(vector3D2, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, true);
      assertEquals(75.77739755332723, vector3D3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-918.86855402), (-918.86855402), 0.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-3870.280012111), (-3870.280012111), (-3870.280012111));
      SubLine subLine0 = new SubLine(vector3D0, vector3D1);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNotSame(vector3D0, vector3D2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 269.5642483731);
      Vector3D vector3D1 = new Vector3D((-694.16023025), vector3D0, 0.0, vector3D0, (-1.0), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      List<Segment> list0 = subLine0.getSegments();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 269.5642483731);
      SubLine subLine0 = null;
//      try {
        subLine0 = new SubLine(vector3D0, vector3D0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // zero norm
//         //
//         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
//      }
  }
}
