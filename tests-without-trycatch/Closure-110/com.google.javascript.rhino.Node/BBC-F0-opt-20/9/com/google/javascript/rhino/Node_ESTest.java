/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 08:38:08 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.UnknownType;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.isAnd();
      node0.isLabel();
      Node node1 = new Node(55, node0, node0, node0);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(3101);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(0.0, 31, 31);
      node0.getLength();
      node0.getDouble();
      node0.getIntProp(31);
      // Undeclared exception!
//      try { 
        node0.getExistingIntProp(31);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: 31
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node node2 = new Node(53);
      node0.getAncestor(15);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.setLastGeneration(false);
      Node.newString("Object#Element");
      Node node4 = new Node(3000, 15, 155);
      node3.srcrefTree(node0);
      Node node5 = null;
//      try {
        node5 = new Node(838, node4, node0, (Node) null, node1, 29, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.removeFirstChild();
      Node node1 = new Node(2, node0, node0, node0, 56, 51);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node((-751));
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.addChildToFront(node1);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(119);
      node0.isBreak();
      Node node1 = Node.newString(38, "com.google.javascript.rhino.Node$SiblingNodeIterable", 1273, 388);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.removeChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      node0.srcref(node1);
      Node node2 = new Node(2, node0, node0, node0, 56, 51);
//      try { 
        node0.setDouble(55);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // FUNCTION <invalid> is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(52, node0, node0, 57, 0);
      node0.srcrefTree(node1);
      node0.setLength(16384);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("}4l#oxef%>)w9lo1c", 0, 90);
      node0.toString();
      node0.isVar();
      node0.isNE();
      node0.getJSType();
      Node node1 = new Node(39, 190, 130);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isNE();
      node1.isStringKey();
      node2.useSourceInfoFrom(node0);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node0 = new Node(19, 19, 19);
      node0.putIntProp(46, 243);
//      try { 
        node0.setDouble(243);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // RSH 19 [is_namespace: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(130);
      Node node1 = new Node(43, 42, 39);
      Node node2 = node0.clonePropsFrom(node1);
      node0.isVar();
      node0.isCase();
      node2.checkTreeEqualsImpl(node1);
      node0.isCatch();
      node2.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node((-571));
      node0.setOptionalArg(false);
      Node node1 = new Node(12);
      Node node2 = new Node(31, node1);
      node2.cloneNode();
      node2.addChildBefore(node0, node1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isTrue();
      node0.mayMutateArguments();
      node0.getBooleanProp(32);
      node0.getLastSibling();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // CATCH is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node((-271));
      node0.isLocalResultCall();
      Node node1 = new Node(4, 4095, (-968));
      node1.getLength();
      node1.putProp(0, node0);
      node1.getJsDocBuilderForNode();
      node1.isRegExp();
      node0.isAdd();
      node1.srcref(node0);
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(0.5, 155, 155);
      node0.isCatch();
      Node node1 = new Node(40, node0);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1831, nodeArray0);
      Node node1 = new Node(147, nodeArray0);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      Node node1 = Node.newString("com.google.common.collect.ImmutableSortedAsList");
      Node node2 = node0.srcref(node1);
      node0.isCatch();
      node0.isStringKey();
      node2.toString();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isLabel();
      Node node1 = Node.newString(283, "k7f70Yo", 110, 8);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      node0.getBooleanProp(41);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isReturn();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(2, node0, node0, node0, 56, 51);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(42, node0, node0, node0);
      node0.srcref(node1);
      node0.setLineno(101);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber((double) 106, 53, 1484);
      Node node1 = new Node(105, node0, node0, node0);
      node0.isEquivalentToTyped(node1);
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("j+;TTL8G?Io*C ~");
      Node node1 = Node.newString("j+;TTL8G?Io*C ~", (-1591), 55);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.addChildrenToFront(node0);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(57, node1, 1, 2806);
      node1.addChildrenToBack(node2);
      node1.removeChildAfter(node0);
      Node.newNumber((double) 37, 114, 2309);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      Node node1 = new Node(4, node0);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(85, 2417, 31);
      node0.putIntProp(41, 153);
      Node node1 = new Node(37, node0);
      // Undeclared exception!
//      try { 
        node0.checkTreeEquals(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // unexpected prop id 41
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(19, 47, 47);
      node0.putIntProp(47, 47);
//      try { 
        node0.setDouble(4095);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // RSH 47 [is_dispatcher: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isEquivalentToTyped(node0);
      Node node1 = node0.cloneTree();
      node0.cloneNode();
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setJSType(templateType0);
//      try { 
        node0.getString();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // PARAM_LIST is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.checkTreeEquals(node0);
      Node node1 = new Node(39, node0, node0, 12, 29);
      node1.mayMutateArguments();
      node0.getJSType();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(6, 53, 34);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.getAncestor(50);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      Node node1 = new Node(1, node0, node0, node0, node0, 56, 42);
      node1.removeChild(node0);
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(116);
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(38);
      Node node1 = new Node(356, node0, node0, node0);
      node1.isThrow();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      node0.isCatch();
      Node node1 = new Node(30, 47, (-510));
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(262144, "TRY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f=jYk+hIMt<y.-ZZ=");
      Node node1 = new Node(21);
      node0.addChildToBack(node1);
      boolean boolean0 = true;
      node0.isEquivalentTo(node1, true, true, true);
      node1.copyInformationFromForTree(node0);
      // Undeclared exception!
//      try { 
        node1.replaceChildAfter(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isScript();
      node0.isCase();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.isEquivalentTo(node0, true, true, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(30);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isFor();
      Node node1 = new Node(12, node0, node0, node0, node0, 47, 0);
      node1.removeFirstChild();
      node0.isEquivalentTo(node1, false, true, false);
      node1.isOptionalArg();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isEquivalentToTyped(node0);
      Node node1 = node0.cloneTree();
      Node node2 = new Node(46, node0, node1, node1, node1, 12, 50);
      Node node3 = node1.clonePropsFrom(node2);
      node3.getNext();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(153);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.cloneNode();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(33);
      // Undeclared exception!
//      try { 
        node0.isQualifiedName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isCase();
      Node node1 = Node.newString((-2078), "':;E&Jk`s@`G");
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      node0.putIntProp(31, (-640));
      int int0 = Node.INFERRED_FUNCTION;
      node0.setCharno(55);
      // Undeclared exception!
//      try { 
        node0.getString();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // unexpected prop id 31
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.isAnd();
      node0.isLabel();
      Node node1 = new Node(55, node0, node0, node0);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isBlock();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(122, (-3971), 32);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.putIntProp(34, 113);
      // Undeclared exception!
//      try { 
        node0.setDouble(113);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // unexpected prop id 34
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node0.isCatch();
      Node node2 = new Node(4, node0);
      node0.checkTreeEquals(node0);
      node2.isOnlyModifiesArgumentsCall();
      Node node3 = null;
//      try {
        node3 = new Node(114689, node2, node1, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      Node node1 = Node.newNumber((-353.12085788));
      node0.copyInformationFromForTree(node1);
      node0.isScript();
      node0.isObjectLit();
      int int0 = Node.LAST_PROP;
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(0, node0, node0, node0, (-3773), 1);
      node0.addChildToFront(node1);
      // Undeclared exception!
//      try { 
        node0.checkTreeEquals(node0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(33);
      node0.isTypeOf();
      Node node1 = node0.getLastSibling();
      node1.isVoid();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isFor();
      Node node1 = new Node(38, node0, node0, node0, node0, 1, 57);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isOnlyModifiesThisCall();
      node0.isDelProp();
      Node node2 = node1.getLastSibling();
      node2.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      node0.isWith();
      Node node1 = new Node(38, node0, node0, node0, node0, 1, 57);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node0.isCase();
      node0.srcrefTree(node1);
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString(33, "mVr7 =x");
      Node node1 = Node.newNumber((-476.4358799), 28, 1);
      node0.checkTreeEquals(node1);
      node0.addChildToBack(node1);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = new Node(122, node0, node0, node0);
      node0.isThrow();
      node1.copyInformationFrom(node0);
      node1.getIntProp(55);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(153);
      Node node1 = new Node((-770), node0, node0);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(15, (-1825), (-465));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(154, (-5124), Integer.MAX_VALUE);
      Node node1 = new Node(37, node0, node0);
      node1.setSourceEncodedPosition(1070);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(93);
      Node node1 = new Node(0, node0, node0, 29, 40);
      node0.getJSDocInfo();
      node1.isEquivalentTo(node1, true, true, true);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
//      try { 
        node2.addChildToFront(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(32, nodeArray0);
      node1.cloneTree();
      node0.removeProp((-1130));
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = node0.cloneTree();
      Node node2 = new Node(40, node0, node1, 42, 3093);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isCase();
      Node node1 = new Node(113, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(119);
      node0.putIntProp(1543, 119);
      node0.detachChildren();
      node0.isName();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.putIntProp(56, 56);
//      try { 
        node0.setDouble(12);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // CALL 37 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("CHECKED_UNKNOWN_TYPE", false);
      node0.putProp(37, simpleSourceFile0);
      node0.getProp(37);
      Node node1 = new Node(52, node0, node0, node0, 2, 284);
      // Undeclared exception!
//      try { 
        node0.clonePropsFrom(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Node has existing properties.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(148);
      Node node1 = new Node(1167, node0, node0, node0, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node1.isGetterDef();
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.cloneTree();
      node0.isScript();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      Node node1 = new Node(31, node0, node0, node0, node0, (-1793), 1);
      node1.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
//      try { 
        node0.removeChild(node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(96);
      Node node1 = new Node(0, node0, node0, 29, 40);
      node1.srcref(node0);
      // Undeclared exception!
//      try { 
        node0.replaceChild(node1, node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(0, node0, node0, node0, node0, 2130024431, 16);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(108);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node node1 = Node.newNumber((double) 30, 53, 55);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber((double) 108, 108, 108);
      Node node1 = new Node(118, node0, node0, node0);
      node1.copyInformationFromForTree(node0);
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node node1 = new Node(47);
      node1.isLabel();
      Node node2 = node1.srcref(node0);
      node0.checkTreeTypeAwareEqualsImpl(node2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(119, 119, 119);
      node0.isContinue();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<UnknownType> linkedList0 = new LinkedList<UnknownType>();
      Iterator<UnknownType> iterator0 = linkedList0.descendingIterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableCollection$Builder");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.descendingSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.setDirectives(treeSet0);
      InputId inputId0 = new InputId("com.google.common.collect.ImmutableCollection$Builder");
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // STRING com.google.common.collect.ImmutableCollection$Builder [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      Node node1 = new Node(12, node0, node0, node0);
      Node node2 = node1.clonePropsFrom(node0);
      node2.getStaticSourceFile();
      node0.useSourceInfoFrom(node1);
      node0.checkTreeEquals(node1);
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1831, nodeArray0);
      Node node1 = node0.cloneTree();
      node1.srcref(node0);
      node1.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(93);
      Node node1 = Node.newString("<(z}hY>Li");
      node0.srcref(node1);
      node0.setLineno(93);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<UnknownType> arrayList0 = new ArrayList<UnknownType>(132);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node(132, node0);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(100);
      node0.isTypeOf();
      Node node1 = node0.cloneNode();
      // Undeclared exception!
//      try { 
        node0.replaceChildAfter(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(108);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isIf();
      Node.extractLineno(46);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(86, nodeArray0, 86, 114);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-667);
      node0.isUnscopedQualifiedName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getImplementedInterfaces();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
//      try { 
        node1.removeChild(node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newString("ASSIGN_RSH");
      Node node2 = new Node(0, node1, node0, 29, 40);
      node2.isEquivalentTo(node2, false, true, true);
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(113, 113, 55);
      node0.isCase();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = Node.newString(105, "liV*/^G");
      node1.isEquivalentToTyped(node0);
      node0.isTry();
      node0.isEquivalentTo(node1, false, true, false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(26, "", 26, 26);
      node0.setWasEmptyNode(false);
      Node node1 = new Node(26, node0, node0, (-4558), 51);
      node1.getJSType();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.getJSType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Not declared as a constructor");
      node1.clonePropsFrom(node0);
      node0.isContinue();
      node1.getAncestors();
      // Undeclared exception!
//      try { 
        node0.getExistingIntProp(36);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: 36
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      Node node1 = new Node(54, node0, node0, node0, 53, (-1050));
      node1.isLocalResultCall();
      node0.srcrefTree(node1);
      node0.isEquivalentToShallow(node0);
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(47);
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node0.isOnlyModifiesThisCall();
      node1.addChildToBack(node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(3065, 3065, 3065);
      Node node1 = new Node(47);
      Node node2 = node1.srcrefTree(node0);
      node1.getAncestor(87855567);
      node2.isReturn();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(3065, 3065, 3065);
      Node node1 = new Node(47);
      Node node2 = new Node(0, node1, node0, node1, node0);
      node2.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      node0.getProp(37);
      node0.getInputId();
      Node node1 = Node.newString(53, "0", (-2175), 47);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = Node.newString("LfTl*RO]UojhWW3^");
      node0.copyInformationFrom(node1);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(93);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      node0.toString(true, false, true);
      node0.getIntProp(93);
      Node node1 = Node.newString(130, "ASSIGN_ADD");
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
//      try { 
        node1.removeChild(node2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.mayMutateArguments();
      Node node1 = Node.newString(31, "9s8");
      node1.setString("9s8");
      Node node2 = node0.copyInformationFromForTree(node1);
      Node node3 = new Node(1120, node2, node1, node1, (-1848), 43);
      // Undeclared exception!
//      try { 
        node2.addChildAfter(node3, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2305), 4, (-2305));
      Node node1 = new Node((-2305), node0, 4, 2022);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.isAnd();
      Node node1 = Node.newNumber(0.7, 12, 259);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.toStringTree();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(113, 113, 55);
      Node node1 = new Node(57);
      node0.copyInformationFromForTree(node1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.getDirectives();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wv^YnZ5yn9-eHA");
      Node node0 = new Node(119);
      Node node1 = new Node(43, node0, node0, node0);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.isScript();
      node0.isCase();
      Node node1 = new Node(55, node0, (-3341), 31);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("ltj}Q_zNM&m]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString(148, "Ok2F_D[6+$nmg", 2, 65536);
      node1.isSetterDef();
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("(Hl");
      Node node1 = new Node(122, node0, node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.cloneTree();
      // Undeclared exception!
//      try { 
        node1.getExistingIntProp(2506);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: 2506
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node.newNumber((double) 37, 37, 37);
      Node node0 = Node.newString("Gdr}");
      Node node1 = new Node(47, node0, 39, 2);
      Node node2 = node1.copyInformationFrom(node0);
      Node.newString(39, "PTLX1yHR!FeN", 56, 49);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PTLX1yHR!FeN", false);
      Locale locale0 = Locale.GERMANY;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Gdr}";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) node1;
      objectArray0[3] = (Object) node2;
      objectArray0[4] = (Object) "Gdr}";
      objectArray0[5] = (Object) node1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) node2;
      Node node3 = new Node(102, 55, 48);
      // Undeclared exception!
//      try { 
        node3.setQuotedString();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // not a StringNode
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isHook();
      node0.isFunction();
      node0.isIf();
      node0.isExprResult();
      Node node1 = Node.newString("zYv4", 148, 848);
      node0.isNot();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.isAssign();
      node1.isOnlyModifiesThisCall();
      Node node2 = Node.newString(46, "zYv4");
      node2.checkTreeEqualsImpl(node0);
      node0.isLabel();
      Node node3 = node0.copyInformationFromForTree(node1);
      node3.getDirectives();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(108);
      node0.isVoid();
      node0.isEquivalentToShallow(node0);
      Node node1 = Node.newString(0, "&_I`AMT,");
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = new Node(130, 130, 130);
      node0.isScript();
      Node.newString(57, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 48, 4095);
      node0.isCase();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = Node.newString("{");
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O<IdU");
      Node node0 = Node.newString((-1522), "this", 702, (-3756));
      Node node1 = new Node(30, node0, node0, node0);
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(100, 100, 116);
      node0.isObjectLit();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = new Node((-2664), node0, node0, node0, node0, 3997, 41);
      node1.clonePropsFrom(node0);
      Node node2 = node0.clonePropsFrom(node1);
      // Undeclared exception!
//      try { 
        node2.checkTreeEquals(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // -2664
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(119);
      Node node1 = new Node(32, node0);
      Node node2 = Node.newString("l$#");
      Node node3 = new Node(34, node2, node1, 52, 77);
      node1.removeChildren();
      node2.isEquivalentTo(node1, false, true, false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isBlock();
      node0.isFor();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node0.isLabel();
      Node node2 = node1.copyInformationFrom(node0);
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isSyntheticBlock();
      node0.mayMutateArguments();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Element");
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      templateType1.getOwnPropertyNames();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType1, (JSType) templateType1, (JSType) templateType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.setJSType(templateType0);
      node0.getLastSibling();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // PARAM_LIST : Object#Element is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(13);
      Node node1 = new Node(32, node0);
      Node node2 = new Node(32, node1, node1, 8, (-4517));
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node1.isGetProp();
      node2.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(146);
      Node node1 = new Node(4, node0, node0, node0, 442, 4095);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node(38);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(33, "mVr7 =x");
      Node node1 = new Node(48, node0, 16777216, (-1263));
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.mayMutateArguments();
      Node node1 = Node.newNumber((double) 16, 48, 42);
      node1.srcrefTree(node0);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(93);
      node0.setLineno(93);
      node0.getSourceOffset();
      Node node1 = new Node(1560);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NumberNode", 28, 1307);
      Node node1 = new Node(119, node0, node0, 1307, 55);
      node0.addChildToBack(node1);
      node0.siblings();
      node1.isCase();
      node1.isName();
      Node node2 = node0.removeFirstChild();
      node1.getJsDocBuilderForNode();
      node2.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node_SideEffectFlags3.clearAllFlags();
      // Undeclared exception!
//      try { 
        node2.setSideEffectFlags(node_SideEffectFlags3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got WITH
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(55);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = new Node(32, node0);
      Node node4 = new Node(57, node3, 31, 32);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node3.isCall();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.isAnd();
      node0.isStringKey();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber((double) 81, 81, 81);
      node0.getSourceOffset();
      Node node1 = new Node(30, node0, node0, 42, 31);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(35, node0, node0, node0, 53, 4095);
      node1.getSourceFileName();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(113, 453, 1024);
      Node node1 = Node.newString("S6K@5]z#SS^");
      node0.copyInformationFrom(node1);
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(152, 152, (-4));
      node0.hasMoreThanOneChild();
      Node node1 = new Node(55, node0, node0, node0, node0, (-3041), 40);
      Node node2 = node0.clonePropsFrom(node1);
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node.mergeLineCharNo((-2261), 43);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newNumber((-2907.1126072));
      node0.getDouble();
      node0.setVarArgs(true);
      node0.isIf();
      node0.getInputId();
      node0.getSourceFileName();
      node0.toString(false, true, true);
      node0.children();
      node0.isVarArgs();
      Node node1 = Node.newNumber((double) 0, 1273, 46);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node1.setDirectives(set0);
      // Undeclared exception!
//      try { 
        node0.addChildBefore(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.LinkedHashMultimap$ValueSet");
      Node node1 = new Node(43, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isBlock();
      Node node1 = Node.newString(38, ", ...", 184365, 31);
      node1.isUnscopedQualifiedName();
      node1.isSetterDef();
      node1.isGetterDef();
      node0.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(125);
      node0.isNew();
      Node node1 = Node.newNumber((-5050.0), 32, 132);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      Node node1 = new Node(4095, 56, 2);
      node1.isVoid();
//      try { 
        node0.setDouble(0.0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // FUNCTION <invalid> 105 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-5050), (-5050), (-5050));
      Node node1 = new Node(32, node0, 32, 4);
      node1.copyInformationFrom(node1);
      Node node2 = Node.newString(29, "PTLX1yHR!FeN", 52, 38);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PTLX1yHR!FeN", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale1, "length", objectArray0);
      node2.setQuotedString();
      node2.appendStringTree(printStream0);
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(32, node0);
      Node node2 = new Node(32, node1, node1, 8, (-4517));
      node0.useSourceInfoFrom(node2);
//      try { 
        node2.setString("Node tree inequality:\nTree1:\n");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // TYPEOF is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~BUq[");
      Node node0 = new Node(42);
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = node0.getLastSibling();
      node1.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber((double) 108, 108, 108);
      Node node1 = new Node(42, node0);
      node1.isBreak();
      node1.isCatch();
      node0.useSourceInfoFromForTree(node1);
      Node node2 = new Node(21, node1);
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(111, nodeArray0);
      node0.getLength();
      node0.setWasEmptyNode(true);
      Node node1 = Node.newString(30, "com.google.common.base.CharMatcher$2", 40, 32);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new child has existing sibling");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getBooleanProp(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node1.setSideEffectFlags(node_SideEffectFlags3);
      Node node2 = node0.copyInformationFrom(node1);
      node2.setSourceFileForTesting("com.google.common.base.CharMatcher$2");
      node2.getAncestors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.isVar();
      node0.getChangeTime();
      node0.getLength();
      node0.addChildToBack(node2);
//      try { 
        node1.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NEW com.google.common.base.CharMatcher$2 40 is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isBlock();
      node0.isFor();
      Node node1 = new Node(31, node0);
      node1.srcref(node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isVarArgs();
      node0.isEquivalentToTyped(node0);
      node0.isVar();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isBlock();
      Node node1 = Node.newString("");
      Node node2 = new Node(31, node0, node1, 56, 124);
      node2.removeFirstChild();
      node1.isEquivalentTo(node2, false, true, false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node((-5), (-5), (-5));
      Node node1 = new Node(46, 4095, 4095);
      node1.putProp(49, node0);
      node1.isRegExp();
//      try { 
        node1.setDouble(1192.9663945847526);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // SHNE 4095 [direct_eval: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(32, node0);
      node1.removeFirstChild();
      Node node2 = new Node(32, node1, node1, 8, (-4517));
      node1.isGetProp();
      // Undeclared exception!
//      try { 
        node1.addChildrenAfter(node0, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber((double) 37);
      Node node1 = new Node(39, node0, node0, node0, node0, 101, 57);
      node1.mayMutateGlobalStateOrThrow();
      node1.clonePropsFrom(node0);
      // Undeclared exception!
//      try { 
        node1.checkTreeEquals(node0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Number node not created with Node.newNumber
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      Node node1 = new Node(30, 3131, 51);
      Object object0 = new Object();
      node0.putProp(30, object0);
      node0.isRegExp();
      Node node2 = new Node(31);
      Node node3 = new Node(47, node0, node2);
      node3.cloneTree();
      node0.isArrayLit();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = new Node(30);
      node1.useSourceInfoIfMissingFrom(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.isObjectLit();
      node0.isCall();
      node1.isDelProp();
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node((-2752));
      Node node1 = Node.newString("7$9[T7=e8{8p{5/lD");
      node1.setQuotedString();
      Node node2 = new Node((-2752), node0, node1, node0, node0);
      node1.isUnscopedQualifiedName();
      node2.isBlock();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isThrow();
      Node node3 = Node.newString("7$9[T7=e8{8p{5/lD");
      node3.getJsDocBuilderForNode();
      node2.getAncestor(4095);
      node2.getProp(54);
      Node node4 = node2.removeFirstChild();
      node4.setIsSyntheticBlock(true);
      // Undeclared exception!
//      try { 
        node2.setSideEffectFlags(4095);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // -2752
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("incrdecr", true);
      int int0 = Node.SIDE_EFFECTS_ALL;
      simpleSourceFile0.getLineOffset(57);
      Node node0 = Node.newString("incrdecr", 0, 0);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isInstanceOf();
      // Undeclared exception!
//      try { 
        node0.getSourceOffset();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Should not call getLineOffset with line number 0
//         //
//         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("+jw", 83, 1418);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      jSTypeArray0[0] = jSType0;
      JSType jSType1 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("+jw", node0, jSType1);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      node0.setJSType(enumElementType0);
      Node node1 = new Node((-4136));
      node0.isEquivalentTo(node1, true, true, false);
      node0.addSuppression("OBJECT_PROTOTYPE");
      node0.addSuppression("Unknown class name");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(63, 63, 63);
      Node node1 = new Node((-2332), node0, node0, node0, node0, 12, 46);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node0.clonePropsFrom(node1);
      node2.checkTreeEquals(node0);
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      node0.cloneNode();
      node0.isIf();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(90, 90, 90);
      Node node1 = new Node(36, node0, node0, node0, node0);
      node0.putIntProp(51, 27591);
      // Undeclared exception!
//      try { 
        node0.getStaticSourceFile();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isQualifiedName();
      node0.setCharno(2686);
      Node node1 = new Node(115);
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node(2, node1, node0, node0, node0);
      node0.addChildrenToFront(node2);
      node0.isSwitch();
      node0.isLabelName();
      node0.getAncestor(19);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(26);
      node0.putIntProp(45, 45);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = Node.newString(709, "(xZQ+^");
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(113, 113, 55);
      Node node1 = Node.newString(43, "REGEXP_FUNCTION_TYPE");
      Node node2 = node0.clonePropsFrom(node1);
      node2.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber((double) 106, (-3119), 3149);
      Node node1 = new Node(548, 29, 54);
      Node node2 = new Node(43, node0, node1, 16, (-660));
      // Undeclared exception!
//      try { 
        node1.addChildAfter(node0, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node has siblings.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      Node node1 = new Node(47);
      Node node2 = new Node(36, node1);
      node2.removeFirstChild();
      // Undeclared exception!
//      try { 
        node2.addChildAfter(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(45);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(118, nodeArray0);
      node0.isAssignAdd();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("b-8c+V|");
      node0.setString("b-8c+V|");
      Node node1 = new Node(40, node0);
      node1.copyInformationFrom(node0);
      node1.clonePropsFrom(node0);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
//      try { 
        node1.setQuotedString();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // not a StringNode
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(26);
      node0.putIntProp(45, 45);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isVoid();
      Node.newString(56, "@`w");
      Node node1 = node0.cloneTree();
      node0.isOnlyModifiesThisCall();
      node0.getLength();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getAncestor(757);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node(42, 53, 30);
      node0.isAssignAdd();
      Node node2 = node0.getLastSibling();
      node2.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      node0.getQualifiedName();
      node0.setSideEffectFlags(37);
//      try { 
        node0.setDouble(37);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // CALL 37 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(42);
      node0.mayMutateArguments();
      node0.cloneNode();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(35);
      node0.setLineno(132);
      node0.putIntProp(35, 54);
      node0.setOptionalArg(false);
      node0.isCase();
      node0.getQualifiedName();
      node0.isGetterDef();
      node0.isGetterDef();
      node0.isThrow();
      node0.isQuotedString();
      Node node1 = Node.newNumber(3775.963253382941);
      Node node2 = new Node((-1758), node1, (-4400), 4);
      node1.useSourceInfoFrom(node2);
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      node2.isVarArgs();
      node1.isSetterDef();
      // Undeclared exception!
//      try { 
        node0.replaceChildAfter(node3, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = Node.SIDE_EFFECTS_ALL;
      Node node0 = Node.newString(5025, "(~,y3|1lTLe?", 5025, 872);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("(~,y3|1lTLe?", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getSourceOffset();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(113, 113, 55);
      Node node1 = new Node((-1518), node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isCase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isNew();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = new Node(108, 50, 40);
      Node node2 = new Node(46, node0);
      node0.getInputId();
      node1.isAdd();
      node2.getLastChild();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(49, 49, 49);
      Node node1 = new Node(16);
      Node node2 = new Node(2116);
      Node node3 = new Node(57, node0, node0, node0, 31, 2983);
      node1.addChildrenAfter(node3, (Node) null);
      Node.newNumber((-1504.26533893));
      node3.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[4];
      Node node0 = Node.newString("Object#Key");
      JSType.toMaybeTemplateType((JSType) null);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("(~,y3|1lTLe?", node0, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.getConstructor();
      jSTypeArray0[0] = (JSType) null;
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      jSTypeArray0[1] = (JSType) templateType0;
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, "Named type with empty name component", enumType1);
      jSTypeArray0[2] = jSType0;
      HashSet<UnknownType> hashSet0 = new HashSet<UnknownType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet0);
      JSType jSType1 = jSTypeRegistry0.createFunctionType((ObjectType) null, jSTypeArray0[0], (List<JSType>) immutableList0);
      jSTypeArray0[3] = jSType1;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      jSType1.getPossibleToBooleanOutcomes();
      Node node3 = new Node(408, node1, node2);
      Node node4 = new Node(52, 1, 40);
      node3.replaceChild(node1, node4);
      node3.isDelProp();
      node0.isObjectLit();
      node4.isTrue();
      node4.getNext();
      Node.newString("Object#Key");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(32, node0);
      Node node2 = new Node(32, node1, node1, 8, (-4517));
      node2.getLength();
      node1.isGetProp();
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(13, 86, 56);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(32, node0);
      Node.newString("");
      Node node2 = new Node(32, node1, node1, 8, 13);
      node2.srcref(node1);
      node1.isEquivalentTo(node2, true, true, true);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(108, 108, 108);
      Node node1 = new Node(108, 50, 40);
      Node node2 = new Node(46, node0);
      Node node3 = new Node(35);
      node2.addChildrenAfter(node3, (Node) null);
      Node node4 = Node.newNumber((double) 48);
      node4.getChildBefore((Node) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(128);
      node0.isEquivalentToTyped(node0);
      node0.isScript();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(72, nodeArray0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) stack0);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      ImmutableList<JSType> immutableList2 = immutableList1.asList();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList2);
      node0.isVoid();
      Node node1 = new Node(4, 40, 56);
      node1.cloneTree();
      node0.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(152, 310, 310);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = Node.newString("(V*UX?e#]=S`");
      Node node2 = new Node(2, node0, node0, node1, node1, 49, 57);
      Node node3 = new Node((-3188), node2, node2, 53, 1);
      node3.isGetProp();
      node2.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(90);
      Node node1 = new Node(30);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.isObjectLit();
      Node.newString(4095, "N\"JZ@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N\"JZ@");
      node1.addSuppression("com.google.javascript.rhino.Node$AncestorIterable");
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(26);
      node0.putIntProp(45, 45);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getJsDocBuilderForNode();
      node0.isNot();
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      node0.setJSType(objectType0);
      Node node1 = new Node((-744), node0, node0, node0, node0);
      // Undeclared exception!
//      try { 
        node0.checkTreeEquals(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // unexpected prop id 45
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(39, node0);
      Node node2 = Node.newString("");
      node2.getStaticSourceFile();
      node0.isEquivalentTo(node0, true, true, true);
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString(33, "mVr7 =x");
      node0.setChangeTime(2288);
      File file0 = MockFile.createTempFile("fLmx0:GB,n5rN", "null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[3];
      Node node1 = new Node(38, node0, node0, 1, 52);
      node1.getProp(46);
      objectArray0[0] = null;
      objectArray0[1] = (Object) "fLmx0:GB,n5rN";
      objectArray0[2] = (Object) node0;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "fLmx0:GB,n5rN", objectArray0);
      node0.setQuotedString();
      node0.appendStringTree(printStream0);
      // Undeclared exception!
//      try { 
        node0.getQualifiedName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(56, node0, (-2349), 154);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = 26;
      Node node0 = new Node(26);
      node0.putIntProp(45, 45);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
//      try { 
        node0.setDouble(806.713989592);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // unexpected prop id 45
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      node0.isEquivalentToShallow(node0);
      Node node1 = new Node(357, 46, 47);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      node0.getInputId();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.isOnlyModifiesThisCall();
      node0.mayMutateArguments();
      Node node1 = new Node(57, node0, node0, node0, (-1701), 57);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(45);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(118, nodeArray0);
      node1.checkTreeEquals(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.setJSDocInfo(jSDocInfo0);
      node1.getProp(37);
      // Undeclared exception!
//      try { 
        node0.getChildBefore(node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-5050));
      Node node1 = new Node(32, node0, node0, node0);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node1.clonePropsFrom(node0);
      node1.checkTreeEquals(node2);
      int int0 = Node.DECR_FLAG;
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(33);
      Node node1 = new Node(33, node0);
      // Undeclared exception!
//      try { 
        node1.isUnscopedQualifiedName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(5025, 5025, 5025);
      node0.isLabel();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(31, nodeArray0);
      node1.setOptionalArg(false);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(106, 308, 2649);
      Node node1 = Node.newString(50, "String node not created with Node.newString");
      Node node2 = new Node(106, node1, node0);
      node0.isNoSideEffectsCall();
      // Undeclared exception!
//      try { 
        node2.replaceChildAfter(node0, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node has siblings.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      InputId inputId0 = new InputId("(~,y3|1lTLe?");
      Node node0 = Node.newString(33, "mVr7 =x");
      // Undeclared exception!
//      try { 
        node0.getQualifiedName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = Node.newString((-341), "", 30, 2147483645);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.srcrefTree(node1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(32, node0);
      Node.newString("");
      Node node2 = new Node(32, node1, node1, 8, (-4517));
      node1.isEquivalentTo(node2, true, true, true);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(115);
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.setLineno(115);
      int int0 = Node.INPUT_ID;
      node0.isContinue();
      node0.toString();
      node0.getFirstChild();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(119);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(111, node0, node0, node0);
      node1.isThrow();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(45);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      Node node1 = new Node(43, node0, node0, 43, 16);
      Node node2 = new Node(Integer.MAX_VALUE);
      node1.addChildrenAfter(node2, node0);
      // Undeclared exception!
//      try { 
        node0.getChildBefore(node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isCast();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString((-3127), "{~85h8wb\"{", 2265, 2265);
      Node node1 = new Node((-1197), node0);
      Node node2 = new Node(5, node1, node1, node1, node1);
      Node node3 = Node.newString("no next sibling.", 0, 599);
      Node node4 = new Node((-1197), node2, node3);
      node4.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(832, "}s#J dV$hbf!M}q]", 49, 409);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(49, node0, 126, 55);
      node1.isAdd();
      Node node2 = node1.srcref(node0);
      // Undeclared exception!
//      try { 
        node1.addChildAfter(node2, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isVoid();
      Node node1 = new Node(125, node0, node0, node0, node0, 2, 42);
      node1.cloneTree();
      node1.getAncestor(49);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.checkTreeEquals(node0);
      Node node1 = new Node(30, node0, node0, 57, 154);
      Node node2 = new Node(54, node1);
      Node node3 = node2.removeChildren();
      node3.getStaticSourceFile();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(30);
      Node node2 = new Node(36, node1);
      node0.isComma();
      node2.addChildBefore(node0, node1);
      node1.getSideEffectFlags();
      node1.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1806);
      node0.putIntProp(39, 1);
      int int0 = Node.INPUT_ID;
      node0.getJsDocBuilderForNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = new Node(0, 47, (-2005));
      node0.addChildrenToFront(node1);
      node1.getAncestors();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.addChildrenToBack(node0);
      node1.getSourceFileName();
      // Undeclared exception!
//      try { 
        node0.removeChildAfter(node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no next sibling.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(103);
      node0.setType(103);
      node0.toString();
      Node node1 = new Node(111, node0, node0, 4194304, 53);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(113, 113, 55);
      node0.isCase();
      node0.isAssignAdd();
      Node node1 = new Node(4, 98, (-1087));
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(124);
      node0.setChangeTime(124);
      Node node1 = Node.newString(1, "cYg*I^_B#s");
      Node node2 = new Node(50, node1, node1);
      node0.copyInformationFrom(node2);
      Node.newString(1387, "q>fgWoTL", 119, 0);
      node1.isNot();
      Node node3 = null;
//      try {
        node3 = new Node(55, (Node[]) null, 48, (-2618));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node(46, 4095, 4095);
      Node node2 = Node.newString("empty_block", 421, 40);
      node1.setLength(31);
      int int0 = Node.IS_DISPATCHER;
      node0.getSourceOffset();
      node0.setLineno(1);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isNull();
      node2.getBooleanProp(55);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(110);
      node0.isWhile();
      node0.isSwitch();
      node0.isDo();
      Node node1 = Node.newString("hU", 37, (-1279));
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node((-5050));
      Node node1 = new Node((-5050), node0, node0, node0, node0, 48, 2);
      node1.mayMutateGlobalStateOrThrow();
      node1.isEquivalentTo(node1);
      node0.hasOneChild();
      node0.setLineno(8);
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(90);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(30);
      node1.setSideEffectFlags((-1580));
      Node node2 = new Node(13);
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isBlock();
      node0.isWith();
      Node node1 = new Node(31, node0);
      Node.newString(57, "P", 105, 153);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isSyntheticBlock();
      node0.isOnlyModifiesArgumentsCall();
      node0.isScript();
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(30);
      node0.toStringTree();
      Node node2 = new Node(36, node1);
      node0.isComma();
      node2.isOptionalArg();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.getJSType();
      node0.siblings();
      Node node1 = Node.newString(46, "f:Za4", 30, 310);
      Node node2 = new Node(51, node0, node1, node1);
      node0.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(63, 63, 63);
      Node node1 = Node.newNumber((-1010.361));
      node0.copyInformationFrom(node1);
      node0.putBooleanProp(63, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isExprResult();
      node0.isObjectLit();
      node0.isStringKey();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(47);
      node1.cloneNode();
      Node node2 = new Node(36, node1);
      // Undeclared exception!
//      try { 
        node2.getChildBefore(node0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // node is not a child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(36, node0, node0, node0, node0, 42, 2);
      node0.copyInformationFromForTree(node1);
      Node node2 = Node.newString(2301, "", 764, (-1061));
      Node node3 = null;
//      try {
        node3 = new Node(44, node0, node1, node0, node2, 50, 43);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(90);
      InputId inputId0 = new InputId("CT_N(4MmPl%;l");
      inputId0.toString();
      node0.setInputId(inputId0);
      Node node1 = new Node(47);
      node0.addChildToBack(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.isAnd();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // ASSIGN_LSH [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(1339);
      Node node1 = node0.cloneTree();
      Node node2 = node1.getLastSibling();
      node2.isThrow();
      Node node3 = new Node(83, node2, node1, node0);
      Node node4 = node2.detachFromParent();
      node2.useSourceInfoIfMissingFrom(node3);
      node1.checkTreeEquals(node2);
      node1.getIntProp(147);
      node2.isSetterDef();
      node2.getProp(56);
      Node node5 = Node.newString("UU");
      Node.newNumber((double) 1, 4, 55);
      node0.addChildToBack(node5);
      node1.getLength();
      // Undeclared exception!
//      try { 
        node4.detachFromParent();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(51);
      node1.setLineno(55);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isNot();
      node0.getStaticSourceFile();
      node0.setIsSyntheticBlock(true);
      node0.isDelProp();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isSwitch();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.addSuppression("g[5^0$Kfs");
      node0.getInputId();
      node0.isTypeOf();
      node0.setLength(517);
      Node node1 = new Node(32, 43, 118);
      Node node2 = new Node(51, node1, node0);
      Node node3 = node2.removeChildren();
      Node node4 = node1.useSourceInfoFromForTree(node3);
      Node node5 = null;
//      try {
        node5 = new Node(57, node4, node2, node4, 2595, 118);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node(46, 4095, 4095);
      node1.setLength(31);
      node0.copyInformationFromForTree(node1);
      node1.isRegExp();
      node1.isEquivalentTo(node0);
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(42);
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = new Node(8, node0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      InputId inputId0 = new InputId("(~,y3|1lTLe?");
      Node node0 = new Node(119);
      node0.isString();
      node0.isVar();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isEquivalentToTyped(node0);
      Node node1 = new Node(126, node0);
      node0.srcref(node1);
      Node.newString(1, "fLmx0:GB,nCr8N", 30, 2062);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = new Node(105, 98, 37);
      Node node2 = new Node(51, node1);
      node2.removeFirstChild();
      node0.isTrue();
      // Undeclared exception!
//      try { 
        node1.replaceChildAfter(node2, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(153, "FUNCTION_INSu#NCEXTYPE", 153, 95);
      node0.setCharno(12);
      node0.isHook();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isEquivalentToTyped(node0);
      Node node1 = new Node(43, node0, node0, node0, node0, 48, 54);
      node1.isStringKey();
      node1.getSourcePosition();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node(124);
      node0.getAncestors();
      node0.addChildrenToBack(node0);
      node0.getSourceFileName();
      node0.getLastChild();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch", true);
      simpleSourceFile0.getLineOffset(16);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isFromExterns();
      node0.isBreak();
      node0.getSourceOffset();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.getQualifiedName();
      node0.isBreak();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      Node node1 = new Node(57, node0);
      Node node2 = node1.removeFirstChild();
      node1.isTrue();
      // Undeclared exception!
//      try { 
        node2.replaceChildAfter(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.isDebugger();
      Node node1 = Node.newString(";f)FEaU8KC");
      Node node2 = node0.copyInformationFrom(node1);
      Node.newString(50, ";f)FEaU8KC", 36, 36);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node2;
      Node node3 = null;
//      try {
        node3 = new Node(46, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // duplicate child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(32, node0);
      Node.newString("");
      Node node2 = new Node(32, node1, node1, 8, (-4517));
      int int0 = Node.DECR_FLAG;
      node0.detachFromParent();
      node1.getJSType();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(2);
      Node node2 = Node.newString("");
      Node node3 = new Node(32, node1, node1, 8, (-2489));
      node3.useSourceInfoFrom(node2);
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(37);
      node0.setSideEffectFlags(54);
      Node node1 = new Node(2, node0);
      node0.isComma();
      // Undeclared exception!
//      try { 
        node1.addChildBefore(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1837, nodeArray0);
      node0.isVoid();
      Node node1 = node0.cloneTree();
      node1.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(130);
      node0.isWhile();
      node0.isIf();
      node0.isExprResult();
      Node node1 = Node.newString("*GQPG!W@M5O5", 2, (-876));
      node1.isNot();
      node0.useSourceInfoIfMissingFrom(node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node2 = Node.newString("*GQPG!W@M5O5");
      node0.isThis();
      node0.isTrue();
      node0.isContinue();
      node2.getAncestors();
      Node.mergeLineCharNo(40, 2);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isTrue();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 22, 38);
      node2.getBooleanProp(6);
      // Undeclared exception!
//      try { 
        node1.removeChild(node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // node is not a child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newNumber((double) 63);
      Node node1 = Node.newString((-1), "0@8~*Ev?H&m#N", 30, 57);
      Node node2 = new Node(43, node0, node0, node0, node1);
      node2.isDebugger();
      node2.copyInformationFrom(node0);
      // Undeclared exception!
//      try { 
        Node.newString(37, (String) null, (-1774), 950);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(37);
      EvoSuiteFile evoSuiteFile0 = null;
      Node node1 = new Node((-576), 4095, 1);
      node0.useSourceInfoFromForTree(node1);
      // Undeclared exception!
//      try { 
        node0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newNumber(2025.66);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node0.isDebugger();
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString(29, "wLX1yHRFeN", 52, 38);
      node3.isNot();
      node3.isNE();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZQ3UF._;.;ugqb{#9S");
      Node node0 = new Node(1811, 1811, 1811);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(833);
      // Undeclared exception!
//      try { 
        node0.appendStringTree(charArrayWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 1811
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(32, node0);
      Node node2 = Node.newString("");
      Node node3 = new Node(32, node1, node1, 8, (-4517));
      node1.isGetProp();
      node3.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(100);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.setIsSyntheticBlock(false);
      node0.isDefaultCase();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(100);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.setIsSyntheticBlock(false);
      node0.isDefaultCase();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = new Node(85, node0);
      node1.isComma();
      // Undeclared exception!
//      try { 
        node0.addChildBefore(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString((-2501), "2S", (-2501), (-5050));
      Node node1 = new Node(38, node0, node0, node0);
      node0.putBooleanProp(49, false);
      node0.isEquivalentToShallow(node1);
      node0.getChangeTime();
      node1.getStaticSourceFile();
      node1.getChildCount();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1837, nodeArray0);
      node0.isVoid();
      node0.cloneTree();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(43, node0);
      Node node2 = Node.newNumber((double) 2);
      node1.srcref(node2);
      node1.isLabel();
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) 107, 107, 107);
      nodeArray0[0] = node0;
      Node node1 = new Node(49, 51, 55);
      nodeArray0[1] = node1;
      Node node2 = new Node(107, nodeArray0, 37, 4095);
      node2.isHook();
      node2.isLabelName();
      node2.useSourceInfoFromForTree(node1);
      Node.newString("SX", 2306, (-2733));
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      // Undeclared exception!
//      try { 
        node2.addChildrenToFront(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isQualifiedName();
      Node node1 = Node.newString("f3+vw+X=+CfIQ", (-3482), 35);
      node0.isNot();
      Node node2 = new Node(114, node0, node1, node0, node0, (-536870912), (-2227));
      node2.useSourceInfoIfMissingFrom(node0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node2.removeChildren();
      node2.isThis();
      node2.isTrue();
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = Node.newString("h3E7?aNsJ2G=.Vt");
      node0.getQualifiedName();
      Node node1 = new Node((-3187), node0);
      node1.setLineno(56);
      node0.useSourceInfoFromForTree(node1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.putIntProp(57, 41);
      Node node2 = node1.srcrefTree(node0);
      Node node3 = null;
      Node.newString(189, "rF+0?km");
      // Undeclared exception!
//      try { 
        node2.srcref((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node(46, 4095, 4095);
      node1.setLength(31);
      Node node2 = node0.srcref(node1);
      node2.cloneNode();
      node1.isRegExp();
      node1.removeProp(42);
      // Undeclared exception!
//      try { 
        node1.addChildBefore(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      Node node1 = Node.newString("sy\"tRhetic");
      node0.isAdd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSType0.unboxesTo();
      node1.setJSType(jSType0);
      Node node2 = node1.clonePropsFrom(node0);
      node0.setOptionalArg(false);
      node2.checkTreeEquals(node0);
      int int0 = Node.DECR_FLAG;
      node0.setJSDocInfo((JSDocInfo) null);
      // Undeclared exception!
//      try { 
        node0.removeChild(node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node((-3412), node0, 692, 32);
      node0.addChildrenToFront(node1);
      node0.isSwitch();
      node1.isThis();
      node1.getAncestor(1154);
      node1.getAncestor(50);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(32, node0);
      Node.newString("");
      Node node2 = new Node(32, node1, node1, 8, 4095);
      node1.isGetProp();
      Node node3 = node1.getChildAtIndex(0);
      node3.removeProp(46);
      Node node4 = null;
//      try {
        node4 = new Node(122, (Node) null, 4194304, 1253);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      node0.isNE();
      Node node1 = new Node(38, 90, 50);
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(36, node1);
      node1.getLineno();
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(53);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ASSIGN_LSH
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(38);
      node0.putBooleanProp(4, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isExprResult();
      Node node1 = Node.newNumber((double) 48, 56, 43);
      node0.useSourceInfoFromForTree(node1);
      node0.isObjectLit();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isQualifiedName();
      node0.addChildrenToFront(node0);
      node0.isSwitch();
      node0.setType(77);
      node0.isThis();
      node0.getAncestor(8);
      node0.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(119);
      node0.isCatch();
      Node node1 = new Node(43, node0);
      node1.setLineno(37);
      node0.isEquivalentTo(node0, false, false, false);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(125);
      node0.isWhile();
      node0.isExprResult();
      Node node1 = Node.newString("*GQPG!W@M5O5", 2, (-876));
      node1.isNot();
      node0.useSourceInfoIfMissingFrom(node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.getStaticSourceFile();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isWhile();
      node0.isIf();
      node0.isExprResult();
      Node node1 = Node.newString("*GQPG!W@M5O5", 2, (-876));
      node1.isNot();
      node0.useSourceInfoIfMissingFrom(node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.removeChildren();
      node0.isThis();
      node0.isTrue();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = Node.newNumber((double) 31);
      node1.toString(false, false, false);
      Node node2 = new Node(12, node1, node1);
      node2.isWith();
      Node node3 = node0.clonePropsFrom(node1);
      int int0 = Node.LAST_PROP;
      Node node4 = new Node(153, node2, node2, node2, 1, 5);
      node4.checkTreeTypeAwareEqualsImpl(node0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node4;
      nodeArray0[6] = node2;
      nodeArray0[2] = node3;
      nodeArray0[3] = node4;
      nodeArray0[4] = node4;
      nodeArray0[5] = node0;
      nodeArray0[6] = node2;
      Node node5 = null;
//      try {
        node5 = new Node(1, nodeArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      // Undeclared exception!
//      try { 
        node0.isQualifiedName();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME 38 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isTrue();
      // Undeclared exception!
//      try { 
        node0.isEquivalentToShallow((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      Node node1 = new Node(4, 12, 40);
      Node node2 = new Node(33, node0);
      node2.isUnscopedQualifiedName();
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(4095);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-5050));
      Node node1 = new Node((-5050), node0, node0, node0, node0, 48, 2);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node1.clonePropsFrom(node0);
      node1.setOptionalArg(true);
      node2.isEquivalentTo(node1);
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(119);
      node0.isCatch();
      Node node1 = new Node(56, node0, node0, 46, 39);
      Node node2 = node0.clonePropsFrom(node1);
      node2.setOptionalArg(false);
      node2.checkTreeEquals(node0);
      int int0 = Node.DECR_FLAG;
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(152, 152, (-4));
      node0.hasMoreThanOneChild();
      node0.isSyntheticBlock();
      Node node1 = node0.copyInformationFrom(node0);
      node1.isQualifiedName();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(13, 86, 56);
      Node node1 = new Node(32, node0);
      Node.newString("");
      node1.isNot();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newNumber((-1641.0), 4, 152);
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.isFromExterns();
      node0.getAncestor(141);
      // Undeclared exception!
//      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(4095, node0, node0, node0, node0);
      Node node2 = new Node(16, node1);
      node0.setSourceFileForTesting("");
      node2.copyInformationFromForTree(node0);
      node0.isAnd();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "fLmx0:G\\B,nCrN";
      Node node0 = new Node(2758);
      node0.isTrue();
      Node node1 = new Node(39, node0, node0);
      node0.isEquivalentToTyped(node1);
      // Undeclared exception!
//      try { 
        node1.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Number node not created with Node.newNumber
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(42);
      node0.isEquivalentTo(node0, true, true, true);
      Node node1 = new Node(4095, node0, 1650, (-495));
      node0.useSourceInfoFrom(node1);
      node0.mayMutateArguments();
      node0.isTrue();
      node0.setLineno(147);
      // Undeclared exception!
//      try { 
        node0.getChildAtIndex(2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(154, 154, 154);
      Node node1 = Node.newString("epW_X");
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(0, node2, node2);
      node3.setOptionalArg(true);
      node0.checkTreeEquals(node1);
      int int0 = Node.DECR_FLAG;
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newNumber(2025.664269967457);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node0.isDebugger();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 52, 38);
      node1.isWith();
      node2.isNot();
      node0.getChildBefore((Node) null);
      node1.isOr();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(119);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = new Node(38, node0, node0, node0, 4095, 16);
      node0.isTrue();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node.newString("com.google.common.base.Predicates$ContainsPatternPredicate");
      Node node0 = Node.newNumber((double) 16, 54, 4095);
      // Undeclared exception!
//      try { 
        node0.isEquivalentToTyped((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(42);
      node0.cloneTree();
      node0.setLength(42);
      node0.isRegExp();
      node0.removeProp(86);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z");
      Node node0 = new Node(63);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.getLength();
      Node node1 = new Node(115);
      node1.useSourceInfoFrom(node0);
      // Undeclared exception!
//      try { 
        node1.replaceChild(node0, node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(38, 38, 38);
      Node node1 = Node.newString("sy\"tRhetic");
      node0.srcref(node1);
      node0.isAdd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isFromExterns();
      node0.getStaticSourceFile();
      node0.isFor();
      node0.isAnd();
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isHook();
      Node node1 = new Node(56, node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
//      try { 
        node2.addChildToFront(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      node0.isAssignAdd();
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.UnionTypeBuilder");
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isNot();
      node0.isOnlyModifiesThisCall();
      Node.newString(30, "DLvqYv,Mo10Px{7x\"", (-2409), 30);
      node0.isLabel();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isNot();
      node0.cloneNode();
      node0.isOnlyModifiesThisCall();
      Node.newString(30, "DLvqYv,Mo10Px{7x\"", (-2409), 30);
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isQualifiedName();
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      node0.isSwitch();
      node1.isThis();
      node0.getAncestor(8);
      node0.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(42);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      node0.setJSType(jSType0);
      Node node1 = new Node(2, node0, node0, node0, node0, 42, 38);
      Node node2 = node0.clonePropsFrom(node1);
      node2.setOptionalArg(false);
      // Undeclared exception!
//      try { 
        node0.getExistingIntProp(54);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: 54
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node(119);
      Node node1 = new Node(39, node0, node0, (-2409), 54);
      node0.useSourceInfoFromForTree(node1);
      node0.isCatch();
      Node node2 = null;
//      try {
        node2 = new Node(43, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = new Node(0, node1);
      Node.newNumber((double) 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = Node.newString("Object#Element");
      node1.isEquivalentTo(node3, false, true, false);
      node3.getAncestors();
      Node node4 = node2.useSourceInfoIfMissingFrom(node3);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      node4.isDelProp();
      node2.getStaticSourceFile();
      node1.isDo();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isVar();
      node0.isTrue();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString("synthe\"ic");
      node0.isHook();
      node0.isLabelName();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      Node node2 = Node.newString("synthe\"ic", 37, 57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node1.addChildrenToFront(node2);
      node0.getAncestors();
      node0.addChildrenToBack(node1);
      // Undeclared exception!
//      try { 
        node0.addChildBefore(node2, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node has siblings.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.setCharno(115);
      Node node1 = new Node(193, node0, node0);
      Node node2 = new Node(115);
      node0.getInputId();
      node2.setInputId((InputId) null);
      node1.isAdd();
      node0.isLabelName();
      node0.isStringKey();
      node2.srcrefTree(node0);
      node2.getAncestor(53);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isCatch();
      Node node1 = new Node(31, node0, node0, node0);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node.newNumber((double) 15, 1, 47);
      node0.isBlock();
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-5050));
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node1.clonePropsFrom(node0);
      node1.setOptionalArg(true);
      node1.checkTreeEquals(node2);
      int int0 = Node.DECR_FLAG;
      node0.getDirectives();
      node1.replaceChild(node0, node2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(144);
      node0.isQualifiedName();
      node0.setCharno(142);
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      node0.isSwitch();
      node1.isThis();
      // Undeclared exception!
//      try { 
        node1.cloneTree();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(63);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString(57, "2boGJOfHmMFcn", 2792, 57);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isExprResult();
      node0.isObjectLit();
      node1.isIf();
      node1.isNew();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.hasOneChild();
      node0.setIsSyntheticBlock(false);
      node0.isBlock();
      node1.getAncestor(53);
      node0.isInc();
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(38, 40, 50);
      Node node2 = new Node(16, node1);
      Node node3 = new Node(824, 16, 48);
      node2.removeChildren();
      node3.isThis();
      Node node4 = new Node(52, 0, 90);
      node4.isInstanceOf();
      node0.isTrue();
      node0.isContinue();
      node3.isAssignAdd();
      node1.cloneNode();
      node4.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN", (-2140), 1931);
      node0.isReturn();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isDec();
      node0.getStaticSourceFile();
      node0.isVoid();
      Node node1 = new Node(30);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(57, nodeArray0, 1144, 8);
      Node node3 = node1.clonePropsFrom(node2);
      node0.isFunction();
      node0.isAnd();
      node0.isUnscopedQualifiedName();
      node3.isTrue();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newNumber((-1711.9145658538407));
      node0.isArrayLit();
      Node node1 = new Node(16, node0);
      node1.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
//      try { 
        node0.clonePropsFrom((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(130, "mrcXnV@(5", 152, (-906));
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isExprResult();
      node0.isObjectLit();
      node0.isIf();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1806);
      node0.putIntProp(39, 1);
      int int0 = Node.ORIGINALNAME_PROP;
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(52, nodeArray0);
      node0.isTrue();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isTrue();
      InputId inputId0 = new InputId("ksXnI;TXopcW`H|");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isEquivalentToTyped(node0);
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // EMPTY [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(0, 46, 56);
      node0.getIntProp(57);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.cloneTree();
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node0.isLabel();
      node1.isFromExterns();
      node2.siblings();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isHook();
      node0.isRegExp();
      Node node1 = new Node((-855), node0, node0, node0);
      node0.useSourceInfoFromForTree(node1);
      Node.newString(".<", 8, 38);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.addChildrenToFront(node1);
      node0.getAncestors();
      node1.getSourceFileName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node1.getJSType();
      JSType jSType0 = null;
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType("Not declared as a type name", node0, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isComma();
      Node node1 = new Node(46, node0, node0);
      node1.isAdd();
      node0.isIf();
      Node.extractLineno(2145223169);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(152, "??=L", 152, 83);
      node0.isDebugger();
      Node node1 = Node.newString(2036, "??=L", 46, 63);
      node1.isWith();
      node0.isNot();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(13, 13, 13);
      Node node1 = Node.newString(42, "=bEOO^");
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = Node.newNumber((-188.7), 98, 38);
      node0.isAssignAdd();
      node0.isDebugger();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l(~,Ry3|1lTLe?");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isVarArgs();
      node0.siblings();
      node0.isNew();
      Node node1 = new Node(53, (-1), 32);
      node1.isEquivalentToTyped(node0);
      Node.newNumber((-2139.3134776713), 16, 15);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "is_constant_name");
      node0.isEquivalentTo(node1);
      node0.isNot();
      Node node2 = Node.newNumber((-170.8075647632182), 38, 1);
      node0.addChildToFront(node2);
      node2.checkTreeEquals(node0);
      // Undeclared exception!
//      try { 
        node0.addChildrenAfter(node2, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(602);
      Node node1 = new Node(55);
      node1.setLineno(87855567);
      Node node2 = node0.copyInformationFrom(node1);
      node2.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node(77, 77, 77);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = node0.clonePropsFrom(node0);
      Node node2 = new Node(49, node1, node1);
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      Node node4 = new Node(50, 52, 42);
      node0.setOptionalArg(true);
      node0.isNE();
      node3.cloneTree();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1806);
      node0.putIntProp(39, 1);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.getJsDocBuilderForNode();
      node0.putIntProp(57, 38);
      node0.setVarArgs(true);
      int int1 = Node.INPUT_ID;
      node0.isContinue();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isTrue();
      node0.isQuotedString();
      node0.getBooleanProp(32);
      node0.getLastSibling();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // EMPTY is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = new Node(37, node0, node0);
      Node node2 = Node.newNumber((double) 29);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      // Undeclared exception!
//      try { 
        node2.addChildrenAfter(node0, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = new Node(49, node0, 49, 3859);
      node1.getJsDocBuilderForNode();
      node1.hasChild(node1);
      node0.isDec();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newNumber((-2907.1126072));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.wasEmptyNode();
      node0.isQualifiedName();
      node0.checkTreeEqualsImpl(node0);
      node0.isTrue();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = Node.newString(42, " [", (-862048943), 33);
      node0.isEquivalentTo(node0, true, true, true);
      node0.isThis();
      // Undeclared exception!
//      try { 
        node1.addChildBefore(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      node0.isInstanceOf();
      Node node1 = new Node(49, node0, node0, 43, 54);
      node1.getAncestors();
      node0.addChildrenToBack(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.getAncestor(41);
      node1.getSourceFileName();
      // Undeclared exception!
//      try { 
        node0.removeChildAfter(node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no next sibling.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(57, node0);
      node1.addSuppression("hU");
      node0.isHook();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildToFront(node1);
      node0.isOr();
      node1.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(50, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(29, nodeArray0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.clonePropsFrom(node2);
      node0.setOptionalArg(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeTemplateType((JSType) null);
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType("ZQ3UF._;.;ugqb{#9S", node0, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("SX");
      node0.isGetProp();
      node0.isOnlyModifiesThisCall();
      node0.getAncestors();
      Node node1 = new Node(57, node0);
      Node node2 = node1.srcrefTree(node0);
      node1.isTrue();
      node1.cloneTree();
      node2.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = Node.newNumber((double) 39, 46, 3);
      node0.copyInformationFrom(node1);
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isTrue();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isQualifiedName();
      node0.setCharno(2686);
      Node node1 = new Node(115);
      Node node2 = new Node(2, node1, node0, node0, node0);
      node0.addChildrenToFront(node2);
      node0.isSwitch();
      node0.isLabelName();
      node0.getAncestor(19);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isVar();
      node0.isIf();
      Node node1 = new Node((-1958), node0, node0, node0, node0);
      node1.isDebugger();
      Node node2 = Node.newString(119, "[]RA^Tu0S&", 152, (-941));
      node2.isWith();
      node1.isNot();
      node0.isThis();
      Node.newString("ZQ3UF._;.;ugqb{#9S");
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isQualifiedName();
      node0.setCharno(2686);
      Node node1 = new Node(2, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      node0.isSwitch();
      node0.isLabelName();
      node0.getAncestor(19);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newString(2529, "");
      Node node1 = new Node(47);
      Node node2 = new Node(51, node0, node0, node0, node1);
      node2.getLastChild();
      // Undeclared exception!
//      try { 
        node1.getChildBefore(node2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node[] nodeArray0 = new Node[4];
      Node node0 = Node.newString((-206), "fLmx0:GB,nCrN", 57, (-2464));
      nodeArray0[0] = node0;
      Node node1 = new Node(2466);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber((-3784.839));
      nodeArray0[2] = node2;
      Node[] nodeArray1 = new Node[0];
      Node node3 = new Node((-139), nodeArray1, 55, 53);
      nodeArray0[3] = node3;
      Node node4 = new Node((-2464), nodeArray0);
      node4.getLineno();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(122);
      node0.isVarArgs();
      node0.isWith();
      Node node1 = new Node((-4063), 57, 53);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.addChildToFront(node0);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(51, 1, (-1426));
      node0.getJSType();
      Node node1 = Node.newString("jjgtX2I");
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node0.clonePropsFrom(node1);
      node0.setOptionalArg(true);
      node1.checkTreeEquals(node2);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node1.addChildrenToBack(node0);
      int int0 = Node.DECR_FLAG;
      Node node3 = null;
//      try {
        node3 = new Node(39, node1, node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber(4095.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(33, node0, node0, node0);
      node1.getStaticSourceFile();
      node0.wasEmptyNode();
      node1.isQualifiedName();
      node0.checkTreeEqualsImpl(node1);
      Node node2 = null;
//      try {
        node2 = new Node((-922), node1, node1, node0, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString("E", (-90), 155);
      Node node1 = new Node(127, node0, node0, node0);
      nodeArray0[0] = node1;
      Node node2 = Node.newString("SX");
      nodeArray0[1] = node2;
      Node node3 = new Node(35, (-3593), 97);
      nodeArray0[2] = node3;
      Node node4 = Node.newNumber((double) 50, 57, 8);
      nodeArray0[3] = node4;
      Node node5 = Node.newString("The new child node already has a parent.");
      nodeArray0[4] = node5;
      Node node6 = new Node(360);
      nodeArray0[5] = node6;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node7 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      nodeArray0[6] = node7;
      Node node8 = new Node(0);
      nodeArray0[7] = node8;
      Node node9 = new Node(43, nodeArray0, (-1513), 1646);
      node9.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      Node node1 = new Node(4523, 40, 42);
      int int0 = Node.CHANGE_TIME;
      node1.isGetterDef();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      node_NodeMismatch0.equals(node_NodeMismatch0);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1837);
      node0.toString(true, true, false);
      Node node1 = new Node(47, node0, node0, node0, 49, 46);
      node1.isWith();
      node0.getChangeTime();
      node1.removeChildren();
      Node node2 = node1.clonePropsFrom(node0);
      int int0 = Node.LAST_PROP;
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node0.isOnlyModifiesThisCall();
      Node node3 = new Node(30, 54, 48);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      Node node1 = new Node(4523, 40, 42);
      int int0 = Node.CHANGE_TIME;
      node1.isGetterDef();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeEqualsImpl(node0);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isWhile();
      node0.isCast();
      node0.isGetterDef();
      node0.isTry();
      node0.isFor();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(4);
      Node node2 = new Node((-726), node1);
      node0.isHook();
      node0.removeFirstChild();
      // Undeclared exception!
//      try { 
        node1.useSourceInfoIfMissingFromForTree((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = new Node(40, 2237, 334);
      node1.siblings();
      node0.isGetterDef();
      node1.isTry();
      Node node2 = new Node((-344), node0, node0);
      node1.mayMutateGlobalStateOrThrow();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.setSourceFileForTesting("fLmx0:GB,nCrN");
      node0.getStaticSourceFile();
      Node node1 = Node.newString("l(~,Ry3|1lTLe?");
      node0.isEquivalentTo(node1, false, false, false);
      node1.getAncestors();
      node0.isSetterDef();
      node1.isDec();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node((-3161), 31, (-2029));
      Node node1 = new Node(43, node0, node0, 2, 813);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.getProp(284);
      // Undeclared exception!
//      try { 
        node0.addChildBefore(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isWhile();
      node0.isCast();
      node0.isVarArgs();
      node0.isDo();
      Node node1 = new Node((-2089), node0, node0, node0, node0);
      node0.setLength(57);
      node1.getJsDocBuilderForNode();
      node1.removeProp((-2089));
      node1.getAncestor(131072);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isTrue();
      Node node1 = Node.newString("!T8+)3", 37, 31);
      node1.type = 126;
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isScript();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // EMPTY 37 is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      node0.siblings();
      node0.isGetterDef();
      node0.isTry();
      node0.isFor();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isWhile();
      node0.isCast();
      node0.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.setLastGeneration(false);
      Node node1 = Node.newString("0o}");
      Node node2 = node0.copyInformationFrom(node1);
      Node node3 = Node.newString("Object#Element");
      node3.isEquivalentTo(node2, true, false, false);
      node2.getAncestors();
      Node node4 = node1.useSourceInfoIfMissingFrom(node2);
      Node node5 = node4.clonePropsFrom(node1);
      node5.setOptionalArg(false);
      node3.isNE();
      node2.setLineno(1931);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
//      try { 
        jSTypeRegistry1.createEnumType("0o}", node2, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(0, 46, 56);
      node0.isFalse();
      node1.setSourceEncodedPosition(1740);
      Node.mergeLineCharNo(4095, 1);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node2.isSetterDef();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.isHook();
      node1.removeFirstChild();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildToFront(node1);
      Node node3 = null;
//      try {
        node3 = new Node((-1001), node2, 15, 4095);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.getInputId();
      node0.isTypeOf();
      Node node1 = new Node(57);
      node1.checkTreeEqualsImpl(node0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
//      try { 
        node0.appendStringTree(charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isTrue();
      node0.setChangeTime(124);
      node0.isReturn();
      node0.isWith();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // EMPTY [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(130, 130, 130);
      node0.getLength();
      Node node1 = Node.newString((-4042), "M-a)HMp");
      node0.useSourceInfoFromForTree(node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got EXPR_RESULT
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(90);
      node0.getDirectives();
      Node node1 = new Node(2, node0, node0, node0, node0);
      Node node2 = new Node(8, 57, 43);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      node0.isNE();
      Node node1 = new Node(38, 90, 50);
      Node node2 = new Node(36, node1);
      // Undeclared exception!
//      try { 
        node1.isUnscopedQualifiedName();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME 90 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isCatch();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(39);
      node0.getIntProp(40);
      node1.isAssign();
      // Undeclared exception!
//      try { 
        node1.setDouble(53);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Number node not created with Node.newNumber
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      Node node1 = new Node(4523, 40, 42);
      Node node2 = new Node(978, node1);
      int int0 = Node.CHANGE_TIME;
      node1.isGetterDef();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node1);
      Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeEqualsImpl(node0);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      node0.setCharno(50);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newNumber((-1531.31001));
      node0.getDouble();
      Node node1 = new Node(57);
      node0.isDec();
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isQualifiedName();
      node0.isGetProp();
      Node node1 = new Node(42, node0, node0, node0, node0, 4095, 48);
      node0.isTrue();
      node1.isQualifiedName();
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(38, 13, 50);
      Node node2 = new Node(16, node1);
      Node node3 = new Node(824, 16, 48);
      node2.removeChildren();
      node3.isThis();
      Node node4 = new Node(52, 0, 90);
      node4.isInstanceOf();
      node0.isTrue();
      node0.isContinue();
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newString("", 4, 4);
      Node node1 = Node.newString(51, "");
      node1.isDec();
      node1.getStaticSourceFile();
      node0.isDo();
      Node node2 = new Node(57, 2, 32);
      node2.checkTreeTypeAwareEqualsImpl(node0);
      Node node3 = new Node(31, 1610612736, 47);
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node2.isGetProp();
      node2.isOnlyModifiesThisCall();
      node1.isGetProp();
      node3.getQualifiedName();
      node2.setLineno(16);
      node3.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString("a3`C#MdQUa]ND", 2929, 2929);
      int int0 = 1499;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
//      try { 
        node0.checkTreeEqualsImpl((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node(124);
      node0.hasChildren();
      node0.isStringKey();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("com.google.common.collect.ImmutableSortedAsList");
      linkedHashSet0.add("");
      node0.setDirectives(linkedHashSet0);
      node0.isIf();
      Node node1 = new Node(32, node0, node0, 101, 1);
      node1.isFalse();
      node1.setSourceEncodedPosition(50);
      Node.mergeLineCharNo(12, 54);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isSetterDef();
      node1.isQualifiedName();
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(40, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.siblings();
      node0.isGetterDef();
      node0.isTry();
      node0.mayMutateGlobalStateOrThrow();
      node0.isFor();
      node0.isDec();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = new Node(103, (-1697), 35);
      node0.getJSDocInfo();
      node0.setCharno(35);
      node0.cloneTree();
      Node.newString(57, "f=^", 52, 26);
      node0.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node1 = Node.newString("jsdoc_info");
      node0.useSourceInfoFrom(node1);
      node0.isOnlyModifiesThisCall();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isVar();
      node0.isIf();
      node0.isExprResult();
      node0.isNot();
      HashSet<String> hashSet0 = new HashSet<String>();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(50, nodeArray0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      node1.getQualifiedName();
      node0.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Node node0 = new Node(49);
      Node node1 = new Node(49, node0);
      node1.isHook();
      Node node2 = node1.removeFirstChild();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node1.addChildToFront(node2);
      node2.isOr();
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node(125);
      Node node1 = new Node(57, node0);
      node0.isHook();
      node1.getSourceOffset();
      node1.removeFirstChild();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildToFront(node1);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      node0.getJsDocBuilderForNode();
      node0.isNE();
      Node node1 = new Node(38, 90, 50);
      Node node2 = new Node(36, node1);
      node0.isAnd();
      node1.srcrefTree(node2);
      node1.isTrue();
      node0.copyInformationFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "duplicate child");
      node0.siblings();
      node0.isGetterDef();
      node0.isTry();
      node0.mayMutateGlobalStateOrThrow();
      node0.isFor();
      node0.isDec();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = new Node(113);
      node0.isWhile();
      node0.isIf();
      node0.isExprResult();
      Node node1 = Node.newString("!j", (-2952), 46);
      node1.isNot();
      HashSet<String> hashSet0 = new HashSet<String>();
      Node node2 = new Node(32, 12, 25);
      node0.removeChildren();
      node2.isThis();
      node1.isInstanceOf();
      node1.isTrue();
      Node node3 = new Node(57, node0, node1);
      node3.isContinue();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isBreak();
      node0.getJSDocInfo();
      node0.removeProp((-2870));
      Node node1 = Node.newString(36, "vr,qs$OybG2f]", 2189, 15);
      Node node2 = new Node(52);
      node0.isDec();
      node2.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Node node0 = new Node(258);
      node0.isVar();
      // Undeclared exception!
//      try { 
        node0.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 258
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newString(111, "ZQ3UF._;.;ugqb{#9S", 892, 110);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(38, node0, node0);
      node0.isAdd();
      Node node2 = Node.newString("Object#Key", 8232, 31);
      node1.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.Node$ObjectPropListItem", true);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = new Node(43);
      Node node2 = Node.newNumber(1.2, 15, 12);
      node0.setCharno(54);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedHashSet0.add("");
      node1.setDirectives(linkedHashSet0);
      node0.isIf();
      node1.isFalse();
      Node.mergeLineCharNo(29, 12);
      Node node3 = Node.newString((-876), "new child has existing sibling", 52, 37);
      node3.isSetterDef();
      node2.isLabelName();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("SX");
      node0.isGetProp();
      int int0 = Node.DECR_FLAG;
      node0.isOnlyModifiesThisCall();
      node0.getAncestors();
      Node node1 = new Node(57, node0);
      Node node2 = new Node((-1180), node1, node1);
      node1.checkTreeEqualsImpl(node1);
      // Undeclared exception!
//      try { 
        node2.addChildrenToBack(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node node0 = new Node(115);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = Node.newString("RoKl]nM");
      node1.isGetProp();
      int int0 = Node.DECR_FLAG;
      node0.isOnlyModifiesThisCall();
      node0.getAncestors();
      Node node2 = new Node(115, node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      node0.addChildrenToBack(node2);
      node0.setSourceEncodedPosition(4095);
      int int1 = Node.DECR_FLAG;
      node0.isGetterDef();
      node0.addChildBefore(node1, node2);
      node2.getLastChild();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = new Node(124);
      node0.hasChildren();
      Node node1 = new Node(56, node0);
      node0.isStringKey();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      node0.setDirectives(linkedHashSet0);
      node1.isIf();
      Node node2 = new Node(32, node1, node1, 101, 3975);
      node2.isFalse();
      node2.setSourceEncodedPosition(50);
      Node.mergeLineCharNo(12, 54);
      node2.useSourceInfoIfMissingFromForTree(node0);
      node0.isSetterDef();
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isCatch();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(39);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isGetProp();
      node1.isOnlyModifiesThisCall();
      node0.getQualifiedName();
      node1.cloneNode();
      node1.getLength();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = new Node(115);
      node0.getBooleanProp(40);
      Node node1 = Node.newString(46, "{&DLvoqr%'FR%goQu+", 2216, (-738));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node(30, node1, node0);
      node1.isAdd();
      Node.newString("d[EQ~=4Rj{<Wut>3", 133, 55);
      Node node3 = node2.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Node node0 = new Node(130);
      node0.isWhile();
      node0.isCast();
      node0.isVarArgs();
      node0.isCase();
      Node node1 = new Node(56);
      Node node2 = new Node(110, node0, node1);
      node0.isWith();
      node2.getChangeTime();
      Node node3 = node2.clonePropsFrom(node1);
      node2.getChangeTime();
      node1.checkTreeTypeAwareEqualsImpl(node3);
      node2.isOnlyModifiesThisCall();
      node1.getIndexOfChild(node0);
      node3.cloneNode();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      int int0 = Node.INPUT_ID;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      node0.isGetElem();
      Node node1 = new Node(55, node0, node0, node0, 38, (-286));
      Node node2 = new Node(30, 5487, 112);
      node2.isCall();
      node1.isIn();
      node2.copyInformationFrom(node1);
      node0.isVarArgs();
      node2.cloneNode();
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      Node node1 = new Node(49, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry1.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry1.setLastGeneration(true);
      Node node3 = node1.copyInformationFrom(node0);
      Node node4 = Node.newString("Object#Element");
      node4.isEquivalentTo(node0, false, true, true);
      node1.getAncestors();
      node1.useSourceInfoIfMissingFrom(node0);
      Node node5 = node1.clonePropsFrom(node4);
      node2.setOptionalArg(false);
      node3.isNE();
      node1.setLineno(32);
      node5.isLabelName();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1808);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(1, node0, 40, 47);
      node0.useSourceInfoFrom(node1);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber(2024.0);
      node0.toString(false, false, false);
      Node node1 = new Node(51, node0, node0, node0, 127, 53);
      Node node2 = new Node(38, node1, node1);
      node2.isWith();
      node0.getChangeTime();
      node2.clonePropsFrom(node0);
      node2.getChangeTime();
      Node[] nodeArray0 = null;
      Node node3 = null;
//      try {
        node3 = new Node(2, (Node[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isDebugger();
      Node node1 = Node.newString(51, "ZQ3UF._;.;ugqb{#9S", 1, 306);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node(49, node0, node0);
      node1.isAdd();
      Node node3 = Node.newString("Object#Element", 39, 1204);
      node2.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("!=3p!fQ5i0", false);
      node3.isBlock();
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isDebugger();
      Node.newString(85, ".%!=A^v6e", 37, 8);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(2298, node0, node0);
      node0.isCase();
      Node node2 = Node.newNumber((-4573.267357), 435, 3146);
      node2.isThis();
      Node.newString("LC", 8, 42);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.getBooleanProp(48);
      node0.isNE();
      node0.isInc();
      Node node1 = new Node((-4802), 51, 154);
      node1.isTry();
      node1.isNull();
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      node0.isComma();
      Node node1 = new Node(4095, node0, node0, node0, 4095, 50);
      node1.hasChildren();
      node0.toString();
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isNE();
      node0.isInc();
      Node node1 = new Node(42, 4095, 52);
      node1.isTry();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = new Node(116, 116, 116);
      Node node1 = new Node(40, node0, node0, node0);
      node1.siblings();
      node1.isGetterDef();
      node0.isTry();
      node0.isNull();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.getElementsType();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Jcf", true);
      node1.isDo();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node.newString("Not declared as a constructor", (-1389), 4095);
      jSType0.getLeastSupertype(jSTypeArray0[1]);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(15, nodeArray0);
      JSType.toMaybeFunctionType(jSTypeArray0[1]);
      // Undeclared exception!
//      try { 
        node0.appendStringTree((Appendable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(48, node0, node0, node0, node0);
      node1.siblings();
      node0.getLength();
      node1.getJsDocBuilderForNode();
      node0.isDefaultCase();
      node1.isOnlyModifiesThisCall();
      node0.isHook();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Np^;BC");
      Node node0 = new Node(114);
      node0.isBreak();
      Node node1 = new Node(43, node0);
      node1.isThrow();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hU");
      node0.toString();
      node1.isNE();
      node1.isLabelName();
      node0.isFunction();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.isCatch();
      node0.wasEmptyNode();
      node0.isQualifiedName();
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(2, node0, node0, node0);
      node0.isEmpty();
      Node.newString("9WlPl>UtM5o:d?vR", 117, 42);
      node0.isInstanceOf();
      node0.isRegExp();
      Node node2 = null;
//      try {
        node2 = new Node(47, (Node[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      Node node1 = Node.newString(51, "zYv4");
      node0.isCall();
      node1.isIn();
      node1.isVarArgs();
      node0.isEquivalentTo(node1, false, false, true);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Node node0 = Node.newString("OP{ll*<-;", 650, 43);
      node0.isQuotedString();
      node0.setSourceEncodedPositionForTree(11);
      Node.extractLineno(11);
      node0.isQualifiedName();
      Node node1 = new Node(1, node0, node0, node0);
      node1.isFromExterns();
      node1.copyInformationFrom(node0);
      node0.addChildToFront(node1);
      Node node2 = node1.getFirstChild();
      node2.isNull();
      Node.mergeLineCharNo(110, (-3242));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = new Node(350);
      Node node1 = new Node(350, node0);
      node1.isFalse();
      node0.isExprResult();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      // Undeclared exception!
//      try { 
        node1.addChildBefore(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isBreak();
      Node node1 = new Node(43, node0);
      node1.isThrow();
      Node.newString(" is not a number node", 51, 37);
      Node node2 = node1.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", true);
      node2.isBlock();
      node1.isQuotedString();
      node2.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = new Node(39, 55, 55);
      Node node1 = new Node(55, node0, node0, node0);
      node1.getLength();
      Node node2 = node1.removeFirstChild();
      node2.getQualifiedName();
      node0.getProp(29);
      node0.setOptionalArg(false);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        node1.toStringTree();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 55
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      Node.extractCharno(4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = jSType1;
      jSTypeArray0[1] = jSType1;
      jSTypeArray0[2] = jSType0;
      jSTypeRegistry0.createFunctionType(jSType1, true, jSTypeArray0);
      jSTypeRegistry0.createTemplatizedType(objectType0, immutableList0);
      jSTypeRegistry0.createNullableType(jSTypeArray0[1]);
      jSTypeRegistry0.createConstructorType((JSType) objectType0, false, jSTypeArray0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.isCase();
      node1.isThis();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      node0.isNE();
      Node node1 = Node.newString("0", 619, 672);
      Node node2 = Node.newNumber(3427.0868726162857, 4095, 30);
      Node node3 = new Node(12, node2, node0, node0, node1);
      node1.setLength(57);
      node1.getJsDocBuilderForNode();
      node0.isRegExp();
      node0.removeProp(114);
      node1.getAncestor(40);
      node0.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, true, false);
      Node node1 = new Node(4, node0, node0, node0, node0);
      node1.isWith();
      node0.getChangeTime();
      Node node2 = node1.clonePropsFrom(node0);
      node2.checkTreeEquals(node1);
      node2.isIn();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      Node node1 = Node.newString("com.google.common.collect.ImmutableAsList");
      node0.addSuppression("synthetic");
      node1.getSourceFileName();
      node0.setCharno(52);
      node0.isSetterDef();
      Node node2 = new Node((-369), node0, node1);
      Node node3 = new Node(16);
      node3.isAdd();
      Node node4 = node2.useSourceInfoIfMissingFrom(node1);
      Node node5 = new Node(4416, node4, node3, 42, 55);
      Node node6 = node3.clonePropsFrom(node5);
      node6.setOptionalArg(false);
      node6.isOnlyModifiesThisCall();
      Node.newString((-785), "com.google.common.collect.ImmutableAsList", 12, 53);
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(42, node0, node0, 2, 54);
      node0.isHook();
      node1.removeFirstChild();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildToFront(node1);
      node1.isCast();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isNE();
      node0.getJSType();
      Node.newString(50, "Unknown class name");
      node0.isCall();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(2479, nodeArray0);
      node0.isName();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = Node.newString(38, "z4:;.+2@Qh?eP1", 50, 650);
      node1.addChildToBack(node0);
      node1.setStaticSourceFile((StaticSourceFile) null);
      node1.getJsDocBuilderForNode();
      node1.getIntProp(57);
      node1.isAssign();
      node0.setDouble((-4866.730697571767));
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isHook();
      node0.isVoid();
      node0.setSourceFileForTesting("input_id");
      Node node1 = new Node(37);
      node1.toStringTree();
      node1.isWhile();
      node0.getSourceFileName();
      node1.getSourceFileName();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isComma();
      Node node1 = new Node(4095, node0, node0, node0, 4095, 50);
      node1.hasChildren();
      node0.toString();
      node1.getStaticSourceFile();
      node1.getChildAtIndex((-3682));
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      int int0 = Node.INPUT_ID;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      node0.isGetElem();
      Node node1 = new Node(55, node0, node0, node0, 38, (-286));
      Node node2 = new Node(30, 5487, 112);
      node0.isOnlyModifiesThisCall();
      node1.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      node0.addChildrenToBack(node1);
      int int1 = Node.DECR_FLAG;
      node0.isGetterDef();
      node1.addChildBefore(node2, node0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = new Node((-422));
      node0.getDirectives();
      node0.isDelProp();
      node0.siblings();
      Node node1 = null;
      // Undeclared exception!
//      try { 
        node0.addChildToFront((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      Node node1 = new Node(1104);
      String string0 = "sy[nthet1Mc";
      Node node2 = new Node(48, 87855567, 3078);
      Node node3 = new Node(65535, node1, node1, node0, 2321, 57);
      node3.isReturn();
      // Undeclared exception!
//      try { 
        node3.getChildBefore(node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // node is not a child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node0.setType((-1821));
      Node node1 = new Node(52, node0, node0, node0, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node1.isOnlyModifiesThisCall();
      node1.isEquivalentToShallow(node0);
      node1.setJSType((JSType) null);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isBreak();
      Node node1 = new Node(16, 47, 2011);
      node0.clonePropsFrom(node1);
      Node.newNumber((double) 4095, 1475, 55);
      node0.isReturn();
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isTrue();
      Node node1 = Node.newString("[;DQ5)[X>f4");
      node0.getInputId();
      node1.isEquivalentTo(node0, true, true, true);
      Node node2 = new Node(262144, node1, node1, node1, (-1), (-343));
      node2.getAncestors();
      Node node3 = new Node((-3025), node0, node2, node2);
      node3.isObjectLit();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.getIndexOfChild(node4);
      node4.isEmpty();
      node4.isParamList();
      Node.newNumber((-1437.4314359458126));
      node2.isThrow();
      node3.getJsDocBuilderForNode();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node.extractLineno((-3141));
      Node node0 = Node.newString("synthe\"ic");
      node0.getSideEffectFlags();
      Node node1 = new Node(44, node0, node0);
      Node node2 = Node.newNumber(4294.0, 2, (-3141));
      node1.setCharno(4152);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedHashSet0.add("");
      linkedHashSet0.add("opt_arg");
      node1.setDirectives(linkedHashSet0);
      node1.isIf();
      node1.isFalse();
      Node.mergeLineCharNo(63, (-3440));
      node0.getStaticSourceFile();
      node0.isParamList();
      node2.getDouble();
      node0.isCall();
      node2.isNE();
      node1.getLength();
      node2.isFunction();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.putBooleanProp(4623, true);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("fLmx0:GB,nCrN", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.wasEmptyNode();
      node0.isQualifiedName();
      node0.isGetProp();
      node0.isOnlyModifiesThisCall();
      node0.isGetProp();
      node0.getQualifiedName();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isOr();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = new Node(8, 30, 15);
      node0.isCast();
      node0.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.setCharno(102);
      node0.isSetterDef();
      Node node2 = new Node(56, node1, node0);
      Node node3 = new Node(29);
      node1.isAdd();
      Node node4 = node2.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("@p53$6U9(`~hkh8", true);
      node4.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = new Node(16, node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.setLastGeneration(false);
      node3.copyInformationFrom(node2);
      Node node4 = Node.newString("Object#Element");
      node3.isEquivalentTo(node4, false, true, true);
      node4.getAncestors();
      Node node5 = node2.useSourceInfoIfMissingFrom(node4);
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node node6 = node2.clonePropsFrom(node4);
      node4.setOptionalArg(true);
      node6.isNE();
      node4.setLineno(52);
      // Undeclared exception!
//      try { 
        node1.getChildBefore(node5);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // node is not a child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString(15, "hU", 38, (-2202));
      node1.isGetElem();
      node1.getAncestors();
      Node node2 = new Node(53, node0);
      Node node3 = Node.newString((-1136), "hU");
      node3.isNull();
      node2.isFor();
      // Undeclared exception!
//      try { 
        node2.replaceChildAfter(node0, node3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(0, 46, 56);
      node1.isReturn();
      Node.newString("sy[nthet1Mc", 31, 90);
      Node node2 = node1.clonePropsFrom(node0);
      node1.getStaticSourceFile();
      node2.getJSType();
      int int0 = (-619);
      // Undeclared exception!
//      try { 
        node1.getExistingIntProp(8233);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: 8233
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = new Node(2230, 1512, 2230);
      node0.isIf();
      node0.isExprResult();
      Node node1 = Node.newString("", (-1091), 56);
      node1.isNot();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.isAssign();
      node0.isOnlyModifiesThisCall();
      Node node2 = Node.newString(126, "hU", 1210, (-121));
      Node node3 = Node.newString(154, "*GQPG!W@M5O5", 54, 3937);
      node3.isLabel();
      node2.isFor();
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isHook();
      node0.isCast();
      Node node1 = Node.newString("LY3");
      node1.isEquivalentTo(node0, false, true, false);
      node0.getAncestors();
      Node node2 = new Node(4095, node0, node0, node0);
      node0.isObjectLit();
      node0.getIndexOfChild(node2);
      node0.isEmpty();
      node2.addChildAfter(node1, node0);
      node0.isParamList();
      Node.newNumber((double) 56);
      node2.isThrow();
      node2.getBooleanProp(118);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Node node0 = Node.newString(114, "");
      Node node1 = Node.newString(257, "");
      node0.isDefaultCase();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.getString();
      node1.setSourceFileForTesting("com.google.javascript.rhino.Node$SideEffectFlags");
      Node node2 = new Node(56, node0);
      node2.isVarArgs();
      node0.isFor();
      // Undeclared exception!
//      try { 
        node1.replaceChildAfter(node0, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(90);
      node0.isHook();
      node0.isCast();
      node0.children();
      node0.isVoid();
      Node node1 = new Node(37);
      node1.isWhile();
      node1.clonePropsFrom(node0);
      node0.getSourceFileName();
      node1.getSourceFileName();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.areAllFlagsSet();
      Node node0 = Node.newNumber(4045.92731208571);
      node0.toString(false, true, false);
      Node node1 = new Node((-4176), node0, node0);
      Node node2 = Node.newString(110, "0N_'", 31, 15);
      node2.isWith();
      node0.getChangeTime();
      Node node3 = node1.clonePropsFrom(node2);
      node2.getChangeTime();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node2.isGetProp();
      // Undeclared exception!
//      try { 
        Node.newString((String) null, 52, (-1669));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isTrue();
      node0.isScript();
      Node node1 = new Node(113, node0, node0, node0);
      node0.clonePropsFrom(node1);
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // EMPTY is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      Node node1 = new Node(2011);
      node0.isDebugger();
      Node node2 = Node.newString(39, "ZQ3UF._;.;ugqb{#9S", 113, 4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getProp(30);
      Node node3 = new Node(46, node1, node0);
      node2.isCase();
      node2.isIf();
      node2.srcref(node0);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node node1 = Node.newString(103, "fLmx0:GB,nCrN");
      node1.isSwitch();
      Node node2 = new Node(115, node0, node0, node0);
      node2.srcref(node0);
      Node.mergeLineCharNo(43, 36);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isDebugger();
      Node node1 = new Node(2, 105, 56);
      node0.clonePropsFrom(node1);
      Node node2 = Node.newString(110, "ZQ3UF._;.;ugqb{#9S", 2686, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = new Node(48, node0, node0);
      node3.addChildrenToBack(node2);
      node0.isCase();
      node2.isThis();
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = new Node(40, node0, node0, node0);
      node1.cloneNode();
      Node.newString("");
      Node node2 = null;
//      try {
        node2 = new Node(56, node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = Node.newString("4", 44, (-20));
      node0.removeProp(44);
      Node node1 = new Node(56, (-298), 39);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.addSuppression("4");
      node1.isQualifiedName();
      node1.isLocalResultCall();
      node1.setLineno(47);
      node1.mayMutateGlobalStateOrThrow();
      node1.getBooleanProp(103);
      // Undeclared exception!
//      try { 
        node0.useSourceInfoFrom((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isHook();
      node0.getInputId();
      node0.isCast();
      node0.isIf();
      node0.isExprResult();
      node0.isReturn();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.isNew();
      // Undeclared exception!
//      try { 
        node0.addChildAfter((Node) null, (Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 8);
      node0.toString(false, false, true);
      Node node2 = new Node(13, (-3316), 304);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node3.setDirectives(set0);
      node2.getJSType();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node((-1630), node0, 4, 55);
      node0.isEquivalentTo(node1);
      Node node2 = Node.newString("com.google.common.base.Predicates$NotPredicate");
      node0.getInputId();
      Node node3 = new Node((-1123), 90, 985);
      node0.isOnlyModifiesThisCall();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      Node node4 = Node.newString(16, "com.google.common.base.Predicates$NotPredicate", 49, 57);
      node3.addChildrenToBack(node4);
      node2.getLength();
      node3.copyInformationFromForTree(node1);
      node2.isComma();
      node3.isSyntheticBlock();
      node3.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(1806, node0, node0);
      node1.isWith();
      node0.getChangeTime();
      node1.clonePropsFrom(node0);
      Node node2 = null;
      // Undeclared exception!
//      try { 
        node1.checkTreeEquals((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(1806, node0, node0);
      node1.isWith();
      node0.getChangeTime();
      Node node2 = node1.clonePropsFrom(node0);
      node2.getChangeTime();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.isGetProp();
      node0.isOnlyModifiesThisCall();
      node0.isGetProp();
      node1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isQuotedString();
      Node node1 = Node.newString(15, "hU", 38, (-2202));
      node1.isGetElem();
      node0.isEquivalentTo(node1, false, true, false);
      node1.getAncestors();
      Node node2 = new Node(985, node1, node0, node0);
      node2.isObjectLit();
      node2.getIndexOfChild(node0);
      node1.isEmpty();
      node0.isParamList();
      Node.newNumber((double) 52);
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isDebugger();
      Node node1 = Node.newString(110, "ZQ3UF._;.;ugqb{#9S", 2686, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = new Node(48, node0, node0);
      node0.isCase();
      node1.isThis();
      node0.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = new Node(8192, 8192, 8192);
      node0.isComma();
      Node node1 = Node.newString("ZQ3UF._;.;ugqb{#9S", 12, 4507);
      node1.getBooleanProp((-726));
      node0.isHook();
      node1.setIsSyntheticBlock(false);
      node0.removeChildren();
      node0.isEmpty();
      node0.isInstanceOf();
      node1.isTrue();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = new Node(19, 53, 8192);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.isEquivalentToTyped(node0);
      node0.getLength();
      // Undeclared exception!
//      try { 
        node0.setQuotedString();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // not a StringNode
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      Node node1 = Node.newString((-1727), "ZQ3UF._;.;ugqb{#9S", 57, 4095);
      node1.addChildToBack(node0);
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node node2 = Node.newString("fLmx0:GB,nCrN", 36, 31);
      node0.isInc();
      node1.setCharno(2308);
      node0.isSetterDef();
      Node node3 = new Node(57, node2, 48, 19);
      Node node4 = new Node(4, node3, node3);
      Node node5 = new Node(101);
      node2.isAdd();
      node0.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("$|?5vlq7ZfUG++,w<", false);
      node3.detachFromParent();
      node4.getChildAtIndex((-36));
      node2.checkTreeEqualsImpl(node3);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isNE();
      node0.isDefaultCase();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(31, node0, node0, node0, node0);
      node0.addChildToBack(node1);
      Node node2 = new Node(56);
      // Undeclared exception!
//      try { 
        node0.replaceChild(node2, node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // node is not a child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newNumber(2707.6526956, (-3476), (-3476));
      Node node1 = null;
      node0.children();
      // Undeclared exception!
//      try { 
        node0.srcrefTree((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isNE();
      node0.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-887));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node1 = Node.newNumber((double) 36);
      node0.toString(true, false, false);
      Node node2 = new Node(16, 2437, 42);
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node3.getJSType();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isCatch();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = Node.newNumber((double) 2);
      Node node2 = new Node(3656, node0, node1, node0);
      node0.srcrefTree(node2);
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // EMPTY is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isHook();
      node0.isCast();
      node0.isIf();
      node0.isExprResult();
      Node node1 = Node.newString("zYv4", 148, 848);
      node0.isNot();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.isAssign();
      node1.isOnlyModifiesThisCall();
      Node.newString(31, "side_effect_flags", 39, Integer.MIN_VALUE);
      node0.isLabel();
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isHook();
      node0.isCast();
      node0.getJsDocBuilderForNode();
      node0.getIntProp((-5050));
      node0.isSetterDef();
      Node node1 = node0.cloneTree();
      Node.newString(495, "hU", 49, 3358);
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(50, 4);
      Node node1 = new Node(63, node0, 54, 40);
      node0.getJsDocBuilderForNode();
      node1.setVarArgs(false);
      node1.getChangeTime();
//      try { 
        node0.setString("r/");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // ARRAYLIT [free_call: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(50, 4);
      Node node1 = new Node(63, node0, 54, 40);
      node1.isLabelName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.setCharno(297);
      node1.isSetterDef();
      Node node2 = new Node(1, node1, node1);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getObjectElementKey();
      node_NodeMismatch0.equals(node2);
      node1.setCharno(54);
      Node node3 = node1.copyInformationFromForTree(node2);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node3.setJSDocInfo(jSDocInfo0);
      // Undeclared exception!
//      try { 
        node0.replaceChild(node2, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString(102, "U", 98, 32);
      node1.addChildToBack(node0);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isInc();
      node0.setCharno(98);
      node1.isSetterDef();
      Node node2 = null;
//      try {
        node2 = new Node(3008, node0, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString("syntetc");
      node0.isDebugger();
      Node node1 = new Node(124, 2, 117);
      node1.isLabelName();
      Node node2 = node1.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Node tree inequality:\nTree1:\n", true);
      Node node3 = new Node((-1017), node1, node2, node1);
      node3.getChildAtIndex((-806));
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = new Node(1914);
      node0.isVarArgs();
      node0.getBooleanProp(1914);
      node0.isHook();
      node0.setIsSyntheticBlock(false);
      node0.isEmpty();
      node0.isCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
//      try { 
        ImmutableList.copyOf((Iterable<? extends JSType>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = Node.newString("5", (-16), (-16));
      node0.getBooleanProp(48);
      node0.isDefaultCase();
      node0.getJsDocBuilderForNode();
      node0.getIntProp(1476);
      node0.isSetterDef();
      node0.cloneTree();
      Node.newString(4095, "hU", (-2189), 0);
      node0.isThis();
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Node node0 = Node.newString(8192, "FUNCTION_PROTOTYPE");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.isDec();
      node0.children();
      Node node1 = new Node(3701, node0, node0, node0, node0, 56, 101);
      node1.isIn();
      node1.isOnlyModifiesThisCall();
      node0.setLength(0);
      node0.isTrue();
      node1.isVarArgs();
      node1.setJSDocInfo((JSDocInfo) null);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Node node0 = new Node(107);
      node0.isLabelName();
      // Undeclared exception!
//      try { 
        node0.getString();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 107
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = new Node(114);
      node0.isBreak();
      Node node1 = Node.newString("Hyj", 15, 152);
      node1.isEquivalentToTyped(node0);
      node0.isIn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      templateType0.toMaybeTemplateType();
      node0.isAdd();
      Node node2 = node0.cloneTree();
      node2.removeFirstChild();
      node2.putBooleanProp((-2266), true);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Hyj", false);
      // Undeclared exception!
//      try { 
        node0.getChildAtIndex(52);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1806);
      Node node1 = new Node(1, node0, node0, node0, node0, 38, 57);
      node1.isName();
      node0.putIntProp(39, 1);
      int int0 = Node.ORIGINALNAME_PROP;
      node0.wasEmptyNode();
      node0.isQualifiedName();
      node0.isGetProp();
      node0.isOnlyModifiesThisCall();
      node0.isGetProp();
      node0.setDouble(4);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = new Node(98);
      node0.isHook();
      node0.isCast();
      node0.isIf();
      node0.isExprResult();
      Node node1 = Node.newString("RVAT", 1, 29);
      node0.isNot();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node2.isNumber();
      node2.isFunction();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(9, node0, node0, node0, node0);
      node1.isUnscopedQualifiedName();
      // Undeclared exception!
//      try { 
        node1.removeChildAfter(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no next sibling.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = new Node((-120));
      Node.newNumber(0.0);
      Node node1 = new Node(1, node0, node0, 680, (-3731));
      node0.isEquivalentTo(node1, true, true, true);
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      Node.extractCharno(4095);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      node0.children();
      node0.isVoid();
      Node node1 = new Node(0);
      node0.isWhile();
      Node node2 = node1.srcrefTree(node0);
      node0.getSourceFileName();
      node1.getSourceFileName();
      // Undeclared exception!
//      try { 
        node1.replaceChildAfter(node2, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Node node0 = Node.newString("syntetc");
      node0.isDebugger();
      // Undeclared exception!
//      try { 
        node0.isEquivalentTo((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString("i0-))GEZLrP6tH", (-2077), 2929);
      Node node1 = new Node(15, node0, node0, node0, node0);
      node0.setLength(1265);
      node1.getJsDocBuilderForNode();
      node1.isRegExp();
      node1.removeProp(898);
      node0.getAncestor(12);
      // Undeclared exception!
//      try { 
        node0.copyInformationFrom((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isNE();
      Node node1 = new Node(38, 13, 50);
      Node node2 = new Node(3385, node1);
      node0.isAnd();
      // Undeclared exception!
//      try { 
        node1.getQualifiedName();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME 13 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getBooleanProp((-1088));
      node0.isDefaultCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(111, node0, node0, 54, 40);
      node1.cloneTree();
      Node node2 = node1.useSourceInfoFrom(node0);
      node1.isWhile();
      node1.getType();
      node2.getLength();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-9));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      Node.extractCharno(8192);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, jSType0, (List<JSType>) immutableList0);
      Node node2 = Node.newNumber((double) 55, 1276, 2298);
      node0.isThrow();
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = Node.newString("syntetc");
      node0.isDebugger();
      Node node1 = new Node(124, 2, 117);
      node1.isDefaultCase();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(2, node1, node0, 43, (-223));
      node1.isWhile();
//      try { 
        node1.setDouble((-2104.4874275));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // EMPTY 2 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = new Node(107);
      Node node1 = null;
//      try {
        node1 = new Node(38, node0, node0, node0, (Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = Node.newString(38, "z4:;.+2@Qh?eP1", 50, 650);
      node1.addChildToBack(node0);
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node node2 = Node.newString("z4:;.+2@Qh?eP1", 57, 83);
      node2.isInc();
      node2.setCharno(32);
      node0.isSetterDef();
      Node node3 = new Node(47, node2, node2);
      Node node4 = new Node(12);
      node3.useSourceInfoIfMissingFromForTree(node2);
      Node node5 = node2.clonePropsFrom(node0);
      node1.setOptionalArg(true);
      node5.isNE();
      node4.toString();
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = new Node(16, node1);
      Node node3 = new Node(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.setLastGeneration(false);
      Node node5 = Node.newString("Object#Element");
      node4.isEquivalentTo(node5, false, true, true);
      node5.getAncestors();
      node0.isAdd();
      Node node6 = node1.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", true);
      // Undeclared exception!
//      try { 
        node6.getChildAtIndex(2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = Node.newString(38, "z4:;.+2@Qh?eP1", 50, 650);
      node1.addChildToBack(node0);
      node1.setStaticSourceFile((StaticSourceFile) null);
      Node node2 = Node.newString("z4:;.+2@Qh?eP1", 57, 83);
      node2.isInc();
      node2.setCharno(32);
      node0.isSetterDef();
      Node node3 = new Node(47, node2, node2);
      Node node4 = new Node(12);
      node4.isAdd();
      node4.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("z4:;.+2@Qh?eP1", false);
      // Undeclared exception!
//      try { 
        node1.getChildAtIndex(2242);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isHook();
      node0.isCast();
      node0.isIf();
      node0.isExprResult();
      node0.toString(false, false, false);
      Node node1 = new Node(303, (-1340), 53);
      Node node2 = new Node(0, node1, 2, 1580);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node2.getJSType();
      // Undeclared exception!
//      try { 
        node3.toStringTree();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 0
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      Node.extractCharno(2670);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType[] jSTypeArray0 = new JSType[7];
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) immutableList0);
      jSTypeArray0[0] = jSType1;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.addSuppression("Object#Key");
      node0.isOptionalArg();
      node0.isNull();
      Node node1 = new Node(114, node0, 1447, 15);
      node0.addChildToBack(node1);
      node1.getChildAtIndex(1);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newNumber((double) 49);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isVarArgs();
      node1.isHook();
      node1.setIsSyntheticBlock(false);
      node2.isDec();
      node2.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = new Node(124);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.areAllFlagsSet();
      Node node1 = Node.newNumber((-895.13921));
      node0.toString(false, true, false);
      Node node2 = new Node(909, 2, 130);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.getJSType();
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      Node node1 = Node.newString("synthetic");
      node1.mayMutateGlobalStateOrThrow();
      node0.isCast();
      node1.isObjectLit();
      node0.getIndexOfChild(node1);
      node0.toStringTree();
      node1.isQualifiedName();
      node1.hasChild(node0);
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Node node0 = new Node(107);
      Node node1 = Node.newNumber((-786.84779));
      node0.copyInformationFromForTree(node1);
      node0.isVarArgs();
      node0.isHook();
      node0.setIsSyntheticBlock(false);
      node0.isDec();
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node0.isDebugger();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 18, 38);
      Node.newNumber((double) 0);
      node2.children();
      node0.isVoid();
      Node node3 = new Node(49);
      node3.useSourceInfoFromForTree(node1);
      node3.children();
      node0.isWhile();
      node1.getSourceFileName();
      node3.getSourceFileName();
      node3.isBreak();
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newString("synthe\"ic");
      node0.isString();
      node0.isCast();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      Node node2 = Node.newString("synthe\"ic", (-5166), 57);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node3 = new Node(1528, node1, node1);
      node2.isCase();
      node3.isThis();
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node0.isEmpty();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node node3 = new Node(40, node2, node1, 16, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.setLastGeneration(false);
      Node node5 = Node.newString("Object#Element");
      node4.isEquivalentTo(node5, false, true, false);
      node5.getAncestors();
      node2.useSourceInfoIfMissingFrom(node5);
      Node node6 = node3.useSourceInfoIfMissingFromForTree(node0);
      Node node7 = node2.clonePropsFrom(node5);
      node5.setOptionalArg(false);
      node5.checkTreeEquals(node0);
      node7.isOnlyModifiesThisCall();
      Node.newString(8, "c?9.ZtF^Y)YCp1xr", (-3304), 50);
      node6.isLabel();
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = Node.newString("FQ!|E..oMEtBQ'Sof");
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node node1 = Node.newString((-1697), "FQ!|E..oMEtBQ'Sof");
      node0.setSourceFileForTesting("FQ!|E..oMEtBQ'Sof");
      node1.type = 43;
      node1.setSourceEncodedPositionForTree(0);
      Node node2 = new Node(57, node1);
      node2.isAnd();
      node0.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
//      try { 
        node0.addChildrenAfter(node2, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-302), nodeArray0);
      Node node1 = new Node(37, 42, (-2381));
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(47, node0, node0, node0, node0, 15, 51);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isStringKey();
      node2.useSourceInfoFrom(node0);
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node node3 = new Node(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.isFor();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      templateType0.toMaybeTemplateType();
      jSTypeRegistry0.getObjectIndexKey();
      node0.getProp(769);
      node1.setCharno(57);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      Node node1 = Node.newString("l(~,Ry3|1lTLe?");
      node0.isEquivalentTo(node1, false, false, false);
      node1.getAncestors();
      Node node2 = new Node(40, node1, node0, node0);
      node2.isObjectLit();
      node2.getIndexOfChild(node1);
      node0.isEmpty();
      node1.isParamList();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isHook();
      node0.isComma();
      Node.extractCharno(2);
      node0.addSuppression("Should not happen\n");
      node0.getSourceOffset();
      node0.isSetterDef();
      Node node1 = Node.newString("Iq");
      Node node2 = new Node(0, node1, node0);
      node0.isTrue();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.setWasEmptyNode(true);
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(50, 38, 498);
      Node node2 = new Node(48, node1, node0, 12, 43);
      node1.isStringKey();
      node2.useSourceInfoFrom(node1);
      node2.getInputId();
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5071), node0, node0, node0, node0);
      node0.isDebugger();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node.newNumber((double) 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = Node.newString("Object#Element");
      node1.isEquivalentTo(node3, false, true, false);
      node3.getAncestors();
      Node node4 = node2.useSourceInfoIfMissingFrom(node3);
      Node node5 = node2.clonePropsFrom(node3);
      node3.setOptionalArg(false);
      node5.isOnlyModifiesThisCall();
      Node node6 = Node.newString(8, "c?9.ZtF^Y)YCp1xr", 4095, 50);
      node4.isQualifiedName();
      node6.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isNE();
      node0.isDebugger();
      Node node1 = new Node((-1303), 4095, 1062);
      node1.setOptionalArg(false);
      node1.isStringKey();
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.getInputId();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(57, node0);
      node0.isHook();
      node1.removeFirstChild();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node0.addChildToFront(node1);
      node1.isCast();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = node0.cloneNode();
      node0.isQuotedString();
      Node node2 = Node.newString(15, "hU", 38, (-2202));
      node2.isGetElem();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[2] = (byte) (-76);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node1.isUnscopedQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node0.addSuppression("hU");
      node0.isOptionalArg();
      node0.isNull();
      node3.addChildToBack(node2);
      Node.newString("@tF[u)@:M_", 1, 40);
      // Undeclared exception!
//      try { 
        node1.setSideEffectFlags(15);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ASSIGN_LSH
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isName();
      node0.putIntProp(47, 110);
      node1.wasEmptyNode();
      node0.isQualifiedName();
      node0.isGetProp();
      node0.isOnlyModifiesThisCall();
      node1.isGetProp();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.setWasEmptyNode(true);
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getChangeTime();
      node0.isLabelName();
      node0.toString();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      Node.extractCharno(2670);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType[] jSTypeArray0 = new JSType[7];
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) immutableList0);
      jSTypeArray0[0] = jSType1;
      jSTypeArray0[1] = jSType0;
      Node node0 = Node.newNumber((double) 1, 587, 1);
      node0.isThrow();
      node0.setLineno(2670);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isWith();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("fLmx0:GB,nCrN", false);
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node node1 = Node.newString(103, "fLmx0:GB,nCrN");
      node1.isSwitch();
      node1.getLineno();
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newString("synthetic");
      node0.addSuppression("synthetic");
      node0.getInputId();
      node0.isTypeOf();
      node0.isStringKey();
      Node node1 = Node.newString(1024, "g[5^0$Kfs");
      node1.setIsSyntheticBlock(false);
      node1.detachChildren();
      node1.isTry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.removeProp(36);
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = Node.newString(114, "");
      Node node1 = Node.newString(257, "", 38, 31);
      node0.isEquivalentTo(node1);
      Node node2 = new Node(77);
      node2.isTry();
      Node node3 = Node.newString("`U-Dq");
      node1.getInputId();
      Node node4 = new Node(2, 1, 2553);
      node2.isOnlyModifiesThisCall();
      node0.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node4);
      node4.addChildrenToBack(node2);
      node3.getLength();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newString("synthe\"ic");
      node0.isHook();
      node0.isCast();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      Node node2 = Node.newString("synthe\"ic", (-5166), 57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.putProp(8, jSDocInfo0);
      node1.addChildrenToFront(node2);
      node0.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node0.addChildrenToBack(node1);
      node0.getSourceFileName();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newString("ZQ3UF._;.;ugqb{#9S");
      Node node1 = new Node(350, node0);
      node1.isFalse();
      node0.isExprResult();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node.mergeLineCharNo(30, 30);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?0$Z");
      Node node0 = Node.newNumber((double) (-2083), (-2083), 30);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m<");
      node0.getProp((-398));
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(40, "m<", 111, (-2163));
      node1.setQuotedString();
      node1.srcref(node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = new Node((-2083), node0);
      node2.mayMutateArguments();
      node2.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = null;
//      try {
        node3 = new Node(122910, node2, node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = Node.newString("synthe\"ic");
      node0.isString();
      node0.isCast();
      node0.useSourceInfoFromForTree(node0);
      Node.newString("synthe\"ic", (-5166), 57);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
//      try { 
        ImmutableList.of((JSType) null, (JSType) null, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // at index 0
//         //
//         verifyException("com.google.common.collect.ObjectArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      templateTypeMapReplacer0.caseUnknownType();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node0 = new Node((-1067), (-1067), 2);
      Object object0 = new Object();
      node0.putProp(2893, object0);
      Node node1 = null;
      // Undeclared exception!
//      try { 
        node0.addChildrenToFront((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(57, node0);
      node0.setLineno(57);
      node0.isHook();
      node1.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isNE();
      Node node2 = null;
//      try {
        node2 = new Node(37, node1, node1, node1, node0, 12, 54);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.getInputId();
      node0.isTypeOf();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 517;
      node0.children();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = Node.newNumber(2601.337644, 29, 229);
      node0.checkTreeEquals(node1);
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(517);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Node node0 = Node.newString("", 1, 1);
      Node node1 = new Node(29);
      node0.copyInformationFromForTree(node1);
      node0.mayMutateArguments();
      node0.isNE();
      node0.getJSType();
      node0.isBlock();
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = Node.newString(917, "duplicate child");
      node0.isParamList();
      node0.getInputId();
      Node node1 = node0.cloneNode();
      node0.getAncestors();
      node1.isQuotedString();
      node1.isGetElem();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node2.addSuppression("l(~,Ry3|1lTLe?");
      node1.isOptionalArg();
      node1.isNull();
      node1.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(155);
      Node node1 = Node.newString("position (");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.isNumber();
      node0.isCast();
      node0.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isWith();
      node0.getChangeTime();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      Node node2 = Node.newString("position (", 100, 42);
      node2.setChangeTime(63);
      node2.getLastChild();
      node1.isLocalResultCall();
      // Undeclared exception!
//      try { 
        node1.copyInformationFromForTree((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Node node0 = new Node(1073741823);
      node0.isLocalResultCall();
      node0.getInputId();
      node0.isFromExterns();
      node0.isAssignAdd();
      node0.isBreak();
      node0.isQuotedString();
      node0.isGetterDef();
      node0.isFor();
      int int0 = 2417;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType((String) null, node0, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.getInputId();
      node0.toStringTree();
      // Undeclared exception!
//      try { 
        node0.addChildBefore((Node) null, (Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newString("synthe\"ic");
      node0.isHook();
      node0.isCast();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      Node node2 = Node.newString("synthe\"ic", (-5166), 57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.putProp(8, jSDocInfo0);
      node2.setJSDocInfo(jSDocInfo0);
      node1.addChildrenToFront(node2);
      node0.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node0.addChildrenToBack(node1);
      node0.getSourceFileName();
      // Undeclared exception!
//      try { 
        node0.replaceChild(node2, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node has siblings.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newString(268, "U5<jM1B)1U~");
      node0.isScript();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U5<jM1B)1U~");
      node0.isIn();
      node0.getBooleanProp(268);
      node0.addSuppression("IN");
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = new Node(63);
      String string0 = "fLmx0:G\\B,nCrN";
      Node node1 = Node.newString(42, "fLmx0:GB,nCrN", 105, (-2134));
      Node node2 = Node.newString(42, "prev is not a child of this node.", (-2134), 29);
      Node node3 = new Node(54, node2, node0);
      // Undeclared exception!
//      try { 
        node1.addChildToBack(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.addSuppression("g[;^0$Kfs");
      node0.getInputId();
      node0.isTypeOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16384);
      Node node1 = Node.newString(155, "g[;^0$Kfs");
      Node node2 = new Node(1, node0);
      node1.isAnd();
      // Undeclared exception!
//      try { 
        node1.getChildBefore(node2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isHook();
      node0.isComma();
      Node node1 = Node.newString("jzDI");
      node1.mayMutateGlobalStateOrThrow();
      node0.isCast();
      Node node2 = node0.clonePropsFrom(node1);
      node0.setOptionalArg(false);
      node2.checkTreeEquals(node0);
      node0.isOnlyModifiesThisCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newString(32, "Recorded bad position information\nstart-line: ", 29, 46);
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node node0 = Node.newString(917, "duplicate child");
      node0.isParamList();
      node0.getInputId();
      Node node1 = node0.cloneNode();
      node0.getAncestors();
      node0.isDelProp();
      node0.isThrow();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.addSuppression("l(~,Ry3|1lTLe?");
      node1.isOptionalArg();
      node1.isNull();
      node1.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, 4);
      Node node1 = new Node(63, node0, 1313, 40);
      node1.isUnscopedQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.setCharno(297);
      node1.isSetterDef();
      Node node2 = new Node(1, node1, node1);
      node0.isTrue();
      node2.cloneTree();
      Node.newString(55, "=", 251, 8);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Node node0 = Node.newString("8");
      Node node1 = Node.newString("8");
      node0.isParamList();
      node0.isEquivalentToShallow(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = Node.newString(12, "fLmx0:GB,nCrN");
      node2.getStaticSourceFile();
      node1.isFromExterns();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = Node.newString("a3`C#MdQUa]ND", 2929, (-2077));
      Node node1 = new Node(1470, node0, node0, node0, node0);
      node0.setLength(16);
      node0.getJsDocBuilderForNode();
      node1.isRegExp();
      node0.removeProp(16);
      node0.getAncestor(13);
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      Node node1 = Node.newString("synthetic");
      node1.mayMutateGlobalStateOrThrow();
      node0.isCast();
      Node node2 = node1.clonePropsFrom(node0);
      node1.setOptionalArg(true);
      node0.checkTreeEquals(node1);
      Node node3 = new Node(21, node2, 1993, 8);
      node3.isOnlyModifiesThisCall();
      Node.newString(46, "Recorded bad position information\nstart-line: ", 29, 985);
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("ZQ3UF._;.;ugqb{#9S");
      node0.wasEmptyNode();
      node0.isComma();
      node0.isDelProp();
      node0.getJSDocInfo();
      // Undeclared exception!
//      try { 
        node0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node node0 = Node.newString("|9h{F;'2V{", (-342), 969);
      node0.getChangeTime();
      Node node1 = null;
      // Undeclared exception!
//      try { 
        node0.addChildrenToBack((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = Node.newString(155, "jE2");
      node0.isDec();
      node0.setSourceEncodedPosition((-2846));
      node0.setString("iS");
      node0.getChildAtIndex((-536));
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Node node0 = new Node(602);
      node0.getJSType();
      Node node1 = Node.newString(1062, "Unknown class name");
      node0.isBreak();
      Node node2 = Node.newString("Named type with empty name component", 1024, 37);
      node2.isNot();
      HashSet<String> hashSet0 = new HashSet<String>();
      node2.isAssign();
      node1.isTrue();
      Node.mergeLineCharNo(12, (-1303));
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(48, "", 16, 47);
      Node node2 = new Node(29);
      node0.isEquivalentTo(node2, false, true, true);
      node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isNE();
      node3.setLineno(718);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isTry();
      node0.isHook();
      node0.isCast();
      Node node1 = Node.newNumber((double) 52, 1628, (-420));
      node1.isNumber();
      node1.isDo();
      node0.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4KL|g");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "d{Uk${MH";
      Node node0 = Node.newString(4095, "d{Uk${MH");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node1 = new Node(130, node0);
      Node node2 = new Node(4212, node1, 42, 50);
      Node node3 = node1.useSourceInfoFrom(node2);
      node3.addChildrenToFront(node2);
      node2.cloneNode();
      Node node4 = null;
//      try {
        node4 = new Node(117, node2, node1, node0, node2, 4, 4095);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "qeM,J/VKE9u[c";
      int int0 = 850;
      int int1 = 117;
      Node[] nodeArray0 = new Node[7];
      Node node0 = new Node(850, 850, 2508);
      Node node1 = new Node(117, node0, node0);
      Node node2 = new Node(2508, node1);
      nodeArray0[0] = node2;
      Node node3 = null;
//      try {
        node3 = new Node(97, node0, (-1308), 36);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("first new child has existing parent");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isHook();
      node1.isCast();
      node2.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isWith();
      node1.isEquivalentTo(node0, false, false, true);
      node2.getAncestors();
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      node3.isDelProp();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.getStaticSourceFile();
      node4.isDo();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.addSuppression("g[5^0$Kfs");
      node0.getInputId();
      node0.isTypeOf();
      node0.setSourceEncodedPosition(517);
//      try { 
        node0.setString("ZQ3UF._;.;ugqb{#9S");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NUMBER 949.3390976 0 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node0.setType((-1821));
      Node node1 = new Node(52, node0, node0, node0, node0);
      node1.isOnlyModifiesThisCall();
      node1.setJSType((JSType) null);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Node node0 = Node.newString("}4l#oxef%>)w9lo1c", 0, 90);
      node0.toString();
      node0.isVar();
      node0.isNE();
      node0.isDec();
      // Undeclared exception!
//      try { 
        node0.checkTreeTypeAwareEqualsImpl((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isHook();
      node0.isNoSideEffectsCall();
      node0.isBreak();
      Node node1 = Node.newString("synthetic", 55, 2126);
      node1.isNot();
      // Undeclared exception!
//      try { 
        node1.setString((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(90);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 90);
      node0.toString(false, false, true);
      Node node1 = new Node(118, 48, 35);
      node1.useSourceInfoFromForTree(node0);
      node1.isNE();
      Node node2 = new Node(40, 3225, 36);
      node2.isStringKey();
      Node node3 = node2.useSourceInfoFrom(node0);
      node3.getInputId();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = new Node(1806);
      node0.isNE();
      node0.getJSType();
      Node node1 = Node.newString(30, "Named type with empty name component");
      node0.getChangeTime();
      Node node2 = Node.newString(1575, "kZS~(?3R>sEU}Ta/");
      node0.isDec();
      node2.getStaticSourceFile();
      node2.isInstanceOf();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      // Undeclared exception!
//      try { 
        JSType.toMaybeTemplatizedType((JSType) templateType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = new Node(39, node0, 4095, 39);
      node1.putBooleanProp(54, false);
      node1.isNoSideEffectsCall();
      node1.isLocalResultCall();
      node1.getChangeTime();
      int int0 = 1756;
      // Undeclared exception!
//      try { 
        node1.toString(false, false, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Number node not created with Node.newNumber
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = Node.newString("}4l#oxef%>)w9lo1c", 0, 90);
      node0.toString();
      node0.isVar();
      node0.isNE();
      node0.getJSType();
      Node node1 = new Node((-563), 190, 130);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isNE();
      node1.isStringKey();
      node2.useSourceInfoFrom(node0);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Node node0 = Node.newNumber((-3180.775637088068));
      node0.isFalse();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.common.collect.ImmutableEnumSet");
      node_FileLevelJsDocBuilder0.append("<o+T@MVB%)x9&eh[7");
      node_FileLevelJsDocBuilder0.append("<o+T@MVB%)x9&eh[7");
      node_FileLevelJsDocBuilder0.append("hU");
      node0.isNot();
      node0.getChildCount();
      node0.isGetProp();
      // Undeclared exception!
//      try { 
        node0.detachFromParent();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Node node0 = Node.newString(155, "jE2");
      node0.isDec();
      node0.getLength();
      node0.children();
      node0.isVoid();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0, 1, 42);
      // Undeclared exception!
//      try { 
        node1.setString("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 1
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      Node node1 = Node.newString("l(~,Ry3|1lTLe?");
      node0.isEquivalentTo(node1, false, false, false);
      node1.getAncestors();
      Node node2 = new Node(32, node0, node0, 0, 2);
      node2.isObjectLit();
      node2.getIndexOfChild(node1);
      node0.isEmpty();
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(0, 46, 56);
      node1.isReturn();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node2 = Node.newString("sy[nthetic", (-519), 57);
      node2.isAdd();
      node0.isNull();
      node1.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-360), nodeArray0);
      Node node1 = Node.newNumber((double) (-360));
      node1.setWasEmptyNode(false);
      node1.isQuotedString();
      Node node2 = new Node((-554), node0, node0, node0, 52, 85);
      node2.isGetterDef();
      node0.isScript();
      node1.getLength();
      node2.isComma();
      Node node3 = node1.useSourceInfoFrom(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node3.setJSDocInfo(jSDocInfo0);
      node1.detachChildren();
      node1.toString(false, false, true);
      // Undeclared exception!
//      try { 
        node3.getChildBefore(node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Node node0 = Node.newString("a3`C#MdQUa]ND", 2929, (-2077));
      Node node1 = new Node(1499, node0, node0, node0, node0);
      node0.getString();
      node0.setLength(8232);
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
//      try { 
        node0.checkTreeEquals(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 1499
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node.newNumber((double) 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = Node.newString("Object#Element");
      node1.isEquivalentTo(node3, false, true, false);
      node3.getAncestors();
      node2.useSourceInfoIfMissingFrom(node3);
      Node node4 = node2.clonePropsFrom(node3);
      node3.setOptionalArg(false);
      node4.isOnlyModifiesThisCall();
      Node.newString(8, "c?9.ZtF^Y)YCp1xr", (-3304), 50);
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node.newNumber((double) 1806);
      Node node0 = new Node(709, 56, 46);
      Node node1 = null;
//      try {
        node1 = new Node(8, (Node[]) null, 36, 39);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getAncestors();
      node0.isVoid();
      node0.isFalse();
      node0.isCatch();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // STRING  0 is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isNumber();
      node0.isFunction();
      node1.getChildCount();
      node0.getLastSibling();
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags((-2168));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ASSIGN_LSH
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Node node0 = Node.newString("synthe\"ic");
      node0.isHook();
      node0.isCast();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      Node node2 = Node.newString("synthe\"ic", (-5166), 57);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node2.putProp(8, jSDocInfo0);
      node1.addChildrenToFront(node2);
      node0.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node0.addChildrenToBack(node1);
      node0.getSourceFileName();
      node1.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      node2.checkTreeEquals(node0);
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isNew();
      node3.getInputId();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node already has a parent.");
      node1.isString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isVarArgs();
      node3.getAncestors();
      node1.siblings();
      node0.getJSType();
      // Undeclared exception!
//      try { 
        node3.getAncestor((-1884));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = new Node(42);
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = new Node(4095, node0, node0, node0, 8, 4);
      node1.setLength(48);
      node0.isStringKey();
      Node node2 = Node.newString(52, "ASSIGN_RSH");
      node2.detachChildren();
      node0.getJSType();
      node2.isTry();
      node0.isName();
      node0.removeFirstChild();
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Node node0 = new Node(90);
      node0.setWasEmptyNode(true);
      node0.isAssignAdd();
      Node node1 = new Node(55, node0, node0, node0, node0, 52, 30);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = new Node(0, node1, (-1730), 2);
      node2.getSourcePosition();
      Node node3 = new Node(47);
      node3.useSourceInfoIfMissingFrom(node0);
      node0.cloneNode();
      node3.isSetterDef();
      Node.newString("CharMatcher.NONE");
      Node node4 = null;
//      try {
        node4 = new Node(29, node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createTemplateType("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      node0.getProp(0);
      node0.putProp(1806, (Object) null);
      // Undeclared exception!
//      try { 
        ImmutableList.of((JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Node node0 = new Node(107);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.getAncestors();
      Node node2 = new Node(2, node1, node0, 43, 2369);
      node2.useSourceInfoIfMissingFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      node2.isNoSideEffectsCall();
      Node node3 = null;
//      try {
        node3 = new Node(48, node0, node1, 42, 302);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(1806, node0, node0);
      node1.isWith();
      node1.isGetProp();
      node0.isIn();
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node((-2981), node1, node1, node1, 1236, 2);
      node1.getChildBefore(node0);
      node0.getDouble();
      node2.isIf();
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createTemplateType("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      node1.putProp(9, locale_Category0);
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(15, node0, node0);
      node2.isFunction();
      node3.getChildCount();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      node_SideEffectFlags0.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry1.createTemplateType("Object#Key");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayDeque<UnknownType> arrayDeque0 = new ArrayDeque<UnknownType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayDeque0);
      Node node0 = jSTypeRegistry2.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node((-4026), node0, node0, 2, 42);
      Node node2 = new Node((-5578), node1, 29, 49);
      node2.putProp(40, "unexpected prop id ");
      Node node3 = node0.clonePropsFrom(node2);
      Node node4 = Node.newString(31, "Unknown class name", 309, 55);
      Node node5 = null;
//      try {
        node5 = new Node((-1810), node4, node3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // second new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isHook();
      node0.isEquivalentToTyped(node0);
      node0.isBreak();
      Node node1 = new Node(8, node0);
      node1.isNot();
      node1.getDirectives();
      node1.isAssign();
      node0.isTrue();
      Node.mergeLineCharNo(50, 2767);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = Node.newString(155, "jE2");
      node0.isDec();
      node0.setString("iS");
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = Node.newString("position (");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isHook();
      node0.isCast();
      Node node3 = new Node(16, node0, node0, node0, 57, 8);
      node1.addChildToBack(node3);
      node3.toString();
      Node node4 = Node.newString(16, "Object#Key");
      node4.isTrue();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node.newNumber((double) 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = Node.newString("Object#Element");
      node1.isEquivalentTo(node3, false, true, false);
      node3.getAncestors();
      Node node4 = node2.useSourceInfoIfMissingFrom(node3);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      node4.isDelProp();
      node2.getStaticSourceFile();
      node1.isDo();
      node3.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node node3 = Node.newNumber((double) 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node4 = new Node(1137, node3, node2, node1, node1, 1, 8);
      Node node5 = node4.clonePropsFrom(node2);
      node4.setOptionalArg(false);
      // Undeclared exception!
//      try { 
        node2.checkTreeEquals(node5);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 1137
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(1806, node0, node0);
      node1.isWith();
      node1.isDec();
      node0.isIn();
      node0.isOnlyModifiesThisCall();
      Node node2 = new Node((-2981), node1, node1, node1, 1236, 2);
      node1.getChildBefore(node0);
      node0.getCharno();
      node2.isCase();
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node1.cloneNode();
      node0.isDebugger();
      Node node2 = Node.newString("");
      Node node3 = new Node(56, node0, node0);
      node3.addChildToFront(node2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node3);
      node3.isGetProp();
      node2.getQualifiedName();
      node1.getBooleanProp((-1012));
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(103, (-1697), 35);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isNE();
      node2.isStringKey();
      node2.useSourceInfoFrom(node0);
      node1.getInputId();
      node2.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = new Node(965, 42, 42);
      Node node1 = Node.newString("");
      node1.cloneNode();
      Node.newString("");
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
//      try { 
        node0.useSourceInfoFromForTree((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = Node.newString("synthetic");
      node1.isDebugger();
      Node node2 = new Node(0);
      Node node3 = Node.newString("synthetic");
      node0.cloneNode();
      Node.newString("synthetic");
      // Undeclared exception!
//      try { 
        node3.setSideEffectFlags((Node.SideEffectFlags) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(2, node0, node0);
      node0.getLength();
      Node node2 = Node.newNumber((double) 46, 48, 247);
      node1.isNumber();
      node2.isFunction();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isHook();
      node0.isComma();
      node0.isBreak();
      Node node1 = Node.newString("synthetic", 55, 2126);
      node1.isNot();
      node1.getDirectives();
      node1.isAssign();
      node0.isTrue();
      Node.mergeLineCharNo(50, 2767);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node node2 = Node.newNumber((double) 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.newString("Object#Element");
      Node node3 = Node.newString((-837), "wLX1yHRFeN");
      Node node4 = Node.newString("Object#Element");
      node2.isDec();
      Node node5 = Node.newNumber((double) 16);
      node5.isIn();
      Node node6 = new Node(127, node3);
      node6.hasChildren();
      Node node7 = new Node(56, node5, node5, node5, 47, (-1186));
      // Undeclared exception!
//      try { 
        node4.getChildBefore(node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      Node node1 = new Node(2, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node0.hasChildren();
      node1.isAnd();
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      InputId inputId0 = new InputId("uk=G&fIdSrfd");
      node0.setInputId(inputId0);
      node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      Node node0 = Node.newString(83, "LReSZ`@m?kBe8l /(n", 90, (-7296));
      Node node1 = new Node(29, node0, 57, 12);
      node1.setSourceFileForTesting("LReSZ`@m?kBe8l /(n");
      Node node2 = null;
//      try {
        node2 = new Node(29, node1, node1, node0, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = Node.newString("Not declared as a constructor", (-1389), 4095);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(1988, nodeArray0);
      JSType.toMaybeFunctionType(jSTypeArray0[1]);
      templateTypeMapReplacer0.caseAllType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a type name", node1, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getTemplateTypes();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node1.getStaticSourceFile();
      node1.isDo();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      Node node1 = Node.newString("synthetic");
      node1.mayMutateGlobalStateOrThrow();
      node0.isCast();
      node1.isObjectLit();
      node0.getIndexOfChild(node1);
      node0.isEmpty();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node node2 = new Node(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.useSourceInfoFromForTree(node1);
      String string0 = "I";
      Node node3 = Node.newString("I", (-1951), 48);
      // Undeclared exception!
//      try { 
        node3.addChildrenToFront(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node1.cloneNode();
      node0.isDebugger();
      Node node2 = Node.newString("");
      Node node3 = new Node(56, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node3);
      node3.isGetProp();
      node2.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 62);
      node0.isSwitch();
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.setChangeTime(29);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
//      try { 
        node1.replaceChildAfter(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = Node.newString("Not declared as a constructor", (-1389), 4095);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node2 = new Node(1988, nodeArray0);
      JSType.toMaybeFunctionType(jSTypeArray0[1]);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a type name", node1, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getTemplateTypes();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      node1.detachChildren();
      node2.isCatch();
      node0.cloneNode();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(316);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 316);
      Node node1 = new Node((-896), node0, 102, 47);
      node1.getSourcePosition();
      Node node2 = new Node(4);
      node2.cloneNode();
      node0.isSetterDef();
      Node node3 = Node.newString("*L;");
      Node node4 = new Node(2, node2, node1);
      Node node5 = new Node((-78));
      node4.isFromExterns();
      node5.getJsDocBuilderForNode();
      // Undeclared exception!
//      try { 
        node3.detachFromParent();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isArrayLit();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.detachChildren();
      node0.getJSType();
      node0.getJsDocBuilderForNode();
      node0.getAncestors();
      Node node1 = new Node(1, node0, node0, node0);
      Node node2 = null;
//      try {
        node2 = new Node(0, node0, node1, node1, 148, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Node node0 = Node.newString(8192, "FUNCTIONPROTOTYPE");
      Node node1 = Node.newString("FUNCTIONPROTOTYPE");
      node1.isHook();
      node0.isCast();
      Node.newNumber((double) 36, (-311), (-965));
      node1.isNumber();
      node0.isFunction();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      String string0 = "Gdr}";
      Node node0 = Node.newString(98, "Gdr}");
      node0.isEquivalentTo(node0);
      node0.isTry();
      Node node1 = Node.newString("Gdr}");
      node1.getInputId();
      node0.setSourceEncodedPosition(1);
      node1.isOnlyModifiesThisCall();
      node1.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node1.addChildrenToBack(node1);
      Node.newNumber(6196.77988458978);
      // Undeclared exception!
//      try { 
        node1.getChildBefore(node0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // node is not a child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node node0 = new Node(133);
      node0.getAncestors();
      Node node1 = new Node(37, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.getBooleanProp(31);
      // Undeclared exception!
//      try { 
        node0.addChildBefore(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node0.addChildToBack(node1);
      node1.isArrayLit();
      Node node2 = Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node node3 = new Node(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.setLastGeneration(false);
      Node node5 = Node.newString("Object#Element");
      node4.isEquivalentTo(node5, false, true, false);
      node5.getAncestors();
      node2.useSourceInfoIfMissingFrom(node5);
      node3.useSourceInfoIfMissingFromForTree(node0);
      node2.clonePropsFrom(node5);
      node5.setOptionalArg(false);
      // Undeclared exception!
//      try { 
        node5.checkTreeEquals(node0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // -5050
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getBooleanProp(148);
      node0.isDefaultCase();
      node0.getJsDocBuilderForNode();
      node0.getIntProp(1476);
      node0.isWhile();
//      try { 
        node0.setDouble(1089.285535);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // STRING  0 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isQuotedString();
      node0.setWasEmptyNode(false);
      node0.isStringKey();
      node0.getSideEffectFlags();
      node0.isLabelName();
//      try { 
        node0.getString();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NUMBER 0.7 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      node0.isDo();
      node0.getAncestors();
      Node node1 = new Node(42, node0, node0, node0, node0, 4, 52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(51, 1, 1882);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      Node node4 = new Node(48, (-4544), 186);
      Node node5 = new Node((-627), node2, node4, node3, node1, (-1540), 64);
      node1.hasMoreThanOneChild();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isTry();
      node0.getStaticSourceFile();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.detachChildren();
      node0.getJSType();
      node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("OR=");
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      Node node2 = node1.cloneNode();
      Node.newString("");
      node1.detachChildren();
      node2.getJSType();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("hU");
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 18;
      Node node0 = Node.newString("fNaD};vsa1fqXYZ9", 18, (-1584));
      // Undeclared exception!
//      try { 
        node0.getAncestor((-1584));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      Node node2 = Node.newNumber((-656.79387384898), 31, 31);
      node2.isNumber();
      node0.isFunction();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      Node node1 = Node.newString("l(~,Ry3|1lTLe?");
      node0.isEquivalentTo(node1, false, false, false);
      node1.getAncestors();
      Node node2 = new Node(32, node0, node0, 0, 2);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node3.isNoSideEffectsCall();
      node0.isAssignAdd();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = Node.newString("synthetic");
      node0.isCast();
      Node node1 = new Node(57, 36, 2);
      Node node2 = Node.newString("synthetic", (-5166), 57);
      node0.addChildrenToFront(node2);
      node2.isEquivalentToShallow(node0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node2, node2);
      node1.addChildrenToBack(node1);
      node1.getLength();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Node node0 = new Node(90, 90, 90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      node0.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.isEmpty();
      node0.getStaticSourceFile();
      Node node2 = new Node(51, node0, node1);
      node2.isFromExterns();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node1.isArrayLit();
      // Undeclared exception!
//      try { 
        node0.setQuotedString();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // not a StringNode
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 45);
      node0.isGetterDef();
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.setChangeTime(29);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
//      try { 
        node1.replaceChildAfter(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = mock(UnknownType.class, new ViolatedAssumptionAnswer());
      ImmutableList<UnknownType> immutableList0 = ImmutableList.of(unknownType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getChangeTime();
      Node node1 = Node.newString("Object#Element", 55, 47);
      node1.isAdd();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.addSuppression("g[5^0$Kfs");
      node0.getInputId();
      node0.isTypeOf();
      node0.setLength(517);
      node0.hasChildren();
      Node node1 = Node.newString(141, "l(~,Ry3|1lTLe?");
      node1.checkTreeEqualsImpl(node0);
      node0.detachChildren();
      node0.getJSType();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("l(~,Ry3|1lTLe?");
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      node2.checkTreeEquals(node0);
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isNew();
      node3.getInputId();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The new child node already has a parent.");
      node0.getParent();
      node2.isScript();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) node3;
      // Undeclared exception!
//      try { 
        SimpleErrorReporter.getMessage("ZQ3UF._;.;ugqb{#9S", objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message resource found for message property ZQ3UF._;.;ugqb{#9S
//         //
//         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isQuotedString();
      node0.setWasEmptyNode(false);
      node0.isStringKey();
      node0.getSideEffectFlags();
      node0.isLabelName();
      node0.addSuppression((String) null);
      node0.isIf();
      Node node1 = new Node(4095, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      // Undeclared exception!
//      try { 
        node0.clonePropsFrom(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Node has existing properties.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = new Node(63);
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.putBooleanProp(48, false);
      node0.isNoSideEffectsCall();
      node0.isTypeOf();
      node0.getParent();
      Node node1 = new Node(30);
      node1.isBlock();
      node0.isRegExp();
      Node node2 = new Node(102, 8, 31);
      Node node3 = Node.newString(155, "^*9ws)h@CDSKzm\"", 52, 13);
      node2.useSourceInfoFromForTree(node0);
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Node node0 = Node.newString("synthetic");
      node0.isHook();
      Node node1 = new Node(57, 36, 2);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.addChildrenToFront(node1);
      node0.getAncestors();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("synthetic", true);
      simpleSourceFile0.getLineOffset(1);
      simpleSourceFile0.getLineOffset(50);
      node0.getString();
      node0.setStaticSourceFile(simpleSourceFile0);
      node1.isNoSideEffectsCall();
      node1.getLength();
      node2.isComma();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Node node0 = Node.newString(152, "??=L", 105, 152);
      Node node1 = new Node(152, node0, node0);
      node0.addChildToBack(node1);
      node1.isInc();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "??=L");
      node1.removeProp((-716));
      node0.removeChild(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("H[=H0g.oj#Nq", false);
      node1.setWasEmptyNode(false);
      simpleSourceFile0.getLineOffset(1805);
      simpleSourceFile0.getLineOffset(53);
      simpleSourceFile0.getLineOffset(32);
      simpleSourceFile0.getLineOffset(1);
      node0.getString();
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isNoSideEffectsCall();
      node1.getLength();
      node1.isComma();
      node0.isBreak();
      node0.isUnscopedQualifiedName();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Node node0 = new Node(90);
      node0.isOptionalArg();
      Node node1 = Node.newString("synthetic");
      node1.mayMutateGlobalStateOrThrow();
      node1.isCast();
      node0.isObjectLit();
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(1666, node0, node0, node0);
      // Undeclared exception!
//      try { 
        node1.setSideEffectFlags((Node.SideEffectFlags) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = new Node(1425, 1425, 1425);
      node0.getQualifiedName();
      node0.removeProp(1425);
      node0.removeFirstChild();
      node0.getIntProp(1425);
      node0.setWasEmptyNode(false);
      node0.isStringKey();
      node0.getSideEffectFlags();
      node0.isLabelName();
      node0.addSuppression("");
      node0.isIf();
      // Undeclared exception!
//      try { 
        node0.clonePropsFrom((Node) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Node has existing properties.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Node node0 = Node.newString(152, "??=L", 105, 152);
      Node node1 = new Node(152, node0, node0);
      node0.addChildToBack(node1);
      node1.isInc();
      node1.removeProp((-716));
      node0.removeChild(node1);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("H[=H0g.oj#Nq", false);
      node1.setWasEmptyNode(false);
      simpleSourceFile0.getLineOffset(1805);
      simpleSourceFile0.getLineOffset(53);
      simpleSourceFile0.getLineOffset(32);
      simpleSourceFile0.getLineOffset(1);
      node0.getString();
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isNoSideEffectsCall();
      node1.getLength();
      node1.isComma();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = Node.newString("synthetic");
      node1.isDebugger();
      node1.isCatch();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
//      try { 
        node1.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // STRING synthetic is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = new Node(63);
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = new Node(51);
      // Undeclared exception!
//      try { 
        node0.addChildAfter(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Node node0 = Node.newString("synthetic");
      node0.isHook();
      node0.isCast();
      Node node1 = new Node(57, 36, 2);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = Node.newString("synthetic", (-5166), 57);
      node2.addChildrenToFront(node3);
      node0.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node3);
      node1.addChildrenToBack(node2);
      node2.getLength();
      node3.isComma();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-999), nodeArray0);
      node0.isOnlyModifiesThisCall();
      node0.isNoSideEffectsCall();
      node0.isAssignAdd();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      Node node1 = new Node(101, node0, (-4930), (-4930));
      node1.getSourcePosition();
      Node node2 = new Node(39);
      Node node3 = node1.cloneNode();
      node3.isSetterDef();
      // Undeclared exception!
//      try { 
        Node.newString((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = Node.newString("synthetic");
      node0.setCharno(2393);
      node0.isDelProp();
      node0.getStaticSourceFile();
      node0.isDo();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 45);
      node0.isDefaultCase();
      Node node1 = new Node((-30), node0, node0, node0, node0);
      node1.setChangeTime(29);
      node0.addChildrenToBack(node1);
      node1.setChangeTime(38);
      Node node2 = node0.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
//      try { 
        node2.replaceChildAfter(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      node0.isWith();
      node0.isExprResult();
      // Undeclared exception!
//      try { 
        Node.newString(1, (String) null, (-2620), 36);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = new Node(965);
      Node node1 = Node.newString("");
      node1.putIntProp(39, 593);
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node1.wasEmptyNode();
      Node.newString(53, "");
      node1.isDec();
      node1.getStaticSourceFile();
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = Node.newString("position (");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isHook();
      node0.isCast();
      node0.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isWith();
      node0.getChangeTime();
      Node node3 = Node.newString(57, "Object#Key");
      node2.useSourceInfoFromForTree(node3);
      Node node4 = Node.newString(1525, "Object#Element");
      node4.isFunction();
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.PrototypeObjectType");
      node1.isHook();
      node1.isCast();
      Node node2 = new Node(12, 2118, 415);
      node0.useSourceInfoFromForTree(node1);
      Node node3 = new Node(8, node0, node2, node1, node0, (-142), (-1763));
      node0.hasMoreThanOneChild();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(1666, node0, node0, node0);
      node0.addChildToFront(node1);
      node0.isHook();
      node0.isCast();
      Node node2 = new Node(1713, (-1917), 30);
      Node node3 = new Node((-3945), (-812), 53);
      Node node4 = node2.useSourceInfoFromForTree(node3);
      node4.detachChildren();
      Node node5 = null;
//      try {
        node5 = new Node(112, node0, node4, node4, node0, 124, 8192);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 45);
      node0.isDefaultCase();
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.setChangeTime(29);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
//      try { 
        node1.replaceChildAfter(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Node node0 = Node.newString("JiX)dg Zo~[pH7H|8e6", 102, 41);
      Node node1 = new Node(102, node0, node0, node0, node0);
      node0.isFromExterns();
      node1.isEquivalentToShallow(node0);
      Node.newString(55, "not a StringNode", 39, 57);
      // Undeclared exception!
//      try { 
        node1.addChildToFront(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.putBooleanProp((-1389), true);
      node0.isNoSideEffectsCall();
      node1.isLocalResultCall();
      node1.getSourceFileName();
      node0.getStaticSourceFile();
      Node node2 = new Node(49, node0);
      node2.setStaticSourceFile((StaticSourceFile) null);
      node2.isEmpty();
      node0.getStaticSourceFile();
      node0.isFromExterns();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1302, (-1179));
      Node node1 = new Node(63, node0, 1302, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isTypeOf();
      node0.getParent();
      node0.isBlock();
      node2.isRegExp();
      Node node4 = new Node((-730), 15, 47);
      Node node5 = Node.newString(52, "x$F^", 478, 1560);
      node2.useSourceInfoFromForTree(node5);
      node3.isFunction();
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 56);
      // Undeclared exception!
//      try { 
        node0.addChildrenAfter(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      Node node2 = new Node(57, (-704), 2533);
      node1.useSourceInfoFromForTree(node2);
      node0.isFunction();
      node2.getChildCount();
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isQuotedString();
      Node node1 = new Node(12, node0, node0, node0, 112, 53);
      node0.addChildToBack(node1);
      node0.toString();
      node0.isTrue();
      node1.isCast();
      node0.isEquivalentToTyped(node1);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      String string0 = "g[5^0$Kfs";
      node0.addSuppression("g[5^0$Kfs");
      node0.getInputId();
      node0.isTypeOf();
      Node node1 = new Node(1, node0, node0, node0, node0);
      node1.getParent();
      Node node2 = null;
//      try {
        node2 = new Node((-141), (Node) null, 2, 461845907);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Node node0 = new Node(965);
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node2.isWith();
      node0.isExprResult();
      Node node3 = null;
//      try {
        node3 = new Node(57, node1, node0, node0, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = Node.newNumber(2024.0);
      Node node1 = new Node((-5050), node0, node0, node0, node0);
      node1.isArrayLit();
      Node.newString(29, "wLX1yHRFeN", 15, 38);
      Node node2 = new Node(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jSTypeRegistry0.setLastGeneration(false);
      Node.newString("Object#Element");
      Node node3 = new Node(3000, 15, 155);
      Node node4 = null;
//      try {
        node4 = new Node(838, node3, node0, (Node) null, node1, 29, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      Node node2 = new Node(57, (-704), 2533);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      Node node4 = new Node(4095, node1, node0, node1, 36, 55);
      node4.isEquivalentTo(node3, false, false, false);
      node0.getAncestors();
      Node node5 = node4.useSourceInfoIfMissingFrom(node2);
      Node node6 = node4.useSourceInfoIfMissingFromForTree(node5);
      Node node7 = node3.clonePropsFrom(node0);
      node6.setOptionalArg(false);
      node4.checkTreeEquals(node5);
      node7.isOnlyModifiesThisCall();
      Node.newString(53, "c?9.ZtF^Y)YCp1xr", 128, 2813);
      node3.isLabel();
      Node.newString("unexpected prop id ");
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Node node0 = Node.newNumber(0.7);
      node0.isQuotedString();
      Node node1 = new Node(12, node0, node0, node0, 112, 53);
      node0.addChildToBack(node1);
      node0.toString();
      node0.isTrue();
      // Undeclared exception!
//      try { 
        node0.cloneTree();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node node0 = Node.newString("}4l#oxef%>)w9lo1c", 0, 90);
      node0.toString();
      node0.isVar();
      node0.isNE();
      node0.getJSType();
      Node node1 = Node.newString(15, "Not declared as a constructor");
      Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1");
      node0.isDec();
      node0.isIn();
      node1.hasChildren();
      Node node2 = new Node(54, node0, node1, node0, 2, 38);
      node2.getCharno();
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      Node node2 = new Node((-4208), node0, node1);
      node2.isWith();
      node1.getChangeTime();
      node0.clonePropsFrom(node2);
      // Undeclared exception!
//      try { 
        node1.checkTreeEquals(node2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // -4208
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(103, (-1697), 35);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isNE();
      node2.isStringKey();
      node2.useSourceInfoFrom(node0);
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1302, (-1179));
      Node node1 = new Node(63, node0, 1302, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isTypeOf();
      Node node4 = node0.getParent();
      node0.isBlock();
      node2.isRegExp();
      Node.newString(105, "CONTINUE", 47, 114);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node4;
      nodeArray0[1] = node2;
      nodeArray0[2] = node3;
      nodeArray0[3] = node3;
      nodeArray0[4] = node0;
      node0.mayMutateGlobalStateOrThrow();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node3);
      node3.isName();
      node4.getBooleanProp(1480);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(9);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      Node node2 = new Node(57, (-704), 2533);
      node1.useSourceInfoFromForTree(node2);
      Node node3 = new Node((-1575), node2, node0, node0, node1, 118, 147);
      node3.hasMoreThanOneChild();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(48, (-1179));
      Node node1 = new Node(63, node0, 49, 1073741824);
      node0.isLocalResultCall();
      node0.isNew();
      node0.getInputId();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) node0;
      // Undeclared exception!
//      try { 
        SimpleErrorReporter.getMessage("ZQ3UF._;.;ugqb{#9S", objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message resource found for message property ZQ3UF._;.;ugqb{#9S
//         //
//         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(48, "", 16, 47);
      Node node2 = new Node(29);
      node0.isEquivalentTo(node2, false, true, true);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isNE();
      node1.getJSType();
      node0.isBlock();
      node2.isRegExp();
      node3.removeProp((-2455));
      node0.getAncestor(55);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.toString();
      node0.isVar();
      node0.putIntProp(0, 0);
      Node node1 = new Node(50, node0, 40, 114);
      node0.detachFromParent();
      Node node2 = Node.newNumber((double) 4095);
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, 4);
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      Node.newNumber((double) 52);
      node2.isContinue();
      node1.isGetterDef();
      node2.isIn();
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Node node0 = Node.newString("o");
      Node node1 = new Node(40, node0);
      Node node2 = null;
//      try {
        node2 = new Node(40, node1, node0, 415, (-2148));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // second new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("EHp-D&;vuG+1u", "EHp-D&;vuG+1u", 33, 6);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("W?=h#4yOrUzHFDW", 509, (-384));
      node0.isAdd();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.addSuppression("g[5^0$Kfs");
      node0.getInputId();
      node0.isTypeOf();
      node0.setLength(517);
      Node node1 = new Node(32, 43, 118);
      Node node2 = new Node(51, node1, node0);
      Node node3 = node2.removeChildren();
      Node node4 = node1.useSourceInfoFromForTree(node3);
      Node node5 = null;
//      try {
        node5 = new Node(36, node4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // new child has existing sibling
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isUnscopedQualifiedName();
      node0.getSourceFileName();
      node0.putBooleanProp((-1319), false);
      node0.isNoSideEffectsCall();
      node0.isLocalResultCall();
      node0.getSourceFileName();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isEmpty();
      node0.getStaticSourceFile();
      node0.isFromExterns();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getAncestors();
      Node node1 = Node.newString(52, "", (-2302), (-166));
      Node node2 = new Node(50);
      node1.isEquivalentTo(node2, true, true, true);
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node2.useSourceInfoIfMissingFromForTree(node3);
      Node.newString(36, "");
      node2.isDec();
      node3.getStaticSourceFile();
      node3.isDo();
      node2.getLastChild();
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.toString();
      node0.isVar();
      node0.isNE();
      node0.getJSType();
      Node node1 = Node.newString(43, "com.google.javascript.rhino.Node$AncestorIterable$1");
      Node.newString("STRING  0");
      node0.isDec();
      node0.isIn();
      node1.hasChildren();
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      node0.isDo();
      node0.getAncestors();
      Node node1 = new Node(42, node0, node0, node0, node0, 4, 52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.getAncestors();
      Node node2 = null;
//      try {
        node2 = new Node(1, node1, node1, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Node node0 = Node.newString(98, "Gdr}");
      node0.isEquivalentTo(node0);
      node0.isTry();
      Node node1 = Node.newString("Gdr}");
      node1.getInputId();
      Node node2 = new Node(2, 4095, 2);
      node2.isOnlyModifiesThisCall();
      node1.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node2.addChildrenToBack(node1);
      node2.getLength();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getAncestors();
      node0.isVoid();
      node0.isNE();
      node0.isWith();
      node0.mayMutateGlobalStateOrThrow();
      node0.isLabelName();
      node0.getProp(5082);
      node0.isBlock();
      node0.isRegExp();
      node0.isName();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      Node node1 = Node.newString("l(~,Ry3|1lTLe?");
      node0.isEquivalentTo(node1, false, false, false);
      node1.getAncestors();
      Node node2 = new Node(32, node0, node0, 0, 2);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.isAnd();
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType(",quX_A");
      node3.putProp((-3176), templateType0);
      Node node4 = node1.clonePropsFrom(node2);
      Node node5 = new Node(263, node2, node1);
      // Undeclared exception!
//      try { 
        node5.checkTreeEquals(node4);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 263
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Node node0 = new Node(602);
      Node node1 = new Node(55);
      node1.setLineno(3314);
      // Undeclared exception!
//      try { 
        node0.removeChildAfter(node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = new Node(155);
      Node node1 = Node.newString("position (");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.isHook();
      node0.isCast();
      node0.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node1.isWith();
      node0.getChangeTime();
      Node node3 = Node.newString(57, "Object#Key");
      node3.isDec();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = new Node((-2942), (-5048), (-5048));
      Node node1 = Node.newString("JhanoH=");
      Node node2 = node0.cloneNode();
      node1.isDebugger();
      Node.newString("JhanoH=");
      Node node3 = new Node(8, node0, node2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node1.isName();
      Node node4 = null;
//      try {
        node4 = new Node(1653, node1, node0, node3, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      Node node0 = Node.newString(152, "??=L", 105, 83);
      Node node1 = new Node(152, node0, node0);
      node0.addChildToBack(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isInc();
      node1.removeProp((-716));
      node0.isReturn();
      node1.isHook();
      int int0 = Node.OPT_ARG_NAME;
      node1.getAncestors();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // DEBUGGER ??=L 105 is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = Node.newNumber(1806.0);
      Node node1 = Node.newNumber((double) 36, 0, 49);
      node0.getChangeTime();
      node0.mayMutateGlobalStateOrThrow();
      node0.setType(4095);
      Node.extractLineno(46);
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("");
      node0.isParamList();
      node2.isCall();
      node1.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
//      try { 
        SimpleErrorReporter.getMessage("fLmx0:GB,nCrN", (Object[]) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message resource found for message property fLmx0:GB,nCrN
//         //
//         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(1806, node0, node0);
      node1.isWith();
      node0.getChangeTime();
      Node node2 = Node.newString(40, "");
      node1.isDec();
      node0.getStaticSourceFile();
      node0.isDo();
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node2);
      node_NodeMismatch0.equals(node_SideEffectFlags2);
      node1.setCharno(101);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString("hU");
      node0.isEquivalentTo(node1, true, false, false);
      node0.getAncestors();
      Node node2 = new Node(43, node1, node1, 1152, 47);
      node2.useSourceInfoIfMissingFromForTree(node1);
      node2.clonePropsFrom(node1);
      Node node3 = null;
//      try {
        node3 = new Node(52, (Node) null, node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      node0.isArrayLit();
      Node node1 = Node.newString(101, ".YBh+ICI@q]", 31, 30);
      node0.getSourcePosition();
      Node node2 = new Node(43);
      Node node3 = node2.cloneNode();
      node2.isSetterDef();
      Node node4 = Node.newString("8");
      Node node5 = new Node(1347, node1, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node4);
//      try { 
        node3.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // FALSE is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Node node0 = new Node(965, 42, 965);
      Node node1 = Node.newString(31, "5", 126, 126);
      node0.getSourcePosition();
      Node node2 = new Node(54);
      Node node3 = node1.cloneNode();
      node1.isSetterDef();
      Node.newString("4MkV/?/E5!'M~i-H");
      Node node4 = new Node(29, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
//      try { 
        node3.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // DELPROP 5 126 is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node2.children();
      node0.setVarArgs(false);
      node2.isWith();
      Node node3 = Node.newString(31, "");
      node1.isDec();
      node1.getStaticSourceFile();
      Node node4 = Node.newString(50, "=e|H{qjY9", 30, 154);
      node3.useSourceInfoIfMissingFrom(node4);
//      try { 
        node3.setDouble(0.7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // DELPROP  30 is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(1806, node0, node0);
      node1.isWith();
      node0.getChangeTime();
      Node node2 = node1.clonePropsFrom(node0);
      node2.checkTreeEquals(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node3 = null;
//      try {
        node3 = new Node((-1946), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1302, (-1179));
      Node node1 = new Node(63, node0, 1302, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node0.getParent();
      node2.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = node3.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      // Undeclared exception!
//      try { 
        node2.setString(";sEg%<(Wb");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // unexpected prop id 1302
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((double) 56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createTemplateType("");
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      node1.putProp(9, locale_Category0);
      node0.clonePropsFrom(node1);
      Node node2 = new Node(15, node0, node0);
      Node node3 = new Node((-896), node1, node1);
      node2.isFromExterns();
      node3.isEmpty();
      // Undeclared exception!
//      try { 
        node0.toStringTree();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // unexpected prop id 9
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.toString();
      node0.isVar();
      node0.getInputId();
      node0.isNE();
      node0.getJSType();
      Node node1 = new Node(52, 12, 4);
      Node node2 = Node.newNumber(1.0);
      Node node3 = node1.useSourceInfoFromForTree(node2);
      node0.isNE();
      node3.isStringKey();
      Node.newString(47, "");
      node3.detachChildren();
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(48, "", 16, 47);
      Node node2 = new Node(29);
      node0.isEquivalentTo(node2, false, true, true);
      node0.getAncestors();
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node1);
      node4.removeChildren();
      Node node5 = node3.clonePropsFrom(node2);
      node5.isOnlyModifiesArgumentsCall();
      node3.checkTreeEquals(node2);
      node3.isName();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node node0 = new Node(90);
      String string0 = "synthetic";
      Node node1 = Node.newString("synthetic");
      node1.isReturn();
      node0.isHook();
      int int0 = Node.OPT_ARG_NAME;
      node0.getAncestors();
//      try { 
        node0.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // ASSIGN_LSH is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      Node node2 = new Node(148, 44, 4);
      node1.isBlock();
      node2.isRegExp();
      // Undeclared exception!
//      try { 
        Node.newString(959, (String) null, 54, 262144);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node.newString(48, "", 16, 47);
      Node node1 = new Node(29);
      Node node2 = new Node(155);
      node1.cloneNode();
      node1.isSetterDef();
      // Undeclared exception!
//      try { 
        Node.newString((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(48, "", 16, 47);
      Node node2 = new Node(29);
      node0.isEquivalentTo(node2, false, true, true);
      node0.getAncestors();
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      Node node4 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node5 = node3.clonePropsFrom(node2);
      node1.setOptionalArg(true);
      node3.checkTreeEquals(node2);
      node4.isOnlyModifiesThisCall();
      Node.newString(302, "Node tree inequality:\nTree1:\nSTRING  16\n\n\nTree2:\nNEG\n\n\nSubtree1: STRING  16\n\n\nSubtree2: NEG\n", 57, 0);
      node5.isLabel();
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      Node node2 = new Node(148, 44, 4);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node3.addChildrenToFront(node0);
      node2.isNE();
      node3.isStringKey();
      Node node4 = Node.newString(56, "ZQ3UF._;.;ugqb{#9S");
      node4.detachChildren();
      node2.getJSType();
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = Node.newString(8192, "FUNCTION_PROTOTYPE");
      node0.getAncestors();
      Node node1 = new Node(54, node0, node0, node0, 0, 51);
      node1.children();
      node1.setVarArgs(false);
      node0.isNoSideEffectsCall();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.detachChildren();
      node1.useSourceInfoFrom(node0);
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(48, "", 16, 47);
      Node node2 = new Node(29);
      node0.isEquivalentTo(node2, false, true, true);
      node0.getAncestors();
      Node node3 = node0.useSourceInfoIfMissingFrom(node1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node3.clonePropsFrom(node2);
      node3.checkTreeEquals(node2);
      node3.isName();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node1.cloneNode();
      node0.isDebugger();
      Node node2 = Node.newString("");
      Node node3 = new Node(56, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node3);
      node0.isName();
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getAncestors();
      node0.mayMutateArguments();
      node0.isNE();
      node0.isWith();
      node0.isTypeOf();
      node0.isLabelName();
      Object[] objectArray0 = new Object[8];
      node0.getProp(5082);
      objectArray0[0] = null;
      objectArray0[1] = (Object) "M0?ZKZT9[D~Rh1s3f7";
      objectArray0[2] = (Object) "";
      Node node1 = new Node((-2240), (-1964), 131);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isNE();
      node2.isStringKey();
      Node.newString(8, "d");
      node0.detachChildren();
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node node0 = Node.newString(152, "??=L", 105, 83);
      Node node1 = new Node(152, node0, node0);
      node0.addChildToBack(node1);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isInc();
      node1.removeProp((-716));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("H[=H0g.oj#Nq", false);
      node1.setWasEmptyNode(false);
      simpleSourceFile0.getLineOffset(1805);
      simpleSourceFile0.getLineOffset(53);
      simpleSourceFile0.getLineOffset(32);
      simpleSourceFile0.getLineOffset(1);
      node0.getString();
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isNoSideEffectsCall();
//      try { 
        node1.setString("??=L");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // DEBUGGER [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      node0.getSourceFileName();
      node0.putBooleanProp((-1331), false);
      Node node1 = new Node(31, 43, 49);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node1.setDirectives(treeSet0);
      // Undeclared exception!
//      try { 
        node0.replaceChildAfter(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node1.isDebugger();
      node0.isCast();
      node1.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
//      try { 
        node1.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // STRING synthetic is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isTry();
      node3.getInputId();
      Node node4 = node0.getParent();
      node1.cloneTree();
      node4.isOnlyModifiesThisCall();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node4, node2);
      node0.addChildrenToBack(node3);
      node4.isComma();
      node0.getBooleanProp(47);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isNew();
      node3.getInputId();
      node0.getParent();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) node3;
      // Undeclared exception!
//      try { 
        SimpleErrorReporter.getMessage("ZQ3UF._;.;ugqb{#9S", objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message resource found for message property ZQ3UF._;.;ugqb{#9S
//         //
//         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Node node0 = Node.newString(98, "Gdr}");
      node0.isLocalResultCall();
      node0.isTry();
      Node node1 = new Node(47, node0, node0, node0, node0);
      node1.getInputId();
      Node node2 = new Node(2, 4095, 2);
      node2.isOnlyModifiesThisCall();
      node1.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node2.addChildrenToBack(node1);
      node2.getLength();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.addSuppression("g[5^0$Kfs");
      node0.getInputId();
      node0.isTypeOf();
      node0.setLength(517);
      Node node1 = new Node(119, 54, (-351));
      node0.removeChildren();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isNoSideEffectsCall();
      node1.isOnlyModifiesThisCall();
      node1.removeProp(4);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      Node node2 = new Node(148, 44, 4);
      Node node3 = node0.useSourceInfoFromForTree(node1);
      node2.isNE();
      node3.isStringKey();
      Node node4 = Node.newString(56, "ZQ3UF._;.;ugqb{#9S");
      node4.detachChildren();
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      Node node1 = Node.newNumber((-1.0), 4095, 15);
      node0.isEquivalentToShallow(node1);
      node0.getSourceFileName();
      node0.getProp(3821);
      node0.setSourceEncodedPositionForTree(3821);
      Node node2 = new Node(30, node0, node0, node0, 4, 32);
      node0.isEquivalentTo(node2);
      // Undeclared exception!
//      try { 
        node2.replaceChild(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Node node0 = new Node(965, 68, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node1.getAncestors();
      Node node2 = new Node(68, node0, node0, node0);
      node2.children();
      node2.isWith();
      node0.getChangeTime();
      Node.newString(31, "(][Zl`^/Dt?_9[VH`n");
      node2.isDec();
      node2.getStaticSourceFile();
      node2.isIn();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 45);
      node0.isTrue();
      Node node1 = new Node((-30), node0, node0, node0, node0);
      node1.setSourceEncodedPositionForTree(4);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.getJsDocBuilderForNode();
      Node node2 = new Node(47);
      // Undeclared exception!
//      try { 
        node1.removeChildAfter(node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node2.children();
      node0.setVarArgs(false);
      node2.isWith();
      node0.getChangeTime();
      node1.isNot();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.toString();
      node0.isVar();
      node0.getInputId();
      node0.isNE();
      node0.getJSType();
      node0.isBlock();
      node0.isInc();
      // Undeclared exception!
//      try { 
        Node.newString(53, (String) null, 2918, (-80));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      Node node0 = Node.newString("", 15, (-875));
      node0.setSourceFileForTesting("DK51!]~L");
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Node node0 = Node.newNumber((-1530.80771319));
      // Undeclared exception!
//      try { 
        node0.removeChildAfter((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Node node0 = new Node(431);
      node0.isOnlyModifiesThisCall();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Node node0 = Node.newString(3393, "0x0?1O", 63, 3393);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("0x0?1O", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOnlyModifiesThisCall();
      node0.setQuotedString();
      // Undeclared exception!
//      try { 
        node0.toString();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 3393
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      node0.getAncestors();
      Node node1 = new Node(4095, node0, node0, node0, 8, 4);
      node1.children();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      // Undeclared exception!
//      try { 
        node0.setString("length");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 965
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Node node0 = Node.newNumber(949.3390976);
      node0.getSourceFileName();
      node0.getProp(3821);
      node0.setSourceEncodedPositionForTree(3821);
      Node node1 = new Node(30, node0, node0, node0, 4, 32);
      node0.isEquivalentTo(node1);
      // Undeclared exception!
//      try { 
        node1.replaceChild(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The new child node already has a parent.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(43, node0, node0, 42, 1);
      node1.addSuppression((String) null);
      node0.getInputId();
      node1.isTypeOf();
      node1.setLength(2);
      Node node2 = new Node(2974, 64, 54);
      node1.useSourceInfoFromForTree(node0);
      String string0 = null;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Node node0 = new Node(965, 42, 965);
      Node node1 = Node.newString(497, ":>0*3P?$aS`@&/x`@S");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node.extractCharno(40);
      node1.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isAssign();
      node1.getAncestors();
      Node node2 = new Node(40, node1, node1, node1, 32, 15);
      node2.children();
      node0.setVarArgs(false);
      Node.newString(1073741824, ":>0*3P?$aS`@&/x`@S", 63, 54);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      node0.isDo();
      node0.getAncestors();
      Node node1 = new Node(42, node0, node0, node0, node0, 4, 52);
      node1.children();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      // Undeclared exception!
//      try { 
        node0.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 965
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Node node0 = new Node((-716), 0, 0);
      Node node1 = new Node(0, node0, node0, node0);
      node1.getChildBefore(node0);
      node0.isName();
      node0.setSourceEncodedPositionForTree((-900));
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node1.getJsDocBuilderForNode();
      // Undeclared exception!
//      try { 
        node0.removeChildAfter(node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getAncestors();
      node0.isOnlyModifiesThisCall();
      node0.isGetProp();
      Node node1 = new Node(40, node0, 1321, 2);
      Node node2 = new Node(5082, node1, node1);
      node2.isNumber();
      node1.isOr();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1161));
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.extractCharno(125);
      node0.getSourceOffset();
      Node node1 = Node.newNumber(2763.2);
      node1.isSetterDef();
      Node node2 = Node.newString("R@p80ie/:,Y&dZ8Q>");
      Node node3 = new Node((-957), node2, node2);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(48, "", 16, 47);
      node0.getSourcePosition();
      Node node2 = new Node(29);
      node1.cloneNode();
      node1.isSetterDef();
      // Undeclared exception!
//      try { 
        Node.newString((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node2.children();
      node2.isWith();
      node1.isNumber();
      Node node3 = null;
//      try {
        node3 = new Node(57, node1, node0, node0, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      node1.isEquivalentTo(node0, false, false, true);
      node1.getAncestors();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node1);
      node2.setChangeTime(46);
      // Undeclared exception!
//      try { 
        node3.clonePropsFrom(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Node has existing properties.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getSourceFileName();
      node0.setSourceEncodedPositionForTree(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(node_SideEffectFlags3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 0
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = new Node(53, node0, node0, node0, 3222, 47);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      Node node2 = null;
//      try {
        node2 = new Node(0, nodeArray0, (-1179), 30);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // duplicate child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Node node0 = Node.newString(17, "no next sibling.");
      // Undeclared exception!
//      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      int int0 = 1910;
      int int1 = (-3282);
      Node node0 = null;
      Node node1 = null;
//      try {
        node1 = new Node(1910, (Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      simpleErrorReporter0.warning(".", "Object#Element", 2518, 2518);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
//      try { 
        node0.getString();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // PARAM_LIST is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      Node node0 = new Node(965, (-1823), (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, true);
      node0.getAncestors();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node4 = new Node(2954, node2, node0, node2, 1322, 56);
      node2.children();
      node4.setVarArgs(true);
      node2.isWith();
      node3.getChangeTime();
      node1.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node0.getAncestors();
      // Undeclared exception!
//      try { 
        node4.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 2954
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = new Node(50, 1, (-1179));
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.getInputId();
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node2.detachChildren();
      node1.useSourceInfoFrom(node0);
      node3.getChangeTime();
      Node node4 = null;
//      try {
        node4 = new Node((-386), node0, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isTry();
      node3.getInputId();
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node2.detachChildren();
      Node node4 = node1.useSourceInfoFrom(node0);
      node4.setVarArgs(true);
      node3.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(472);
      Node node5 = new Node(118);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node5, node4);
      // Undeclared exception!
//      try { 
        node1.addChildrenToBack(node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      Node node0 = new Node(965, 42, 42);
      Node node1 = Node.newString("");
      node0.getAncestors();
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node2.children();
      node2.isWith();
      node0.getChangeTime();
      node2.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node2.getAncestors();
      // Undeclared exception!
//      try { 
        node2.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 4095
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      Node node0 = new Node(965, 68, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node1.getAncestors();
      Node node2 = new Node(68, node0, node0, node0);
      node2.children();
      node2.isWith();
      node0.getChangeTime();
      node0.srcrefTree(node1);
      Node.newString(31, "(][Zl`^/Dt?_9[VH`n");
      node2.getJSDocInfo();
      node2.isDec();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.toString();
      node0.isVar();
      node0.getInputId();
      node0.isNE();
      node0.getJSType();
      node0.isBlock();
      node0.isRegExp();
      // Undeclared exception!
//      try { 
        Node.newString(53, (String) null, 2918, (-80));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      Node node0 = new Node(63);
//      try { 
        node0.setDouble(1965.0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // ARRAYLIT is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      Node node0 = new Node(602);
      node0.putIntProp(37, 602);
      Node node1 = new Node(53, node0, 108, (-602));
      node0.detachFromParent();
      Node node2 = new Node(37, node0, node1, 55, 124);
      node2.isLocalResultCall();
      node2.isTry();
      node2.getInputId();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.detachChildren();
      // Undeclared exception!
//      try { 
        node0.removeChildAfter(node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node1.isAssign();
      node0.getAncestors();
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node2.children();
      node0.setVarArgs(false);
      node0.isNoSideEffectsCall();
      node1.isAssignAdd();
      Node.newString(38, "\",vD5,i^TK?e*:[;2=", 0, 50);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Node node0 = new Node(3456, (-2261), 32);
      Node node1 = Node.newString("ZQ3UF._;.;ugqb{#9S", (-2261), 338);
      Node node2 = node0.srcref(node1);
      node0.putBooleanProp(119, false);
      // Undeclared exception!
//      try { 
        node2.replaceChild(node0, node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Node node0 = new Node(602);
      Node node1 = new Node(55);
      // Undeclared exception!
//      try { 
        node0.removeChildAfter(node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setReturnsTainted();
      Node node1 = new Node(29, node0, node0, (-216), 49);
      node0.srcrefTree(node1);
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      int int0 = 23;
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) "-";
      node0.getChangeTime();
      node0.getProp(101);
      objectArray0[1] = null;
      objectArray0[2] = (Object) "[+`P!jJ~2 Y@V2=G>{";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) simpleErrorReporter0;
      objectArray0[5] = (Object) "-";
      node0.isWith();
      node0.isTypeOf();
      node0.isLabelName();
      // Undeclared exception!
//      try { 
        SimpleErrorReporter.getMessage("-", objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message resource found for message property -
//         //
//         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      Node node0 = new Node(63);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      Node.extractCharno(539);
      Node node1 = Node.newString("second new child has existing sibling");
      Node node2 = new Node(21, node0, node1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
//      try { 
        node2.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // ADD is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(15, node0, node0, node0, 49, 47);
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = null;
//      try {
        node2 = new Node(36, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getSourceFileName();
      node0.isNoSideEffectsCall();
      node0.isLocalResultCall();
      node0.getSourceFileName();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getDirectives();
      node0.getAncestors();
      // Undeclared exception!
//      try { 
        node0.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 0
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$SideEffectFlags");
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(767, nodeArray0, 4, 4);
      Node node2 = node0.clonePropsFrom(node1);
      // Undeclared exception!
//      try { 
        node2.checkTreeEquals(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 767
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = new Node(4095, node1, node0, node0, 8, 4);
      node3.children();
      node0.setVarArgs(false);
      node3.isWith();
      node0.getChangeTime();
      node3.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node3.getAncestors();
      // Undeclared exception!
//      try { 
        node3.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 4095
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Node node0 = new Node(63);
      Node node1 = new Node(15, (-1036), 4095);
      Node node2 = new Node(0, node1, node1, 85, 39);
      node2.isEquivalentTo(node1, true, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node3.getAncestors();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node5 = new Node(53, node0, node2, node3);
      Node node6 = null;
//      try {
        node6 = new Node(1, node0, node4, node5, (-1329), 42);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
//      try { 
        Node.newString(9, (String) null, 3, (-1202));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getStaticSourceFile();
      node0.getJsDocBuilderForNode();
      node0.setVarArgs(true);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      Node node1 = Node.newString(103, "fLmx0:GB,nCrN");
      node1.isSwitch();
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = null;
      // Undeclared exception!
//      try { 
        node0.isEquivalentTo((Node) null, false, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-999), nodeArray0);
      node0.isNoSideEffectsCall();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Node node0 = new Node((-2623));
      Node node1 = Node.newString("synthetic");
      node1.isOnlyModifiesThisCall();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.getIndexOfChild(node1);
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      Node.newString(2048, "[+`P!jJ~2 Y@V2=G>{", 2917, 2048);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = null;
//      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, charset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(23);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      Node.extractCharno((-1275));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseAllType();
      boolean boolean0 = true;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSType jSType1 = jSTypeRegistry1.createFunctionTypeWithVarArgs(objectType0, jSType0, (List<JSType>) immutableList0);
      JSType[] jSTypeArray0 = null;
      // Undeclared exception!
//      try { 
        jSTypeRegistry1.createFunctionType(jSType1, true, (JSType[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isTry();
      node3.getInputId();
      node2.checkTreeTypeAwareEqualsImpl(node3);
      node2.detachChildren();
      Node node4 = node1.useSourceInfoFrom(node0);
      node4.setVarArgs(true);
      node3.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(472);
      Node.newString(102, "ZQ3UF._;.;ugqb{#9S");
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      node2.children();
      node0.setVarArgs(false);
      node2.isWith();
      node0.getChangeTime();
      node2.mayMutateGlobalStateOrThrow();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
//      try { 
        node1.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // STRING  is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(42, node0, node0, (-1836), 1);
      node0.isLocalResultCall();
      node0.addSuppression("");
      node0.isTry();
      node1.getInputId();
      node0.isTypeOf();
      node1.setLength(1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isNoSideEffectsCall();
      node0.isOnlyModifiesThisCall();
      node2.detachChildren();
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("ZQ3UF._;.;ugqb{#9S");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node((-287), node0, node1, node1);
      node0.children();
      node0.isWith();
      int int0 = Node.FREE_CALL;
      node2.isCall();
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Node node0 = Node.newString(103, "IsAssignableFrom(");
      Node node1 = new Node(103, node0, node0, node0);
      node1.isQuotedString();
      StringWriter stringWriter0 = new StringWriter(1410);
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "IsAssignableFrom(", 424, 32);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(48, "", 16, 47);
      node0.getSourcePosition();
      Node node2 = new Node(29);
      node1.cloneNode();
      // Undeclared exception!
//      try { 
        node0.addChildAfter(node2, node2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      Node[] nodeArray0 = new Node[2];
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      templateTypeMapReplacer0.caseBooleanType();
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("", 40, 91);
      nodeArray0[1] = node1;
      Node node2 = new Node(0, nodeArray0);
      node2.removeProp(25);
      JSType.toMaybeFunctionType(jSTypeArray0[1]);
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType("com.google.javascript.rhino.jstype.EquivalenceMethod", node2, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(boolean0);
      
      node0.isNE();
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
      
      node0.getJSType();
      node0.isBlock();
      node0.isRegExp();
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = Node.newString("synthetic");
      node0.isHook();
      node1.isCast();
      node0.isNumber();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node0 = Node.newString("Not declared as a constructor", (-1389), 4095);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(1988, nodeArray0);
      JSType.toMaybeFunctionType(jSTypeArray0[1]);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a type name", node0, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getTemplateTypes();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      Node node2 = null;
//      try {
        node2 = new Node(36, node0, node1, node0, 4665, 53);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      Node node0 = new Node(0);
      node0.setIsSyntheticBlock(false);
      node0.getSourceFileName();
      node0.getSideEffectFlags();
      node0.putBooleanProp((-1331), false);
      // Undeclared exception!
//      try { 
        node0.getExistingIntProp(0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: 0
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getSourceFileName();
      node0.setSourceEncodedPositionForTree(0);
      Node node1 = new Node(4095, node0, node0, node0, 50, 1806);
      // Undeclared exception!
//      try { 
        node0.replaceChild(node1, node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      Node node0 = Node.newString(8192, "FUNCTION_PROTOTYPE");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node.extractCharno(309);
      node0.getSourceOffset();
      node0.isSetterDef();
      // Undeclared exception!
//      try { 
        Node.newString((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isTry();
      node3.getInputId();
      node2.isTypeOf();
      node2.setLength(43);
      Node node4 = node3.useSourceInfoFromForTree(node1);
      node2.isNoSideEffectsCall();
      node0.isOnlyModifiesThisCall();
      node4.detachChildren();
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      node0.setSourceEncodedPositionForTree(2064);
      node0.isOptionalArg();
      Node node1 = null;
      node0.getStaticSourceFile();
      Node node2 = new Node(53);
      node2.addChildToBack(node0);
      Node node3 = null;
//      try {
        node3 = new Node(53, node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      int int0 = 23;
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-";
      node0.getProp(101);
      objectArray0[1] = null;
      objectArray0[2] = (Object) "[+`P!jJ~2 Y@V2=G>{";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) simpleErrorReporter0;
      objectArray0[5] = (Object) "-";
      // Undeclared exception!
//      try { 
        SimpleErrorReporter.getMessage("-", objectArray0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message resource found for message property -
//         //
//         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      Node node0 = new Node(63);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearAllFlags();
      int int0 = 539;
      Node.extractCharno(539);
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(1799);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ARRAYLIT
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString("ZQ3UF._;.;ugqb{#9S");
      node0.isEquivalentTo(node1, false, false, false);
      node0.getAncestors();
      Node node2 = new Node((-287), node0, node1, node1);
      node0.children();
      node0.isWith();
      node1.getChangeTime();
      Node.newString(42, "");
      Node node3 = Node.newNumber((double) 53, 51, 37);
      node3.getType();
      Node node4 = null;
//      try {
        node4 = new Node((-3334), node1, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Node node0 = new Node(63);
      node0.putIntProp(1313, (-1179));
      Node node1 = new Node(63, node0, 1313, 1073741824);
      Node node2 = node0.detachFromParent();
      Node node3 = new Node(15, node2, node2, 1, 16);
      node0.isLocalResultCall();
      node3.isTry();
      node3.getInputId();
      Node node4 = node0.getParent();
      node4.isOnlyModifiesThisCall();
      node4.getAncestors();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node4, node2);
      node0.addChildrenToBack(node3);
      node4.getLength();
      node4.isComma();
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      Node node0 = new Node(90);
      Node.newString("synthetic");
      node0.isHook();
      Node.newString((-1564), "side_effect_flags");
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String string0 = "second new child has existing sibling";
      Node node0 = Node.newString("second new child has existing sibling", 305, (-1814));
      node0.getDirectives();
      Node node1 = new Node(54, node0, node0, node0, node0, (-4096), 915);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      // Undeclared exception!
//      try { 
        node1.setSideEffectFlags(node_SideEffectFlags2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 54
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      node0.isEquivalentTo(node0, false, false, false);
      node0.getAncestors();
      Node node1 = new Node(4095, node0, node0, node0, 8, 4);
      node1.children();
      node0.getChangeTime();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      // Undeclared exception!
//      try { 
        node0.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 965
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      node0.getSourcePosition();
      Node node1 = new Node(29);
      // Undeclared exception!
//      try { 
        node0.addChildAfter(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2257));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node_SideEffectFlags0.setMutatesThis();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      ObjectType.cast((JSType) null);
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType("I{|>M-5B8.#", node0, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      Node node0 = Node.newString(8192, "FUNCTION_PROTOTYPE");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node.extractCharno(309);
      // Undeclared exception!
//      try { 
        Node.newString((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.addSuppression("");
      node0.isNoSideEffectsCall();
      node0.isArrayLit();
      Node node1 = Node.newString(36, "", 149, 2117);
      // Undeclared exception!
//      try { 
        node1.toStringTree();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 36
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      Node node0 = new Node((-287), (-287), (-287));
      String string0 = "";
      Node node1 = Node.newString("Not declared as a type name");
      node1.isEquivalentTo(node0, false, false, false);
      node0.getAncestors();
      Node node2 = new Node(47, node1, node1);
      Node node3 = null;
//      try {
        node3 = new Node(4095, node2, node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      Node node0 = new Node(333, 64, 965);
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, true, true, true);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node node2 = new Node(1835, node0, node0, node1, 31, 57);
      Node node3 = new Node(1073741824, 2, 30);
      node3.children();
      node0.isWith();
      node3.getChangeTime();
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node1);
      // Undeclared exception!
//      try { 
        node3.getDouble();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 1073741824
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      Node node1 = new Node(23, node0, node0, node0, (-17), 0);
      node1.isEquivalentTo(node0);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1313);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getAncestors();
      node0.mayMutateArguments();
      node0.isNE();
      Node node1 = new Node(40, node0, 1321, 2);
      Node node2 = new Node(5082, node1, node1);
      node0.useSourceInfoFromForTree(node2);
      node1.isFunction();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      int int0 = (-2215);
      Node node0 = new Node(148);
      Node node1 = new Node((-2215), node0);
      Node node2 = null;
      Node node3 = null;
//      try {
        node3 = new Node((-2215), node1, (Node) null, (Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      node0.getAncestors();
      node0.isVoid();
      node0.isNE();
      node0.isWith();
      node0.mayMutateGlobalStateOrThrow();
      node0.isLabelName();
      node0.getProp(5082);
      node0.isBlock();
      node0.isRegExp();
      node0.setString("");
      node0.isAdd();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      Node node0 = Node.newString(8192, "FUNCTION_PROTOTYPE");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node0.setString("FUNCTION_PROTOTYPE");
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2257));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node_SideEffectFlags0.setMutatesThis();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node((-170));
      // Undeclared exception!
//      try { 
        node0.removeChild(node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      Node node1 = new Node(23, node0, node0, node0, 0, 0);
      // Undeclared exception!
//      try { 
        node0.addChildBefore(node1, node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The existing child node of the parent should not be null.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      Node node0 = Node.newString("", 0, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      node_SideEffectFlags0.setReturnsTainted();
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      Node node0 = Node.newString("fLmx0:GB,nCrN");
      node0.isTry();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      Node node0 = new Node(48);
      Node node1 = new Node((-62), node0, node0, node0, node0, 2, 48);
      // Undeclared exception!
//      try { 
        node1.setString("gOjLg#Nh");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // -62
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      Node node0 = jSTypeRegistry1.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(2, node0, node0);
      // Undeclared exception!
//      try { 
        node0.getChildAtIndex(37);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getSourceFileName();
      node0.setSourceEncodedPositionForTree(0);
      node0.isOptionalArg();
      Node node1 = null;
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      // Undeclared exception!
//      try { 
        node0.addChildToBack((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      Node node0 = Node.newString(2529, "");
      Node node1 = new Node(30, 130, 52);
      Node node2 = new Node(51, node0, node0, node0, node1);
      node2.getLastChild();
      // Undeclared exception!
//      try { 
        node1.getChildBefore(node2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2257));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags3.setAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      node_SideEffectFlags0.setMutatesThis();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      ObjectType.cast((JSType) null);
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType("I{|>M-5B8.#", node0, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      String string0 = "3&c>2wM";
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 45);
      node0.isDefaultCase();
      Node node1 = new Node((-30), node0, node0, node0, node0);
      node1.setChangeTime(29);
      node0.addChildrenToBack(node1);
      Node node2 = Node.newString("3&c>2wM");
      Node node3 = node0.useSourceInfoIfMissingFrom(node2);
      // Undeclared exception!
//      try { 
        node3.replaceChildAfter(node0, node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // prev is not a child of this node.
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Node node0 = Node.newString(8192, "FUNCTION_PROTOTYPE");
      boolean boolean0 = node0.isName();
      assertEquals(8192, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      
      node0.setType(8192);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isUnscopedQualifiedName();
      node0.getSourceFileName();
      node0.putBooleanProp((-1331), false);
      node0.isNoSideEffectsCall();
      node0.isLocalResultCall();
      node0.getSourceFileName();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node.newString(49, "]&gH>$hJidz,[df");
      node0.getType();
      node0.isDec();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node0);
      
      Node node1 = Node.newString("");
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      boolean boolean0 = node0.isEquivalentTo(node1, false, false, false);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      
      Node node2 = new Node(4095, node1, node0, node0, 8, 4);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals(4, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertEquals(32772, node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertEquals(4095, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIf());
      assertEquals(8, node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      Iterable<Node> iterable0 = node2.children();
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals(4, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertEquals(32772, node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertEquals(4095, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIf());
      assertEquals(8, node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(iterable0);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      boolean boolean1 = node2.isWith();
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals(4, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertEquals(32772, node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertEquals(4095, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIf());
      assertEquals(8, node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = node0.getChangeTime();
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, int0);
      
      Node.AncestorIterable node_AncestorIterable1 = new Node.AncestorIterable(node2);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertEquals(965, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertTrue(node1.isString());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals(4, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertEquals(32772, node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertEquals(4095, node2.getType());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIf());
      assertEquals(8, node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node_AncestorIterable1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node_AncestorIterable1.equals((Object)node_AncestorIterable0));
      
//      try { 
        node1.getDouble();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // STRING  is not a number node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      assertFalse(node0.isStringKey());
      assertEquals(8390656, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(2048, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(2048, node0.getCharno());
      assertEquals(23, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(functionType0);
      
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(83, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertTrue(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, jSTypeArray0.length);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(outputStreamWriter0);
      
      node0.appendStringTree(outputStreamWriter0);
      assertFalse(node0.isStringKey());
      assertEquals(8390656, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(2048, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(2048, node0.getCharno());
      assertEquals(23, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      assertEquals(31, node_SideEffectFlags2.valueOf());
      
      Node.extractCharno(2670);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType[] jSTypeArray0 = new JSType[7];
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSType jSType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) immutableList0);
      jSTypeArray0[0] = jSType1;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, true, jSTypeArray0);
      jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, immutableList0);
      jSTypeRegistry0.createNullableType(jSTypeArray0[1]);
      jSTypeRegistry0.createConstructorType(jSTypeArray0[5], true, jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      node0.appendStringTree(outputStreamWriter0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      Node node0 = Node.newString((-168), "quoted");
      // Undeclared exception!
//      try { 
        node0.detachFromParent();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      boolean boolean0 = node0.isEquivalentToShallow(node1);
      assertFalse(boolean0);
      
      node0.getAncestors();
      Node node2 = new Node(1, node1, node1, node0, node1);
      node2.children();
      node2.isQualifiedName();
      node0.getChangeTime();
      Node node3 = Node.newString(31, "(][Zl`^/Dt?_9[VH`n");
      assertTrue(node3.isDelProp());
      
      int int0 = node0.getType();
      assertEquals(965, int0);
      
      node2.isDec();
      node2.getStaticSourceFile();
      assertEquals((-1), node0.getLineno());
      assertEquals(1, node2.getType());
      
      String string0 = node1.toString();
      assertEquals("STRING ", string0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      
      node0.isArrayLit();
      String string0 = node0.toStringTree();
      assertEquals("STRING \n", string0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      String string0 = "3&c>2wM";
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 45);
      node0.isTrue();
      Node node1 = new Node((-30), node0, node0, node0, node0);
      node1.setChangeTime(29);
      node0.addChildrenToBack(node1);
      Node node2 = null;
//      try {
        node2 = new Node(1103, node0, node0, 108, (-3244));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      int int0 = (-11);
      int int1 = 98;
      Node node0 = new Node(12288, 12288, 4321);
      node0.getJSDocInfo();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = null;
//      try {
        node1 = new Node(46, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // duplicate child
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = null;
//      try {
        node1 = new Node(1048576, (Node) null, (Node) null, node0, 56, 1395);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, (TemplateTypeMap) null);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      Node[] nodeArray0 = new Node[2];
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[0] = jSType0;
      jSTypeArray1[1] = jSType0;
      jSTypeArray1[2] = jSType0;
      jSTypeArray1[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray1);
      nodeArray0[0] = node0;
      Node node1 = Node.newString("", 40, 91);
      nodeArray0[1] = node1;
      Node node2 = new Node(0, nodeArray0);
      JSType.toMaybeFunctionType(jSTypeArray1[1]);
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType("com.google.javascript.rhino.jstype.EquivalenceMethod", node2, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2016));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      int int0 = node_SideEffectFlags1.valueOf();
      assertEquals((-2016), int0);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
//      try {
        node1 = new Node(65536, (Node) null, (Node) null, (Node) null, (Node) null, 1714, 1714);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      Node node0 = new Node(965, 42, (-5048));
      Node node1 = Node.newString("");
      node0.isEquivalentTo(node1, false, false, false);
      assertTrue(node1.isString());
      
      node0.getAncestors();
      Node node2 = new Node(42, node0, node0, node0);
      node2.children();
      boolean boolean0 = node2.isWith();
      assertFalse(boolean0);
      
      node0.getChangeTime();
      Node node3 = Node.newString(31, "(][Zl`^/Dt?_9[VH`n");
      assertEquals((-1), node3.getLineno());
      assertEquals(31, node3.getType());
      
      int int0 = node0.getType();
      assertEquals(965, int0);
      
      node2.isDec();
      node2.getStaticSourceFile();
      assertTrue(node2.isThis());
      assertTrue(node2.hasOneChild());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      int int0 = 277;
      String string0 = "NO_RESOLVED_TYPE";
      Node node0 = Node.newString(277, "NO_RESOLVED_TYPE", 277, (-2979));
      // Undeclared exception!
//      try { 
        node0.setDouble(277);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 277
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Node.newString((String) null, 41, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      Node node0 = Node.newString("", 0, 1861);
      Node node1 = new Node(1861, node0, node0, node0);
      Node node2 = new Node(1861, node1);
      Node[] nodeArray0 = new Node[8];
      Node node3 = new Node(0, (-1506), 31);
      nodeArray0[0] = node3;
      nodeArray0[1] = node1;
      nodeArray0[2] = node2;
      nodeArray0[3] = node1;
      nodeArray0[4] = node2;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node2;
      Node node4 = null;
//      try {
        node4 = new Node(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
//      try { 
        Node.newString(100, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // StringNode: str is null
//         //
//         verifyException("com.google.javascript.rhino.Node$StringNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      Node node0 = new Node(2989, 996, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      // Undeclared exception!
//      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 2989
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      Node node0 = Node.newString(15, "\"!\"dcB7/e8X{@mW(fi", 122, (-3512));
      node0.isAssignAdd();
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertEquals((-1), node0.getLineno());
      assertEquals(15, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      String string0 = "3&c>2wM";
      Node node0 = Node.newString(1103, "3&c>2wM", 1103, 45);
      node0.isDefaultCase();
      Node node1 = new Node((-30), node0, node0, node0, node0);
      node1.setChangeTime(29);
      node0.addChildrenToBack(node1);
      Node node2 = null;
//      try {
        node2 = new Node(1103, node0, node0, 108, (-3244));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // first new child has existing parent
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[5];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      jSTypeArray0[0] = jSType0;
      Node node0 = null;
//      try {
        node0 = new Node(116, (Node) null, (-834), 103);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isNoSideEffectsCall();
      boolean boolean1 = node0.isAssignAdd();
      assertTrue(boolean1 == boolean0);
      assertEquals(40, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.clearAllFlags();
      assertEquals(31, node_SideEffectFlags2.valueOf());
      
      Node.extractCharno(2670);
      Node node0 = Node.newString("TYPE_ERROR_TYPE");
      Node node1 = new Node(0, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      assertEquals(31, node_SideEffectFlags2.valueOf());
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1806);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 1806);
      node0.toString(false, false, false);
      Node node1 = new Node(1806, node0, node0);
      node1.isLocalResultCall();
      node0.putIntProp(39, 1);
      node1.getType();
      node1.isEquivalentToShallow(node0);
      node0.isQualifiedName();
      node1.isGetProp();
      node0.isOnlyModifiesThisCall();
      // Undeclared exception!
//      try { 
        node1.setSideEffectFlags(0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 1806
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      Node node0 = Node.newNumber((-1084.7047));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      Node node1 = null;
//      try {
        node1 = new Node(2003, node0, (Node) null, 51, 15);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      int int0 = 306654252;
      Node node0 = Node.newString(306654252, "", 1138, 1138);
      // Undeclared exception!
//      try { 
        node0.toString(true, true, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 306654252
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      Node node0 = Node.newString(23, "[+`P!jJ~2 Y@V2=G>{", 2048, 2048);
      Node node1 = new Node(23, node0, node0, node0, 0, 0);
      boolean boolean0 = node1.isStringKey();
      assertEquals(23, node0.getType());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(8390656, node0.getSourcePosition());
      assertEquals(23, node1.getType());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 0, 0);
      Node node1 = new Node(0, node0, node0);
      // Undeclared exception!
//      try { 
        node1.getExistingIntProp((-1007));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: -1007
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      Node node0 = Node.newString(102, ": ", 102, 233);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.createEnumType(": ", node0, (JSType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getSourceFileName();
      node0.putBooleanProp((-1331), false);
      // Undeclared exception!
//      try { 
        node0.getExistingIntProp(0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // missing prop: 0
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry1.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSType0.isInvariant(jSTypeArray0[1]);
      jSTypeArray0[2] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType.toMaybeTemplateType((JSType) functionType0);
      // Undeclared exception!
//      try { 
        ImmutableList.of(jSType0, jSType0, jSType0, (JSType) functionType0, jSTypeArray0[1], jSType0, jSTypeArray0[2], (JSType) null, jSTypeArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // at index 7
//         //
//         verifyException("com.google.common.collect.ObjectArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      int int0 = 3014;
      Node[] nodeArray0 = new Node[5];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-1.0), 2457, 46);
      nodeArray0[1] = node1;
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      nodeArray0[2] = node2;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      nodeArray0[3] = null;
      Node node3 = Node.newNumber(0.0, 52, 15);
      nodeArray0[4] = node3;
      Node node4 = null;
//      try {
        node4 = new Node(3014, nodeArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      Node node0 = new Node((-716), 0, 0);
      Node node1 = Node.newString(2529, "");
      Node node2 = new Node(0, node0, node0, node0, node0);
      Node node3 = node2.getLastChild();
      // Undeclared exception!
//      try { 
        node3.getChildBefore(node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
      // Undeclared exception!
//      try { 
        jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.google.javascript.rhino.jstype.InstanceObjectType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
//         //
//         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
//      }
  }
}
