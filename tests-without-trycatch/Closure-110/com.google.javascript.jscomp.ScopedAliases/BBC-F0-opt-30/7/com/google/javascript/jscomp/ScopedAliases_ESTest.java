/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:45:49 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopedAliases_ESTest extends ScopedAliases_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(105);
      Node node1 = new Node(1, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.hotSwapScript(node0, node0);
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(105);
      Node node1 = new Node(621, node0);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases1.hotSwapScript(node1, node1);
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q<+'|<[44b$%tnNl:~Th", "JdiUQ+x*8W");
      MockFile mockFile1 = new MockFile(mockFile0, "Q<+'|<[44b$%tnNl:~Th");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('a');
      mockPrintStream0.print(0.0F);
      mockPrintStream0.println(true);
      Compiler compiler0 = new Compiler(printStream0);
      Node node0 = Node.newString(4, "JdiUQ+x*8W", 4, 4);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(37, node1, node1, node1, 50, 54);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node2);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      node0.isEquivalentToShallow(node2);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)37;
      printStream0.write(byteArray0, 5142, (int) (byte) (-14));
      ScopedAliases scopedAliases1 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      Node node3 = new Node(1, 1, 178);
      scopedAliases1.process(node3, node2);
      scopedAliases0.process(node1, node1);
      assertFalse(node1.isFor());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig.getAdditionalReplacements(compilerOptions0);
      CompilerOptions compilerOptions1 = compiler0.newCompilerOptions();
      DefaultPassConfig.createEmptyPass((String) null);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = compilerOptions1.getAliasTransformationHandler();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = compiler0.externsRoot;
      // Undeclared exception!
//      try { 
        scopedAliases0.process((Node) null, (Node) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // INTERNAL COMPILER ERROR.
//         // Please report this problem.
//         // null
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases((AbstractCompiler) null, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      Node node0 = null;
      TightenTypes tightenTypes0 = new TightenTypes((AbstractCompiler) null);
      // Undeclared exception!
//      try { 
        scopedAliases0.process((Node) null, (Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h<+|<[44b$%tnNl:~Th", "JdiUQ+x*8W");
      MockFile mockFile1 = new MockFile(mockFile0, "h<+|<[44b$%tnNl:~Th");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('a');
      mockPrintStream0.print(0.0F);
      mockPrintStream0.println(true);
      Compiler compiler0 = new Compiler(printStream0);
      Node node0 = Node.newString(4, "JdiUQ+x*8W", 4, 4);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = new Node(4, node1);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node2);
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      node0.isEquivalentToShallow(node2);
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
      scopedAliases0.process(node2, node0);
      scopedAliases0.hotSwapScript(node2, node1);
      scopedAliases0.process(node2, node1);
      scopedAliases0.hotSwapScript(node2, node1);
      scopedAliases0.hotSwapScript(node1, node1);
      scopedAliases0.hotSwapScript(node0, node1);
      scopedAliases0.hotSwapScript(node2, node1);
      // Undeclared exception!
//      try { 
        AbstractPeepholeOptimization.validateResult(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-907.969447299673), 145, 145);
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
      preprocessorSymbolTable0.getAllSymbols();
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, (CompilerOptions.AliasTransformationHandler) null);
      scopedAliases0.process(node0, node0);
      scopedAliases0.process(node0, node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      defaultPassConfig0.getPreprocessorSymbolTable();
      CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
      ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
      SyntheticAst syntheticAst0 = new SyntheticAst("DL2Z#C`o`5<[");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      scopedAliases0.hotSwapScript(node0, node0);
      scopedAliases0.hotSwapScript(node0, node0);
      scopedAliases0.hotSwapScript(node0, node0);
      assertEquals(0, node0.getLength());
  }
}
