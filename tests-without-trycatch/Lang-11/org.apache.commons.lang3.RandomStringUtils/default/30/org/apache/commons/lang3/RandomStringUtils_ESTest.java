/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:03:05 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, (-1741), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(674, 105, 674, true, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1663);
      String string0 = RandomStringUtils.randomNumeric(42);
      assertEquals("999999999999999999999999999999999999999999", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(42);
      String string0 = RandomStringUtils.randomAlphanumeric(42);
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(40);
      String string0 = RandomStringUtils.randomAlphabetic(40);
      assertEquals("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) (byte)0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) (byte)0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '9';
      String string0 = RandomStringUtils.random(1, 1, 0, true, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("9", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, (-2217), 0, true, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-879));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -879 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-411));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -411 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-3272));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3272 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(231);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-15));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -15 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(46337, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, false, false);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1199), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1199 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, "N)fi$%(36>;~");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(25, 25, 9, true, true, (char[]) null, (Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(251, (-3544), 1, false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(62, 62, 62, false, false, (char[]) null, (Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1111, 1111, 1111, false, false, (char[]) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(148, 148, 148, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-4871));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4871 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(46322, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      RandomStringUtils.random(38, 56191, (int) (byte)0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, (-636), 56192, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(737, 231, 737, true, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7\u00E7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = RandomStringUtils.random(54, 46, 54, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("000000000000000000000000000000000000000000000000000000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(123, (int) (byte)0, (int) (byte)0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, (int) (byte)0, (int) (byte)0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, (int) (byte)0, (int) (byte)0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-5919), (-5919), (-5919), true, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -5919 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 835, 0, false, true, charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2270, 56319, 762, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2382L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(37362, 55296, 37369, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(62);
      // Undeclared exception!
      RandomStringUtils.random(6709, 57343, 127, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56320);
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(1993, 1993, 19, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(42);
      String string0 = RandomStringUtils.random(42, true, true);
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(2059L);
      // Undeclared exception!
      RandomStringUtils.random(603, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(34, "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1781), (-1781), (-1781), false, false, (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1781 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(42);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(42);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1993);
      assertNotNull(string0);
  }
}
