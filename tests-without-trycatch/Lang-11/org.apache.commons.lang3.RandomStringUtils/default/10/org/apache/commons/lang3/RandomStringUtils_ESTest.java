/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:00:54 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-481), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(33, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "org.apache.commons.lang3.RandomStringUtils");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(731, 180, 127, false, false, (char[]) null);
      assertEquals("\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4\u00B4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 1, false, false, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(1540, (-1957), 1540, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-10));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -10 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(45301, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, false, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "<CW ]Hax?EW");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2134, 2134, 63579, false, false, (char[]) null, (Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(46);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(36, 37, 46, false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(444, 444, 444, true, true, (char[]) null, (Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3617, (-23), 3617, true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1595, (-628), (-628), false, false, (char[]) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1957), (-10), (-10), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1957 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56191, 56191, 56191, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1409));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1409 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(Integer.MAX_VALUE, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(36, 56319, 46, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(31, 56319, 46, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      String string0 = RandomStringUtils.random(3819, 0, 1, false, true, charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(610L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(355, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(55240);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(355, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 1, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(54, 127, 54, false, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1644), (-1644), (-1644), false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1644 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-474), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -474 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1246), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1246 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 16, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3271, 56163, 3271, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      String string0 = RandomStringUtils.random(2134, (-186), 10, true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2021);
      String string0 = RandomStringUtils.randomAlphanumeric(2021);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1056));
      String string0 = RandomStringUtils.randomAlphabetic(1433);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(55240);
      // Undeclared exception!
      RandomStringUtils.random(355, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(46);
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(2737, "QWrG8CvKKgM'dUXg");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(15, 15, 15, true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2021);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1433);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 0, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
