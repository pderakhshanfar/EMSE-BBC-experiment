/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:51:46 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(840);
      String string0 = RandomStringUtils.randomNumeric(1262);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(5653);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(25);
      String string0 = RandomStringUtils.randomAlphanumeric(25);
      assertNotNull(string0);
      assertEquals("9999999999999999999999999", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(694, "*$Z|#@qRA22'mz");
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, 123, (-4575), true, false, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, (-118), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(25);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1102);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-4019));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4019 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(519, true, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3724), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3724 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1502, 5653, 0, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(971);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(971, 971, 971, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(1210, 0, (-1054), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(55296, 55296, 55296, false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3211, (-4276), 3211, false, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((int) 'k', 1, 1, false, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, 56192, 1825, false, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-542), 1, 11, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -542 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1031, 1031, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1803));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1803 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-718), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -718 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(3367, 3585, 55296, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(168, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(168, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(201L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(21, 0, 21, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (-1), (-1), true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(2352L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RandomStringUtils.random(864, 855, 864, false, false);
      assertNotNull(string0);
      assertEquals("\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357\u0357", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(913, 56139, 913, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1333, 57343, 1333, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(5, (-921), 5, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFC67\uFC67\uFC67\uFC67\uFC67", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2033, 49, (-2694), false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2694), string0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2694 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom(855);
      String string0 = RandomStringUtils.randomAlphabetic(855);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(168, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56191, 0, 0, false, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(45334, "dP5s;N?4$.fo6r.");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(27, 1, 1, true, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-728));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -728 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(25);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(855);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(1, 1, (-567), false, false, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }
}
