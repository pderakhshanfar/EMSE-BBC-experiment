/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:33:10 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom((-748));
      String string0 = RandomStringUtils.randomNumeric(17);
      assertNotNull(string0);
      assertEquals("44444444444444444", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2362);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(2045);
      String string0 = RandomStringUtils.randomAlphanumeric(1);
      assertNotNull(string0);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(2045);
      String string0 = RandomStringUtils.randomAlphabetic(2045);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(2367, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(3276, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(3620, (-1276), 3620, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1850, 1850, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-3603));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3603 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(979);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-602));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -602 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-4209));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4209 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(831, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1276), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1276 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, "EH<rdk.\"$G\"duc!u&");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(12, 860, 38, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1458, (-522), (-522), false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56192, Integer.MAX_VALUE, 0, true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(985, 1, 32, true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3620, 23, 23, false, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1276), (-624), 28, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1276 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(32, 493, 493, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(45309);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-939), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -939 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(35, 56189, (-1717), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(3620, 0, 1936, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1928, 1784, (-654), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2727, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(52267, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(123, 0, (-3333), true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2727, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(56192);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(728, 728, 56192, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-238), 0, (-321), true, false, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -238 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 447, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(872, 56192, 56191, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1929, 55296, 1929, false, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-34));
      // Undeclared exception!
      RandomStringUtils.random(5, 56320, (-5717), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      String string0 = RandomStringUtils.random(843, (-1522), (-602), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E\uFA0E", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 2792, 1, true, true);
      assertEquals("\u0AE8", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1298);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(381, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(39, 39, 42, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(39, "s#6>T;}MUEe*J\"");
      assertEquals("sssssssssssssssssssssssssssssssssssssss", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-632), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -632 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(3620);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }
}
