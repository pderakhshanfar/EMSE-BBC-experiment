/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:39:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(569);
      String string0 = RandomStringUtils.randomAlphanumeric(569);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-2058));
      String string0 = RandomStringUtils.randomAlphabetic(23);
      assertNotNull(string0);
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXX", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(228, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, 0, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1943));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1943 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-369));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -369 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1519));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1519 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(20);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-482));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -482 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2951), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2951 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(35309, false, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-801), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -801 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(31, "\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00\uD801\uDC00");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(57343);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(57343, 1100, 0, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(457, 0, 457, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2098), 0, 0, false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2098 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56320, 2760, 1391, true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1142, 1142, 1142, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46411, 0, 46459, true, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-376), 0, 0, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -376 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3783, 3783, 3783, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Random.setNextRandom(55296);
      // Undeclared exception!
      RandomStringUtils.random(825);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(607, (-544), 92, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0\uFDE0", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(776, 1, 776, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2760, 388, 20, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2757, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(2706, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(27, 0, (-1943), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 0, 457, false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(2760, 2760, 0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-332), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -332 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56319);
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 3058, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(56191);
      // Undeclared exception!
      RandomStringUtils.random(287, 56191, 287, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2543, 56320, (-166), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(3671, 3671, 34, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom((-2058));
      String string0 = RandomStringUtils.random(228, true, true);
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(1100);
      String string0 = RandomStringUtils.random(770, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(46203);
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2760, 2559, 46203, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(34, "ft");
      assertEquals("ffffffffffffffffffffffffffffffffff", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2055), (-2055), 0, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2055 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(37);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(825);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(3038, (-1283), 35311, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
