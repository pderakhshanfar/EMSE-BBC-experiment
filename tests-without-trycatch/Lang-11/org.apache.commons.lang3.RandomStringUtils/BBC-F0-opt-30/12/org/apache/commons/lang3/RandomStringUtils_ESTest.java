/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:10:47 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[19];
      // Undeclared exception!
      RandomStringUtils.random(43, 0, (-5183), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(46338);
      String string0 = RandomStringUtils.randomNumeric(3234);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56319);
      String string0 = RandomStringUtils.randomAlphanumeric(7);
      assertNotNull(string0);
      assertEquals("qqqqqqq", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1173);
      String string0 = RandomStringUtils.randomAlphabetic(8);
      assertNotNull(string0);
      assertEquals("qqqqqqqq", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(19, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2847);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2847, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(693, 352, 693, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160\u0160", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) '!', 2421, 1, false, false);
      assertNotNull(string0);
      assertEquals("\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975\u0975", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-2771), 1105, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(550);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-412));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -412 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-2527));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2527 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1112));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1112 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-2030));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2030 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2808), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2808 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, (-2551), true, true, charArray0, (Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1561, 1824, 1561, true, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(613, 1835, 1835, false, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(5, 5, 9, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2860), (-369), (-1989), true, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2860 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(923, 2229, 0, false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(74, (-1038), (-1038), true, true, (char[]) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(169, 32, (-1524), true, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1569, 56319, 56319, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1016));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1016 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 56288, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2895, 56191, 56192, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(8, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-2752L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-198), (-1), 32, true, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -198 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-1), true, true, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-491), 56319, (-491), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -491 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "The chars array must not be empty");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56319);
      // Undeclared exception!
      RandomStringUtils.random(56319, false, false);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56184);
      // Undeclared exception!
      RandomStringUtils.random(123, (String) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(737);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(737, 57343, 6, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(788);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(788, 57343, 6, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF\uD800\uDFFF", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(278, (-2596), 19, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC\uF5DC", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      RandomStringUtils.random(56319, 2920, 1, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(8, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[19];
      // Undeclared exception!
      RandomStringUtils.random(43, 0, 0, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(550, 550, Integer.MAX_VALUE, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226\u0226", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[9];
      RandomStringUtils.random(5069, charArray0);
      // Undeclared exception!
      RandomStringUtils.random(5069, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 0, false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1355), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1355 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(5413);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(7);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(8);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, (-3883), true, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
