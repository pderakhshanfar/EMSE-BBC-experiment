/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:52:42 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-990));
      String string0 = RandomStringUtils.randomAlphanumeric(1);
      assertEquals("p", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(32, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(4660);
      String string0 = RandomStringUtils.random(4660, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1995), 3632, false, false, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 93, 93, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1858);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1858, (-25), 0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(5832, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.randomAscii(1858);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1430));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1430 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-795));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -795 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1811));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1811 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-245), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -245 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "lGT");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1347), "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1347 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, (-1573), (-1573), true, false, (char[]) null, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(585, 585, 2000, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(515, 1750, 1750, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RandomStringUtils.random(1858);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(5832, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(5832, 0, 3108, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-99), 0, (-99), false, true, (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -99 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(359, (-3083), 0, true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(128, 128, 128, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(123, 55296, 32, true, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2694), (-2694), (-2694), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2694 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      MockRandom mockRandom0 = new MockRandom(1624L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(32, 0, 32, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '3';
      MockRandom mockRandom0 = new MockRandom(28);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, 28, false, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("3", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(514, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(514, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(514, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(34, 0, (-1116), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2906), (-2906), 2277, true, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2906 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 1026, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(514, 514, 514, false, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-96));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1875, 56319, (-96), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-792L));
      // Undeclared exception!
      RandomStringUtils.random(3223, 55296, (-2353), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(515, (-2353), 1490, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF\uF6CF", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1833, 57343, 127, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom(36237);
      String string0 = RandomStringUtils.randomNumeric(183);
      assertEquals("333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom(2593);
      String string0 = RandomStringUtils.randomAlphabetic(2593);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(0L);
      String string0 = RandomStringUtils.random(2859, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2859, (-162), 2859, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-667));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -667 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(488);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2593);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(2982, 20, (-465), false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
