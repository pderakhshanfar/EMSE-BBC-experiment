/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:40:54 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4776, 0, (-2059), true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 1736, true, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(16);
      String string0 = RandomStringUtils.randomAlphanumeric(36);
      assertNotNull(string0);
      assertEquals("000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(36254);
      String string0 = RandomStringUtils.randomAlphabetic(1659);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(603, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, Integer.MAX_VALUE, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-962));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -962 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2754);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-179), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -179 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1248, true, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-344), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -344 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, "Ci?hcYtRGYyq4g");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-361), "\uFCD1");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -361 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(567);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(567, 567, 9, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(1026L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3454, 3454, 3454, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 56191, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2371), (-2371), 2114, false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2371 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(4196, 3165, (-4415), true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(567, 567, 567, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4789, 56191, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(603, 1, 1, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-30));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -30 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'u';
      String string0 = RandomStringUtils.random(2601, 0, 56319, true, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-4033));
      String string0 = RandomStringUtils.random(374, 2663, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67\u0A67", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-25L));
      // Undeclared exception!
      RandomStringUtils.random(1545, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      RandomStringUtils.random(1545, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-25L));
      String string0 = RandomStringUtils.random(1545, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1515, 0, 1515, true, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1235), 0, (-2144), false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1235 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, (-1), (-1874), true, false, charArray0, (java.util.Random) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(7, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 24, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(55299, 55296, (-4042), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56191, 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, (-815), 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFCD1", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(7, 57343, (-906), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(3026);
      String string0 = RandomStringUtils.randomNumeric(42);
      assertEquals("777777777777777777777777777777777777777777", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(638, 1655, 56320, true, false);
      assertEquals("\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677\u0677", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random((int) 'T', 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 128, 128, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(16, "000000000000000000000000000000000000");
      assertEquals("0000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1409), (-1409), 56191, true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1409 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(42);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(36);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.random(20, 36, (-184), false, false, (char[]) null);
      assertEquals("$$$$$$$$$$$$$$$$$$$$", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(169);
      assertEquals("                                                                                                                                                                         ", string0);
  }
}
