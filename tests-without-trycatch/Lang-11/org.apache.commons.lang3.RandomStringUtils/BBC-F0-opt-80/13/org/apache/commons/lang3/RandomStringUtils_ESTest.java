/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:13:31 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(56320);
      String string0 = RandomStringUtils.randomAlphanumeric(272);
      assertNotNull(string0);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(2594, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      String string0 = RandomStringUtils.random(127, 0, 0, true, true, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', '\u0000'}, charArray0);
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(0, (-1723), 0, false, false, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(251, 0, (-3019), false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(3297);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-4747));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4747 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1964));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1964 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-3444));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3444 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-423), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -423 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1055, false, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1673), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1673 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(472L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1034, 8, 8, true, false, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 484, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(484, 484, (-2413), true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(390, 390, 390, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191, 57343, 545, false, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(4160, 4160, 4160, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3130));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3130 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(35326, charArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(135);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 55296, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(135);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(4558, 55296, (-1476), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2961));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(36509, 806, (-1706), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '8';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      String string0 = RandomStringUtils.random(1, 1, (-465), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '8', '\u0000'}, charArray0);
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2, 0, 0, true, true, (char[]) null, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2, 0, 0, false, false, (char[]) null, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 0, 1, true, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3188, 3188, (-4499), true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-968), 0, 127, false, true, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -968 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1), false, false, (char[]) null, (java.util.Random) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-82), 0, (-2934), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -82 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(164, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1311, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(116);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(116, 56319, 116, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1159, 56320, 1159, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(663, (-722), (-875), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E\uFD2E", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom((-1656));
      String string0 = RandomStringUtils.randomNumeric(2);
      assertNotNull(string0);
      assertEquals("22", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(39);
      String string0 = RandomStringUtils.randomAlphabetic(39);
      assertNotNull(string0);
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2, 0, 0, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1188);
      String string0 = RandomStringUtils.random(1188, 56320, (-2968), false, false, (char[]) null, (java.util.Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.random(2927, string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(704, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(39, 56320, 1, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(272);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(39);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-409), (-409), 1542, false, true, (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -409 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2);
      assertEquals("  ", string0);
  }
}
