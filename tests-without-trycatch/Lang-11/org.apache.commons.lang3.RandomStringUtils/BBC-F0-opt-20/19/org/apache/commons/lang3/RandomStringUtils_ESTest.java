/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:29:58 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1795);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(128);
      String string0 = RandomStringUtils.randomAlphanumeric(2117);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.random(1, false, true);
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "=(f.2*g@g6b$J_q#");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 56192, 0, false, false, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1419), 0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-13));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -13 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-2037));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2037 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1303));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1303 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(5037, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-902), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -902 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "vX%lA_wQG[X =_G}");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), "p=j=?MQj}]duY;dCl*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1617, 1617, 1617, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-1103L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 5939, 1, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56320, 56320, 56320, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2983, 56320, 128, false, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1231), (-1231), 0, false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1231 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(123, 2641, 24, false, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3, 3, 3, false, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(371, 0, (-2135), true, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-176), 0, (-176), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -176 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56192, (-265), (-265), true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(3275, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3977L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(592, (-1569), 592, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '6';
      String string0 = RandomStringUtils.random(1545, 1, 101, false, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1666, (int) (byte)0, (int) (byte)0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(18, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(353, 0, 353, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1174);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 2954, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(592, (-1569), (-2525), true, true);
      assertNotNull(string0);
      assertEquals("\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF\uF9DF", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(399, (String) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 2340, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1085);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1085, 56191, (-3951), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(39, 56320, 1320, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomNumeric(22);
      assertNotNull(string0);
      assertEquals("1111111111111111111111", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(56191);
      String string0 = RandomStringUtils.randomAlphabetic(2340);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(1089, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1062L));
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1617, 1617, 1617, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-334), 907, 907, true, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -334 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(22);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1186);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2117);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(2340);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(2966, 56320, 128, false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }
}
