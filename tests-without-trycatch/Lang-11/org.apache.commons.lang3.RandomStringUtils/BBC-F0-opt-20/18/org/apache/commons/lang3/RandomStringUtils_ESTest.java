/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:25:59 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(205, 0, (-2), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(1022);
      String string0 = RandomStringUtils.randomNumeric(1);
      assertEquals("5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1512);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(264);
      String string0 = RandomStringUtils.randomAlphabetic(264);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(1306, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "Y");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, 205, true, true, charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(10, 55296, 1, false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-2645), (-2645), true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(33);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1061));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1061 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1770));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1770 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-40));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -40 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(56192, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2272), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2272 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1994), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1994 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, "0<g5i, :{7KsWSCl");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(650, 4, 0, true, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(128, 128, 35, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1306, 2074, 2074, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(1, 1, (-4685), false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (-1), 343, true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1343, (-5174), 283, true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-649), 457, 1, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -649 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1968, 1968, 1968, false, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-787));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -787 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46197, 56319, (int) (byte)43, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 2115, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1129, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1158, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2943, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56319, 56319, (-3658), false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2720), (-2720), (-2720), false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2720 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, (-50), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1158, false, true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56319, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(19);
      // Undeclared exception!
      RandomStringUtils.random(19, 55332, (-538), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(123, (-1339), 32, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5\uFAC5", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[6];
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)85, 56319, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(25);
      String string0 = RandomStringUtils.randomAlphanumeric(1);
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(950, 950, (-755), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6\u03B6", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(156, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(123, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(10, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-493));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -493 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(264);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(25, 1, 1620, false, false, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
