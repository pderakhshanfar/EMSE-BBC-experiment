/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:06:21 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(3508);
      String string0 = RandomStringUtils.randomAlphanumeric(1357);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(127, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(2310, "org.apache.commons.lang3.RandomStringUtils");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      String string0 = RandomStringUtils.random(1, 0, 1, true, false, charArray0);
      assertNotNull(string0);
      assertEquals("N", string0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, 32, 22, false, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1566, 1566, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-2921));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2921 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(36339);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1911));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1911 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-287));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -287 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-392));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -392 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2643), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2643 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-6083), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -6083 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-2215L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1028, (-430), 843, true, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(443, 443, 443, true, true, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(57343, 0, (-1), false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1904, (-205), (-3251), false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(307, 56320, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1611), (-1611), (-1611), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1611 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3271, 3271, 3271, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-292));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -292 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(31, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(374, (-2848), 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, (-1), true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2250, 1781, (-65), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(55343, 0, 0, true, false, (char[]) null, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(55343, 0, 0, false, false, (char[]) null, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(55339, 0, 0, false, true, (char[]) null, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom((-2453L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2781), (-2781), 1, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2781 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 127, false, false, charArray0, (java.util.Random) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(713, 713, 0, true, true);
      assertNotNull(string0);
      assertEquals("\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9\u02C9", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(36254, 56191, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(55358);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(35, 55358, 3392, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, (-3254), 745, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2053L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(9, 56320, 9, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(17);
      String string0 = RandomStringUtils.randomNumeric(3939);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(3508);
      String string0 = RandomStringUtils.randomAlphabetic(1357);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(2265, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(5025);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(5025, 128, 36334, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(36354, "Pb'gCLV<.8X~n>6Sx[E");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(3939);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1357);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1357);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1706), 0, 0, false, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1706 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
