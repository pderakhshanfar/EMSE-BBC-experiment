/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:33:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(23);
      assertNotNull(string0);
      assertEquals("                       ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(37);
      String string0 = RandomStringUtils.randomAlphanumeric(37);
      assertNotNull(string0);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(37);
      String string0 = RandomStringUtils.random(37, true, true);
      assertNotNull(string0);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(55, 0, (-139), false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 0, (-745), false, true, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(2496);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-4179));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4179 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-4588));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4588 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1863), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1863 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(3824, true, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, ">nu]:.w5E<ejLh");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2762, 5177, 2762, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(2257L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(4327, 4327, 1, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1870), 2023, (-1870), true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1870 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(695, 695, 0, false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1729, 1729, 1729, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2432), (-2432), (-2432), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2432 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(692, 56319, 56319, true, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-298));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -298 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = RandomStringUtils.random(4145, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 56192, 41, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1219, 56321, 46346, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = 'k';
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = RandomStringUtils.random(843, 0, 843, true, false, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      String string0 = RandomStringUtils.random(1746, 0, 1, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(43, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(23, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(23, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-964));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-112), (-112), 0, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -112 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3741), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3741 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(843, 56319, 843, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(5035, 56191, (-14), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2467L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(28, (-1093), 1746, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB\uFBBB", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(824, 56354, 824, false, false);
      assertNotNull(string0);
      assertEquals("\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22\uD800\uDC22", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(19);
      String string0 = RandomStringUtils.randomNumeric(41);
      assertNotNull(string0);
      assertEquals("33333333333333333333333333333333333333333", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(37);
      String string0 = RandomStringUtils.randomAlphabetic(37);
      assertNotNull(string0);
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(46, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1003, 1003, 0, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(843, "{!RA*B?'");
      assertNotNull(string0);
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-394), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -394 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
      assertNotNull(randomStringUtils0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(41);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56354);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(37);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(37);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 36373, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
