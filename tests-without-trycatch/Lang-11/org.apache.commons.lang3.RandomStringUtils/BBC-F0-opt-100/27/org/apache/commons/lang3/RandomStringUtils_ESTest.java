/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:43:55 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1577);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(3166);
      String string0 = RandomStringUtils.randomAlphanumeric(3166);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(3067, "zP+jJu");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(1291);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-2547));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2547 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(3067);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-2370));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2370 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-2783));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2783 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1403), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1403 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(55296);
      // Undeclared exception!
      RandomStringUtils.random(2565, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1962), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1962 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "FE{");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2041, (-466), 19, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1765, (-3123), 477, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(416, (-2323), (-2323), true, false, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 2000, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2406), 56192, 56192, true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2406 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(848, (-760), 0, false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(353, 353, 353, true, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-820), (-279), (-279), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -820 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(19, 1, 1, true, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46233);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-213));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -213 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(30, 56319, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(838, (-2317), 40, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3\uF6F3", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      MockRandom mockRandom0 = new MockRandom((-593L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1527, 0, (-119), true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'j', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 1, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("5", string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(13, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom((-469L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-466), 2041, 2741, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -466 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom((-871L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, (-2547), 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(2565, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(192, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 30, false, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      RandomStringUtils.random(13, 56167, 42, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(2202, 56320, (-2317), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(2741, (-466), 2041, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 2600, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(19);
      String string0 = RandomStringUtils.randomNumeric(246);
      assertEquals("333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(1408);
      String string0 = RandomStringUtils.randomAlphabetic(123);
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(11, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2826, 174, 1, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2444), "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2444 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(246);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(246);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 1061, 46210, false, false, (char[]) null);
      assertEquals("\u0425", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }
}
