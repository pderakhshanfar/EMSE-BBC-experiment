/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:13:52 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(3336);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(23);
      String string0 = RandomStringUtils.randomAlphanumeric(1545);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-1258));
      String string0 = RandomStringUtils.randomAlphabetic(3898);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(32, "#Y8h,l#EBd");
      assertNotNull(string0);
      assertEquals("################################", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "(hN");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      String string0 = RandomStringUtils.random(529, 0, 40, true, true, charArray0);
      assertNotNull(string0);
      assertEqualsstring0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (-1817), 0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1817));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1817 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-646));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -646 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(57347);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-3168));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3168 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(529);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1631));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1631 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2432, true, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-629), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -629 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(305, 305, 305, true, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1774, (-1), 56320, true, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(11, 127, 127, true, true, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-468), 0, 0, true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -468 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(57343, 3787, 964, false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1350, 1350, 1350, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 56320, 2708, false, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1746), (-1746), (-1746), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1746 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1284, 1284, 1284, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-736), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -736 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom(3495L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 971, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '2';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1748, 1, 1748, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(332, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(971, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(971, 0, (-1), true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1370L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-4144), (-4144), (-1782), false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4144 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0, (java.util.Random) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(2780, 56186, (-4144), false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-945), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -945 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56193, (-16), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3360);
      // Undeclared exception!
      RandomStringUtils.random(55, 55296, 55, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(971, (-2002), (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E\uF82E", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(23);
      String string0 = RandomStringUtils.randomNumeric(1545);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[8];
      charArray0[1] = 'W';
      String string0 = RandomStringUtils.random(5, 1, 128, true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("WWWWW", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1249, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46348, "Z|:D\":Y`9f");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(9, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(1285L);
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(26, 26, 11, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-102), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -102 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1545);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.random(127);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(55296, 0, 0, false, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
  }
}
