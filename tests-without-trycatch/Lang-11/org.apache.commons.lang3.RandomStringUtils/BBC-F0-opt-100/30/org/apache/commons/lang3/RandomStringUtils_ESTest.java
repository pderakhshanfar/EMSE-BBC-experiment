/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:53:38 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(41, 0, (-316), false, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(26811);
      String string0 = RandomStringUtils.randomAlphanumeric(128);
      assertNotNull(string0);
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-2057));
      String string0 = RandomStringUtils.randomAlphabetic(3613);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(1, 1, 1621, false, false, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = RandomStringUtils.random(0, 123, 0, true, true, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, 0, false, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-974));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -974 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-2421));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2421 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1089));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1089 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1972);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-734), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -734 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(731, true, true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1561), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1561 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, "\uD800\uDC00\uD800\uDC00\uD800\uDC00");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2894, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(46344, 123, 123, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1103, 1103, 0, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1589, 1589, 1589, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-397), (-397), (-397), false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -397 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, (-730), 6, false, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-798), (-1085), (-2768), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -798 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1352, (-2200), (-2200), true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2712));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2712 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(363, 57334, (-3872), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '6';
      String string0 = RandomStringUtils.random(1, 1, 46351, false, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '6', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("6", string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(41, 0, 3388, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom((-1408));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-886), (-886), (-1408), true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -886 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom(622L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, false, false);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(392, (char[]) null);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(1914, 56191, (-25), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1897, 56191, (-25), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(573, (-710), 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A\uFD3A", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = RandomStringUtils.random(6, 56320, (-1569), false, false);
      assertEquals("\uD800\uDC00\uD800\uDC00\uD800\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(25);
      String string0 = RandomStringUtils.randomNumeric(22);
      assertEquals("9999999999999999999999", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random((int) 'h', 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(25, "zMQe``z8;D.xePl}}");
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzz", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(392, 392, 0, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(43);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2103);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-2255));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2255 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(90, 90, 90, false, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1225);
      assertNotNull(string0);
  }
}
