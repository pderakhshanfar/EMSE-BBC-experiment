/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:28:24 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii((byte)0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(38);
      String string0 = RandomStringUtils.randomAlphanumeric(172);
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(3808, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "Zv]VMP7YmH_J80eW");
      assertEquals("Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(569, (-1548), 943, false, false, (char[]) null);
      assertEquals("\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4\uF9F4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) 'g', 6, (int) 'g', false, false);
      assertEquals("\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0006", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-2210));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2210 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56319);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-2995));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2995 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-491));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -491 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(372, 2467, 1525, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(448, (-1671), (-1671), true, true, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1980), (-1980), (-1980), false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1980 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, (-1207), 1, true, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1840, 1, 1, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(569, 56320, (-2134), false, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-575), (-575), 1259, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -575 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(98, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(896L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(25, (int) (byte) (-109), (-2421), true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93\uFF93", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '7';
      MockRandom mockRandom0 = new MockRandom(31);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1868, 1, 31, true, true, charArray0, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, (int) (byte)0, (int) (byte)0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(10);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(10, (int) (byte)0, (int) (byte)0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(896L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(10, (int) (byte)0, (-2195), true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 127, 127, true, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1668), (-4469), (-1668), false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1668 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 347, 347, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1623, true, true);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-259), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -259 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(123, 56191, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(123, 56191, (int) (byte)3, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1431, 56320, (-2898), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(18);
      assertEquals("222222222222222222", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom((-2690));
      String string0 = RandomStringUtils.randomAlphabetic(1525);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(896L);
      String string0 = RandomStringUtils.random(10, (int) (byte)0, (int) (byte)0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2502, 0, 0, true, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "XE+!");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1424, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1, 1, false, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(18);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-851));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -851 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(4172);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1970);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(184, (-3298), 569, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }
}
