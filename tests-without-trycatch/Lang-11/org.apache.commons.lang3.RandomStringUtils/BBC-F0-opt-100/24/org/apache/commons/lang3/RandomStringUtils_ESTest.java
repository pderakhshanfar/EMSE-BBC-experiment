/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:36:08 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(4294);
      String string0 = RandomStringUtils.randomAlphanumeric(2032);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(1435);
      String string0 = RandomStringUtils.randomAlphabetic(30);
      assertEquals("ffffffffffffffffffffffffffffff", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1125);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(1125, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, (-1438), (-1438), false, true, charArray0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(128);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-730));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -730 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-545));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -545 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-2318));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2318 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, false, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56319, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(11, 11, (-2095), false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(127, (-921), 127, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(744, 56192, 56192, true, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(38, (-1094), 22, true, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), 1252, (-1), true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(926, 926, 615, true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(12, 38, 38, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1362, 55296, 56319, true, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3552), 1279, 1, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3552 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1435, 1435, 1435, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Random.setNextRandom(56191);
      // Undeclared exception!
      RandomStringUtils.random(19);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(670, 1777, 326, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1\u06F1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(22, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(33, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(22, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(29, 0, 291, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom((-615));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-615), (-615), (-615), true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -615 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 1245, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(14, (char[]) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56320, 56192, 3, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(343, 55296, 56320, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(3569, 56320, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2801, (-1122), (-2121), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom(571);
      String string0 = RandomStringUtils.randomNumeric(571);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RandomStringUtils.random(1271, 1271, 56191, true, true);
      // Undeclared exception!
      RandomStringUtils.random(56191, string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RandomStringUtils.random(2583, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2717, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56319, 127, (-1), false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, (-1620), true, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(571);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-797));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -797 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(2032);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(30);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.random(1435, 0, (-1603), false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56192);
  }
}
