/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:06:35 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1584);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(2111);
      String string0 = RandomStringUtils.randomAlphanumeric(2111);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(1060, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(29, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      String string0 = RandomStringUtils.random(4, 0, 4, true, true, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("nnnn", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, (-1637), 146, false, true, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(34, (-473), 56320, false, false);
      assertNotNull(string0);
      assertEquals("\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27\uFE27", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-2571));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2571 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1244);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1323));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1323 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(55296, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-4962), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4962 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1337), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1337 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(6, 6, 6, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2659, (-313), 0, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2846, 276, 276, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(1130, 0, (-305), true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(148, (-1), (-2199), false, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56192, (-1256), (-1256), true, true, (char[]) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(42, 42, 22, true, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1283), 0, 0, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1283 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(57343, 57343, 57343, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1850));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1323, 57343, 684, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(869);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(269, 32103, 269, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67\u7D67", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      MockRandom mockRandom0 = new MockRandom(1060);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1060, 0, 1060, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'9', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(34, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2012, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(36, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1675), (-1675), (-1675), false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1675 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 1, 3199, false, false, charArray0, (java.util.Random) null);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-4978), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4978 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(1584, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(57343);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      RandomStringUtils.random(289, 56191, 289, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(7, 55296, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(415, "\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01\uD801\uDC01");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(34, (-1627), (-2791), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5\uF9A5", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom(1845);
      String string0 = RandomStringUtils.randomNumeric(42);
      assertEquals("999999999999999999999999999999999999999999", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(56319);
      String string0 = RandomStringUtils.randomAlphabetic(4546);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(34);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random((int) (byte)2, 0, (int) (byte)0, false, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-2643L));
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(16, 869, 2902, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(42);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(1125);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-472));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -472 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4546);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3811), (-3811), (-3811), true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3811 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(55296);
  }
}
