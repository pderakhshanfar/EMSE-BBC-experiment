/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:17:33 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(15);
      assertEquals("               ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(524);
      String string0 = RandomStringUtils.randomAlphanumeric(524);
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(243, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom((-3028));
      String string0 = RandomStringUtils.random(1, true, true);
      assertEquals("9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "X");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(1031, 1031, (-1), false, false, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(2928, 1761, 46216, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 56191, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(524);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1181));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1181 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-2820));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2820 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(32);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-810));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -810 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3723), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3723 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(25, true, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-222), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -222 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(55296, 55296, 1996, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(711, 711, 711, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(1817, 0, 0, false, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1223), 288, (-1223), true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1223 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2567, 2567, (-2908), false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1289, (-988), (-988), false, false, (char[]) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2025), (-2025), (-2025), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2025 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-4135));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4135 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      String string0 = RandomStringUtils.random(28, 0, 0, false, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("2222222222222222222222222222", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2721, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2721, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 0, (-535), false, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(4, 1, 1, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1674), (-1674), (-1674), true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1674 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46216, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, (String) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(15, 56192, 7, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(15, 56184, 7, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, 56191, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, (-1902), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56320, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(971, (-118), 15, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A\uFF8A", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Random.setNextRandom(23);
      String string0 = RandomStringUtils.randomNumeric(23);
      assertEquals("77777777777777777777777", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom(215);
      String string0 = RandomStringUtils.randomAlphabetic(215);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(2721, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(123, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(1573, "r0");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(23);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(524);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-4136));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4136 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }
}
