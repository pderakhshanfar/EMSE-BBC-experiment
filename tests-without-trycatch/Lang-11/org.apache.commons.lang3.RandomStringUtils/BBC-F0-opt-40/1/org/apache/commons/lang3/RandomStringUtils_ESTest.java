/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:04:22 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[18];
      // Undeclared exception!
      RandomStringUtils.random(103, 0, (-21), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(16);
      String string0 = RandomStringUtils.randomNumeric(128);
      assertNotNull(string0);
      assertEquals("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1615);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-318));
      String string0 = RandomStringUtils.randomAlphanumeric(1923);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2530);
      String string0 = RandomStringUtils.randomAlphabetic(18);
      assertNotNull(string0);
      assertEquals("iiiiiiiiiiiiiiiiii", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(3501, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(225, false, false);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(127, 0, 2903, false, false, charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 1193, 0, false, false);
      assertNotNull(string0);
      assertEquals("\u04A9", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(2710);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(36);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-4613));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4613 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1261));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1261 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      RandomStringUtils.random(57343, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(13, false, true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1923, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(19, (-85), (-573), true, true, charArray0, (Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, (-330), 1, false, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 1, 1, false, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56320, 0, 0, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56320, 56320, (-1), false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(103, 103, 103, false, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), 0, (-1), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(123, 123, 123, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1772));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1772 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(13, 56320, (-3746), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2264, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2264, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2056, 29, 2056, false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(225);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1803), 56192, (-1), true, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1803 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 56191, 56191, true, true, charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-777), false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -777 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-699), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -699 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, (String) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(55329, 56319, (-3746), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(13, 55311, 1397, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1557, 56320, 57343, false, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      String string0 = RandomStringUtils.random(128, 0, 128, true, true, charArray0, (Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(611, (-807), 46352, true, false, (char[]) null, (Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9\uFCD9", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(10);
      // Undeclared exception!
      RandomStringUtils.random(10, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(103, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(123, "]^^hm:T&z!Ph");
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "\u04A9");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-807));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -807 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56208);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1923);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(55296);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(225, 464, 225, false, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }
}
