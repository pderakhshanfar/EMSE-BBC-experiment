/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:18:05 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(2747);
      String string0 = RandomStringUtils.randomAlphanumeric(2747);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(351);
      String string0 = RandomStringUtils.randomAlphabetic(351);
      assertEquals("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "C-A \"");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(854, 1986, 854, true, true, (char[]) null);
      assertEquals("\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2\u07C2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 1986, 854, true, true, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, 0, (-208), false, false);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(1);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1320);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-2162));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2162 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-2712));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2712 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-663));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -663 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2852), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2852 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, true, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1848), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1848 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(3428, 1, 470, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = RandomStringUtils.random(3428, 1, 2622, false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      RandomStringUtils.random(3428, string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-214), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -214 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(509, (-2115), 21, false, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2698);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2698, 2698, 3310, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3428, (-1161), (-1161), false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(1853, 0, 1853, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(218, 218, 1, false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1203), 0, 4409, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1203 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(983, 983, 983, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56191);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(123);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      RandomStringUtils.random(56191, 56191, 123, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2863L);
      // Undeclared exception!
      RandomStringUtils.random(123, 56191, 123, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3291L));
      // Undeclared exception!
      RandomStringUtils.random(482, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(25, 1, 25, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2875), (-2875), 56191, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2875 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(1L);
      String string0 = RandomStringUtils.random(0, (-474), 1162, true, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RandomStringUtils.random(1432, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (String) null);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, 56319, 56320, false, false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(2053, 57324, 15, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1419, (-280), (-2670), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1361, 51, (-4201), false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(4, 0, 4, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals("KKKK", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3291L));
      // Undeclared exception!
      RandomStringUtils.random(482, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3291L));
      String string0 = RandomStringUtils.random(482, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(128, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(247, 247, 2451, true, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3491));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3491 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(4);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(482);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(55296, 55296, 55296, true, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(854);
      assertEqualsstring0);
  }
}
