/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:33:52 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(2, 0, (-1175), false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(36362);
      String string0 = RandomStringUtils.randomAlphanumeric(2799);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-623));
      String string0 = RandomStringUtils.randomAlphabetic(32);
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(1574, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(3011, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, 123, 0, false, false, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(378, (-204), 378, false, false);
      assertEquals("\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34\uFF34", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(2799);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-204));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -204 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56320);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(43);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-205));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -205 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      RandomStringUtils.random(36222, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-4456), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4456 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "x^ah1tHrXXy");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(712, (-1368), 2253, true, true, charArray0, (Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56191, (-1332), 2442, false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(279, (-624), (-624), true, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), 3022, 0, false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(127, 127, 1091, true, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3011, 758, 758, false, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, 56191, 0, false, false);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1536), (-1536), (-1536), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1536 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3160, 3160, 3160, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-131), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -131 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '1';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(46338, (int) (byte)1, 378, false, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(535, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(56319, 0, 116, false, false, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1231), (-1231), (-1231), false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1231 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, 123, 123, false, false, charArray0, (Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, false, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-396), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -396 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(378, 56305, 2224, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(7, 56183, 36303, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(4, (-103), 56305, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFF99\uFF99\uFF99\uFF99", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(533, 56320, 0, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(16);
      String string0 = RandomStringUtils.randomNumeric(16);
      assertEquals("0000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random((int) (byte)1, 0, 0, true, false, charArray0, (Random) mockRandom0);
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(535, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1712, 0, 0, true, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, 0, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2105, Integer.MAX_VALUE, (int) (byte)1, true, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, " is less than 0.");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(16);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-150));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -150 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.random(697, 697, 338, false, false, (char[]) null);
      assertEquals("\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9\u02B9", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(307);
      assertEquals("                                                                                                                                                                                                                                                                                                                   ", string0);
  }
}
