/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:18:08 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomNumeric(26);
      assertEquals("22222222222222222222222222", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(18);
      String string0 = RandomStringUtils.randomAlphanumeric(18);
      assertEquals("222222222222222222", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "D4W4d");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 6891, 6891, false, true, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(313);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-135));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -135 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-18));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -18 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-527));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -527 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      RandomStringUtils.random(56319, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(57343, true, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(1368, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1647), string0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1647 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1158, (-1), 32, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56319, 56319, 56319, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1269, 1713, 1269, false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1225, (-2770), (-1851), false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-648), (-988), 56320, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -648 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(43, 43, 43, false, false);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RandomStringUtils.random(2873, false, false);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(2873);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomStringUtils.random(2873, (-1), 56320, false, false, (char[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      RandomStringUtils.random(2873);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-730));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -730 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(6, 677, 3398, true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u02A5\u02A5\u02A5\u02A5\u02A5\u02A5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(375, 1984, 815, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 0, true, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(31, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(42506, 0, 42506, true, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56319, 56319, 56319, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3178), 0, 1218, false, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3178 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = RandomStringUtils.random(403, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "X2Z+");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-163L));
      // Undeclared exception!
      RandomStringUtils.random(1494, 56192, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1455, 56174, (-1), false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(2081, (-2189), 2073, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(459, 57343, 459, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RandomStringUtils.random(468, 1984, 468, true, true);
      assertEquals("\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0\u07C0", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Random.setNextRandom(44);
      String string0 = RandomStringUtils.randomAlphabetic(44);
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(31, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      RandomStringUtils.random(46361, 0, 0, false, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(50235, 0, (-1), true, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2541, 25, 25, false, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2457, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-595));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -595 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(29);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(44);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-323), 2242, 2242, false, false, (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -323 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(44);
      assertEquals("                                            ", string0);
  }
}
