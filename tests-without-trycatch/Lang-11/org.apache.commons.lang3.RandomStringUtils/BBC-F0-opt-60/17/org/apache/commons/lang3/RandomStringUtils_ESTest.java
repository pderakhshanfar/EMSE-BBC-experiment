/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:25:24 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 0, (-1), false, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(56192);
      String string0 = RandomStringUtils.randomAlphanumeric(14);
      assertEquals("MMMMMMMMMMMMMM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(438);
      String string0 = RandomStringUtils.randomAlphabetic(438);
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(16, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(2605);
      assertNotNull(string0);
      
      String string1 = RandomStringUtils.random(0, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, false, (char[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(549, (-926), 37413, false, false);
      assertEquals("\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62\uFC62", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, 0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1435));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1435 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(57343);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1675));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1675 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-250));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -250 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1858));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1858 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(57343);
      // Undeclared exception!
      RandomStringUtils.random(2303, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-684), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -684 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(4807, true, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2117), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2117 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56319, "gmBT;Y2_RJ^");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(30, (-363), 0, true, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(57343, (-743), (-743), false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(33, 2475, (-1532), false, true, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-2720), (-2720), (-2720), false, false, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2720 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2747, 1245, 0, true, true, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1752, 1752, 1752, false, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-42), 1, (-42), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -42 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 917, 917, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-4239));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4239 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(5, (-29), 5, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uFFE3\uFFE3\uFFE3\uFFE3\uFFE3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1064, 1064, (-29), true, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '0';
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(1, 1, (-2117), false, true, charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000'}, charArray0);
      assertEquals("0", string0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(16, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(34, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(34, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(27, 0, 5, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-363), (-363), (-363), true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -363 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[5];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(0, (-2099), (-2099), false, false, charArray0, (java.util.Random) mockRandom0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = RandomStringUtils.random(2303, (char[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-3125), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -3125 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-60L));
      // Undeclared exception!
      RandomStringUtils.random(1, 56192, 34, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1, 56169, 1, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(36, 56177, (-3044), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertEquals("\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00\uDB71\uDC00", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(549, 56320, 10, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(22);
      String string0 = RandomStringUtils.randomNumeric(22);
      assertEquals("6666666666666666666666", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1, 0, 0, true, false, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(29, 10, 777, false, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = RandomStringUtils.random(2754, ">");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(22);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(14);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(438);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(949, (-1546), 949, true, true, (char[]) null);
      assertEquals("\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6\uF9F6", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(22);
      assertEquals("                      ", string0);
  }
}
