/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:07:13 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(425);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                         ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-1072));
      String string0 = RandomStringUtils.randomAlphanumeric(1);
      assertNotNull(string0);
      assertEquals("g", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(56192);
      String string0 = RandomStringUtils.randomAlphabetic(425);
      assertNotNull(string0);
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomStringUtils.random(18, "$N~{A,*>Hq'*");
      assertNotNull(string0);
      assertEquals("$$$$$$$$$$$$$$$$$$", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "$N~{A,*>Hq'*");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom(1);
      char[] charArray0 = new char[3];
      charArray0[2] = 'F';
      String string0 = RandomStringUtils.random(1, 1, 350, true, true, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'F'}, charArray0);
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(0, (-1713), 0, false, true, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 32, (-488), false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(85);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1713));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1713 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-4831));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -4831 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1424);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-1919));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1919 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56320, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(2944, true, true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2253, (-1755), (-790), true, true, charArray0, (java.util.Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockRandom mockRandom0 = new MockRandom(56320);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56320, (-739), 1181, true, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1284L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2253, 2253, 2253, false, false, (char[]) null, (java.util.Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(35, 1, 0, true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-340), 0, 0, false, false, (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -340 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1435, 1435, 1435, true, true, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(55296, 55296, 425, false, false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-770), (-770), 26, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -770 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(3085, 582, 582, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(46334);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-89), charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -89 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-343L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(19, (-2792), (-1241), false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518\uF518", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1064L));
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(2253, 331, 1274, true, true, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '4';
      MockRandom mockRandom0 = new MockRandom((-408));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      String string0 = RandomStringUtils.random(1, 1, (-1), true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '4', '\u0000'}, charArray0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1043, 0, 0, true, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(32, 0, 0, false, false, (char[]) null, (java.util.Random) mockRandom0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(17, 0, 0, false, true, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(15, 0, (-38), true, false, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(85, 85, 85, false, true, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[4];
      MockRandom mockRandom0 = new MockRandom((-408));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), 1, (-1), true, false, charArray0, (java.util.Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string0 = RandomStringUtils.random(0, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(114, 56192, 114, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(141, 56182, 141, false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random((int) 'E', 56320, (int) 'E', false, false, (char[]) null, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(16);
      String string0 = RandomStringUtils.randomNumeric(16);
      assertEquals("0000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = RandomStringUtils.random(4, (-1241), 4, true, true);
      assertEquals("\uFB27\uFB27\uFB27\uFB27", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RandomStringUtils.random(16, false, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      RandomStringUtils.random(46327, 0, 0, true, true, charArray0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56189, ")");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(56191, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1713), (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1713 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(16);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(56182);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(16, 271, 0, false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAscii(56191);
  }
}
