/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 13:28:58 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(533);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      RandomStringUtils.random(533, 0, (-1032), true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1423);
      String string0 = RandomStringUtils.randomAlphanumeric(1);
      assertEquals("Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(42);
      String string0 = RandomStringUtils.randomAlphabetic(1);
      assertEquals("J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = RandomStringUtils.random(0, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.random(4090, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, true, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "f'FJRFqu>dYV");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      String string0 = RandomStringUtils.random(814, 0, 0, true, false, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = RandomStringUtils.random(0, 0, 1, true, true, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random(52, 633, 0, false, false);
      assertEquals("\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, 0, Integer.MAX_VALUE, false, true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = RandomStringUtils.random(1423);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1423);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomNumeric((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAscii((-1052));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1052 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphanumeric((-1466));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1466 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(1597);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.randomAlphabetic((-2792));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -2792 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      RandomStringUtils.random(36230, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-275), true, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -275 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(56192, "S");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-992), "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -992 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(128, 128, 33, true, true, charArray0, (Random) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(806);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(806, 2677, 0, true, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom((-4671L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2515, 4554, 4554, false, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      RandomStringUtils.random(56192, 0, 1, true, true, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-883), (-883), (-883), true, true, charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -883 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(803, 803, 803, false, false, charArray0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-344), 0, (-2284), false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -344 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(2961, 2961, 2961, true, true);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = RandomStringUtils.random(4090, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(6687, 57343, 6687, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      RandomStringUtils.random(1, 0, 0, true, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(32, 0, 1008, false, false, charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = RandomStringUtils.random(0, 0, 2018, false, false, charArray0, (Random) null);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(467, false, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1676, 0, 0, true, false);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-1356), (char[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -1356 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(57343, 56192, (-1), false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6194);
      // Undeclared exception!
      RandomStringUtils.random(123, 55296, 1, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(56320);
      // Undeclared exception!
      RandomStringUtils.random(127);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6656);
      RandomStringUtils.random(6656, (-1729), 6194, false, false, (char[]) null, (Random) mockRandom0);
      // Undeclared exception!
      RandomStringUtils.randomAscii(4200);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      char[] charArray0 = new char[7];
      charArray0[1] = '0';
      String string0 = RandomStringUtils.random(13, 1, (-489), false, true, charArray0, (Random) mockRandom0);
      assertEquals("0000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2110L));
      String string0 = RandomStringUtils.random(633, 633, (-4), true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279\u0279", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, (char[]) null, (Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomStringUtils.random(1213, 0, 0, false, true, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[9];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2154L));
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(40, 6, (-99), false, false, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The chars array must not be empty
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
//      try { 
        RandomStringUtils.random((-996), (-996), 0, true, true, charArray0, (Random) mockRandom0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requested random string length -996 is less than 0.
//         //
//         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = RandomStringUtils.randomNumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphanumeric(1593);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphabetic(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        RandomStringUtils.random(1075, 2755, 1789, false, false, charArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(2136);
      assertNotNull(string0);
  }
}
