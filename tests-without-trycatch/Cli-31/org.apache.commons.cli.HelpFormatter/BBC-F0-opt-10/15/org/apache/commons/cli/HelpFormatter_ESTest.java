/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:08:04 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("8;lc ;!,", 3, 3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.Util", options1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setOptPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.printHelp(5284, "arg", (String) null, options0, "/qw:I\"w#Im^N");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding((-1598));
      Options options1 = options0.addOption("", true, "*6");
      options1.getOption((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("b9nz~H", options1);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "arg";
      helpFormatter1.printHelp(3, "\n", "arg", options0, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "--", "--", options0, "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1367), "", "", options0, 436, 436, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Option option0 = new Option("arg", "-", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultWidth = (-2);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("$<p", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "sII@g2()PU==)>YB";
      helpFormatter1.printHelp(3, "\n", "arg", options0, "usage: ");
      Option option0 = new Option("arg", "G");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 3, options1, 3, 671);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "";
      options0.addOption("", "}|7i", true, "-");
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(44, "org.apache.commons.cli.HelpFormatter", ",", options2, " ] [ long ", true);
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "org.apache.commons.cli.AlreadySelectedException", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption("", "}|7i", true, "-");
      option0.setArgName((String) null);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "org.apache.commons.cli.AlreadySelectedException", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.createPadding(34);
      int int0 = 9;
      helpFormatter0.setLeftPadding((-1630));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("line.separator", (Options) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultNewLine = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(10);
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 821, "", "   ", options0, 7, 74, "usage: ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptionGroups();
      Option option0 = new Option("", "-", true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(63, "TLBq,o85wlqwu7:i", "-", options1, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      String string1 = null;
      String string2 = "#H";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("kI.wLHl", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'kI.wLHl' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Option option0 = new Option("arg", "arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", true, "");
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(" | ", "", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      Option option0 = new Option("arg", "-", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultLeftPad = 6;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 102, 2812);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-7));
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~Gq,1Va");
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "e8u%[CU<5q#j019#!9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "   ", "d\"'H~Gq,1Va", options0, (-5314), 57, "K?a[5@");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1510, options0, 1510, 2708);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "\n", true, " ");
      helpFormatter0.printHelp(1, " ", " ", options0, "%");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-813));
      helpFormatter0.optionComparator = null;
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "-");
      Options options2 = options1.addOption(option0);
      stringBuffer0.append((-1L));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = 5542;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5542, "QzoKbv@x8i1", "SuBhJVp#iUWMff:", (Options) null, 26, 26, "9]@6yO2eaOiMzS");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultSyntaxPrefix = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "-4C0RV+C", "-4C0RV+C", options0, "-4C0RV+C", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", ", ", options2, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setArgName("arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 308, "hwq|{2n(7 Qa", "org.apache.commons.cli.HelpFormatter", options0, 3, 3, "hwq|{2n(7 Qa", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "gqg", " ]", options0, 0, 0, "gqg", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      options0.toString();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "", options0, 604, 1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("+", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.printHelp("oKa", "", options0, "-", true);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.printHelp(printWriter0, 13, "oKa", "cmdLineSyntax not provided", options0, 0, 13, "", true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("6i", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer("--");
      helpFormatter0.setArgName("cYARAS6Ory>U9a");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(2044, "SG9#N,oZG=/$", " ", options0, " ");
      helpFormatter1.getOptionComparator();
      helpFormatter1.rtrim((String) null);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "--");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(567, "jS?Kz{3H9", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      mockPrintWriter0.print((double) 567);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      helpFormatter0.printOptions(printWriter0, 10, options0, 1, 567);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ":>nCk3mw4K\"!Ml=Y";
      objectArray0[2] = (Object) printStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      mockPrintWriter0.printf(locale0, ",#\"!)wNUB88wDnz7", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "I+JP{J-]?F?9(:!0T", "'", options0, 74, 1, "'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.printHelp(5284, "v(Z>9$2\"]<6 >", (String) null, options0, "n?&I)tT]BdD[Q");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("LR", options0);
      helpFormatter1.getOptionComparator();
      helpFormatter0.findWrapPos("-", 1, 10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 1, 115, "");
      helpFormatter1.createPadding(10);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.forLanguageTag("arg");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 99, ", ", "arg", options1, (-32), 182, "arg", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ":>nCk3mw4K\"!Ml=Y";
      objectArray0[2] = (Object) printStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ",#\"!)wNUB88wDnz7", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 3050, "<", (String) null, options0, 99, 3050, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setLeftPadding((-389));
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) ",#\"!)wNUB88wYDnz7";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 70, (String) null, "~Rc`fJ6_cH}5yQ*", options0, 1917, 1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("", "}|7i", true, "'6sAHGuyQ,r.4x");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), ">", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setLeftPadding((-389));
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "usage: ";
      mockPrintWriter0.printf(locale0, ",#\"!)wNUB88wDnz7", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1917, "PX`%2o[", "=0zB#5?Lq<,(N", options0, 2399, 70, "", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) "usage: ";
      mockPrintWriter0.printf(locale0, ",#\"!)wNUB88wYDnz7", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1917, "PX`%2o[", "", options0, 2399, 70, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2125), ";K5m0kyGIf1v$(V", "[", options0, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 40, "", "--", options0, 1917, 30, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Locale locale1 = new Locale("usage: ");
      mockPrintWriter1.printf(locale1, "-", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-3106), ">", "?p", options0, 971, 56, "-", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.setOptPrefix("b9nz~H");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.printHelp(5284, "arg", (String) null, options0, "/qw:I\"w#Im^N");
      helpFormatter0.getOptionComparator();
      Options options1 = options0.addOption("", true, "*6");
      helpFormatter0.printHelp("b9nz~H", options1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setLeftPadding((-389));
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "usage: ";
      mockPrintWriter0.printf(locale0, ",#\"!)wNUB88wYDnz7", objectArray0);
      Options options0 = new Options();
      String string0 = "PX`%2o[";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1917, "PX`%2o[", "", options0, 2399, 70, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 70, 134);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setLeftPadding((-389));
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "usage: ";
      mockPrintWriter0.printf(locale0, ",#\"!)wNUB88wYDnz7", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1917, "PX`%2o[", "", options0, 2399, 70, "", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "D9", true, "o0LzRhO*");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), (String) null, options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3106), " ", "", options1, 64, 64, ">", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", false, "d(5Fmi4X4v");
      options0.hasShortOption(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "6wc?i&", "6wc?i&", options1, 9, 9, "o1r<5^W2D21");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("6wc?i&", options1);
      options1.hasOption("");
      StringBuffer stringBuffer0 = new StringBuffer(69);
      Option option0 = new Option("arg", "arg", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 69, options2, (-1), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 3, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7\\`tL'g=$b9ZC@ew";
      helpFormatter0.setLeftPadding((-3252));
      Options options0 = new Options();
      String string1 = "";
      options0.hasLongOption("");
      options0.helpOptions();
      options0.hasOption("usage: ");
      helpFormatter0.defaultLongOptPrefix = "-";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(31, "7`tL'g=$b9ZC@ew", "7`tL'g=$b9ZC@ew", options0, "[", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2503);
      helpFormatter0.setNewLine("[1-M[nCb~'470uCd<f");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[1-M[nCb~'470uCd<f", "cML", options0, "o?k0Pq\"V[s\"~#Ks}N", false);
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.addOption("Mbi", false, "arg");
      helpFormatter1.printHelp(464, "9rOqb\"", "cML", options1, " ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp(10, "nRg%E?$t,a0~V", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">", true, " ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      PrintWriter printWriter0 = null;
      Options options2 = options1.addOption("arg", "z1*#YFT", true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "-", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#NV>@8jFI:'QuZ");
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLeftPadding(2584);
      helpFormatter0.setOptPrefix("]-.NeShe$AE;tw");
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultWidth = 3497;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "Rf0uMkq", options0, "[v=Ee");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, " ");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 934, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1, "m`q(Pu'$*TY_l", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1375, 1, "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 58, (-3391), "0)P: Rqd84pJ'Q{Rl2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "-", options0, "' was specified but an option from this group ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.printHelp(1375, "' was specified but an option from this group ", "dk", options1, "arg");
      helpFormatter0.createPadding(71);
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1375, 63, "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 58, (-3391), "0)P: Rqd84pJ'Q{Rl2");
      helpFormatter0.defaultLeftPad = (-2302);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "-", options1, "' was specified but an option from this group ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "\n");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 58, (-3391), "0)P: Rqd84pJ'Q{Rl2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 74, 74, "arg");
      helpFormatter1.createPadding(50);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter2.getOptionComparator();
      helpFormatter2.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      StringBuffer stringBuffer0 = new StringBuffer("0)P: Rqd84pJ'Q{Rl2");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 648;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "0)P: Rqd84pJ'Q{Rl2";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "0)P: Rqd84pJ'Q{Rl2";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter1.printUsage(printWriter0, 74, "^nL,", options0);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, 648, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(50, "\n", "--", options0, (String) null);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("*8/#i");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(47);
      helpFormatter0.getArgName();
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",](Gc3K1)TqnK;&)R";
      helpFormatter0.findWrapPos(",](Gc3K1)TqnK;&)R", 1859, 1859);
      Options options0 = new Options();
      String string1 = "fzYKG8#\\#|y6UkM";
      Option option0 = null;
//      try {
        option0 = new Option("\n", "fzYKG8##|y6UkM");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-7));
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~Gq,1Va");
      int int0 = (-836);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(5284, "$|QH}2GVH+{S{ort ", (String) null, options0, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 355;
      helpFormatter1.renderOptions(stringBuffer0, 0, options0, 74, 355);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1375, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", options0, false);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(63, (String) null, "v", options0, "P{'Iq,o(C");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      String string0 = ".V!8";
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1375, 63, "\n");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3391), "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.setArgName(" ]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(5284, "hV@t`?U?+SY[W4", "--", (Options) null, "2BO?!!E");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = ">";
      Option option0 = new Option("arg", ">", true, " ");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", "c(\"K5i?a5Z){r|[Hx!", options1, "c(\"K5i?a5Z){r|[Hx!", true);
      Option option1 = null;
//      try {
        option1 = new Option("-", "   ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("\n");
      StringBuffer stringBuffer0 = null;
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 0, 0);
      options0.getOption("--");
      helpFormatter0.printHelp("arg", "--", options0, "");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 2, 741, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 1375, 63, "\n");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 58, (-3391), "0)P: Rqd84pJ'Q{Rl2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 1375, 74, "");
      helpFormatter1.createPadding(88);
      helpFormatter1.getOptionComparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1222);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter1.printf("org.apache.commons.cli.HelpFormatter", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.KOREAN;
      PrintWriter printWriter1 = mockPrintWriter2.format(locale0, "aiir*5{", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 88, "aiir*5{");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "");
      Option option0 = new Option("arg", false, "[");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(472, "--", "--", options2, "", false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = ">";
      Option option0 = new Option("arg", ">", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", "c(\"K5i?a5Z){r|[Hx!", options1, "c(\"K5i?a5Z){r|[Hx!", true);
      Option option1 = null;
//      try {
        option1 = new Option("-", "   ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      String string1 = "<";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.defaultOptPrefix = ">";
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("arg");
      String string2 = "";
      int int0 = 2806;
      int int1 = 1;
      // Undeclared exception!
//      try { 
        stringWriter0.write("", 2806, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~Gq,1Va");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-836), options0, 0, 32);
      helpFormatter0.printHelp(1122, "I!U@^FAW_^n", "e^AG&1uW;I}C=0Z", options0, "");
      helpFormatter0.createPadding(36);
      helpFormatter0.setLeftPadding(63);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      String string0 = "";
      helpFormatter0.setArgName("");
      int int0 = (-2919);
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("S|2aMko_", "", options0, "S|2aMko_", false);
      Option option0 = new Option("", "y@~Y8ith3LmMar B}i\"");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("a63+O{rN", (-2919), (-2));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 32, "");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.createPadding(74);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("%|.");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      StringBuffer stringBuffer0 = new StringBuffer(".V!8");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 1375, 63, "\n");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 58, (-3391), "0)P: Rqd84pJ'Q{Rl2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 1375, 74, "");
      helpFormatter1.createPadding(88);
      helpFormatter1.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter1.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      PrintWriter printWriter0 = null;
      String string1 = "\\@na}(E+!qJC";
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 35, "@na}(E+!qJC", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.createPadding(34);
      helpFormatter0.setLeftPadding(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t3i:>q`R0Os");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "t3i:>q`R0Os", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2014));
      helpFormatter0.setSyntaxPrefix(" }w\n8;oX");
      String string0 = "'";
      helpFormatter0.setNewLine("'");
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("y@~Y8ith3LmMar B}i\"", "", (Options) null, "S|2aMko_", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~Gq,1Va");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-836), options0, 0, 32);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 0, 36, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 36, (-836), " ");
      helpFormatter0.renderWrappedText(stringBuffer2, 36, (-836), "y03NzcW");
      helpFormatter0.createPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setArgName(" ");
      helpFormatter0.setSyntaxPrefix("line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine(" ");
      PrintWriter printWriter0 = null;
      int int1 = (-1265);
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-1265), 2, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      String string1 = "v){C55t &";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "v){C55t &", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-836), options0, 0, 32);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding((-2014));
      String string1 = "";
      Options options0 = new Options();
      String string2 = "y@~Y8ith3LmMar B}i\"";
      String string3 = "S|2aMko_";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("y@~Y8ith3LmMar B}i\"", "S|2aMko_", options0, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2014));
      String string0 = " }w\\n8;oX";
      helpFormatter0.setSyntaxPrefix(" }w\n8;oX");
      helpFormatter0.setNewLine(" ");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 32, " ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">", true, " ");
      options0.addOption((String) null, ">", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(922);
      helpFormatter1.setArgName(" ");
      helpFormatter1.getNewLine();
      options0.getOptionGroups();
      helpFormatter2.setOptPrefix("usage: ");
      helpFormatter2.printHelp(", ", options0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~Gq,1Va");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-836), options0, 0, 39);
      helpFormatter0.createPadding(36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 0, 36, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 36, (-836), " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1255));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "S|2aMko_", options0, "S|2aMko_", false);
      Option option0 = new Option("arg", "k09N:h1dCH");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("arg", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(117, "", "", options2, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.addOption("", "OlN&nZ4j;", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-7301));
      helpFormatter1.setArgName("");
      helpFormatter0.getNewLine();
      options2.getOptionGroups();
      helpFormatter1.setOptPrefix("Ox?e(ZKV,&.");
      helpFormatter0.printHelp("Cannot add value, list full.", options1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = 10;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      StringBuffer stringBuffer0 = null;
      int int1 = 63;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 63, 10, "-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "O4K[TUA=dlq", "n@b9A`PP^", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">", true, " ");
      optionGroup0.addOption(option0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~Gq,1Va");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-836), options0, 0, 32);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 0, 36, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 36, (-836), " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1255));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~GHq,KVa");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-836), options0, 0, 32);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 0, (-836), " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2014));
      String string0 = " }w\\n8;oX";
      helpFormatter0.setSyntaxPrefix(" }w\n8;oX");
      String string1 = "'";
      helpFormatter0.setNewLine("'");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 32, ";umK4#ngnB)>!<JZ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer("d\"'H~Gq,1Va");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      String string1 = "wchG[r";
      Locale locale0 = new Locale("", "wchG[r", "732v");
      Object object0 = new Object();
      String string2 = " ";
      MockFile mockFile0 = new MockFile("--", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) "";
      Object object2 = new Object();
      objectArray0[5] = object2;
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1362), " ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = (-1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "-");
      StringBuffer stringBuffer0 = null;
//      try {
        stringBuffer0 = new StringBuffer((-2966));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "V2CBCIv[G\\Xp&5Y#";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "V2CBCIv[GXp&5Y#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("arg", ">", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "";
      Options options2 = options1.addOption("", "OlN&nZ4j;", true, " ");
      options2.hasShortOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "0$U?");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "7F{:IXk:B0YfPlJ'-x;";
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "7F{:IXk:B0YfPlJ'-x;", false, (String) null);
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1754);
      helpFormatter0.getDescPadding();
      String string0 = "--";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1754), "--", "--", (Options) null, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(302);
      helpFormatter0.setNewLine("^I&xYu");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-4903));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.insert(0, (long) 1);
      int int0 = 0;
      stringBuffer0.append((long) 74);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 0, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "M[^,V");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOption((String) null, "M[^,V", false, "");
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", "--", true, "-");
      Options options4 = options3.addOption("rtF", true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options4, 0, (-282));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")R");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\".qZ~;", "=:n6##RZ-*3`<%jY1", (Options) null, "=");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2192);
      helpFormatter0.setDescPadding(2006);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("]");
      helpFormatter0.setDescPadding(2192);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = (-3338);
      helpFormatter0.setDescPadding((-1341));
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option(" ", "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding((-1));
      int int0 = (-2919);
      String string1 = "";
      Options options0 = new Options();
      String string2 = "y@~Y8ith3LmMar B}i\"";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("S|2aMko_", "", options0, "S|2aMko_", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3833;
      String string0 = "[ Options: [ short ";
      String string1 = "q$";
      Options options0 = new Options();
      String string2 = "~Rib0n5Y=P8a}Lg|u)$";
      PrintWriter printWriter0 = null;
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "q$");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-2);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption(" | ", "--", true, "cmdLineSyntax not provided");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' | ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ">", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", "c(\"K5i?a5Z){r|[Hx!", options1, "c(\"K5i?a5Z){r|[Hx!", true);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.setOptPrefix("0!15P)' y7QX");
      assertEquals("0!15P)' y7QX", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "J-";
      helpFormatter0.defaultSyntaxPrefix = "J-";
      int int0 = (-361);
      helpFormatter0.setDescPadding((-361));
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(3, (double) 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 3
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("U-");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, (-1), "\"zS");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 31, options0, 9, (-2329));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("-C\"DjbA");
      helpFormatter0.getSyntaxPrefix();
      assertEquals("-C\"DjbA", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.setSyntaxPrefix("_v[fH|OMA r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionGroup");
      mockPrintWriter0.append((CharSequence) "--", 0, 0);
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("--", "org.apache.commons.cli.Options", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
