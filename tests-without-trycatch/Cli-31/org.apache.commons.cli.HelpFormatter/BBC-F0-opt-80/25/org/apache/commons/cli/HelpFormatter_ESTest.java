/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:25:51 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, "--");
      option0.setArgName("");
      options0.addOption(option0);
      helpFormatter0.printHelp(3, "arg", "arg", options0, "arg", true);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "\n", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, "--");
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions((StringBuffer) null, (-2), options0, 3472, 3472);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":je~Zf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":je~Zf");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultOptPrefix = "A`RbOrsnM3(LnFs5D";
      helpFormatter0.setWidth(835);
      helpFormatter0.setLeftPadding((-1569));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 64;
      helpFormatter0.setLongOptPrefix("CXVZA+Xp#0J\"Ql@_VN");
      helpFormatter0.defaultArgName = "CXVZA+Xp#0J\"Ql@_VN";
      helpFormatter0.getSyntaxPrefix();
      int int0 = 429;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter(64);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 429, "[ option: ", "hdNod/mmfdFN&J", options1, 1018, (-4502), (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "arg");
      Options options2 = options1.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "z9==Fe[d");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "", options4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("&9<481<h<Ce)X5Va", "&9<481<h<Ce)X5Va", options0, "\n", true);
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, " :: ", "cmdLineSyntax not provided", options0, 64, 1, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      String string1 = "'";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("]", "'", (Options) null, "]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-25));
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, "A CloneNotSupportedException was thrown: ");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "~@KZ+Gh", "~@KZ+Gh", options0, "~@KZ+Gh", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 33, 77, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      int int0 = 0;
      helpFormatter0.findWrapPos("' was specified but an option from this group ", 17, 0);
      helpFormatter0.getDescPadding();
      String string1 = "a7F#S,o~'vX9e";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
//      try { 
        options1.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultWidth = (-1842);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(".Ck'+>4iWQ=N%*Fcf", options0, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 368, options0, 64, 119);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), 368, "-P@'0=/&Ol!2Wu5d");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      Options options0 = new Options();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "^:y'`b`I$_I6\"?*do7|";
      int int0 = 342;
      mockPrintWriter0.print((long) 342);
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.c]i.AlreadySelectedExcept7on";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.c]i.AlreadySelectedExcept7on", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "z6d\\uF#=bC";
      helpFormatter0.defaultNewLine = string0;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      stringBuffer0.chars();
      helpFormatter0.renderWrappedText(stringBuffer0, 2635, 17, " ");
      helpFormatter0.findWrapPos(" ", 17, 2635);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.getOptionGroups();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 883, options0, 883, 883);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = new Locale("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("|6]KCtQ67#m,3oqW&~a", "usage: ", options0, "--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      mockPrintWriter0.printf("[", objectArray0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.printHelp("&9<481<h<Ce)X5Va", "", options0, "", true);
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("|6]KCtQ67#m,3oqW&~a", "usage: ", options0, "--", true);
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 165, "J", options1);
      StringBuffer stringBuffer1 = new StringBuffer("dr1EuXTF%rKyqhIEFu");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, true, (String) null);
      helpFormatter0.printHelp("VBa8+@T9l&`,9V4\"h", ":", options0, "usage: ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.append('|');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1593, "[");
      helpFormatter0.getOptPrefix();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("sQ,@|e,*^a/p%?D<");
      helpFormatter0.printOptions(mockPrintWriter0, 1593, options0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, (String) null, true, (String) null);
      helpFormatter0.printHelp("VBa8+@T9l&`,9V4\"h", ":", options0, "usage: ", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3113, options0, 1268, 3113);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setArgName("]");
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("|6]KCtQ67#m,3oqW&~a", "]", options0, "", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("]", options1);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer1 = null;
//      try {
        stringBuffer1 = new StringBuffer((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setArgName("]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("|6]KCtQ67#m,3oqW&~a", "]", options0, "", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3113, 3);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, (String) null, true, (String) null);
      helpFormatter0.printHelp("VBa8+@T9l&`,9V4\"h", ":", options0, "kZ[3b", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 655, (String) null, (String) null, options0, (-1104), (-332), "g7sH9*g-yKV5&.j.Wp");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.getOptionGroups();
      helpFormatter0.printHelp(14, "ULU*|P:Pu,GXaMF?q2z", " ", options0, "--");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("H`>Pyx$-/Py':-", options0);
      int int0 = 883;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 883, 34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", (String) null, true, "arg");
      helpFormatter0.printHelp("   ", options0);
      helpFormatter0.findWrapPos("6jhAe-g8pC'rI", 690, (-1));
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(41, "usage: ", "/TCiq$R5~GhJeYLq", options0, "   ", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(70);
      helpFormatter0.renderWrappedText(stringBuffer0, 70, (-365), "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 11, options0, 11, 4);
      helpFormatter0.getOptPrefix();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer1 = new StringBuffer("");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      String string1 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 26, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 26, (Options) null, 74, 26);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options1.helpOptions();
      String string0 = helpFormatter0.defaultOptPrefix;
      options1.addOption("arg", "?%!L1-L>", true, "?%!L1-L>");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" | ", "", options1, "", true);
      StringWriter stringWriter0 = new StringWriter(57);
      StringWriter stringWriter1 = stringWriter0.append('f');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-3180), options0, 0, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", (String) null, true, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 366);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      helpFormatter0.printHelp(printWriter0, 521, "8ZD>", "", options1, 665, 521, ".Olm'E*<G3vDq", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "8ZD>", options1, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("ULU*|P:Pu,GXaMF?q2z");
      options0.getOptionGroups();
      options0.hasShortOption("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("51pgf $-?1&");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", (String) null, options0, 0, (-955), "51pgf $-?1&", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 14;
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.getOptionGroups();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(64);
      helpFormatter0.printHelp(" | ", "", options0, "");
      helpFormatter0.defaultNewLine = "E%zt@If<P";
      helpFormatter0.getLongOptPrefix();
      File file0 = MockFile.createTempFile("arg", "E%zt@If<P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "E%zt@If<P";
      objectArray0[1] = (Object) "E%zt@If<P";
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 64, "--");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.getOptionGroups();
      options0.hasShortOption("3wCqOy8c Y*");
      MockPrintStream mockPrintStream0 = new MockPrintStream("[ option: ");
      MockPrintStream mockPrintStream1 = new MockPrintStream("ULU*|P:Pu,GXaMF?q2z");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 521, "xbZi!)0t@- 4K5MJqW", "<", options0, 0, 0, (String) null, false);
      helpFormatter0.printHelp("ULU*|P:Pu,GXaMF?q2z", "", options0, "=L[E>EnD>ro&gzT", true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "xbZi!)0t@- 4K5MJqW");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [ short ", false, "arg");
      options0.addOption(option0);
      helpFormatter0.rtrim("[ Options: [ short ");
      options0.hasShortOption("Ezu7aJB:2( Bb3GNMY/");
      MockPrintStream mockPrintStream0 = new MockPrintStream("w{qPn_+}");
      MockPrintStream mockPrintStream1 = new MockPrintStream("-");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("[ option: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "HMrBxzp8enw^0!fcmv6", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "-", true, "");
      options0.helpOptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7t", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.getOptionGroups();
      options0.hasShortOption("3wCqOy8c Y*");
      MockPrintStream mockPrintStream0 = new MockPrintStream("[ option: ");
      MockPrintStream mockPrintStream1 = new MockPrintStream("ULU*|P:Pu,GXaMF?q2z");
      MockPrintStream mockPrintStream2 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 521, "xbZi!)0t@- 4K5MJqW", "<", options0, 0, 0, "-", false);
      helpFormatter0.printHelp("ULU*|P:Pu,GXaMF?q2z", "", options0, "=L[E>EnD>ro&gzT", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "[ option: ";
      objectArray0[1] = (Object) "ULU*|P:Pu,GXaMF?q2z";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printHelp(printWriter0, 99, "=L[E>EnD>ro&gzT", "=L[E>EnD>ro&gzT", options0, 2355, 556, (String) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", "-", true, "");
      options0.helpOptions();
      helpFormatter0.rtrim("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "w", "", options0, "w");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "");
      Options options1 = options0.addOption("", "-", true, "");
      options0.helpOptions();
      Options options2 = new Options();
      helpFormatter0.printHelp("gS_temXSp4&CGm", "&9<481<h<Ce)X5Va", options1, ", ", false);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printHelp("~%J", ", ", options2, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 10, 63, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 5, 5, "-");
      Options options0 = new Options();
      options0.getOptions();
      stringWriter0.append((CharSequence) "arg");
      stringBuffer1.chars();
      stringWriter0.write("<");
      options0.getMatchingOptions("--");
      options0.hasLongOption("OtiO=v'o2+k{72w9");
      helpFormatter0.renderOptions(stringBuffer1, 5, options0, 5, 0);
      helpFormatter0.setSyntaxPrefix("-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      options0.helpOptions();
      helpFormatter0.rtrim("-");
      options1.hasShortOption("3wCqOy8c Y*");
      String string0 = "HMrBxzp8enw^0!fcmv6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("HMrBxzp8enw^0!fcmv6");
      MockPrintStream mockPrintStream1 = new MockPrintStream("-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream2, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "-", options0, 90, 90, "UU&eB", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("fr5A4zh-1[~lWF\"");
      MockPrintStream mockPrintStream2 = new MockPrintStream("-");
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockPrintStream1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream3, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 0;
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "line.separator", options0, "jd,ikN:)%[", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)63;
      byte byte0 = (byte)24;
      byteArray0[4] = (byte)24;
      byte byte1 = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)63;
      objectArray0[1] = (Object) "--";
      objectArray0[2] = (Object) (byte)32;
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) (byte)32;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (byte)33;
      objectArray0[7] = (Object) (byte) (-30);
      objectArray0[8] = (Object) null;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      String string0 = "5QI";
      String string1 = "<";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1136), "L$");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("\"", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "DGke", true, "[ARG...]");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2831), "TQbHX9~", "", options1, 892, 85, "[ARG...]", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(31);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      Locale locale0 = Locale.ITALIAN;
      locale0.getExtension('m');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix(",:hKtr)]gI");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(33, "|:qF+=+", "Gaj}&,\"`Yhr/Y", (Options) null, "|:qF+=+", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      options0.helpOptions();
      helpFormatter0.rtrim("--");
      options1.hasShortOption("3wCqOy8c Y*");
      MockPrintStream mockPrintStream0 = new MockPrintStream("HMrBxzp8enw^0!fcmv6");
      MockPrintStream mockPrintStream1 = new MockPrintStream("-");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream2, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2125), "zuFFZA{p5*8'Z", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.setArgName((String) null);
      String string0 = "CTsfj?T}I%v0g";
      Options options0 = new Options();
      helpFormatter0.printHelp("&9<481<h<Ce)X5Va", "&9<481<h<Ce)X5Va", options0, "F", true);
      helpFormatter0.setOptPrefix("CTsfj?T}I%v0g");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      int int0 = 1298;
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3100), "CTsfj?T}I%v0g");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(27);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      String string0 = "--";
      String string1 = "";
      mockPrintWriter0.append('S');
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 27, "", "", (Options) null, 74, (-106), "y{dcl$N `{;>`;f", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(31);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = Locale.KOREAN;
      locale0.getExtension('m');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("arg", "-", (Options) null, "-", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      options0.helpOptions();
      helpFormatter0.rtrim("--");
      options1.hasShortOption("3wCqOy8c Y*");
      MockPrintStream mockPrintStream0 = new MockPrintStream("HMrBxzp8enw^0!fcmv6");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 148, "org.apache.commons.cli.OptionGroup", (String) null, options0, 688, 545, "", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-837), options0, 148, 3100);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setArgName("]");
      Options options0 = new Options();
      helpFormatter0.printHelp("|6]KCtQ67#m,3oqW&~a", "]", options0, "", true);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3113, 3);
      helpFormatter0.createPadding(3113);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      options0.hasLongOption("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-77), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.OptionGroup");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      Options options1 = new Options();
      helpFormatter1.printHelp("3", "CTsfj?T}I%v0g", options0, "U*N'El@KhlB[Upx$", false);
      helpFormatter0.setOptPrefix("");
      helpFormatter1.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "usage: ", options1, "IYM$G@yD/lN%7");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2616, "cmdLineSyntax not provided", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      options0.getMatchingOptions("cmdLineSyntax not provided");
      options0.getOptionGroups();
      helpFormatter0.printHelp(1187, "o:B7wEMUfHdnRH", "BQ(F/pu/", options0, "o:B7wEMUfHdnRH");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter0.findWrapPos("\n", 32, 883);
      helpFormatter0.setLeftPadding((-1946));
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setArgName("9AY,o=.(P]KG");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "--", "EEhB", options0, "'", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("&9<481<h<Ce)X5Va", "&9<481<h<Ce)X5Va", options0, "F", true);
      helpFormatter0.setOptPrefix("CTsfj?T}I%v0g");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1298, "CTsfj?T}I%v0g", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nrGv3D:a}IF2";
      String string1 = null;
      MockFile mockFile0 = new MockFile("\n");
      File file0 = MockFile.createTempFile("nrGv3D:a}IF2", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = (-1102);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1102), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      helpFormatter0.printHelp("-", options0, false);
      options0.helpOptions();
      helpFormatter0.rtrim("--");
      options1.hasShortOption("3wCqOy8c Y*");
      MockPrintStream mockPrintStream0 = new MockPrintStream("HMrBxzp8enw^0!fcmv6");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 148, "org.apache.commons.cli.OptionGroup", (String) null, options0, 688, 545, "", true);
      helpFormatter0.printHelp("{Ua]H}h%;L!;E", "--", options0, "{Ua]H}h%;L!;E", true);
      StringBuffer stringBuffer0 = new StringBuffer(10);
      helpFormatter0.renderOptions(stringBuffer0, 7, options1, 1226, 31);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "";
      String string1 = "[ Options: [ short ";
      Option option0 = new Option("arg", "[ Options: [ short ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getMatchingOptions("}`9w(X:p;,W;");
      options1.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "", "", options1, "8r{cC[J,0>i|");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.getOptionGroups();
      helpFormatter0.printHelp(14, "ULU*|P:Pu,GXaMF?q2z", "", options0, "");
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-1946), (-1946));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      options1.addOption((String) null, "-", false, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, false);
      options0.helpOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("HMrBxzp8enw^0!fcmv6");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-");
      helpFormatter0.rtrim("--");
      options1.hasShortOption("3wCqOy8c Y*");
      MockPrintStream mockPrintStream0 = new MockPrintStream("HMrBxzp8enw^0!fcmv6");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 148, "org.apache.commons.cli.OptionGroup", (String) null, options0, 688, 545, "", true);
      helpFormatter0.printHelp("{Ua]H}h%;L!;E", "--", options0, "{Ua]H}h%;L!;E", true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      helpFormatter0.printHelp("-", options0, false);
      options0.helpOptions();
      helpFormatter0.rtrim("");
      options1.hasShortOption("3wCqOy8c Y*");
      MockPrintStream mockPrintStream0 = new MockPrintStream("HMrBxzp8enw^0!fcmv6");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 148, "org.apache.commons.cli.OptionGroup", (String) null, options0, 688, 545, "", true);
      helpFormatter0.printHelp("{Ua]H}h%;L!;E", "", options0, "{Ua]H}h%;L!;E", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(545, (String) null, (String) null, options1, "RbAUY47R~Nx ", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "i0Db=2";
      boolean boolean0 = true;
      options0.toString();
      String string2 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.setWidth(31);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      Locale locale0 = Locale.ITALIAN;
      locale0.getExtension('m');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ",:hKtr)]gI", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 26, "/Z", "/Z", (Options) null, (-1653), 31, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Option>();
      options0.addOption("", (String) null, true, "arg");
      helpFormatter0.findWrapPos("", 690, (-1));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string0 = "";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringBuffer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) null, 64, 64);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", (String) null, true, "arg");
      helpFormatter0.defaultDescPad = 47;
      helpFormatter0.createPadding(690);
      int int0 = (-2376);
      options1.helpOptions();
      helpFormatter0.setDescPadding(34);
      helpFormatter0.printHelp(34, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1481);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*h5~N~iSyrK}G?xN");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "CTsfj?T}I%v0g", options0, "CTsfj?T}I%v0g", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}`9w(X:p;,W;";
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [ short ", false, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = null;
      options2.addOption((String) null, "\n", false, "-");
      Options options3 = options2.addOption((String) null, "fP3GrQIlOiu[A", false, " ");
      options0.toString();
      Options options4 = options3.addOption("arg", true, "-");
      optionGroup0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "}`9w(X:p;,W;", "}`9w(X:p;,W;", options4, "[ Options: [ short ", true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1481);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      options1.addOption("arg", "\n", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1481));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2685), (String) null, "-", (Options) null, "org.apache.commons.cli.OptionGroup", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9[pgJVz.";
      helpFormatter0.setLongOptSeparator("9[pgJVz.");
      helpFormatter0.getOptPrefix();
      String string1 = "V^m 9<H";
      MockFile mockFile0 = new MockFile("?@EhmxC+x=?sCCXp2TZ");
      File file0 = MockFile.createTempFile("V^m 9<H", "arg", (File) mockFile0);
      String string2 = "FZ7`-";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "FZ7`-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // FZ7`-
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = "QwS@,.`%POIRrLV@*";
      String string1 = "usage: ";
      Options options0 = new Options();
      String string2 = "";
      String string3 = "";
      helpFormatter0.printHelp("usage: ", options0);
      options0.getOption("");
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("usage: ");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Options options0 = new Options();
      String string0 = "";
      options0.getMatchingOptions("");
      options0.getOptionGroups();
      String string1 = "--";
      options0.hasOption("--");
      helpFormatter0.printHelp(31, "ULU*|P:Pu,GXaMF?q2z", "", options0, "");
      String string2 = "";
      helpFormatter0.setArgName("");
      String string3 = "";
      String string4 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-1946), (-1946));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultArgName = "\n";
      int int0 = 2002;
      helpFormatter0.setDescPadding(2002);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-612));
      String string0 = "ar2So_\"jgZe$";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-612), "ar2So_\"jgZe$");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "zGT_`ttI[5;f7~\"t8";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      helpFormatter0.printHelp("-", options0, false);
      options0.helpOptions();
      helpFormatter0.rtrim("--");
      options1.hasShortOption("3wCqOy8c Y*");
      int int0 = (-1441);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1441), "", "", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", (String) null, true, "arg");
      helpFormatter0.defaultDescPad = 47;
      helpFormatter0.createPadding(690);
      options1.addOption("", "", true, "#u$K*~h(pj");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 690, options1, (-2376), 1);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1481);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", "CTsfj?T}I%v0g", options0, "CTsfj?T}I%v0g", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "jrMG8Cf;", true, "");
      boolean boolean0 = false;
      options2.addOption("", false, "arg");
      String string2 = "Kt#nK<gmITJHFNP";
      Option option0 = null;
//      try {
        option0 = new Option("Kt#nK<gmITJHFNP", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Kt#nK<gmITJHFNP' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.setArgName("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, 13, "-");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("-");
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("-", "]Glm${avJ=r\"", false, "&zrfGpa");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 569;
      helpFormatter0.setWidth(569);
      helpFormatter0.setLeftPadding(1063);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(" ]", "<^Q&?");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // <^Q&?
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ULU*|P:Pu,GXaMF?q2z";
      helpFormatter0.defaultLeftPad = 3;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-1772), (-1772), "ULU*|P:Pu,GXaMF?q2z");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setArgName("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "WfhR");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      helpFormatter0.setWidth(31);
      String string1 = ", ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "org.apache.commons.cli.OptionGroup", "--", (Options) null, 31, 31, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#a'S17j+";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setArgName("#a'S17j+");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("-", "-", true, "_prkc%&)Hn9,");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}`9w(X:p;,W;";
      Options options0 = new Options();
      Option option0 = new Option("", "[ Options: [ short ", true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = null;
      options2.addOption((String) null, "\n", true, "-");
      Options options3 = options2.addOption((String) null, "fP3GrQIlOiu[A", true, " ");
      options0.toString();
      Options options4 = options3.addOption("arg", true, "-");
      optionGroup0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "}`9w(X:p;,W;", "}`9w(X:p;,W;", options4, "[ Options: [ short ", true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      String string0 = "zHM>4\\\\Lw";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "zHM>4\\Lw");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("#_b%$/YTEC!6%O8EH<");
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("r[/");
      assertEquals("r[/", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      String string1 = "U.vXYn{0#VD";
      String string2 = "QeO&%C";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("{XHs8BJD.", "usage: ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '{XHs8BJD.' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = 2532;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, "V<%3);3W");
      // Undeclared exception!
//      try { 
        options2.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      String string0 = "";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1676);
      String string0 = "AJzsm-IiJUDrU*tf.";
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      Options options1 = options0.addOption("", "-", true, "-");
      options1.hasOption(">");
      options1.helpOptions();
      String string1 = "B18AU;";
      // Undeclared exception!
//      try { 
        options1.addOption("B18AU;", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'B18AU;' contains an illegal character : ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
