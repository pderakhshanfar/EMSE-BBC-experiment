/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:11:17 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      mockPrintWriter0.println((float) 74);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "[", "D9LZ{&", options3, 2137, 351, "^vAeGi", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      Options options0 = new Options();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.setWidth((-3383));
      helpFormatter0.rtrim("X!YGGhb1bsO5RSN!@LM");
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3383), "5~KSJ+Gr[rt#M0Ayu", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.OptionValidator";
      helpFormatter0.setOptPrefix(";");
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("Mc-|RoX4?i");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 1162, 4369);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 21, (-1726), "arg");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer2, 74, options0, 3, 4898);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 69, "");
      helpFormatter0.setNewLine("(Qg1p3,(795;Q$pu");
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 97;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "$+ZU\\s2jV2FZ4(KNn";
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      mockFile0.toURL();
      Options options2 = options1.addOption("", " ", true, "~Kye hW");
      Options options3 = options2.addOption("", false, "");
      Option option0 = new Option("arg", "~Kye hW", true, "-");
      Options options4 = options3.addOption(option0);
      options4.getMatchingOptions("");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 97, options4, 4599, 4599);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Lw%8cxcU");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-663), "-FLA`,,N< A$.w");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultDescPad = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.insert(0, "arg");
      int int1 = 1270;
      helpFormatter0.createPadding(0);
      int int2 = 126;
      stringBuffer0.insert(3, (double) 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, ", ");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp(74, "\n", "\n", options0, "\n");
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 44, 44);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "lw8hp";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "lw8hp", options0, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("arg", ",~@}D*.N21aj]MD*wUh", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(112, " :: ", (String) null, options1, "");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultNewLine = "<";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 95, options0, 58, 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "<_<0R)s~!6$Kj");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("\n");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "6DyzwUs@'a9fk", "6DyzwUs@'a9fk", options1, " z(#B", false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = "+u{\\\\<<";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(74, "", (String) null, (Options) null, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", true, " ] [ long ");
      Option option0 = new Option("", true, "\n");
      Options options2 = options1.addOption(option0);
      option0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp(74, "arg", "(t$vTYLzd=vc|\"9", options3, "", true);
      Options options4 = new Options();
      Option option1 = null;
//      try {
        option1 = new Option("d+1vUexZ,XR", "", true, "EXY");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'd+1vUexZ,XR' contains an illegal character : '+'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "br`oL";
      String string1 = ",~Q,hs]W(ahO`X";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("br`oL", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "--", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", true, "m!e|z*F?m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-`q*_!DY\";q6o@jM");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "m!e|z*F?m";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) options1;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "-`q*_!DY\";q6o@jM";
      objectArray0[8] = (Object) optionGroup1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 624, (String) null, options3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1848;
      String string0 = "EXY";
      String string1 = "eMWWj$]#6Jn'";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", true, " ] [ long ");
      Option option0 = new Option("", true, "\n");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "arg", "(t$vTYLzd=vc|\"9", options3, "", true);
      Options options4 = new Options();
      Option option1 = null;
//      try {
        option1 = new Option("d+1vUexZ,XR", "", false, "EXY");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'd+1vUexZ,XR' contains an illegal character : '+'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("R&", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp(15, "kk!Uh;v\"S", "--", options0, "The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 3094, options0, 2610, 2610);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(15, " ", " +h0fS~", options0, "-");
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-1846));
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(74, "arg", "<", options0, "--");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-3655));
      helpFormatter0.rtrim("gazO<[Kl");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 9;
      String string0 = "The option '";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1530, "The option '", "", options0, (-759), 1976, "4|XqQv1DZw|;q+s#2B");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "kk!Uh;v\"S", false, " | ");
      Options options3 = options2.addOption("arg", true, (String) null);
      helpFormatter0.printHelp(507, "has already been selected: '", "kk!Uh;v\"S", options3, "kk!Uh;v\"S");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 743;
      StringWriter stringWriter0 = new StringWriter(27);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = options0.addOption("arg", true, "P1F_~.2z35O");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 186, options1, 1, (-3016));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("l", false, "org.apache.commons.cli.HelpFormatter");
      options1.addOption((String) null, "[ Options: [ short ", true, "@V9/`hol]p^PL `");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.hasShortOption("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(33, "DyzwUs@'a9fk", "DyzwUs@'a9fk", options2, " z(#B", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "%?\\J>mi8r[CcEENe0q=";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("=H|m{E!", "-", (Options) null, "arg", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "", "", options0, 32, 32, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'mxd}=6GPj";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'mxd}=6GPj");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 0;
      mockPrintWriter0.print((Object) "org.apache.commons.cli.Option");
      mockPrintWriter1.print('(');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter1.append((CharSequence) "-");
      mockPrintWriter1.println('o');
      String string1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getOptionComparator();
      Option option0 = new Option("", " | ", false, " [ARG]");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("has already been selected: '", "has already been selected: '", options1, "", false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("BP V/");
      mockPrintWriter1.println((long) 3);
      mockPrintWriter1.append((CharSequence) "has already been selected: '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append(':');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 13, 1, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2892), options1, 573, 573);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(15, "kk!Uh;v\"S", "--", options0, "The option '");
      helpFormatter0.setLeftPadding((-846));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 15, "MqAM<fJ", "[", options0, (-846), (-846), "The option '", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeLong(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "arg");
      Options options1 = new Options();
      helpFormatter0.setLeftPadding((-660));
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      helpFormatter0.setOptPrefix("]{]Eu");
      String string0 = "\"V";
      helpFormatter0.setLongOptPrefix("\"V");
      helpFormatter0.setSyntaxPrefix("arg");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding(13);
      helpFormatter1.getOptionComparator();
      String string1 = ":8'>!";
      String string2 = "*{";
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 3, options1, 3, 13);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":{]Eu");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp(6, ":{]Eu", "", options0, ":{]Eu");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(44, "-", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 46, 1, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "\n", "", options0, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1227);
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption(" ");
      helpFormatter0.createPadding(3465);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "arg");
      Options options1 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(45, "]{]Eu", "kL/ZN", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter0.createPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 85, 1, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, 1, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "arg");
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 22, "", "", options1, 1897, 22, "arg", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("]{]Eu");
      Options options0 = new Options();
      helpFormatter0.printHelp(8, "rOH", "arg", options0, "rOH");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1856, "w*M ", (String) null, options0, 13, 8, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "]{]Eu", "^MXklu#2", options1, 1897, 1897, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("les?r]m#aGg~/0C", 1, 2007);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 64;
      Options options0 = new Options();
      options0.hasOption("org.apache.commons.cli.Util");
      String string0 = "";
      options0.getOption("");
      Options options1 = options0.addOption("Aa8", "-", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      option0.setArgName(" ");
      int int1 = 74;
      options1.addOptionGroup(optionGroup1);
      String string1 = "g:ILEk+^pn";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "org.apache.commons.cli.Util", "", options1, "g:ILEk+^pn", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2110, (String) null, "", options1, 2110, 2110, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "1@vg*", "The option '", options0, 2519, (-321), "td", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2377), "z", "z", options1, (-2377), 2110, "z", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(4028, "Zv", "\"", options0, "");
      helpFormatter0.printHelp(4028, "}%Pun%H:PT',IFD", "", options0, (String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.renderOptions(stringBuffer0, 74, options0, 3113, 4028);
      helpFormatter0.setLeftPadding(3);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options0, 13, 1774, (String) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1897, "--", "", options0, 106, 63, "BxLYpoI*]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("arg", 8, 1897);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      options0.addOption("arg", "\n", false, "arg");
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 36;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int1 = (-2102);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3599), "BxLYpoI*]", "", options1, 36, (-2102), "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "t7K7X ", false, (String) null);
      options0.hasOption("]{]Eu");
      options1.hasOption("--");
      options1.hasShortOption("--");
      options1.getOptionGroups();
      options0.toString();
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "%w< +nuY");
      options1.getOptions();
      options0.helpOptions();
      options1.addOption("", "usage: ", true, "--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "%w< +nuY";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.OptionGroup", objectArray0);
      int int0 = 255;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-836), "%w< +nuY", "Lj3", options0, 255, 13, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) " ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.println("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.createPadding(74);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "");
      helpFormatter0.rtrim("");
      helpFormatter0.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "arg");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-664), "H7<QmM^1[B=\"|){");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2733);
      helpFormatter0.defaultLongOptPrefix = "1>$piY]l^r`9>p";
      helpFormatter0.defaultDescPad = (-2733);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "' contains an illegal character : '");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("1>$piY]l^r`9>p", "Zr,{", options1, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("]{]Eu");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setSyntaxPrefix(">(As]z");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding(61);
      helpFormatter1.getOptionComparator();
      helpFormatter1.printHelp("usage: ", (String) null, options1, "/6C92<Ka.", false);
      String string0 = "-";
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("usage: ", "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer0, 9, options0, 1, 1);
      Options options1 = options0.addOption("", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string0 = helpFormatter0.defaultNewLine;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1066, "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options1.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!'jqVa'", false, "arg");
      options2.hasOption("");
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "arg");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = helpFormatter0.defaultNewLine;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-4865), (String) null, "\n", options2, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B%^E\"97wsUe+uzm+;");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "`IiGmZ";
      helpFormatter0.defaultNewLine = "`IiGmZ";
      helpFormatter0.setArgName("B%^E\"97wsUe+uzm+;");
      helpFormatter0.defaultSyntaxPrefix = "B%^E\"97wsUe+uzm+;";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("B%^E\"97wsUe+uzm+;");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      helpFormatter0.printHelp(8, "rOH", "arg", options1, "rOH");
      helpFormatter0.createPadding(1076);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options1.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options0.hasOption("--");
      options2.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp("xu_)~^M<]G", "arg", options2, ", ", true);
      String string0 = "usage: ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "");
      int int0 = 0;
      String string1 = "pn?)b&";
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos((String) null, 2773, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "g");
      options1.helpOptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      helpFormatter0.setOptPrefix("]{]Eu");
      helpFormatter0.setLongOptPrefix("\"V");
      helpFormatter0.setSyntaxPrefix("g");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding(13);
      helpFormatter2.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 13, "rOH", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]{]Eu";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "\n", false, "\n");
      int int0 = 13;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      boolean boolean1 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "[ option: ", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("org.apache.commons.cli.Options");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("");
      dataOutputStream0.writeInt(74);
      helpFormatter2.setSyntaxPrefix("& cA6qc~^");
      Options options1 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(74);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options1.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options2.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp("xu_)~^M<]G", "arg", options2, ", ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, 0, "pn?)b&");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--", "FIL(c}HwNo+4F.6/\"&Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.findWrapPos("FIL(c}HwNo+4F.6/\"&Z", 74, 74);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("FIL(c}HwNo+4F.6/\"&Z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("\n");
      helpFormatter1.setSyntaxPrefix("a9A0/dO1");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
      helpFormatter1.defaultOptPrefix = " ";
      helpFormatter2.setLeftPadding(74);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      helpFormatter1.printHelp(2174, "--", "   ", options0, "FIL(c}HwNo+4F.6/\"&Z");
      helpFormatter2.getNewLine();
      helpFormatter2.printHelp("org.apache.commons.cli.AlreadySelectedException", options0, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "PHC1";
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("vy5V\"<7nje", "vy5V\"<7nje", options0, (String) null);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println("xskcmr!,D^");
      helpFormatter0.createPadding(1788);
      mockPrintWriter0.append('A');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 338, "-", options0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) " ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter1.setSyntaxPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding((-188));
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter3.printHelp(74, "usage: ", "uBOcB?g", (Options) null, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      helpFormatter0.setOptPrefix("]{]Eu");
      helpFormatter0.setLongOptPrefix("\"V");
      helpFormatter0.setSyntaxPrefix("arg");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding(13);
      helpFormatter2.getOptionComparator();
      helpFormatter1.printHelp(":8'>!", "\"V", options1, "*{", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = " ";
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) " ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(" ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1182), "?W%N", "", (Options) null, " ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "PHC1";
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", true, "arg");
      options2.hasOption("");
      options0.hasShortOption((String) null);
      options2.getOptionGroups();
      options2.toString();
      helpFormatter0.printHelp("p", options2);
      helpFormatter0.getArgName();
      Option option0 = new Option("arg", "--", true, "");
      options2.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("ikJ|kVj}:I`xT", "lnmGw", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'ikJ|kVj}:I`xT' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--", "FIL(c}HwNo+4F.6/\"&Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.findWrapPos("FIL(c}HwNo+4F.6/\"&Z", 74, 74);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("FIL(c}HwNo+4F.6/\"&Z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("\n");
      helpFormatter1.setSyntaxPrefix("a9A0/dO1");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator((Comparator) null);
      helpFormatter2.setLeftPadding(74);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      helpFormatter1.printHelp(2174, "--", "   ", options0, "FIL(c}HwNo+4F.6/\"&Z");
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("", 0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("zANauE(");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setSyntaxPrefix("zANauE(");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultArgName = "[ARG...]";
      helpFormatter1.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) linkedList0;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.format((Locale) null, (String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options2.hasOption("");
      helpFormatter0.setSyntaxPrefix("3C9");
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.setLeftPadding((-5419));
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/;*[wlv{*v;7I";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string2 = helpFormatter0.defaultNewLine;
      String string3 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      options0.hasShortOption("usage: ");
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options2.hasOption("");
      options0.hasShortOption((String) null);
      options2.getOptionGroups();
      options2.toString();
      helpFormatter0.printHelp("p", options2);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(Qg1p3,(795;Q$pu");
      int int0 = 0;
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "arg");
      Options options2 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 45, " ] [ long ");
      helpFormatter0.rtrim("");
      helpFormatter0.setNewLine("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 45, options1, 18, 18);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options2.hasOption("");
      options0.hasShortOption((String) null);
      options2.getOptionGroups();
      options2.toString();
      helpFormatter0.printHelp("p", options2);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j8w3rB");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "[ Options: [ short java.util.HashMap@0000000006 ] [ long {.9:q$7!M'jqbVa'=[ option:  .9:q$7!M'jqbVa'  :: arg ]} ]";
      objectArray0[1] = (Object) options0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "PHC1";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) " ";
      mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2671, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", true, "arg");
      options2.hasOption("");
      options0.hasShortOption((String) null);
      options2.getOptionGroups();
      options2.toString();
      helpFormatter0.printHelp("p", options2);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(Qg1p3,(795;Q$pu");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 44;
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1006);
      Options options1 = options0.addOption("", false, "");
      options0.getMatchingOptions("'");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option("[", false, ">");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 3;
      helpFormatter0.setLeftPadding(3);
      MockFile mockFile0 = new MockFile("\n");
      mockFile0.setReadable(true, false);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //  
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options2.hasOption("");
      options2.getOption("/5v<5H^\tV9L?U?");
      options0.hasShortOption((String) null);
      options2.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix(".9:q$7!M'jqbVa'");
      helpFormatter1.setSyntaxPrefix(" ]");
      Options options3 = new Options();
      Options options4 = options0.addOption("arg", "", true, "*e'x");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "s?B7l]{Cq%fd", options4, " ]", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) " ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      mockPrintWriter0.println("--");
      helpFormatter0.printUsage(printWriter0, 3, "");
      helpFormatter0.createPadding(338);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-198), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/;*[wlv{*v;7I";
      Options options0 = new Options();
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", (Object[]) null);
      helpFormatter0.printOptions(printWriter0, 32, options0, 32, 96);
      Options options1 = options0.addOption("", "arg", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {arg=[ option:  arg  :: arg ]} ]", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/;*[wlv{*v;7I";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", "arg", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      optionGroup0.toString();
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.printHelp("[]", "/;*[wlv{*v;7I", options2, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {arg=[ option:  arg  :: arg ]} ]", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption("arg", "\n", false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.setLongOptPrefix("4I'");
      helpFormatter0.setSyntaxPrefix("n39Te1L1Qt9vh1w");
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        options2.addOption("-", "4I'", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("org.apache.commons.cli.Options");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("");
      helpFormatter2.setSyntaxPrefix("& cA6qc~^");
      Options options1 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(74);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter3.printHelp(3, "", "-", options1, ".,ge&X;Rok(6Cv:*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--", "FIL(c}HwNo+4F.6/\"&Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter1.setOptPrefix("\n");
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "}[>.9R@ @r}(mS", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2852);
      helpFormatter0.setWidth((-2852));
      String string0 = "yRr0v\\vU<Z4c'm";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("arg", "", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("yRr0vvU<Z4c'm", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(2225);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = null;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options2.hasOption("");
      options0.hasShortOption((String) null);
      options2.getOptionGroups();
      options2.toString();
      helpFormatter0.printHelp("p", options2);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("Nm8D2UezO;X", (-3690), 35);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      helpFormatter0.setOptPrefix("]{]Eu");
      helpFormatter0.setLongOptPrefix("\"V");
      helpFormatter0.setSyntaxPrefix("");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasShortOption("usage: ");
      options1.getOptionGroups();
      options1.toString();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter1.findWrapPos("]{]Eu", 1774, (-706));
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2392, (Options) null, 1414, 2392);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(32);
      helpFormatter0.setOptPrefix("8wmu3kD.'tY");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("@U");
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("zT1;IE#hW;[P", "", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'zT1;IE#hW;[P' contains an illegal character : ';'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options1.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!'jqVa'", false, "arg");
      options2.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(1);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options3 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter2.setLeftPadding(1795);
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("line.separator", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'line.separator' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setOptPrefix("");
      String string0 = "0H";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("0H", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("PHC1", true, "%w< +nuY");
      options0.getOptions();
      options0.helpOptions();
      Options options2 = options1.addOption("", ".9:q$7!M'jqbVa'", false, "arg");
      options2.hasOption("");
      options0.hasShortOption((String) null);
      options2.getOptionGroups();
      options2.toString();
      helpFormatter0.printHelp("p", options2);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(Qg1p3,(795;Q$pu");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("KV]rH");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/;*[wlv{*v;7I";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", "arg", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {arg=[ option:  arg  :: arg ]} ]", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-105);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-105));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptionComparator();
      String string0 = "cmdLineSyntax not provided";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("-,f=Ly6", "cmdLineSyntax not provided");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = " ";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--", "FIL(c}HwNo+4F.6/\"&Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "FIL(c}HwNo+4F.6/\"&Z", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 1, "FIL(c}HwNo+4F.6/\"&Z");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]{]Eu";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{]Eu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", "\n", false, "arg");
      int int0 = 13;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1774, "rOH", (String) null, options1, 13, 1774, (String) null);
      boolean boolean1 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "[ option: ", options0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\n");
      StringWriter stringWriter1 = stringWriter0.append(';');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int0 = (-2119);
      Options options0 = new Options();
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2119), options0, (-2119), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3081));
      int int0 = 1782;
      String string0 = ">";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "n?");
      String string1 = "YXM[8je";
      Option option0 = null;
//      try {
        option0 = new Option("YXM[8je", (String) null, false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'YXM[8je' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer("[ Options: [ short ");
      int int1 = (-246);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3336), (-246), "[ Options: [ short ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-3492);
      Options options0 = new Options();
      String string0 = "line.separator";
      // Undeclared exception!
//      try { 
        options0.addOption("line.separator", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'line.separator' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.defaultLongOptPrefix = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1545), (-1545), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M";
      helpFormatter0.defaultOptPrefix = "M";
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      int int0 = 3151;
      Options options0 = new Options();
      options0.getOption("org.apache.commons.cli.Options");
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3151, "org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options0, (-949), 3151, "org.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }
}
