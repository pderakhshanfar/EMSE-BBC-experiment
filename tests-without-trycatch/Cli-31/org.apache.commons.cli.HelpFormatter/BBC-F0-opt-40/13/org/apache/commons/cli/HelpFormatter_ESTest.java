/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:57:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      int int0 = 7;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZC%Zl'P_V}pZvIY`");
      helpFormatter0.createPadding(7);
      MockFile mockFile0 = new MockFile("       ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3433, "       ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      // Undeclared exception!
//      try { 
        stringWriter1.append((CharSequence) "usage: ", 7, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.defaultDescPad = 44;
      helpFormatter0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      String string0 = null;
//      try { 
        MockURI.URI("", (String) null, "3HWx\"~-d1uT.izr");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Expected scheme name at index 0: :#3HWx%7F%22~-d1uT.izr
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "was-H");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", "");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 47;
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 47, "arg", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "' was specified but an option from this group ";
      PrintWriter printWriter1 = mockPrintWriter1.format((Locale) null, "has already been selected: '", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter1, 9, (-2), "' was specified but an option from this group ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 5;
      Options options0 = new Options();
      options0.getOptions();
      int int1 = 3;
      options0.hasLongOption("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 5, options0, 5, 3);
      int int2 = 1;
      String string0 = ", ";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-600), ", ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = null;
      Option option0 = new Option((String) null, "\n", true, "3MIbg=n)=sz@DFP");
      options0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("3MIbg=n)=sz@DFP");
      options0.addOption("arg", "\n", true, "-");
      option0.setRequired(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "3MIbg=n)=sz@DFP", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, "3MIbg=nk)=sz@P");
      options0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("3MIbg=nk)=sz@P");
      options0.addOption("arg", "\n", true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "3MIbg=nk)=sz@P", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1091, "");
      helpFormatter0.setWidth(3111);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.defaultWidth = 63;
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "_u:Tv|hXba 3u2xL:I^", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding((-2457));
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.defaultDescPad = (-2457);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-2614), 26);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-656), "3&pO", "3&pO", options1, (-656), (-656), "3&pO");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("   ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      String string0 = "]h*Zm%UQ`s}'";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string1 = ",\"j\"E";
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter1 = mockPrintWriter0.printf(",\"j\"E", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.getOptionGroups();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter1, 0, "@;.q/&aIi", "usage: ", options2, (-2), (-2), "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "--", "G0J!JQ:s-ht9's@U|D", (Options) null, 1834, 0, "--", false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "6eD\u0004p", "Tcz*I|&AB|29k", options0, 2134, 3000, "b5");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2040), options0, 39, 32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("6)>,gDKt-zcax}L", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage(printWriter0, 32, "");
      int int0 = 2;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("BY1Pi5[PnSPC-", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      optionGroup1.setSelected(option0);
      helpFormatter0.printHelp(" [ARG]", " [ARG]", options1, "[", true);
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1013));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "!4XEDP`X>XZg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOption("", "", false, "g1P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "!4XEDP`X>XZg", options1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("yi", false, "/FZ3/EJY*9H7=");
      Option option0 = new Option((String) null, "-");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOptionGroup(optionGroup0);
      options2.addOption((String) null, "Q@n=W ", true, "w\"sN-&DHA");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("w\"sN-&DHA", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("IO4nOC,j");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 114, "8GXgWb7^g", (String) null, options0, 114, (-4279), "JQJ&dc[VK\"l4{jXF:/", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("c4mD<rP|Wob!961y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "--", options0, 2543, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = (-1131);
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" [ARG]", " [ARG]", options0, "[", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 34, options0, 21, 21);
      options0.getOptionGroups();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 34, "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      helpFormatter0.printHelp(" [ARG]", " [ARG]", options1, "[", true);
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(14);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("<qL7Yhz,9#}");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Oc0K~ZLBtB*t|(?2n9", "", (Options) null, "Oc0K~ZLBtB*t|(?2n9", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      String string0 = "DIt08 pOY7ftnBXGnZv";
      mockPrintWriter1.println(850L);
      Options options0 = new Options();
      String string1 = " ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1039, "DIt08 pOY7ftnBXGnZv", "DIt08 pOY7ftnBXGnZv", options0, (-768), (-3229), " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "sl+qHad";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Pn;", "Pn;", options0, "sl+qHad", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("[ Options: [ short ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "   ";
      helpFormatter0.setLeftPadding((-2978));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(21, "   ", "line.separator", options0, "   ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLongOptSeparator();
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2;
      helpFormatter0.setLongOptPrefix("H?Q*aoVlu%~& {Fn");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2, (-1743), "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) mockPrintWriter0;
      helpFormatter0.setLongOptPrefix("j");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "-QZeY{li0Etp*Uj");
      helpFormatter0.setLongOptSeparator("-QZeY{li0Etp*Uj");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1753), 1, "Mn_]*nimU");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1344, "", "", options0, 1344, 1344, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Options options2 = options1.addOption("arg", " ", true, " ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3228, ">", options1);
      helpFormatter0.setDescPadding((-4462));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3228, "qJBr*yA%Z4x.@dFE", "@+`XOo2'.q d/HFG4", options2, "qo,@^O2 ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLeftPad = (-448);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(482);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, (-448), options1, 1, 1);
      helpFormatter1.printHelp("arg", "usage: ", options1, (String) null, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M";
      Options options0 = new Options();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-127);
      byteArray0[3] = (byte)33;
      byteArray0[7] = (byte)33;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 89, "zmW<B&", "K<", options0, (int) (byte)33, (int) (byte)0, "M", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      options1.addOption("arg", "\n", true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "\n", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setLongOptPrefix("<4isN_<t^y|ux");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "-QZeY{li0Etp*Uj");
      helpFormatter0.setLongOptSeparator("-QZeY{li0Etp*Uj");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      helpFormatter0.printHelp("bZ+As'`)o", options1);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getSyntaxPrefix();
      Option option1 = new Option("arg", "-");
      Options options2 = options1.addOption(option1);
      helpFormatter0.printHelp(1953, "-QZeY{li0Etp*Uj", "--", options2, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "-QZeY{li0Etp*Uj");
      helpFormatter0.setLongOptSeparator("-QZeY{li0Etp*Uj");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(74);
      helpFormatter0.getLongOptSeparator();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1504, "--", "usage: ", options0, 3, 64, "usage: ", true);
      helpFormatter1.printHelp(" ", "", options0, "-", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2010, "arg", options0);
      helpFormatter0.printHelp(74, "l{8QV-^]UR)Df<XiZ", "--", options0, "pPSHaX");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLeftPad = (-448);
      Option option0 = new Option((String) null, "O", false, "-");
      Options options0 = new Options();
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("O", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("--");
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 409, 35, "");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      Options options1 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", (String) null, true, "");
      options1.addOption(option0);
      helpFormatter0.printHelp("gl=.YR!K", options1);
      helpFormatter0.setDescPadding((-2));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("", "JK3g=?G.", false, "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1905, "", ">", options0, 1905, 9, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.Util");
      Options options1 = new Options();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.print(45);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option((String) null, "arg", false, "--");
      options0.addOption(option0);
      helpFormatter0.printHelp("zmW<B&", options0);
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, (-1), "R", "R", options0, 19, 3, "zL8A]o{^", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println((long) 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.print(45);
      helpFormatter0.setOptPrefix("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.setLongOptPrefix("");
      Options options1 = new Options();
      helpFormatter0.rtrim(":Y&6%Pq");
      helpFormatter0.rtrim(":Y&6%Pq");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'p';
      charArray0[2] = '{';
      charArray0[3] = 'G';
      charArray0[4] = 'E';
      charArray0[5] = 'p';
      charArray0[6] = 'W';
      mockPrintWriter2.print(charArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 730, "org.apache.commons.cli.Options", "", options0, 2, (int) (byte)33, "", false);
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, (int) (byte)33, "", options0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 56, "bur_2[[");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "-QZeY{li0Etp*Uj");
      helpFormatter0.setLongOptSeparator("-QZeY{li0Etp*Uj");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      helpFormatter0.printHelp("bZ+As'`)o", options1);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getSyntaxPrefix();
      Option option1 = new Option("arg", "-");
      Options options2 = options1.addOption(option1);
      helpFormatter0.printHelp(1953, "-QZeY{li0Etp*Uj", "--", options2, "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "-QZeY{li0Etp*Uj");
      helpFormatter0.setLongOptSeparator("-QZeY{li0Etp*Uj");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", options1);
      helpFormatter1.setDescPadding(273);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(7, "jyF$*zxOqJR[9<p#7U", "_,[1L]TG", options0, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "D7+<D/,Ws*1_/k7*", options0, (-1519), 117, "zmW<B&", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "   ", (String) null, options0, "   ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (int) (byte)33, "zmW<B&", "e(Ke=tqz", options0, 2, (-1), "e(Ke=tqz", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'p';
      charArray0[2] = '{';
      charArray0[3] = 'G';
      charArray0[4] = 'E';
      charArray0[5] = 'p';
      charArray0[6] = 'W';
      mockPrintWriter2.print(charArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 730, "org.apache.commons.cli.Options", "", options0, 2, (int) (byte)33, "zmW<B&", false);
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, (int) (byte)33, "", options0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 56, "bur_2[[");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 32;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-975), " | ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", "*iRrgj<`4PN4", true, "-");
      helpFormatter0.printHelp(93, "f-}\"?YzXm<i.", "*iRrgj<`4PN4", options0, "", true);
      MockFile mockFile0 = new MockFile("Y]_^z%Yi<6tf");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byte byte0 = (byte)83;
      byteArray0[1] = (byte)83;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions(mockPrintWriter1, 1, options0, 2386, 93);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "--", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "--", options1, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "-QZeY{li0Etp*Uj");
      helpFormatter0.setLongOptSeparator("-QZeY{li0Etp*Uj");
      Options options0 = new Options();
      helpFormatter0.printHelp(21, "-QZeY{li0Etp*Uj", "Hbi,.7R", options0, "BB)bE8+9C@/0|iF|", false);
      String string0 = "!";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1746), "", "!", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.rtrim("]");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("Wy", true, "68}8");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos("Illegal option name '", 3, 3);
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        options2.addOption("[ Options: [ short ", "arg", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ Options: [ short ' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.defaultLongOptPrefix = null;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "   ", false, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      option0.getValues();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 1309, "C4MWETQ+@8'3Un");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption((String) null, "-", true, "usage: ");
      options0.getMatchingOptions("usage: ");
      Option option0 = new Option("arg", true, "T@-R)JR5U1bE=i7");
      helpFormatter0.printHelp(155, "[ Options: [ short ", "-+n'lk>@", options1, "line.separator");
      Options options2 = options0.addOption("", "--", true, "~y0wy(+");
      options2.helpOptions();
      helpFormatter0.printHelp(155, "-+n'lk>@", (String) null, options2, "~y0wy(+", true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", "*iRrgj<`4PN4", true, "-");
      helpFormatter0.printHelp(93, "f-}\"?YzXm<i.", "*iRrgj<`4PN4", options0, "", true);
      MockFile mockFile0 = new MockFile("Y]_^z%Yi<6tf");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 2, "zL5,V%}-A|(YC|$r", "f-}\"?YzXm<i.", options0, 93, 2, "f-}\"?YzXm<i.", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "*iRrgj<`4PN4", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "&ms6\"iA[QW", options2, "PLlynLGszs1;%N\"*&!/");
      Options options3 = new Options();
      helpFormatter1.rtrim("-");
      helpFormatter1.findWrapPos("{M{NA80jo6QF~[I%", 3, 3664);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.defaultLongOptPrefix = null;
      int int0 = 186;
      String string0 = ".%\"W^";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(186, " ]", (String) null, (Options) null, " ]", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "*iRrgj<`4PN4", true, "-");
      options1.hasShortOption("3zv8.c}");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('2');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "3zv8.c}");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-186), options1, 3, 9);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      helpFormatter0.rtrim("   ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3143, "5A&g!ZWsV3eQ2xR");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      helpFormatter0.printHelp(186, "(s[gq[", "9M<w,k~", options0, "", false);
      helpFormatter0.printHelp(14, ".%\"W^", ";yax(T", options0, "cmdLineSyntax not provided");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "*iRrgj<`4PN4", true, "-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h0rND' AB/@V]");
      StringBuffer stringBuffer0 = new StringBuffer(2);
      MockFile mockFile0 = new MockFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "--");
      File file0 = MockFile.createTempFile("]Z__(mUIl1;eW3", "-", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 91, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "*iRrgj<`4PN4", options0, 91, 91, "*iRrgj<`4PN4");
      helpFormatter0.renderOptions(stringBuffer0, 2, options2, 74, 43);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      helpFormatter0.setOptionComparator((Comparator) null);
      printWriter0.println();
      helpFormatter0.printUsage(printWriter0, 32, " | ");
      helpFormatter0.setLongOptSeparator(" | ");
      Options options0 = new Options();
      helpFormatter0.printHelp(32, " | ", " | ", options0, "BB)bE8+9C@/0|iF|", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(32, " | ", "", (Options) null, "org.apache.commons.cli.HelpFormatter$OptionComparator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage(printWriter0, 32, " | ");
      helpFormatter0.setLongOptSeparator(" | ");
      Options options0 = new Options();
      helpFormatter0.printHelp(32, " | ", " | ", options0, "BB)bE8+9C@/0|iF|", false);
      helpFormatter0.printHelp(2, "!", " | ", options0, "");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "-", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(998, "org.apache.commons.cli.OptionValidator", (String) null, (Options) null, "!");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 32, options0, 872, 872);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 519, 1110);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options1 = new Options();
      options0.addOption("", true, " ");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos("-", 1, (-164));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setWidth(31);
      helpFormatter0.rtrim("]");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "cmdLineSyntax not provided");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = "-";
      helpFormatter1.findWrapPos("", 31, 1);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "cmdLineSyntax not provided", "", options2, "f-}\"?YzXm<i.", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage(printWriter0, 32, " | ");
      helpFormatter0.setLongOptSeparator(" | ");
      Options options0 = new Options();
      helpFormatter0.printHelp(32, " | ", " | ", options0, "BB)bE8+9C@/0|iF|", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2, " | ", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "!");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      mockPrintWriter0.append('%');
      helpFormatter0.setDescPadding((-2329));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" | ", "[ Options: [ short ", (Options) null, "[ Options: [ short ", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      options0.hasShortOption("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultOptPrefix = null;
      Option option0 = new Option((String) null, true, "S4ypH[5");
      Options options1 = options0.addOption(option0);
      options1.toString();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) "&m9={]vb6Z";
      objectArray0[2] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      option0.addValueForProcessing((String) null);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      mockPrintWriter0.println((float) (-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 0, options0, 887, (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("YG<");
      helpFormatter0.renderWrappedText(stringBuffer0, 1184, 1184, "s9X(j> ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printUsage(printWriter0, 32, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2, " | ", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "!");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "-", true, "usage: ");
      Option option0 = new Option("arg", false, "T@-R)JR5U1bE=i7");
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "*iRrgj<`4PN4", true, "-");
      int int0 = 2;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 91, options0, 91, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("7HWJ=e\"th1Gj4,bQGwH");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-1521), 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultOptPrefix = " | ";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("7HWJ=e\"th1Gj4,bQGwH");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      helpFormatter0.findWrapPos("[", 3356, (-1687));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "arg");
      MockFile mockFile0 = new MockFile("", ";yc.V");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) ";yc.V");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2166), ";yc.V", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-4293), 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("[ARG...]", 25, (-1684));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 887;
      String string0 = "&m9={]vb6Z";
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      options0.hasShortOption("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultOptPrefix = null;
      Option option0 = new Option((String) null, true, "S4ypH[5");
      Options options1 = options0.addOption(option0);
      options1.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(887, (String) null, "&m9={]vb6Z", options2, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 3051;
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3051, "", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      int int1 = 44;
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 44, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(44);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "ir\"3h<";
      // Undeclared exception!
//      try { 
        options1.addOption("ir\"3h<", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'ir\"3h<' contains an illegal character : '\"'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{h9dr";
      StringBuffer stringBuffer0 = new StringBuffer("{h9dr");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption("L{)?gyE~,MXFoB<D'S");
      int int0 = (-2);
      int int1 = 13;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, (-2), 13);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("7HWJ=e\"th1Gj4,bQGwH");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ", false, (String) null);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.setDescPadding(9);
      helpFormatter0.setArgName("org.apache.commons.cli.Options");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-466);
      Options options0 = new Options();
      helpFormatter0.printHelp("r(P", options0, true);
      String string0 = null;
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options2, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "6$6JYqtX@z'I3@JE{j";
      // Undeclared exception!
//      try { 
        options0.addOption("6$6JYqtX@z'I3@JE{j", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '6$6JYqtX@z'I3@JE{j' contains an illegal character : '@'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("5~@:&L");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("[ARG...]", 0, (-1687));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setWidth(31);
      helpFormatter0.rtrim("]");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "cmdLineSyntax not provided");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options2.addOption("CJOE|Z", "", true, "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'CJOE|Z' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 887;
      String string0 = "&m9={]vb6Z";
      Options options0 = new Options();
      String string1 = null;
      options0.hasShortOption("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultOptPrefix = null;
      Option option0 = new Option((String) null, true, "S4ypH[5");
      Options options1 = options0.addOption(option0);
      options1.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(887, (String) null, "&m9={]vb6Z", options2, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "q|", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" 3MURiq7p*j`)AT");
      helpFormatter0.getLongOptPrefix();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("LYZBC.6:9", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " 3MURiq7p*j`)AT";
      objectArray0[1] = (Object) "--";
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      int int0 = 44;
      String string0 = "";
      Options options0 = new Options();
      mockFileOutputStream0.release();
      // Undeclared exception!
//      try { 
        locale0.getUnicodeLocaleType("xM2\"?g]^5p2.>y7<3");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Ill-formed Unicode locale key: xM2\"?g]^5p2.>y7<3
//         //
//         verifyException("java.util.Locale", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile.createTempFile("uc]#=Y8$UK", "{");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 400, "A-idb@| l", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(13);
      helpFormatter0.setLongOptSeparator("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 400, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      String string0 = "<\"Oi5MNbMMv.Xc/bE)c";
      helpFormatter0.setLongOptSeparator("<\"Oi5MNbMMv.Xc/bE)c");
      String string1 = "/uhp=ny}O$Q\"VDc\"";
      File file0 = MockFile.createTempFile("/uhp=ny}O$Q\"VDc\"", "-");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3381);
      helpFormatter0.defaultWidth = (-3381);
      helpFormatter0.getDescPadding();
      int int1 = 0;
      String string0 = "q)}}=WNOH%GJ(BO[";
      String string1 = "%(93eX{I9&ho+YC!};1";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", false, "\n");
      Option option0 = new Option("arg", "-");
      option0.setDescription("\n");
      Options options2 = options1.addOption(option0);
      helpFormatter0.defaultWidth = 0;
      options0.addOption("arg", "", false, "");
      option0.setArgName("");
      option0.setArgs(0);
      Options options3 = options2.addOption((String) null, false, "");
      options3.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      String string0 = "I.!B';}SaS)b";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "&/k`e_`7-<oS45g`$");
      Option option0 = new Option("arg", "\n", false, "usage: ");
      options1.hasOption("I.!B';}SaS)b");
      option0.setType((Object) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("usage: ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultOptPrefix = null;
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "&m9={]vb6Z";
      objectArray0[2] = (Object) "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Option option0 = new Option("0I6geD5", false, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.findWrapPos("", (-1521), 3458);
      helpFormatter0.printHelp("ynWE", "S4ypH[5", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-391), (-2584), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      mockPrintWriter0.append('%');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix(" | ");
      Options options0 = new Options();
      helpFormatter0.printHelp(44, " | ", " | ", options0, ")ApX", true);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.findWrapPos("   ", 230, (-1));
      helpFormatter0.findWrapPos("r.", 44, 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("5~@:&L");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[1] = (Object) "[";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "5~@:&L";
      objectArray0[4] = (Object) "A CloneNotSupportedException was thrown: ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      mockPrintWriter0.println((float) 3);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 473, options0, 0, 473);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("The addValue<method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.printWrapped(printWriter0, 473, 473, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("[ option: ");
      helpFormatter0.getWidth();
      helpFormatter0.printOptions(mockPrintWriter0, 2, options0, 3831, 481);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "*iRrgj<`4PN4", true, "-");
      Option option0 = new Option("", false, "K#B_>K;oJBqbng\"");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "M", options3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2020);
      helpFormatter0.setSyntaxPrefix("usage: ");
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("");
      String string0 = null;
      helpFormatter0.setLongOptPrefix("7HWJ=e\"th1Gj4,bQGwH");
      helpFormatter0.defaultLongOptPrefix = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "   ", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, " | ", options1, "7HWJ=e\"th1Gj4,bQGwH", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('I');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.append('_');
      int int0 = (-4047);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-802);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "--";
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.createPadding(2);
      helpFormatter0.setArgName("--");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("  ");
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI scheme is not \"file\"
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
