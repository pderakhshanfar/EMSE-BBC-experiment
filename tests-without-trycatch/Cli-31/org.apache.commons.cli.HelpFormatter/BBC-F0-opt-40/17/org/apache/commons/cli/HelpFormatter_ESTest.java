/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:25:17 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("hA", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\n", "\n", options0, "usage: ", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultOptPrefix = "kO5|wP=c";
      helpFormatter0.rtrim("JVr,d7");
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.findWrapPos("", 29, 29);
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('b');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        stringWriter1.append((CharSequence) stringBuffer0, (-5160), 770);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: -5160
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(64);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile("?", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((-1.0F));
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1, 0);
      helpFormatter0.printHelp(" ", "usage: ", options1, "-", false);
      String string0 = "giuqh)P]r^f8o^9,s";
      StringBuffer stringBuffer0 = new StringBuffer("giuqh)P]r^f8o^9,s");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 31, 31);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1392);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "siX.C[`2mSi%O}4", "siX.C[`2mSi%O}4", (Options) null, "siX.C[`2mSi%O}4");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("#t,-u`Fks f7]KKC", 12, 2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-277));
      options0.addOption((String) null, "-", true, "\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("g<yJ!", "g<yJ!", options0, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 49, "\n");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byteArrayOutputStream0.reset();
      String string0 = "   ";
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.insert(1, true);
      int int0 = 512;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 512, "   ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", false, "arg");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      // Undeclared exception!
      helpFormatter1.printOptions(printWriter0, 0, options0, 868, 3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringBuffer0.appendCodePoint(31);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1214), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string1 = "";
      helpFormatter0.defaultArgName = "";
      mockPrintWriter0.print((-1.0F));
      Options options0 = new Options();
      Option option0 = new Option("", false, "\n");
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.defaultArgName = ":";
      mockPrintWriter0.print(0.0F);
      Options options0 = new Options();
      Option option0 = new Option("", false, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1, 0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, ":", "", options1, (-1), (-784), "");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("hA", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage(printWriter0, 3, "b.7'{qwtEw_R$", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      printWriter0.print(0.0F);
      Options options0 = new Options();
      Option option0 = new Option("", false, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(printWriter0, 44, options1, 44, 0);
      helpFormatter0.printUsage(printWriter0, 44, "BMb2-d',*l)*^2", options1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "");
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-758), options0, 13, 1738);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("hA", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.toString();
      helpFormatter0.printHelp("\n", "\n", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1788;
      String string0 = "Cannot add value, list full.";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1788, "Cannot add value, list full.", "", (Options) null, "Cannot add value, list full.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = ",wbHDf(l;&qI&!";
      helpFormatter0.rtrim(",wbHDf(l;&qI&!");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "Cs-Qj!~%1[U7N");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      int int0 = (-2356);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "bwaR9FhB9--Vw,", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2667, "", "", options0, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      helpFormatter0.getArgName();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockFile0;
      mockPrintWriter0.printf("", objectArray0);
      mockPrintWriter0.print(0.0F);
      Options options0 = new Options();
      Option option0 = new Option("", false, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options1, 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-3596));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "-", options0, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setNewLine("");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "   ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) "rYQHLmzdm=_:W";
      PrintWriter printWriter0 = mockPrintWriter0.printf("rYQHLmzdm=_:W", objectArray0);
      printWriter0.print(0.0F);
      Options options0 = new Options();
      Option option0 = new Option("", false, "\n");
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, false, "<");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 44, options1, 44, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      printWriter0.print(0.0F);
      Options options0 = new Options();
      Option option0 = new Option("", false, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(printWriter0, 1, options1, 1, 0);
      helpFormatter0.printUsage(printWriter0, 74, "", options1);
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("M.'(j%j");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 266, 266);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      byteArrayOutputStream0.reset();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.insert(1, true);
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 512, "   ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 512, "   ", "RNA$>eEs;", options0, 2837, (-177), "   ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "|O\"Vg*x\"k#mskB");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(5, "H'5jm'B?WBt", "H'5jm'B?WBt", options1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("< f'5.}XVOG!2wiY1M");
      mockPrintWriter0.println();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, (-64), "#ZQp:a ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultLongOptPrefix = "XnaGkr";
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      String string1 = "3qvUz|)f$";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("3qvUz|)f$", " ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //  
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "> ndIC>Bv.`19j", true, " ");
      helpFormatter0.printHelp("@Qz2a?r}I:.u", "> ndIC>Bv.`19j", options1, (String) null, true);
      Option option0 = new Option("", false, "org.apache.commons.cli.ParseException");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 16, 1638, "arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("=)-!*,rAB{rUi-SB^", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) mockFileOutputStream0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "=)-!*,rAB{rUi-SB^", "`yq9D.{rDr<H", options1, (-409), 9, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("C{", "q", options0, "SEy7!/c;>ZC", false);
      Options options1 = new Options();
      helpFormatter0.getOptPrefix();
      int int0 = helpFormatter0.defaultWidth;
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, "cmdLineSyntax not provided", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "cmdLineSyntax not provided", options1);
      OptionGroup optionGroup1 = new OptionGroup();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("UT6X/QJnJKwh'}-", (String) null, (Options) null, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[4] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.printf("[", objectArray0);
      printWriter0.print(0.0F);
      Options options0 = new Options();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(printWriter0, 44, options1, 44, 0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.printHelp("arg", "", options0, "arg", true);
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("", "okw\"D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 1537, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("=)-!*,rAB{rUi-SB^", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, " | ", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("=)-!*,rAB{rUi-SB^", options3, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      mockPrintWriter0.println();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1906), "--", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 117, "\n", options1);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gKJJ!";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, (-3171), "gKJJ!");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter1.setOptPrefix("NO_ARGS_ALLOWED");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("J>l<Lorh?b)t[3|p");
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setWidth(3);
      helpFormatter3.renderWrappedText(stringBuffer0, 1, 74, ">");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("0p", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter3.printHelp("", "", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("=)-!*,rAB{rUi-SB^", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("GJ__Lje", true, "--");
      Options options1 = options0.addOption("arg", "-", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("Xua;e'l0%|;P", options1, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "N ?>eo]", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "", options0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/=)-!*,rAB{rUi-SB^0-");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = MockFile.createTempFile("=)-!*,rAB{rUi-SB^", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("GJ__Lje", true, "--");
      Option option1 = new Option("arg", "");
      options0.addOption(option1);
      Options options1 = options0.addOption("", true, "Xua;e'l0%|;P");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("Xua;e'l0%|;P", options1, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 915);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "r.Q>Rf\"R|hIdbO![2T+", "", options0, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "k>'`X? nASOn+Q'@H~");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.write("-");
      mockPrintWriter0.print(true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 23, "k>'`X? nASOn+Q'@H~");
      helpFormatter0.getNewLine();
      byte[] byteArray0 = new byte[2];
      helpFormatter0.setLongOptSeparator("k>'`X? nASOn+Q'@H~");
      byteArray0[0] = (byte)32;
      byte byte0 = (byte)51;
      byteArray0[1] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-1544);
      String string0 = "usage: ";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2058), (-1544), "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("`s#xQJ>SsOA", options1, true);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("-", "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockFile0.setReadable(false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("h", objectArray0);
      helpFormatter0.printHelp(printWriter0, 724, "-", "i4", options0, 10, 4390, ")\"o[yX,");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("90rp%S9@k}0mNg.P", "", options0, "90rp%S9@k}0mNg.P", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("90rp%S9@k}0mNg.P", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setReadable(false);
      mockPrintWriter0.printf("", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "'ObE", "\n", options0, 101, (-2436), "org.apache.commons.cli.HelpFormatter$1");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.printHelp("\"%b<ig63QBC%m|fV:G", "", options0, "", false);
      Options options1 = new Options();
      helpFormatter0.printHelp(" ", options1, false);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("'ObE", "h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setReadable(false);
      PrintWriter printWriter0 = mockPrintWriter0.printf(")\"o[yX,", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), ")\"o[yX,", "h", options0, (-2), (-2), "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 64);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3504, "\"", "", options0, 64, 915, "G^pT;@G6", false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.setLeftPadding(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth((-1));
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1122, (Options) null, 769, 84);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "-";
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) "-";
      mockPrintWriter0.printf("'1tW", objectArray0);
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1486, "[", "0", options0, 12, 1470, "", true);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("u{hR:E6E2");
      helpFormatter0.setSyntaxPrefix("kHk&u ^O -LphGl+");
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(769);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.setWidth(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1122, 1182, "x8;q]k1FOs");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      optionGroup0.setSelected(option0);
      Option option1 = new Option("", false, "usage: ");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("u{hR:E6E2", options1);
      helpFormatter1.printHelp("M!7CUmS$v;K\u0000b*", "-", options0, "--");
      // Undeclared exception!
//      try { 
        options0.addOption("M!7CUmS$v;K\u0000b*", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'M!7CUmS$v;K\u0000b*' contains an illegal character : '!'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1721), options0, 866, 866);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 915);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options1 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "\"", options0, 485, 3, "G^pT;@G6", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.toString();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = (Object) "gKJJ!";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "gKJJ!";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("-", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("`WS8g&5V3&GXZJx", "", options1, (String) null);
      Options options2 = options0.addOption("arg", true, "dd9yRJ,-ph)y");
      // Undeclared exception!
//      try { 
        options2.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "", options0, "arg", true);
      Option option0 = new Option("", "\n");
      options0.addOption(option0);
      Options options1 = options0.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 456, 13);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.getOption("]");
      helpFormatter0.printHelp("kI*^KG$LqB/l5b/,_D", "", options0, "", false);
      Options options1 = new Options();
      options1.hasLongOption("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", ">\"{[~9zPM@+ui8", options0, "Z.dy3&1SLiN1", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-647), 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.append((CharSequence) "usage: ");
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[";
      mockPrintWriter0.printf("[", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1915, "", "has already been selected: '", options1, (-1), 674, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("u{hR:E6E2");
      helpFormatter0.setSyntaxPrefix("kHk&u ^O -LphGl+");
      helpFormatter0.getNewLine();
      int int0 = 432;
      helpFormatter0.setLeftPadding(769);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.setWidth(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1122, 1182, "x8;q]k1FOs");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "(");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", false, "usage: ");
      optionGroup0.addOption(option1);
      helpFormatter1.printHelp(657, "*t8%;(/$}Zj6<T", "--", options0, "zS");
      helpFormatter1.getLongOptSeparator();
      options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("M!7CUmS$v;K\u0000b*", "-", options0, "--");
      // Undeclared exception!
//      try { 
        options0.addOption("M!7CUmS$v;K\u0000b*", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'M!7CUmS$v;K\u0000b*' contains an illegal character : '!'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "usage: ";
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("-", objectArray0);
      mockPrintWriter0.printf("--", objectArray0);
      String string0 = null;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 693, (String) null, ";j8X>,1\"SWZT|j", options0, (-865), 1, "-", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("u{hR:E6E2", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "#Hh";
      helpFormatter0.getOptionComparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.rtrim("*XX>");
      helpFormatter0.createPadding(2343);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = (Object) "gKJJ!";
      objectArray0[4] = (Object) "gKJJ!";
      mockPrintWriter0.printf("--", objectArray0);
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 660, "--", (String) null, (Options) null, (-5094), 660, (String) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.printf("[", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(printWriter0, 44, options1, 44, 0);
      Options options2 = new Options();
      helpFormatter0.printHelp("c1Y", options1, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(432);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.setWidth(659);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 394, 74, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option(" ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 260, 260, "[");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2819), "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[";
      mockPrintWriter0.printf("[", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      options0.addOption("", "", false, "arg");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Options options2 = new Options();
      options1.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1383, "-", "-", options1, 3, (-437), "-", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "c'SoKtH-i:mN";
      String string1 = "c1Y";
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "[";
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "[";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "[";
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("]", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-2152), options1, (-2152), 1789);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "gKJJ!";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "gKJJ!";
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = false;
      boolean boolean1 = false;
      Option option0 = null;
//      try {
        option0 = new Option("--", false, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "gKJJ!";
      objectArray0[1] = (Object) "-";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      Options options0 = new Options();
      int int0 = 648;
      boolean boolean0 = true;
      helpFormatter0.printHelp(printWriter0, 1445, "gKJJ!", "-", options0, 2, 693, (String) null, true);
      String string0 = "";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("[", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options1.toString();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "os(R_=");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasLongOption("m42");
      helpFormatter0.printHelp("arg", "", options0, "arg", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("-", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.flush();
      helpFormatter0.defaultDescPad = 1827;
      mockFile0.mkdirs();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      String string1 = "[ARG...]";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1458, "[ARG...]");
      helpFormatter0.createPadding(1458);
      int int0 = 0;
      String string2 = "]";
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "", options0, "]", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("-", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      helpFormatter0.defaultDescPad = 1827;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      mockPrintWriter0.print(charArray0);
      String string1 = "[ARG...]";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1458, "[ARG...]");
      helpFormatter0.createPadding(1458);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      int int0 = 0;
      String string2 = "]";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "", options0, "]", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nK`4)iuk";
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("nK`4)iuk", 0, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "c'SoKtH-i:mN";
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsoluteFile();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      mockPrintWriter0.println((Object) mockFile0);
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[";
      mockPrintWriter0.printf("[", objectArray0);
      Options options0 = new Options();
      String string1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-215), (String) null, ";w", options0, ";w", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(21);
      helpFormatter0.renderWrappedText(stringBuffer0, 21, 63, "   ");
      int int0 = 3;
      String string0 = "' was specified but an option from this group ";
      File file0 = MockFile.createTempFile("e85%p1@w`RM}!-", ".`#g}C%WMu7Y,9");
//      try { 
        MockFile.createTempFile("BE=j7/Togr=RhD", "", file0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("u{hR:E6E2");
      helpFormatter0.setSyntaxPrefix("kHk&u ^O -LphGl+");
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(432);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1122, "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Options options1 = new Options();
      helpFormatter1.printHelp(43, "arg", "tjJcn@p/Mc5X&", options0, "u{hR:E6E2", false);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "o9sOXfy^oZYpa,Q";
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        options1.addOption(" ", "-", true, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.printf("[", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(printWriter0, 44, options1, 44, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "F[ga};ZRO18wJqR", "Cannot add value, list full.", options0, (-2422), (-2422), "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      byteArrayOutputStream0.reset();
      String string0 = "[";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      options0.getOption("]");
      helpFormatter0.printHelp("\"%b<ig63QBC%m|fV:G", "", options0, "", false);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("Zksb5k\"sc_");
      helpFormatter0.setArgName("");
      helpFormatter0.setWidth(0);
      helpFormatter0.printHelp(2379, "u#v*$zOGM2", "", options0, "", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ", 0, 0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-2), ".h>}", " ", options1, 0, 0, ".h>}", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("nK`4)iuk", 0, 4936);
      helpFormatter0.rtrim("nK`4)iuk");
      StringWriter stringWriter0 = new StringWriter(1);
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "-", 74, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gKJJ!";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "gKJJ!";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) "gKJJ!";
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 693, "gKJJ!", (String) null, options0, 648, 693, "gKJJ!", true);
      File file0 = MockFile.createTempFile("gKJJ!", "usage: ");
      String string1 = "Ls=d1|cG~$";
      helpFormatter0.setOptPrefix("Ls=d1|cG~$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0);
      int int0 = 2568;
      String string2 = "\\v47aph3S.ZUmuz";
      Options options1 = new Options();
      options1.toString();
      int int1 = (-2508);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2568, "gKJJ!", "v47aph3S.ZUmuz", options1, (-2508), (-2508), "gKJJ!", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-291);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-291), (-291), "`#;IV)=N3m(6c|3K");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-149);
      String string0 = "L(&M{G+=P?\"~";
      PrintWriter printWriter0 = null;
      int int1 = (-3076);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3076), "/a0HKtO7m");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G:gnpC");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "G:gnpC";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "af+T(_&MkzR";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "af+T(_&MkzR";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "af+T(_&MkzR", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-4715), (-4715), "G:gnpC");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.defaultLongOptPrefix = "[";
      PrintWriter printWriter0 = null;
      int int0 = (-1344);
      String string1 = "org.apache.commons.cli.OptionGroup";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1344), "org.apache.commons.cli.OptionGroup");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("%teNh*QRe7W^UED");
      helpFormatter0.setWidth((-1));
      helpFormatter0.setWidth(0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("e#Iqa'", "!v%WuWN55GG");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // !v%WuWN55GG
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(4095);
      int int0 = 994;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", "-", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("-", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      helpFormatter0.defaultDescPad = 1827;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      String string1 = "[ARG...]";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1458, "[ARG...]");
      helpFormatter0.createPadding(1458);
      int int0 = 0;
      String string2 = "]";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "", options0, "]", false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("u{hR:E6E2");
      helpFormatter0.setSyntaxPrefix("kHk&u ^O -LphGl+");
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(432);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 1122, "--");
      String string0 = null;
      String string1 = "%Nt%zzO0rx7";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("\n", false, "org.apache.commons.cli.AlreadySelectedException");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      int int1 = 120;
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 120, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "", options0, "arg", true);
      int int0 = helpFormatter0.getWidth();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultNewLine = "y81[Eh";
      helpFormatter0.getLongOptSeparator();
      String string0 = "MHWO`=3";
      Options options0 = new Options();
      String string1 = "0s";
      Option option0 = new Option("0s", " ", false, "Y.b");
      Options options1 = options0.addOption(option0);
      String string2 = "[ Options: [ short ";
      options1.helpOptions();
      helpFormatter0.printHelp(" ", "MHWO`=3", options1, "[ Options: [ short ");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("`g67m^ukC3S`F", " | ", options0, "`g67m^ukC3S`F");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2740), options0, (-3835), (-3835));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 729;
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(729, "", "", options0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("c'SoKtH-i:mN", "c1Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.printf("[", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(printWriter0, 44, options1, 44, 0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }
}
