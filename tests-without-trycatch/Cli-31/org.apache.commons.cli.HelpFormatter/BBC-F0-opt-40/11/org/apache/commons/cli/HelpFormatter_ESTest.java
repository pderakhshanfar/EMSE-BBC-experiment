/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:43:29 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultDescPad = (-395);
      helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "Illegal option name '");
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, ",Bv'T1}P;J");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp("usage: ", options1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 1, options0, 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options1, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp("arg", (Options) null, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 121;
      int int1 = 104;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ":m~|";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(64, "h<O=JGz:tP6iz", ":m~|", (Options) null, "h<O=JGz:tP6iz");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%OoI";
      Options options0 = new Options();
      String string1 = "XpM";
      helpFormatter0.setWidth(2);
      options0.hasLongOption((String) null);
      options0.getOption("XpM");
      String string2 = "-";
      options0.toString();
      Options options1 = options0.addOption("XpM", true, "-");
      String string3 = "o:jJ)_Rr:;\"fNcp";
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("%OoI", "a", options1, "o:jJ)_Rr:;\"fNcp", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "&QL`in:";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("&QL`in:", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale1, "S&NQ:xyGv ", objectArray0);
      int int0 = 627;
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, (String) null);
      Option option0 = new Option("", "--");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 688, (String) null, options2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 33, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.defaultLongOptPrefix = "--";
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = true;
      options0.getOption((String) null);
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.append('');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "\"", options0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultWidth = (-669);
      Options options0 = new Options();
      int int0 = 10;
      String string0 = ";!lY%8V,|";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", options0, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "--";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-336), "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3031;
      helpFormatter0.setDescPadding(3031);
      helpFormatter0.defaultArgName = "KvjDnb";
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("KvjDnb");
      helpFormatter0.createPadding(23);
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.createPadding(2065);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "m5{<s*Yu");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption(" ");
      helpFormatter0.printHelp("KvjDnb", "                       ", options0, "KvjDnb", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(3031, string0, "KvjDnb", options1, "--");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "m5{<s*Yu", "KvjDnb", options0, "KvjDnb");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append('E');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      mockPrintWriter0.println((float) 3);
      int int0 = 1205;
      int int1 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1205, (-1), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 74, 74, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 94, "\n", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2418, 2418, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultNewLine = "NO_ARGS_ALLOWED";
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption(" ]");
      helpFormatter0.printHelp(" S50$i?fVUVphb8s", " S50$i?fVUVphb8s", options1, " S50$i?fVUVphb8s", true);
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1915), "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print('$');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      mockPrintWriter0.print((long) 0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 35, "9a?", "?j'^JAn\"g3mR8wDX", options0, 3063, 3063, "9a?", true);
      helpFormatter0.setLongOptSeparator("G`");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2020));
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2020), (Options) null, (-2020), (-2020));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.addOption((String) null, true, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.printHelp(" [ARG]", options0, true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2, (-1), "' contains an illegal character : '");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "?j'^JAn\"g3mR8wDX", "c,U:", options2, 83, 2597, "", false);
      Option option0 = new Option((String) null, "#V/N>L");
      options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2597, "c,U:", options1);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setOptPrefix("");
      options1.addOption("", false, "");
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "-";
      String string1 = "usage: ";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "usage: ", "-", options1, 0, 2, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, " ", "-", options0, (-2), 283, "-", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-7=JHf\"DxklmQb";
      String string1 = "arg";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-7=JHf\"DxklmQb", "arg", (Options) null, "-7=JHf\"DxklmQb");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CB%Y");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 45, "?j'^JAn\"g3mR8wDX", "-W=JHf\"DxklmQb", options0, 45, 45, "-W=JHf\"DxklmQb", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      mockPrintWriter1.println(false);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 121, " ", "", options1, 121, (-1), (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1731, "arg", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 44, "(RJo", "(RJo", options1, 44, 74, "(t2bw1RQOV22");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      helpFormatter0.printHelp(1223, "org.apache.commons.cli.AlreadySelectedException", "]", options0, "-sUOlQ,J3>^ekI", true);
      options0.getMatchingOptions("3|g)");
      options0.addOption("", "", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 28, "", (String) null, options0, (-2), (-2), "-sUOlQ,J3>^ekI", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, ";)N>", options0, 3, 3, ";)N>", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "~HK'|~Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k4YLADBxR'db4%v");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('G');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, true);
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      helpFormatter0.printHelp(printWriter0, 45, "%wJ@Ow", "?j'^JAn\"g3mR8wDX", options2, 4024, 45, "", true);
      String string0 = "k~yk";
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "has already been selected: '");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "]", "--", options0, "", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-149), "]", "org.apache.commons.cli.AlreadySelectedException", options0, (-559), 28, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int0 = 45;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 121, "?j'^JAn\"g3mR8wDX", " ", options0, 45, 0, " ", false);
      Option option0 = null;
//      try {
        option0 = new Option("k~yk", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'k~yk' contains an illegal character : '~'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "+skby5-]H1u*");
      helpFormatter0.printHelp("hKbKV,^@xM0FC %~s,", options1, false);
      helpFormatter0.rtrim("hKbKV,^@xM0FC %~s,");
      helpFormatter0.findWrapPos("", 6, 6);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      boolean boolean0 = true;
      int int0 = 2205;
      String string0 = "NO_ARGS_ALLOWED";
      Options options2 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 53, "n{VL");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-374), "P", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      int int1 = 121;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 121, "?j'^JAn\"g3mR8wDX", (String) null, options0, 45, 0, (String) null, false);
      Option option0 = null;
//      try {
        option0 = new Option("k~yk", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'k~yk' contains an illegal character : '~'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultLeftPad = (-1320);
      Options options1 = options0.addOption("arg", true, "-hG'gI@(@jM@");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("f%~(E9`TYN,eHs", options1, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 14, "P", options0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer(124);
      helpFormatter0.printHelp(124, "e|#=0%X)", "e|#=0%X)", options0, "", false);
      MockFile mockFile0 = new MockFile("e|#=0%X)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "-7=JHf\"DxklmQb";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      mockPrintWriter0.format("", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 124, "");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", "A CloneNotSupportedException was thrown: ", false, (String) null);
      options1.addOption("", "\u0006b>F1", true, "");
      Option option0 = new Option("arg", false, "--");
      options1.toString();
      Options options2 = options1.addOption(option0);
      options2.toString();
      helpFormatter0.printHelp("--", options2);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", false, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasOption("org.apache.commons.cli.ParseException");
      Options options2 = options1.addOption("t", "-", false, (String) null);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "\"FPe+b8nnA>{!`_>8&", options2, "", true);
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--", "<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 162, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "-");
      Option option0 = new Option("arg", true, "-7=JHf\"DxklmQb");
      options0.toString();
      option0.setArgName((String) null);
      Options options1 = options0.addOption(option0);
      options1.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000006 ] [ long {} ]", options1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(1018);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      options0.hasShortOption("-");
      helpFormatter0.renderOptions((StringBuffer) null, (-301), options0, 1, 1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 2628, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("$O{y96");
      helpFormatter1.printHelp(247, "\n", "A CloneNotSupportedException was thrown: ", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(57);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 2028, options0, 2, 1);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      StringBuffer stringBuffer2 = new StringBuffer();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "A CloneNotSupportedException was thrown: ", true, (String) null);
      options2.toString();
      options0.toString();
      helpFormatter0.printHelp("Pavi3+C@S+J", options2);
      helpFormatter0.getNewLine();
      options1.hasOption("BP");
      helpFormatter0.setArgName("[ Options: [ short java.util.HashMap@0000000006 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   [ARG] :: null ]} ]");
      MockFile mockFile0 = new MockFile("aYDt1Zp>QAZ]{u^5q", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("aYDt1Zp>QAZ]{u^5q");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(9, "M&", "Pavi3+C@S+J", options1, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", false, "\n");
      Options options1 = options0.addOption(option0);
      option0.setRequired(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 44, 85);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", "A CloneNotSupportedException was thrown: ", false, (String) null);
      Option option0 = new Option("arg", false, "--");
      options1.toString();
      Options options2 = options1.addOption(option0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("aYDt1Zp>QAZ]{u^5q");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.printHelp("line.separator", "Pavi3+C@S+J", options2, "", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "[ Options: [ short java.util.HashMap@0000000007 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   :: null ]} ]";
      objectArray0[2] = (Object) optionGroup0;
      objectArray0[3] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) "[ Options: [ short java.util.HashMap@0000000007 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   :: null ]} ]";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options2, (-1), (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 0, ")xKjL@v%wj[< `D(", (String) null, options0, 9, 1185, "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-181));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "A CloneNotSupportedException was thrown: ", true, (String) null);
      options2.toString();
      options0.toString();
      helpFormatter0.printHelp("Pavi3+C@S+J", options2);
      helpFormatter0.getNewLine();
      options1.hasOption("BP");
      helpFormatter0.setArgName("[ Options: [ short java.util.HashMap@0000000006 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   [ARG] :: null ]} ]");
      MockFile mockFile0 = new MockFile("aYDt1Zp>QAZ]{u^5q", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("aYDt1Zp>QAZ]{u^5q");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.printHelp("Q3S`", "A CloneNotSupportedException was thrown: ", options0, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1110), "Q3S`");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "~HK'|~Z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter1.printHelp(0, "\n", "-", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "A CloneNotSupportedException was thrown: ", true, (String) null);
      Option option0 = new Option("arg", true, "--");
      options2.toString();
      options0.toString();
      helpFormatter0.printHelp("Pavi3+C@S+J", options2);
      helpFormatter0.getNewLine();
      options1.hasOption("BP");
      helpFormatter0.setArgName("[ Options: [ short java.util.HashMap@0000000007 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   [ARG] :: null ]} ]");
      MockFile mockFile0 = new MockFile("aYDt1Zp>QAZ]{u^5q", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("aYDt1Zp>QAZ]{u^5q");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "aYDt1Zp>QAZ]{u^5q", "\n", options0, 35, 1853, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.printHelp(" ", (String) null, options0, "-7=JHf\"DxklmQb");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("QrKE8NP");
      helpFormatter1.setLongOptSeparator("arg");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      String string1 = null;
      Options options0 = new Options();
      options0.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 42, options0, 42, 44);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 2393, 44, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "M_");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2418, "-7=JHf\"DxklmQb", "VGkC1", options0, 2418, 2008, "M_");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth((-1));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8/y>v?3c:;=iK,<v", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 64, "");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      helpFormatter0.printHelp(" ", (String) null, options0, "-7=JHf\"DxklmQb");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2112, "usage: ", (String) null, options0, " ");
      Option option0 = new Option((String) null, true, "\n");
      Options options1 = options0.addOption("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.hasLongOption("usage: ");
      options0.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      Locale locale0 = Locale.CANADA;
      locale0.stripExtensions();
      StringBuffer stringBuffer0 = new StringBuffer(39);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1389, 37, "O~7l%\"TTN5YF");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 74, 74, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      options0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string1 = "-7=JHf\"DxklmQb";
      helpFormatter0.printHelp(" ", (String) null, options0, "-7=JHf\"DxklmQb");
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      String string2 = null;
      int int1 = 1853;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(5, "HM H)%_]5 IBBH=", " ", options0, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "-7=JHf\"DxklmQb";
      String string2 = null;
      String string3 = "' was specified but an option from this group ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, "~HK'|~Z");
      helpFormatter0.printHelp("@1846A]a]6{1", "", options0, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-6109), options0, 26, 34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-532), "line.separator", "arg", options0, "line.separator", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "A CloneNotSupportedException was thrown: ", true, (String) null);
      Option option0 = new Option("arg", true, "--");
      options2.toString();
      options0.toString();
      helpFormatter0.printHelp("Pavi3+C@S+J", options2);
      helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
      options1.hasOption("BP");
      helpFormatter0.setArgName("[ Options: [ short java.util.HashMap@0000000007 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   [ARG] :: null ]} ]");
      MockFile mockFile0 = new MockFile("aYDt1Zp>QAZ]{u^5q", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("aYDt1Zp>QAZ]{u^5q");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.printHelp("Q3S`", "A CloneNotSupportedException was thrown: ", options0, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options2, (-2), (-1110));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", (String) null, options0, "-7=JHf\"DxklmQb");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), (String) null, " ", options0, 1853, (-2), "-7=JHf\"DxklmQb");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "=", "=", (Options) null, "j6mhHT:G,$i#Q;oDP\"", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " ");
      helpFormatter0.setLongOptSeparator(",I&j<sC|/");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("2eO_j$/ND'Lxt':j");
      stringBuffer0.append('7');
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "4zKb\"-2 yD&5t<_[vd");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.defaultLeftPad = 107;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 107, "usage: ");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("<", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '<'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      Options options2 = options1.addOption((String) null, "\n", false, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1411, options2, 2509, 1846);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6]Tu", (String) null, options0, "-7=JHf\"DxklmQb");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setLongOptSeparator(",I&j<sC|/");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      Options options2 = options1.addOption("arg", "A CloneNotSupportedException was thrown: ", true, (String) null);
      Option option0 = new Option("arg", true, "--");
      options2.toString();
      Options options3 = options2.addOption(option0);
      options3.toString();
      helpFormatter0.printHelp("Pavi3+C@S+J", options3);
      helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
      options1.hasOption("BP");
      helpFormatter0.setArgName("[ Options: [ short java.util.HashMap@0000000007 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   [ARG] :: null ]} ]");
      MockFile mockFile0 = new MockFile("aYDt1Zp>QAZ]{u^5q", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      int int0 = (-1110);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("aYDt1Zp>QAZ]{u^5q");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.printHelp("Q3S`", "A CloneNotSupportedException was thrown: ", options3, "", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options2, (-2), (-1110));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 441;
      helpFormatter0.setLongOptPrefix(">");
      helpFormatter0.createPadding(1550);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.printHelp(2418, "arg", "", options0, "Hx65)!", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("_DmkN0d$");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_DmkN0d$");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) "cmdLineSyntax not provided";
      PrintWriter printWriter0 = mockPrintWriter0.printf("cmdLineSyntax not provided", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) printWriter0;
      objectArray1[3] = (Object) "_DmkN0d$";
      objectArray1[4] = (Object) mockPrintWriter0;
      objectArray1[5] = (Object) printWriter0;
      objectArray1[6] = (Object) comparator0;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "", objectArray1);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter1, 74, options0, 605, 1500);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "#{x7M7o'Ym0JPfv82*";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("#{x7M7o'Ym0JPfv82*", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setLongOptPrefix("[");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(806);
      String string1 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.OptionGroup");
      String string2 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 806, 806);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(74);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("arg");
      String string0 = null;
      boolean boolean0 = true;
      String string1 = "";
      options1.getOption("%^L~@|uGx:zu$uZH}*9");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-1), "usage: ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = (-2339);
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", true, "line.separator");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("--", true, "Rd)>I+=ixp*d~-ct");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp("KF!C6|P,!)8EGf;", options1, true);
      helpFormatter0.defaultDescPad = (-950);
      helpFormatter0.rtrim("KF!C6|P,!)8EGf;");
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_DmkN0d$";
      helpFormatter0.setLongOptPrefix("_DmkN0d$");
      String string1 = null;
      helpFormatter0.setOptPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = (-174);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("}L)wbJz\":", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '}L)wbJz\":' contains an illegal character : '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-3065), 1577, "MsaPs^");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("_DmkN0d$");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = "9^j<Nwe@Q_Yx]JWo/,";
      Options options0 = new Options();
      String string2 = "";
      int int0 = (-1);
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.setWidth((-1));
      String string3 = "<";
      // Undeclared exception!
//      try { 
        options0.addOption("\n", "/~2/8", true, "<");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = (-1);
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 1880, 1880);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      Options options2 = options1.addOption("arg", "A CloneNotSupportedException was thrown: ", true, (String) null);
      Option option0 = new Option("arg", true, "--");
      options2.toString();
      Options options3 = options2.addOption(option0);
      options3.toString();
      helpFormatter0.printHelp("Pavi3+C@S+J", options3);
      helpFormatter0.rtrim("4-");
      options1.hasOption("BP");
      helpFormatter0.setArgName("[ Options: [ short java.util.HashMap@0000000007 ] [ long {A CloneNotSupportedException was thrown: =[ option: arg A CloneNotSupportedException was thrown:   [ARG] :: null ]} ]");
      MockFile mockFile0 = new MockFile("aYDt1Zp>QAZ]{u^5q", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options2, (-2), (-1083));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "c8f!3|7cyL\"xqi3PV/";
      helpFormatter0.rtrim("c8f!3|7cyL\"xqi3PV/");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = null;
//      try {
        option0 = new Option("~6Ei]-_<{z,#1Ue", "usage: ", false, "line.separator");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '~6Ei]-_<{z,#1Ue' contains an illegal character : '~'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2418, "", "", options0, "Hx65)!", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("?");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", 814, (-3992));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("[L@&mx*~jxY/@y_-u");
      int int0 = 956;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 956, 956, "[L@&mx*~jxY/@y_-u");
      Options options0 = new Options();
      Option option0 = new Option("Ea", "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int1 = (-55);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-336), options2, (-55), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("", "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("[ option: ");
      int int0 = (-2802);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", "", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 3419;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.defaultDescPad = 3419;
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator2;
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      String string1 = "[";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", true, "arg");
      Options options1 = options0.addOption(option0);
      options1.getOptions();
      String string3 = "";
      // Undeclared exception!
//      try { 
        options1.addOption("usage: ", "", true, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [0 *;#Fo";
      helpFormatter0.setSyntaxPrefix(" [0 *;#Fo");
      int int0 = 0;
      String string1 = " ]";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setNewLine(" [0 *;#Fo");
      options0.toString();
      options0.addOption("arg", "usage: ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, (String) null, " ]", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 582;
      String string0 = "LZ)";
      helpFormatter0.renderWrappedText(stringBuffer0, 582, (-1331), "LZ)");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("LZ)", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'LZ)' contains an illegal character : ')'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale1, "S&NQ:xyGv ", objectArray0);
      int int0 = 627;
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "uVs=E");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "Cannot add value, list full.");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "'P,/$X:S~Q**dX", options1, "cmdLineSyntax not provided", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1}',HvKjw,,C-0";
      helpFormatter0.setArgName("1}',HvKjw,,C-0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">scP?@pDgJc9dB7");
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("--", true, "8K.A`.p2#T!'rQl");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      int int1 = 107;
      helpFormatter0.defaultLeftPad = 107;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 107, "usage: ");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "p pk wj129$%(-";
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'W';
      StringWriter stringWriter1 = stringWriter0.append('W');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        stringWriter2.append((CharSequence) "arg", 74, 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = ";M*G %FGjG@:y";
      helpFormatter0.defaultOptPrefix = "\n";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(";M*G %FGjG@:y", "hZM c^.`g)\"00nzXUg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // hZM c^.`g)\"00nzXUg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }
}
