/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:15:31 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-287));
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2895));
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-3602);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultWidth = (-1401);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.defaultDescPad = 16;
      String string0 = "fJ8q[%nbJ";
      String string1 = "";
      helpFormatter0.createPadding(16);
      Options options0 = null;
      helpFormatter0.setLongOptSeparator("fJ8q[%nbJ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "fJ8q[%nbJ", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      option0.setArgName("");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(526, "--", "--", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1460, options0, 47, 1460);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Option option0 = new Option("", "|M/3&nwmk4}O^7*0", true, "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-2), options1, 72, 54);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1));
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, " ", " ", options1, " ", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp(1110, "%;", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "l/rX~FuOZ4Fr'i=LL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-780), 2495, "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IdM\"@B_y@mik?S/e");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "Y^oM2gfr+W", (String) null, options0, 58, (-2), "&'&@", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("OgJ", " ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "*Vk(u@Jb1kZW;{Z-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = "8vq>\\~yo{g";
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "8vq>~yo{g", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.renderOptions((StringBuffer) null, 34, options0, 15, 117);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1388), 97, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 171, "fEDqLH<t", "fEDqLH<t", options0, 200, 0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IdM\"@B_y@mik?S/e");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 171, "IdM\"@B_y@mik?S/e", "-", options0, 171, 171, "-", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 171, options0, 2, 171);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = "usage: ";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("org.apache.commons.cli.OptionGroup", true, "NO_ARGS_ALLOWED");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 547, "!=a$axva'^.8\"N&6$", "<", options1, 44, 512, " ", true);
      helpFormatter0.rtrim("!=a$axva'^.8\"N&6$");
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "4W^kREKD\"");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("arg", "", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter2.printHelp(1486, "~Ng0K*&a99t7:?`%", "--", options1, "\n", false);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("0k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 713, " ", " ", (Options) null, (-117), 83, " ] [ long ", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("OgJ", "-", true, " ");
      String string0 = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 442);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("gB5jc", "G,_d\"Lx:*,", (Options) null, (String) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("Gp~!f=2uy!@7J>6e(");
      File file0 = MockFile.createTempFile("[c;U8ALi~fjua^x0*h!", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "usage: ", options0, 74, 1, "_YE3Qeh>", true);
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockFile mockFile0 = new MockFile("V0QZ!>&qpZ}rh");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "taKO#|;u^?grs^XI3", "org.apache.commons.cli.Util", (Options) null, 3861, 302, "V0QZ!>&qpZ}rh", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "|YhecX", true, "m~#I(m)iq6#");
      Options options2 = options1.addOption("arg", false, "org.apache.commons.cli.OptionValidator");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      Option option0 = new Option("", ")n$pgW", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setDescription((String) null);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2699), "xxSrL[QRb{]E", "F>2&.0X", options3, "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "has already been selected: '";
      objectArray0[1] = (Object) fileSystemHandling0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("has already been selected: '", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("OgJ", "-", true, " ");
      helpFormatter0.printHelp(74, "y;KR%gx5lbrz?2nM(", " |8avf", options1, "OgJ", true);
      helpFormatter0.defaultLeftPad = 818;
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "y;KR%gx5lbrz?2nM(", "OgJ", options0, 10, (-1645), "y;KR%gx5lbrz?2nM(", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-161), "cmdLineSyntax not provided");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(169, "llyv@,.3bn", "", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      helpFormatter0.setArgName("--");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("--");
      helpFormatter0.setArgName("--");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getLongOptSeparator();
      String string0 = "igS>v<c'*EJVw:|OS";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("igS>v<c'*EJVw:|OS", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = null;
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("-", "$^m:0c 8Jo Hn1}g");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "([[G }fzx9(L6O6AwZ{");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "([[G }fzx9(L6O6AwZ{";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J");
      helpFormatter0.defaultLeftPad = 2949;
      helpFormatter0.setNewLine("Z5J");
      helpFormatter0.setWidth((-1));
      helpFormatter0.rtrim("([[G }fzx9(L6O6AwZ{");
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("([[G }fzx9(L6O6AwZ{");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("=wp`;m 7g^-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "rvVb24,NVSoUX.R. ";
      helpFormatter1.setArgName("rvVb24,NVSoUX.R. ");
      helpFormatter1.setLongOptSeparator("arg");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockFile0;
      Option option0 = new Option("arg", "arg", true, "WkH5e?p$");
      options0.addOption(option0);
      Object object2 = new Object();
      objectArray0[6] = object2;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.printOptions(mockPrintWriter0, 1519, options0, 31, 32);
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption((String) null, "--", true, "usage: ");
      options1.hasOption("--");
      helpFormatter0.printHelp("rg.apache.commons.cli.ptions", "", options0, "--");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, (-1), 1);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      Options options2 = new Options();
      helpFormatter0.printHelp(3496, " ] [ long ", "org.apache.commons.cli.HelpFormatter$1", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1114);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 63, 1114, "TZj2i=m#");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 997, ", ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("JjKoD;C}p.$M[+Ti#", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'dv~{2TN");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '<';
      charArray0[4] = 'K';
      mockPrintWriter0.write(charArray0);
      Options options1 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "'dv~{2TN", "JjKoD;C}p.$M[+Ti#", (Options) null, 31, 31, "");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("LT", options0, false);
      Options options1 = options0.addOption("arg", "\n", false, "");
      options0.getMatchingOptions("LT");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "IsD4g^DDzJW", options0, "");
      String string0 = "%&Df\"`3-AV)5m \":";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%&Df\"`3-AV)5m \":");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter1.printUsage(printWriter0, 251, "-", options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter((String) null, "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      options0.addOption("arg", "\n", false, "");
      options0.getMatchingOptions("LT");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "IsD4g^DDzJW", options0, "");
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--", "h^u%&1})c)_@5o@li#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printWrapped(printWriter0, 3, "-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", " ^sHUuV)-P,<V`b3h{(", options0, "SfQE1r", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "\n");
      options2.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      Options options3 = options1.addOption((String) null, "\n", true, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1841, "usage: ", options3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "arg", false, "y9>$b-d:q$");
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      Options options3 = options2.addOption("arg", "", false, "usage: ");
      options0.hasOption("[");
      options3.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printHelp("[", "", options2, "#c92[5`&Y%Ex");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-970);
      helpFormatter0.setDescPadding((-970));
      helpFormatter0.getLongOptSeparator();
      int int1 = (-64);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos(" ", (-64), (-4083));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 64, options0, 3339, 64);
      helpFormatter0.renderWrappedText(stringBuffer1, 3339, (-868), "nagQIY");
      Options options1 = options0.addOption("arg", ";dEQn;4]U<;MhT Z", true, "");
      options1.getMatchingOptions("mB]],tXeC 4D_L.pyW");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = 'J';
      stringBuffer0.append((Object) helpFormatter0);
      StringBuffer stringBuffer1 = stringBuffer0.append('J');
      stringBuffer0.insert(1, (float) 1);
      int int0 = 1524;
      stringBuffer0.setLength(74);
      char char1 = 'Z';
      // Undeclared exception!
//      try { 
        stringBuffer1.insert(2090, 'Z');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1796);
      String string0 = "--";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1796), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "");
      helpFormatter0.printHelp(860, "org.apache.commons.cli.Option", "", options1, "`/Fh", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      File file0 = MockFile.createTempFile("KA #QWpHP:B{", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'j';
      charArray0[2] = ',';
      charArray0[3] = ':';
      charArray0[4] = '7';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 114, "has already been selected: '", "", options0, 114, (-2), "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      Options options1 = new Options();
      options1.getMatchingOptions("org.apache.commons.cli.Option");
      helpFormatter0.printHelp("vmf<neGtSQ", "", options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      helpFormatter0.createPadding(287);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-953), "", (String) null, options0, "org.apache.commons.cli.Option", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("]Or'z");
      StringBuffer stringBuffer0 = new StringBuffer(1041);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1041, options0, 276, 9);
      helpFormatter0.renderWrappedText(stringBuffer1, 276, 280, "");
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(0);
      Options options1 = new Options();
      options1.toString();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", "--", true, "   ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      helpFormatter0.setOptPrefix("]Or'z");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 290, " ");
      helpFormatter0.rtrim("]Or'z");
      helpFormatter0.createPadding(319);
      Options options0 = new Options();
      options0.toString();
      options0.addOption("NO_ARGS_ALLOWED", (String) null, true, "\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.renderWrappedText(stringBuffer1, 2428, 2428, "\n");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "arg", false, "y9>$b-d:q$");
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      options1.hasShortOption("arg");
      Option option0 = new Option("", false, "");
      options1.addOption(option0);
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--");
      String string1 = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.rtrim("f");
      Option option0 = new Option((String) null, false, "usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", "\n", options2, "org.apache.commons.cli.Option");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      charArray0[4] = ':';
      charArray0[5] = '7';
      mockPrintWriter1.write(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "LT", options0, 0, 0, (String) null);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", "LT", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      charArray0[4] = ':';
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "LT");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "arg", false, "y9>$b-d:q$");
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      options1.hasShortOption("arg");
      Option option0 = new Option("", true, "");
      options1.addOption(option0);
      helpFormatter0.printHelp("y9>$b-d:q$", (String) null, options1, " ");
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, 74, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(7);
      helpFormatter0.renderWrappedText(stringBuffer0, 7, (-1756), "usage: ");
      helpFormatter0.defaultWidth = 7;
      options0.getMatchingOptions("&");
      helpFormatter0.printHelp(74, "*;#=%", "&", options0, "*;#=%");
      helpFormatter0.defaultSyntaxPrefix = "line.separator";
      // Undeclared exception!
//      try { 
        options0.addOption("--", "-", true, "line.separator");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("^1O");
      int int0 = 275;
      int int1 = 304;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, (Options) null, 275, 304);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options1.addOption("", "k3BD>OCp", true, "org.apache.commons.cli.Options");
      options2.getMatchingOptions("");
      helpFormatter0.printHelp("\n", "", options0, "'j<C 3~lB<");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "'j<C 3~lB<", (String) null, options0, 0, 10, ">&9,[j=:aFf7G0g|}");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "LT";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1048), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.rtrim("f");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3032, "Qmk!{.%w*");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(4099, "", "\n", options1, "f");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printHelp("LT", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 11, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      options0.getOption("usage: ");
      helpFormatter0.defaultWidth = (-1);
      String string0 = ";XMp#kvHEAP";
      options0.getMatchingOptions(";XMp#kvHEAP");
      String string1 = "";
      options0.hasShortOption("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("}?W6qc?6eMS<", "", options0, "w|.u85L7de");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "LQ9gu9^`V#z6U");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // LQ9gu9^`V#z6U
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "--");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = options0.addOption((String) null, "", true, "sO<MwUD4K0Cz8fIV$");
      MockFile mockFile0 = new MockFile("<", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('/');
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1764), "<", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "arg", false, "y9>$b-d:q$");
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      options1.hasShortOption("arg");
      Option option0 = new Option("", false, "");
      options1.addOption(option0);
      helpFormatter0.printHelp("y9>$b-d:q$", (String) null, options1, " ");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options1.addOption("", "k3BD>OCp", true, "org.apache.commons.cli.Options");
      options2.getMatchingOptions("");
      helpFormatter0.printHelp("\n", "", options0, "'j<C 3~lB<");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "y9>$b-d:q$";
      boolean boolean0 = false;
      options1.addOption("", "arg", false, "y9>$b-d:q$");
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      options1.hasShortOption("arg");
      helpFormatter0.printHelp("y9>$b-d:q$", (String) null, options1, " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      String string2 = null;
      Options options2 = new Options();
      int int0 = 32;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3954), (String) null, (String) null, options2, (-3954), 32, "org.apache.commons.cli.HelpFormatter", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'W';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      options0.getMatchingOptions("H/DV=^~,]g");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp("}?W6qc?6eMS<", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "<r05]N");
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "-";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(",j", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 29, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 0, 325);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("[ Options: [ short ", "arg", true, "eo}d#Z=4oI");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ Options: [ short ' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 3";
      helpFormatter0.setSyntaxPrefix(" 3");
      String string1 = "LBAAK-GL;Y9Z";
      MockFile mockFile0 = new MockFile("--", "LBAAK-GL;Y9Z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "LBAAK-GL;Y9Z";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "line.separator", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockFile0.delete();
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = ';';
      mockPrintWriter0.print(charArray0);
      int int0 = 2;
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 2, options0, 2, 2);
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter(" 3", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "X3qcoxsj+;GS;M";
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", "--");
      options0.getOptionGroups();
      options0.hasShortOption("`5\"O1");
      helpFormatter0.setWidth(60);
      helpFormatter0.createPadding(327);
      URI uRI0 = MockURI.URI("X3qcoxsj+;GS;M");
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Option option0 = new Option("arg", "arg");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 0, options0, 0, (-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.hasShortOption("[d/");
      helpFormatter0.rtrim("LT");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "'xfyPkDz,e+Z", "", options0, 3, (-3480), "A CloneNotSupportedException was thrown: ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'W';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      charArray0[4] = ':';
      charArray0[5] = '7';
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-645));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'W';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      charArray0[4] = ':';
      charArray0[5] = '7';
      mockPrintWriter1.write(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "LT", options0, 0, 0, (String) null);
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "LT", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.format("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 29, "usage: ");
      helpFormatter0.createPadding(831);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 169, (-2670), "llyv@,.3bn");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      options0.addOption("", false, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "", "{`f#$6gV>o'l", options0, 74, 74, "xqO/", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "arg", false, "y9>$b-d:q$");
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      options1.hasShortOption("arg");
      helpFormatter0.printHelp("y9>$b-d:q$", (String) null, options1, " ");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      int int0 = 31;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "[ Options: [ short ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-6);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      options0.getOptions();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = null;
      Options options2 = options1.addOption("", "O5]rc%;", true, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-6), "", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[1] = '-';
      mockPrintWriter0.print(0.0);
      charArray0[2] = 'j';
      charArray0[3] = '<';
      charArray0[4] = ':';
      charArray0[5] = '7';
      mockPrintWriter1.write(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "LT", options0, 0, 0, (String) null);
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      String string1 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) " ", (-2002), 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("=wp`;m 7g^-");
      helpFormatter0.setArgName("/CH");
      helpFormatter0.setLongOptSeparator("/CH");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "%9KJ`AVklkO>FQY8f", "Fx<(TV)J^7sxK''QO", options0, " ] [ long ", true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLeftPadding(13);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      StringBuffer stringBuffer0 = new StringBuffer(9);
      String string0 = "]Or'z";
      helpFormatter0.setOptPrefix("]Or'z");
      int int1 = 296;
      String string1 = " ";
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 296, " ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("]Or'z");
      int int2 = 319;
      helpFormatter0.createPadding(319);
      String string2 = "org.apache.commons.cli.HelpFormatter$1";
      String string3 = " | ";
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = false;
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", (String) null, false, "\n");
      String string4 = "lIPJSVt}c:SE[";
      // Undeclared exception!
//      try { 
        options1.addOption(" | ", false, "lIPJSVt}c:SE[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' | ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setOptPrefix("9\"hP3o kyQ{?)");
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'W';
      charArray0[2] = 'T';
      charArray0[3] = '?';
      // Undeclared exception!
//      try { 
        mockPrintWriter1.write(charArray0, 9, 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(";H");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "jAYz|~ZoLXn4l(t/Lb";
      String string1 = "TZj2i=m#";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1756), "TZj2i=m#");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "k3BD>OCp", true, "rg.apache.commons.cli.ptions");
      MockFile mockFile0 = new MockFile("--", "k3BD>OCp");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options2.hasShortOption("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      options2.hasOption("");
      helpFormatter0.rtrim("rg.apache.commons.cli.ptions");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1163), "rg.apache.commons.cli.ptions");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = (-1045);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1045), (-1045), "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-1796);
      String string0 = "--";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1796), "--");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("]");
      Options options1 = new Options();
      Options options2 = options0.addOption("", "", true, "\n");
      helpFormatter0.printHelp(74, " | ", "", options2, "", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(13);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "-", options2, "", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1346);
      Options options0 = new Options();
      String string0 = "}c*Q`d]=";
      helpFormatter0.setLongOptPrefix("}c*Q`d]=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2130, "r9M+f-9");
      String string1 = "u;LO%v)>7[^ac";
      Option option0 = null;
//      try {
        option0 = new Option("-", "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = (-2);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, (-3022), 3);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      String string0 = "X3qcoxsj+;GS;M";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "--";
      Option option0 = new Option("", "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "arg", false, "y9>$b-d:q$");
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter");
      options1.hasShortOption("arg");
      helpFormatter0.printHelp("y9>$b-d:q$", (String) null, options1, " ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 32, 0, "");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Qm`@", "Qm`@", options1, 74, 1262, "", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("LT", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'W';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      charArray0[4] = ':';
      charArray0[5] = '7';
      mockPrintWriter1.write(charArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 258, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "LT", options0, 0, 0, (String) null);
      helpFormatter0.setLongOptSeparator((String) null);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 9;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      options0.getOptions();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = null;
      Options options2 = options1.addOption("", "O5]rc%;", true, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = null;
//      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(comparator0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile.createTempFile("O5]rc%;", "usage: ");
      Locale locale0 = new Locale("-", "usage: ", "usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "O5]rc%;";
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", string0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.setDescPadding((-3110));
      assertEquals((-3110), helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5LlArxMfr>94KX=_s)";
      helpFormatter0.setNewLine("5LlArxMfr>94KX=_s)");
      helpFormatter0.setArgName("5LlArxMfr>94KX=_s)");
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = (-4349);
      String string1 = "kp; VW9ex";
      Options options0 = new Options();
      String string2 = "";
      options0.helpOptions();
      boolean boolean0 = false;
      String string3 = "[ Options: [ short ";
      Options options1 = options0.addOption("", "", false, "[ Options: [ short ");
      String string4 = "K4Vg?$3j";
      boolean boolean1 = true;
      String string5 = null;
      options1.getOptions();
      options1.hasLongOption((String) null);
      // Undeclared exception!
//      try { 
        options1.addOption("K4Vg?$3j", true, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'K4Vg?$3j' contains an illegal character : '?'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print('A');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2549, (String) null, (String) null, (Options) null, 2549, 31, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("*");
      assertEquals("*", helpFormatter0.getLongOptSeparator());
  }
}
