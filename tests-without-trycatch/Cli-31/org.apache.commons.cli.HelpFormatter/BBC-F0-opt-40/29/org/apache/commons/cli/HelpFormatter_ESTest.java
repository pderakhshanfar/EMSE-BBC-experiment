/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:51:33 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.rtrim("<4AEqOJ#KuE}");
      // Undeclared exception!
      helpFormatter0.printHelp("<4AEqOJ#KuE}", options0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3814;
      StringBuffer stringBuffer0 = new StringBuffer(3814);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "rO8ZZck|I");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 3814, options1, 3814, 3814);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "-", "usage: ", options0, "-");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("&59bvWJZAFV?K/LN^", "&59bvWJZAFV?K/LN^", (Options) null, "@*j<~GrxkcVz=a", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 41, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.rtrim("\n");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", (Object[]) null);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, true, (String) null);
      Options options3 = options2.addOption((String) null, "g&;{$A`?'bZCl#{J$<V", true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 32, "(D#ZD{T%znudz", options3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
//         //
//         verifyException("java.util.ComparableTimSort", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(44);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 44, options0, 44, 44);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1553);
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
      Options options0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1718);
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      options0.addOption("", "--", true, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1455), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' contains an illegal character : '");
      String string0 = null;
      helpFormatter0.defaultLeftPad = (-980);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultArgName = null;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("*Uy%\"", "*Uy%\"", (Options) null, "*Uy%\"");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", options1, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 936, "S2.e5n,g6'u", "S2.e5n,g6'u", options0, 936, 32, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      int int0 = 279;
      String string0 = "cmdLineSyntax not provided";
      Option option0 = null;
//      try {
        option0 = new Option("-", "--", true, "[=Rqbj?/Ah");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "MiabkEZ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-69);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 2, (-69), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.defaultSyntaxPrefix = ";5D~g=Fgg";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(29, "y<;", (String) null, (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "", options0, "", true);
      helpFormatter0.printHelp(74, "--", "arg", options0, "", false);
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 18, (-1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "y<;";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "y<;");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      option0.setType(options2);
      optionGroup0.setRequired(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "-", "!S~KlB", options2, "9y/J?Dvn'j/", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      Option option0 = new Option((String) null, " ", true, "");
      options0.addOption(option0);
      helpFormatter0.printHelp(8, "5^:W%M?@kN(qUTX#:Bt", "usage: ", options0, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 8, 8, "");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(",>%{*YkkM=UAvs", "T}", (Options) null, "T}");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.println(1423);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "-", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append('Z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) printStream0;
      objectArray0[4] = (Object) options0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      String string0 = "-[_}";
      String string1 = "   ";
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "-[_}", "   ", options0, 0, 0, "-[_}", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "-", "NO_ARGS_ALLOWED", options0, 103, 3137, "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      optionGroup0.setRequired(false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("hv/h}r");
      // Undeclared exception!
//      try { 
        helpFormatter1.printOptions((PrintWriter) null, 74, options0, 74, (-991));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("m", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", true, "-");
      Options options2 = options0.addOption("", "-", true, "usage: ");
      helpFormatter0.printHelp("arg", options2);
      helpFormatter0.printHelp(74, " ", "S\"n1i\"bNQeg", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "--", "--", options0, 948, 3499, "--", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "~1_";
      EvoSuiteFile evoSuiteFile0 = null;
      helpFormatter0.defaultNewLine = "e9a";
      helpFormatter0.setSyntaxPrefix("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      int int0 = 69;
      helpFormatter0.defaultWidth = 69;
      helpFormatter0.defaultArgName = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("~1_");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "-";
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.TAIWAN;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("5CFZq/h}]/AL6\"");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "org.apache.commons.cli.HelpFormatter");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "+", options2, 432, 1, "", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      Options options3 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.rtrim("\n");
      helpFormatter1.createPadding(74);
      HelpFormatter helpFormatter5 = new HelpFormatter();
      HelpFormatter helpFormatter6 = new HelpFormatter();
      helpFormatter6.printHelp("arg", options3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("y<;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "x;DcI*", "", options0, 10, 74, "y<;", true);
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, " :: ", "arg", options0, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--", false, "nD>chZl8oJ[8dHEa{");
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("l6gG%u", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.TAIWAN;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "l6gG%u", "usage: ", options1, 3072, 127, "usage: ", true);
      helpFormatter0.getOptionComparator();
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter1.printHelp(127, "usage: ", "~", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((-3071));
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1659, "0nM", "", options0, 869, 31, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      options1.hasLongOption("J");
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "<", (String) null, options0, 1, (-1413), "\n", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      mockPrintWriter0.println(0.0F);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "uK", "uK", options0, 0, 0, (String) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      mockPrintWriter0.println((float) 3);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1348, "em:GgGw!-L_\"N", "", options0, 0, (-892), (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "&9=]ME1@G#$ZD6_|5=";
      helpFormatter0.setLongOptSeparator("?t^U@peg5]:,,CO");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.hasShortOption("\n");
      helpFormatter0.printHelp(3, "&9=]ME1@G#$ZD6_|5=", "", options0, "arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&9=]ME1@G#$ZD6_|5=");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("?t^U@peg5]:,,CO");
      helpFormatter0.printHelp("?t^U@peg5]:,,CO", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "n0r%tk.%=38ff@zC", "n0r%tk.%=38ff@zC", options2, 0, (-3453), "?t^U@peg5]:,,CO");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((-3071));
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 869, "\n", options0);
      helpFormatter0.printHelp(38, " ] [ long ", " ] [ long ", options0, " ] [ long ", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      mockPrintWriter0.println(0.0F);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "c&r_|Nlq8/n_tI", "Pv`", options0, "");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2246;
      StringBuffer stringBuffer0 = new StringBuffer(2246);
      int int1 = 2147;
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2147, options0, 2147, 2246);
      // Undeclared exception!
//      try { 
        stringBuffer0.appendCodePoint((-924));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      mockPrintWriter0.println(0.0F);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options0, 0, 0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultSyntaxPrefix = "iV";
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth((-782));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(391);
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("iV", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "#>J+p'~[Vo");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-782), options1, 1, 2318);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("");
      options1.hasLongOption("-");
      MockFile mockFile0 = new MockFile("]uWB]MhLK##`*Kt ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "", "org.apache.commons.cli.Options", options1, 64, 1131, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth((-61));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("=", "NO_ARGS_ALLOWED", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), (String) null, "[HLxO6hEjU]C`/Xu", options0, (-2807), (-238), "6?E~L3+g!v\"4!jD!", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NbP\"");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 788;
      String string0 = "--";
      Options options0 = new Options();
      String string1 = "PXDM-oGh";
      helpFormatter0.printHelp("PXDM-oGh", "Sbt}s0FnY%ce2X9", options0, "PXDM-oGh");
      // Undeclared exception!
//      try { 
        options0.addOption(":(s+h`0s!jQ4<}56RM", "", false, ":(s+h`0s!jQ4<}56RM");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ':(s+h`0s!jQ4<}56RM' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options0.addOption((String) null, true, "arg");
      helpFormatter1.defaultOptPrefix = "";
      helpFormatter0.printHelp(3, "\n", "?{n", options1, (String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 1, "&GLt.ue*aK+^~L");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((String) null, " ", options1, "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 869, "\n", options0);
      helpFormatter0.printHelp("H\"A", options0);
      options1.hasLongOption("H\"A");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("p_e'/a%n=<2");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, (String) null);
      options1.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(8);
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(", ", options0, false);
      helpFormatter0.rtrim(", ");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) "]";
      objectArray0[2] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("]", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 63, 679, "|6q!@g~z@[U");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "-";
      options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string1 = "Hl";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1486), "Hl", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(false);
      options2.getOptions();
      options2.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2, "]", "", options1, "Kk6 r\"HITxS3x[", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      options0.addOption("", false, "");
      Option option0 = new Option("", true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-438), "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, "X8g/lquy,J!", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(2);
      Options options1 = options0.addOption("bK3", false, "arg");
      options1.addOption("ZI", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "-", "", options0, "ZI");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.println((float) 1);
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      String string0 = "V|,g02G>z_";
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "V|,g02G>z_", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 653, (-557), "B>&F5\"H,0VZl");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, false, "arg");
      Option option0 = new Option("", false, "s}muRYd");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(":r7FW'pju^b;", options2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1486), "-", "2", options0, " ] [ long ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("p_e'/a%n=<2");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("Cannot add value, list full.");
      Option option0 = new Option("K", "]_7ia", true, " ");
      Options options1 = options0.addOption(option0);
      options0.hasLongOption((String) null);
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, ")/1S*1b\u0000&TGRm6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "z>XZcpj+", "--", options1, 74, 3, "p_e'/a%n=<2", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "&b=]ME1@G#$ZD6_|5G";
      helpFormatter0.setLongOptSeparator("?t^U@peg5]:,,CO");
      int int0 = 0;
      String string0 = "3%1(\\,2r~~VZQ";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("--");
      Option option0 = new Option("", "usage: ", true, (String) null);
      Options options2 = options1.addOption(option0);
      options0.addOption("arg", true, "?t^U@peg5]:,,CO");
      helpFormatter0.setWidth(1131);
      String string2 = "Z]ajvSO";
      options2.hasLongOption("3%1(,2r~~VZQ");
      MockFile mockFile0 = new MockFile("arg", "?t^U@peg5]:,,CO");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1131, "?t^U@peg5]:,,CO", "?t^U@peg5]:,,CO", options1, (-2), (-1), (String) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options0.addOption((String) null, false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "\n", "?{n", options1, (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      mockPrintWriter0.println(1);
      mockPrintWriter0.println(800.0F);
      Options options0 = new Options();
      options0.getOption("");
      options0.getMatchingOptions(" ");
      int int0 = 3455;
      helpFormatter0.printUsage(printWriter0, 3455, "", options0);
      Options options1 = options0.addOption("", "usage: ", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      helpFormatter0.printHelp(15, "cmdLineSyntax not provided", "a&", options0, "", true);
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption("a&", true, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'a&' contains an illegal character : '&'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("bK3", false, "arg");
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("line.separator", options2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "&b=]ME1@G#$ZD6_|5G";
      helpFormatter0.setLongOptSeparator("?t^U@peg5]:,,CO");
      int int0 = 0;
      String string0 = "3%1(\\,2r~~VZQ";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("--");
      Option option0 = new Option("", "usage: ", true, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.setWidth(1131);
      String string2 = "Z]ajvSO";
      options2.hasLongOption("3%1(,2r~~VZQ");
      MockFile mockFile0 = new MockFile("arg", "?t^U@peg5]:,,CO");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1131, "?t^U@peg5]:,,CO", "?t^U@peg5]:,,CO", options1, (-2), (-1), (String) null, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      optionGroup0.setRequired(false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "q<`{%u9&yYkm!VQi2h");
      options0.hasOption(";UBj?y0Z4KK&U");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(58, "", "\n", options1, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("p_e'/a%n=<2");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "]v<ia", true, " ");
      options0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setWidth((-1));
      options2.hasLongOption("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2988), (String) null, "-*'AJ@7&\"0=", options1, "-*'AJ@7&\"0=", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("p_e'/a%n=<2");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "]v<ia", true, " ");
      options0.addOption(option0);
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter1.setDescPadding(74);
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options0);
      helpFormatter0.setSyntaxPrefix("\n");
      options0.getOption("--");
      options0.getOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", options0, false);
      helpFormatter2.setLongOptSeparator("[ Options: [ short ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderOptions((StringBuffer) null, 17, options0, 74, 3);
      helpFormatter2.setArgName("--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("--", "$e4b.\"]+th\"lt[X'", options0, "usage: ", false);
      helpFormatter2.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.println('(');
      helpFormatter3.printOptions(mockPrintWriter0, 17, options0, 20, 1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("p_e'/a%n=<2");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "]v<ia", true, " ");
      options0.addOption(option0);
      int int0 = 74;
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter1.setDescPadding(74);
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "arg");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // arg
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.defaultLeftPad = (-4631);
      options2.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*Yu");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "*Yu");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("Illegal option name '");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("?t^U@peg5]:,,CO", options1, true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(">", "Illegal option name '", options2, "H}>R`]r5:?", false);
      helpFormatter0.rtrim("R( *DH*h:z%4");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.createPadding(27);
      helpFormatter1.printHelp(">c", options1, true);
      Comparator<Object> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option0 = null;
//      try {
        option0 = new Option("--", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "{vPlG";
      Options options0 = new Options();
      helpFormatter0.printHelp("{vPlG", options0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      helpFormatter0.printHelp(3, " ", " ", options1, "", true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean1 = false;
      // Undeclared exception!
//      try { 
        options2.addOption("{vPlG", false, "{vPlG");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '{vPlG' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("j?Fx=u!$AUqw%Ys[Fh", "A>Jx2m fqb");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "usage: ");
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      helpFormatter1.setWidth(74);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", (String) null, options0, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getOptions();
      options2.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(7, "Kk6 r\"HITxS3x[", "\"\t{ GkPuU\".F", options1, "\"\t{ GkPuU\".F", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 44;
      helpFormatter0.setNewLine("d");
      helpFormatter0.findWrapPos("6QdTE/o", 74, 0);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(50, "d", "6QdTE/o", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "{vPlG";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      helpFormatter0.printHelp(3, " ", " ", options0, "", true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean1 = false;
      // Undeclared exception!
//      try { 
        options1.addOption("{vPlG", false, "{vPlG");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '{vPlG' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      Options options1 = options0.addOption("", false, "");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("'A!3^cXx", "CvszUKgUpaa:-pgvtb");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // CvszUKgUpaa:-pgvtb
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 74;
      String string0 = "G";
      helpFormatter0.printHelp(74, " ", "G", options0, "Cannot add value, list full.", true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      options0.addOption((String) null, false, (String) null);
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        options1.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "&b=]ME1@G#$ZD6_|5G";
      helpFormatter0.setLongOptSeparator("?t^U@peg5]:,,CO");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp(">c", options1, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("=wz4AW", "-", options1, "=wz4AW", false);
      helpFormatter0.rtrim("o");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = " J(/P9-vsP:)4$";
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.setArgName("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(";viw'A525lFO", "", options1, "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      mockPrintWriter0.println(1);
      mockPrintWriter0.println(0.0F);
      Options options0 = new Options();
      options0.getOption("f;75:");
      options0.getMatchingOptions("cmdLineSyntax not provided");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "cmdLineSyntax not provided", options0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "PsfsV;xeW}=.0^W6Ji";
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      helpFormatter0.printUsage(printWriter0, 31, "PsfsV;xeW}=.0^W6Ji");
      helpFormatter0.setLongOptSeparator("PsfsV;xeW}=.0^W6Ji");
      helpFormatter0.setNewLine("PsfsV;xeW}=.0^W6Ji");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("PsfsV;xeW}=.0^W6Ji", options0, true);
      // Undeclared exception!
//      try { 
        options0.addOption("-", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = null;
      int int0 = 872;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 872, 4309, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2435), 74, "2Jpu");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "&b=]Mw1G#$ZD6_|5G";
      helpFormatter0.setLongOptSeparator("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "usage: ", true, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.setWidth(1131);
      options2.hasLongOption("3%1(,2r~~VZQ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3%1(,2r~~VZQ", "", options2, "Z]ajvSO", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      boolean boolean0 = true;
      int int0 = (-573);
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-573), "", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append((CharSequence) " ");
      int int0 = 0;
      helpFormatter0.setNewLine("d");
      int int1 = 7;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-2014), 7);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = "j?Fx=u!$AUqw%Ys[Fh";
      String string1 = "A>Jx2m fqb";
      MockFile mockFile0 = new MockFile("j?Fx=u!$AUqw%Ys[Fh", "A>Jx2m fqb");
      File file0 = MockFile.createTempFile("&o36MvWe*J zYX]m2", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string2 = "CROD~4If'RM";
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "&o36MvWe*J zYX]m2";
      PrintWriter printWriter0 = mockPrintWriter0.printf("CROD~4If'RM", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "!QH%~vAl)\"");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("?Q", true, "#0'uhgwu\"4-p$j$+");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '?Q' contains an illegal character : '?'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("p_e'/a%n=<2");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("Cannot add value, list full.");
      Option option0 = new Option("K", "]_7ia", true, " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setWidth(74);
      options0.hasLongOption("K");
      helpFormatter0.printHelp(1830, "org.apache.commons.cli.Options", "-", options0, "-", true);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.renderOptions(stringBuffer0, 1, options1, 2581, 95);
      assertEquals(35, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("d3}$A[x<hE9ecD*");
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1486));
      helpFormatter0.defaultOptPrefix = " J(/P9-vsP:)4$";
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      options1.getOptions();
      options2.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("f/& wKUP;-yq;", options2);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding((-521));
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("e4?eq-L+!Ub@");
      String string0 = "=`";
      helpFormatter0.defaultOptPrefix = "=`";
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-3012));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string0 = "P";
      helpFormatter0.setOptPrefix("P");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-381), (-381), "+XBqAKo}");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`SPKIW5hgH6#JlwffDD";
      helpFormatter0.rtrim("`SPKIW5hgH6#JlwffDD");
      int int0 = 74;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("--", true, "C");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2560;
      helpFormatter0.setWidth(2560);
      String string0 = "oC:NxJ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option("-", "", false, "l56vy}");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7+X>gdn>\\RDf";
      helpFormatter0.setLongOptPrefix("7+X>gdn>RDf");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("7+X>gdn>RDf");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((File) null, "7+X>gdn>RDf");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      helpFormatter0.printHelp(3107, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "", true);
      String string1 = "-";
      String string2 = "CUd )`Qcx3";
      // Undeclared exception!
//      try { 
        options0.addOption("-", "arg", true, "CUd )`Qcx3");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "o'EaBq;)\\\"u";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("o'EaBq;)\"u", 32, (-1266));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      Options options1 = options0.addOption("m", true, "usage: ");
      helpFormatter0.printHelp(3107, "]uWB]MhLK##`*Kt ", "", options1, "Kcmy");
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "ry~Z";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-108), "ry~Z");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "gB/>}s/W";
      Options options0 = new Options();
      String string1 = "5";
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("--", "5", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{hm7nT2A5tOATB";
      helpFormatter0.setLongOptPrefix("{hm7nT2A5tOATB");
      helpFormatter0.getDescPadding();
      String string1 = "1o*";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "\n", false, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3107;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp(3107, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "", true);
      String string1 = "-";
      String string2 = "CUd )`Qcx3";
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = (-1);
      String string0 = "{vPlG";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), " ", " ", options0, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      options0.hasOption("arg");
      options0.getOption("{x,LE2f(");
      // Undeclared exception!
//      try { 
        options0.addOption(" ", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "lt2fMg{%j";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 496, "cR@AoiSt5#K");
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("lt2fMg{%j", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      String string1 = "y";
      options0.hasOption("arg");
      String string2 = "p-<@x3AFE>jb_";
      Options options1 = options0.addOption("y", "-", true, "p-<@x3AFE>jb_");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("L:;9Q7xowTw}4KE,lbK", options1, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 44;
      helpFormatter0.setNewLine("d");
      helpFormatter0.findWrapPos("6QdTE/o", 74, 0);
      String string0 = ")7,O3";
      Options options0 = null;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, (Options) null, (-1), (-2728));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 44;
      int int0 = 0;
      helpFormatter0.setNewLine("d");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("6QdTE/o", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append('r');
      helpFormatter0.setNewLine("PsfsV;xeW}=.0^W6Ji");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("--", 581, 7);
      Options options0 = null;
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 7, (Options) null, 1993, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("<s'T{_LJ|Iu");
      helpFormatter0.getLongOptPrefix();
      int int0 = 2219;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, (-2692));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 0;
      Options options0 = new Options();
      Option option0 = new Option("", "u@>G", false, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, (String) null);
      String string0 = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
//      try { 
        options2.addOption("A CloneNotSupportedException was thrown: ", "arg", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1486));
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = " J(/P9-vsP:)4$";
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getOptions();
      options2.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("f/& wKUP;-yq;", options2);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("-", "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }
}
