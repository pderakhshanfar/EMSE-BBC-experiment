/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:16:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "");
      options2.addOption("", "q}KfYAaY-,R?5Ps6Kq1", false, "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, " ", options1);
      helpFormatter0.rtrim(";j$}4}^J) ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("548", true, "~hu&");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "[Ub7@#{&7c`h9UuP&", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1879, "a *");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      String string1 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      String string2 = "58<&-/c!5Ul$6.B{e:Y";
      int int0 = 617;
      helpFormatter0.findWrapPos("58<&-/c!5Ul$6.B{e:Y", 617, 617);
      String string3 = "#q(< epn~/BXqr";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "#q(< epn~/BXqr");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // #q(< epn~/BXqr
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.setWidth(3);
      options0.getOption("arg");
      helpFormatter0.printHelp("\n", options0, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), (String) null, options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "-");
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "' was specified but an option from this group ", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "_=H:/cbQLP+oWT";
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 1, 1);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, 3, "_=H:/cbQLP+oWT");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1124, (-278), "");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.rtrim("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "0#``R?5{`_ZpKO");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3199, "{}dzFD}i}uE4TqX[", "", options1, 337, 3199, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(">", ">", (Options) null, "]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("H#");
      helpFormatter0.setWidth(0);
      helpFormatter0.setSyntaxPrefix("H#");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", options1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("H#");
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setWidth(64);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("H#", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_XS['");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2083;
      helpFormatter0.setDescPadding(2083);
      String string0 = "Bi@G1ohxp";
      String string1 = null;
      Options options0 = null;
      String string2 = " :: ";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Bi@G1ohxp", (String) null, (Options) null, " :: ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Options", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 510, options0, 1770, 877);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      String string1 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.setWidth(3);
      helpFormatter0.setArgName((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      options0.getOptions();
      helpFormatter0.setSyntaxPrefix(";nlGd+3<D:'ms='");
      helpFormatter0.setWidth(3);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(";nlGd+3<D:'ms='", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" ");
      helpFormatter0.setWidth(3);
      helpFormatter0.setArgName((String) null);
      String string0 = null;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, true, (String) null);
      boolean boolean0 = false;
      helpFormatter0.printHelp("\n", options0, false);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0.optionComparator;
      objectArray0[1] = (Object) "[";
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 74;
      Options options1 = options0.addOption("arg", true, "has already been selected: '");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "S9H", "5o_KO\"u^UBA", options1, 74, 74, "5o_KO\"u^UBA");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " ";
      int int0 = 2527;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.createPadding(2527);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "znS'l+w3(s)RZxYl";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(33, "znS'l+w3(s)RZxYl", "znS'l+w3(s)RZxYl", (Options) null, "znS'l+w3(s)RZxYl");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("   ", options1, true);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "-", (String) null, options0, 34, (-1), "-", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      boolean boolean0 = false;
      Options options1 = new Options();
      String string0 = "has already been selected: '";
      StringBuffer stringBuffer0 = new StringBuffer(113);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 113, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("H#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName("usage: ");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.setLongOptPrefix("A#sI@!=h{ qikF|\"L");
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, true, ", ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption(" ");
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options2.hasLongOption((String) null);
      String string0 = "ZnuJBSX1+";
      helpFormatter0.printHelp("G_", "G_", options2, "ZnuJBSX1+");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3370, "[]", options0);
      int int0 = (-1622);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "'|f2`QX\"vx4\"2IaDN ", (String) null, options0, 44, (-1622), "G_");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "sN`YJVSvL+L]f/S.", true, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "\n");
      Options options4 = options3.addOption((String) null, "sN`YJVSvL+L]f/S.", true, ">");
      options4.getOption("'");
      helpFormatter0.setSyntaxPrefix("BG(FUF/Wq9;&-a9-3");
      helpFormatter0.setWidth(2802);
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp(">", options3, false);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 42, "A%HOWA}WsY0)C6#sL");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(34, "usage: ", "usage: ", options0, "has already been selected: '", true);
      Option option0 = new Option("arg", "-");
      options1.addOption(option0);
      helpFormatter0.printHelp(" ", options0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("H#");
      helpFormatter0.setLongOptSeparator("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "H#", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.hasShortOption("{?^,J_`*ASPG");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\"OSV_I-]Am!=A", "\"OSV_I-]Am!=A", options0, "\"OSV_I-]Am!=A");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(34, ".nuBe.<", ".nuBe.<", options0, "has already been selected: '", true);
      Option option0 = new Option((String) null, ".nuBe.<", true, ".nuBe.<");
      Options options2 = options1.addOption(option0);
      option0.setType((Object) null);
      helpFormatter0.printHelp(".nuBe.<", options0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.printHelp("has already been selected: '", options2, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.write(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "]qu*q");
      Options options2 = options1.addOption("", "-", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 74, "arg", "usage: ", options3, (-2450), 1, "m", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setSyntaxPrefix(";nlGd+3<D:'ms='");
      helpFormatter0.setWidth(3);
      helpFormatter0.createPadding(3);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("\n", options0, false);
      helpFormatter0.getArgName();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.printHelp("%<@/>5bt", options0, true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.write(1);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 60);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      options0.hasShortOption("A CloneNotSupportedException was thrown: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("usage: ");
      helpFormatter0.printHelp("\n", options2, false);
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-617));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setLongOptSeparator("[#");
      helpFormatter0.setWidth(0);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.setArgName("lj!pm");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("-", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[#";
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.printHelp("[#", "[#", options0, "0cLRVY[!U4L6v");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("[#", objectArray0);
      helpFormatter0.printHelp(printWriter0, 32, "[#", "", options0, 957, 957, "[#", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 957, "0cLRVY[!U4L6v");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.write(1);
      Options options0 = new Options();
      int int0 = (-2978);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "p6]F[o:PTKt6?C_q#", "", options0, 362, (-2978), "Yw9H)N");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("arg");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp("[#", "[#", options0, "s)3gC)kf<$F{V!", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      helpFormatter0.setLongOptSeparator("[#");
      helpFormatter0.setWidth(32);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "[#", options0, ", ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.getOption("[#");
      Options options1 = new Options();
      Options options2 = options1.addOption("", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "", " ]", options1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[#";
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      int int0 = 4;
      helpFormatter0.setWidth(4);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(", ", "N$'QthQBF", options0, "N$'QthQBF");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 408, 64, "0cLRVY[!U4L6v");
      int int0 = 2191;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("0cLRVY[!U4L6v", "--", options0, "", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, (-1), ", ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I@|p+mn8Goz}i'!";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println("*q");
      String string1 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2780, 2780, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.setSelected(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 2780, options0, 11, 91);
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        options1.addOption("]", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.hasLongOption("X.V@?{x*eeZz1336TK|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 3, "\n", "p6]F[o:PTKt6?C_q#", options0, 3712, 6, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setSyntaxPrefix("]");
      helpFormatter0.setWidth((-1336));
      helpFormatter0.createPadding(74);
      helpFormatter0.setArgName("                                                                          ");
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("r5'I", options1, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      int int0 = (-792);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.Options", 9, 9);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setSyntaxPrefix(";nlGd+3<D:'ms='");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      options0.hasShortOption("");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 63, "");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), "");
      helpFormatter0.createPadding(64);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 671, 10, "usage: ");
      String string0 = "Fm/BjJ8+?Rv_zjj1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Fm/BjJ8+?Rv_zjj1");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(671, "Fm/BjJ8+?Rv_zjj1", "", options1, "has already been selected: '", true);
      helpFormatter0.findWrapPos("has already been selected: '", 10, 0);
      String string1 = "./i%vlt/]hw";
      Options options2 = options0.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options2.addOption(" ", true, "Cannot add value, list full.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "--");
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(" :: ", options0, true);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionValidator", 1497, 1888);
      helpFormatter0.findWrapPos("WssvahH&Hf", 1497, 1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setSyntaxPrefix(";nlGd+3<D:'ms='");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.format("m)itM8=W-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5841, "uZ?^DmIEy0", "", options0, 105, 13, (String) null, true);
      int int0 = 19;
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 105, 19, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.hasLongOption("X.V@?{x*eeZz1336TK|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      helpFormatter0.printHelp(printWriter0, 3796, "The option '", "p6]F[o:PTKt6?C_q#", options0, 3742, 6, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(65);
      helpFormatter0.printHelp("p6]F[o:PTKt6?C_q#", "The option '", options0, "KN?", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.hasLongOption("X.V@?{x*eeZz1336TK|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append('Y');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, false);
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 2, (-57));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 6;
      Options options0 = new Options();
      options0.hasLongOption("X.V@?{x*eeZz1336TK|");
      options0.hasLongOption("X.V@?{x*eeZz1336TK|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      helpFormatter0.printHelp(printWriter0, 3796, "The option '", "p6]F[o:PTKt6?C_q#", options0, 3742, 6, " ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(65);
      helpFormatter0.printHelp(956, "X.V@?{x*eeZz1336TK|", "", options0, ":");
      helpFormatter0.printUsage(printWriter0, 65, "-", options0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("usage: ", ":");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // :
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I@|p+mn8Goz}i'!";
      MockFile mockFile0 = new MockFile("arg", "I@|p+mn8Goz}i'!");
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println(1);
      mockPrintWriter0.write(0);
      String string1 = "";
      Options options0 = new Options();
      int int0 = 4371;
      boolean boolean0 = true;
      int int1 = (-1562);
      String string2 = "Fq2D";
      String string3 = "-";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1562), "o~3EkTZ%^'", "Fq2D", options0, "-", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 671, 10, "[ Options: [ short ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X.$A-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      String string0 = "]";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, ".nuBe.<", "]", options0, 867, 902, "usage: ", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-273), 902, "h");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("A#sI@!=h{ qikF|\"L");
      Options options1 = options0.addOption((String) null, true, ", ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption(" ");
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      options2.hasLongOption((String) null);
      helpFormatter0.printHelp("G_", "G_", options2, "ZnuJBSX1+");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OI");
      String string0 = "'|f2`QX\"vx4\"2IaDN ";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options2, 10, 44);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.hasLongOption("=z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j5");
      mockPrintWriter0.append('Y');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, " ", "]", options0, 13, 74, "]");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n", "-");
      helpFormatter0.createPadding(127);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 8;
      mockPrintWriter0.write(8);
      String string0 = "";
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 8, (String) null, "", options0, 127, 8, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 671, 10, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Fm/BjJ8+?Rv_zjj1");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 10, "0DI8rGCE8H97%g", " ", options0, 74, 1, "", false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 671, "");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(") ");
      MockFile mockFile0 = new MockFile("H*ceBea13t?z.(%\"c", ") ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H*ceBea13t?z.(%\"c");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("H*ceBea13t?z.(%\"c", options0, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setSyntaxPrefix(";nlGd+3<D:'ms='");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp("\n", options0, false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "cmdLineSyntax not provided", options0, 74, 0, "[#", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "arg").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[8];
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      charArray0[0] = '3';
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "org.apache.commons.cli.Util";
      String string1 = "nt}wI m";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "org.apache.commons.cli.Util", "nt}wI m", options0, 22, 22, "", true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 18, 22, "T+$;I");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-833), "FQ8");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "I@|p+mn8Goz}i'!");
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write(0);
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4371, "   ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 4371, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(34, ".nuBe.<", ".nuBe.<", options0, "has already been selected: '", true);
      Option option0 = new Option((String) null, ".nuBe.<", true, ".nuBe.<");
      options1.addOption(option0);
      helpFormatter0.printHelp(".nuBe.<", options0, true);
      StringWriter stringWriter0 = new StringWriter(1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.renderWrappedText(stringBuffer0, 6, 6, "");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.rtrim("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 6, "{}dzFD}i}uE4TqX[", ";gSz/h&F}jH", options1, (-1), 3199, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[8];
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(34, ".nuBe.<", ".nuBe.<", options2, "has already been selected: '", true);
      charArray0[0] = '3';
      charArray0[1] = 'D';
      charArray0[2] = 'M';
      charArray0[3] = 'q';
      charArray0[4] = 'j';
      charArray0[5] = '_';
      charArray0[6] = '?';
      charArray0[7] = 'Q';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("arg");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      Options options1 = new Options();
      Options options2 = options0.addOption("WF$Y", false, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-52), "[#", "", options2, "C56");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Y*?TeACGMcb W6q\"|F#", ">27%}Rl1XfD42t!HP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "I@|p+mn8Goz}i'!");
      helpFormatter0.setWidth(1);
      helpFormatter0.createPadding(1);
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4, ")bRfLOzzfC4l", "'", options0, 1, (-774), "'", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) locale0;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.createPadding(10);
      helpFormatter0.setArgName(">");
      helpFormatter0.printHelp(">", options0, true);
      StringWriter stringWriter0 = new StringWriter(2814);
      Option option0 = null;
//      try {
        option0 = new Option("          ", false, "A CloneNotSupportedException was thrown: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '          ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[#";
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = null;
      String string1 = "-C~CZR1yK";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "-C~CZR1yK", (String) null, options0, 0, 4, "FQ8", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.setDescPadding((-2));
      MockFile mockFile0 = new MockFile((String) null, "*,XB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-770));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.setOptPrefix("H*ceBea13t?z.(%\"c");
      int int0 = (-1);
      helpFormatter0.setWidth(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      int int0 = 1936;
      // Undeclared exception!
      helpFormatter0.printHelp("O*meV@7x", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.setDescPadding((-2));
      MockFile mockFile0 = new MockFile((String) null, "*,XB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer(34);
      helpFormatter0.renderWrappedText(stringBuffer0, 34, (-1), "*,XB");
      Options options0 = new Options();
      options0.hasLongOption("g#kz\"");
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "xU\"C|fC!e)rq1G4}e";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xU\"C|fC!e)rq1G4}e");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 348, 64, "' was specified but an option from this group ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "7hNk^;(SZP&bH8)f0(");
      Option option0 = new Option("arg", "'", true, "usage: ");
      Options options2 = options1.addOption(option0);
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 64, options2, 6, 64);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 6, 347, "W1Ha:VUhaD");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      options0.hasShortOption("A CloneNotSupportedException was thrown: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(34, ".nuBe.<", ".nuBe.<", options2, "has already been selected: '", true);
      StringBuffer stringBuffer0 = new StringBuffer(34);
      helpFormatter0.createPadding(63);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      int int0 = 1;
      String string0 = " ] [ long ";
      Options options0 = new Options();
      helpFormatter0.printHelp(1077, "Jd.vF/$T;", (String) null, options0, " ] [ long ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      char[] charArray0 = new char[8];
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(34, ".nuBe.<", ".nuBe.<", options2, "has already been selected: '", true);
      charArray0[0] = '3';
      charArray0[1] = '3';
      helpFormatter0.findWrapPos("", 34, 34);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options2, (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 671, 10, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Fm/BjJ8+?Rv_zjj1");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      String string0 = "0DI8rGCE8H97%g";
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 10, "0DI8rGCE8H97%g", " ", options0, 74, 1, "", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (-1), "q4n^Z4hJ1&{aQ^~");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".nuBe.<";
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) locale0;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[8];
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(34, ".nuBe.<", ".nuBe.<", options2, "has already been selected: '", false);
      charArray0[0] = '3';
      charArray0[1] = 'D';
      charArray0[2] = 'M';
      charArray0[3] = 'q';
      charArray0[4] = 'j';
      charArray0[5] = '_';
      charArray0[6] = '?';
      charArray0[7] = 'Q';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "I@|p+mn8Goz}i'!");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("dDeV/&bvY5^");
      helpFormatter1.renderOptions(stringBuffer0, (-2249), options0, 0, 74);
      helpFormatter1.setNewLine("NO_ARGS_ALLOWED");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.setDescPadding((-2));
      MockFile mockFile0 = new MockFile((String) null, "*,XB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ") ;Re!^@j", true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-770), (String) null, "*,XB", options1, 3796, 3796, "*,XB");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1618, (Options) null, (-1), (-45));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      helpFormatter0.createPadding(0);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write(3);
      int int0 = 1986;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1986, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int1 = (-1);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "C", options1, 1986, 0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 671, 10, "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Fm/BjJ8+?Rv_zjj1");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "q4n^Z4hJ1&{aQ^~";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "q4n^Z4hJ1&{aQ^~";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "Fm/BjJ8+?Rv_zjj1";
      objectArray0[6] = (Object) stringBuffer1;
      PrintWriter printWriter0 = mockPrintWriter0.format("q4n^Z4hJ1&{aQ^~", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 10, "Fm/BjJ8+?Rv_zjj1");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(") ");
      int int0 = 0;
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("H*ceBea13t?z.(%\"c", ") ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "8/NG_afl$eA2");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, (String) null, " ] [ long ", options0, "Jd.vF/$T;");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.setWidth((-23));
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-23));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp("\n", options0, false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("K_gbx-;7ro");
      mockPrintWriter0.println("\n");
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('b');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      int int0 = (-1307);
      // Undeclared exception!
//      try { 
        mockPrintWriter1.append((CharSequence) " ", (-1307), 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.ensureCapacity(3);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-389), (Options) null, 0, 18);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(",xd6r<ni\"w");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 1164, 10, "b3gr;<n[D_rTo%C.o ");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "N:{Qz(";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 8, options0, 8, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", ".nuBe.<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.ROOT;
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) locale0;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      objectArray0[5] = (Object) ".nuBe.<";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = 794;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 794, options0, (-404), (-404));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("+-Vo0A");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "I@|p+mn8Goz}i'!");
      String string0 = "";
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int1 = 0;
      mockPrintWriter0.write(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options1, 0, 0, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      helpFormatter0.createPadding(19);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.write(8);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("I@|p+mn8Goz_}i'!", 31, (-1903));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = null;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.format(locale0, (String) null, (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("--");
      int int0 = (-1);
      helpFormatter0.setWidth((-415));
      helpFormatter1.createPadding(2983);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "bf9$(Sf*Dv76];^S";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("\n", "bf9$(Sf*Dv76];^S");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I@|p+mn8Goz}i'!";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println("*q");
      String string1 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2780, 2780, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      String string0 = "[";
      String string1 = helpFormatter0.createPadding(2820);
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream(string1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0.optionComparator;
      objectArray0[1] = (Object) "[";
      mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "has already been selected: '");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",xd6r<ni\"w";
      StringBuffer stringBuffer0 = new StringBuffer(",xd6r<ni\"w");
      int int0 = 0;
      Options options0 = null;
      stringBuffer0.ensureCapacity(0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, (-1210));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("' was specified but an option from this group ");
      int int0 = (-597);
      helpFormatter0.setLeftPadding((-597));
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "' was specified but an option from this group ", (-597), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "I@|p+mn8Goz}i'!");
      String string0 = "";
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int1 = 0;
      mockPrintWriter0.write(0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "arg");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-532), 957, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 0, 1998);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOption("[#");
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "]";
      objectArray0[1] = (Object) "]";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) null;
      mockPrintWriter0.printf(locale0, "]", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-26), "D&#a957cLdi9o");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = ") ";
      StringBuffer stringBuffer0 = new StringBuffer(") ");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "auGl5N3/BM{/J?{I&";
      File file0 = MockFile.createTempFile("auGl5N3/BM{/J?{I&", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print((float) 74);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      mockPrintWriter0.print('S');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "3~^");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("K_gbx-;7ro");
      mockPrintWriter0.println("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1131), "K_gbx-;7ro");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 671, 10, "]");
      assertEquals("]", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      mockPrintWriter0.append((CharSequence) stringBuffer0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-604), "@o}uO2w,@m$d,t");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" Lp>_|o;<R6YT'[");
      int int0 = (-1908);
      String string0 = "";
      String string1 = "F!5sr|H`QKg>+NGWw";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("[ Options: [ short ", "nFeTT</20^Z8j'c9", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ Options: [ short ' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("VW=Wy%b?IN>\"^y", 74, 74);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(110);
      assertEquals(110, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptPrefix();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }
}
