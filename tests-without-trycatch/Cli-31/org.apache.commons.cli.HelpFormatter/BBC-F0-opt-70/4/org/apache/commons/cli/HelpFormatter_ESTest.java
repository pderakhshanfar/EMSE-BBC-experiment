/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:15:04 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      Option option0 = new Option("arg", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("RoXJ4YUd69A", true, "/~R");
      optionGroup1.addOption(option1);
      options1.addOptionGroup(optionGroup1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Q[min!4}'on:g=");
      MockFile mockFile0 = new MockFile("1Q[min!4}'on:g=");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-623), "", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getLeftPadding();
      String string0 = " [ARG]";
      helpFormatter0.findWrapPos(" [ARG]", (-1), 4165);
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-4278));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      Option option0 = new Option("arg", "SwZB!X$j?", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "-", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2798, (Options) null, 2798, 2798);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "|4jDGZ>5Fmjm?EH6uK";
      helpFormatter0.setNewLine("|4jDGZ>5Fmjm?EH6uK");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 92, 92);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("--", 92, (-1));
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      int int0 = (-61);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1905, "?FE.SJRle&H*B");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-2111);
      String string0 = "-";
      helpFormatter0.setDescPadding((-2111));
      options0.addOption("arg", "-", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 64;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "]Yy_M6", options0, "]Yy_M6", false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter1.defaultLeftPad = (-695);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComdarator";
      options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$OptionComdarator", true, "E(@!%.\"");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("\n", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      mockPrintWriter0.append('I');
      String string0 = "?q2@PS.#";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printHelp("?q2@PS.#", options0, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      helpFormatter0.printHelp("arg", options1, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      options1.addOption("", "--", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("s}E8bHV&", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('I');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "P.bDsN(f @)\"", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter1, 0, "?q2@PS.#", options1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2579));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("@iL0Il4K+iF;b{]=$", "", options0, "@iL0Il4K+iF;b{]=$");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, ";t~", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setLeftPadding(580);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.createPadding(941);
      byte[] byteArray0 = new byte[4];
      helpFormatter0.defaultLongOptPrefix = "";
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultArgName
      helpFormatter0.rtrim
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.defaultWidth = (-1316);
      helpFormatter0.createPadding(941);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "usage: ");
      Option option0 = new Option("", "arg");
      options1.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", (Object[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3468;
      helpFormatter0.findWrapPos("|Z:Z>Eeig_Ej#H", 3468, 3468);
      int int1 = (-3057);
      helpFormatter0.setLeftPadding((-3057));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      String string0 = "arg";
      options0.addOption("arg", "arg", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3468, ">1^Z9]jMbQ_R\"K_sg", ">1^Z9]jMbQ_R\"K_sg", options0, ">1^Z9]jMbQ_R\"K_sg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "\n");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("q: K<-jt?", options2, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      options1.getOptions();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 527, "", "-", options1, 527, (-2359), "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(4564, "usage: ", "xgfizz<v", (Options) null, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.defaultLeftPad = 0;
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append((long) 0);
      StringBuffer stringBuffer1 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.setWidth(74);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      helpFormatter0.setLongOptPrefix("%zPI.+");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-1355), "cmdLineSyntax not provided");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "KI-ig <`7h5=z('", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      helpFormatter0.setLongOptPrefix("arg");
      int int0 = helpFormatter0.defaultDescPad;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-2331));
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "' contains an illegal character : '", options0, "f+~kVRmmi8");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printUsage((PrintWriter) null, 74, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "E(@!%.\"");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("   ", options0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter2.renderOptions(stringBuffer0, (-42), options1, 387, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      Options options0 = new Options();
      String string1 = "jS";
      options0.hasOption("nskfDyr:~");
      int int0 = 70;
      helpFormatter0.createPadding(70);
      helpFormatter0.createPadding(2116);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      boolean boolean0 = true;
      Options options1 = options0.addOption("jS", (String) null, true, "arg");
      helpFormatter0.printHelp("usage: ", (String) null, options1, (String) null, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("[ARG...]");
      helpFormatter0.findWrapPos("[ARG...]", 754, 2116);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "Up8e8+IR9;&O");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Up8e8+IR9;&O
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("@iL0Il4K+iF;b{]=$", "arg", options0, " ");
      MockFile mockFile0 = new MockFile("arg", "@iL0Il4K+iF;b{]=$");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "@iL0Il4K+iF;b{]=$";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "@iL0Il4K+iF;b{]=$";
      objectArray0[5] = (Object) "usage: ";
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, " ", objectArray0);
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 31, "", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.setWidth(74);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 1357, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(3);
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Vh6|To[d`mm./,V5?Lb");
      Locale locale0 = new Locale("--", "^nUR%");
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'r';
      charArray0[2] = 'p';
      charArray0[3] = 'R';
      mockPrintWriter0.print(charArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) 'r';
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 20, "arg", "arg", options0, 1, 74, "--", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
      helpFormatter1.getLongOptSeparator();
      helpFormatter2.findWrapPos("xs$iq\"/fr_f1:", 3, 20);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, 31, "y:?bXNB`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      MockFile mockFile0 = new MockFile("llcwDMGFNFl");
      File file0 = MockFile.createTempFile("@iL0Il4K+iF;b{]=$", ";", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = 'R';
      charArray0[2] = '*';
      charArray0[3] = 'r';
      charArray0[4] = ')';
      mockPrintWriter0.print(charArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 20, "@iL0Il4K+iF;b{]=$", " ", options0, 34, 20, (String) null, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.setWidth(74);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      helpFormatter0.setLongOptPrefix("%zPI.+");
      helpFormatter0.setArgName("p;'>");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      Option option0 = new Option("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "cmdLineSyntax not provided", "\"", options1, 1, (-2), "y#H%$8=}f8Y*QNWj:", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "S~";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 7, "arg", "2)!$}XcbnhQ", options0, 32, 74, "S~", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      String string0 = "\" Y";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\" Y");
      helpFormatter0.renderWrappedText(stringBuffer0, 819, 819, "%f^tt_mM/ LGf~r |GT");
      String string1 = "rEjPg+9:b@9JSefi";
      helpFormatter0.defaultArgName = "";
      PrintWriter printWriter0 = null;
      int int0 = 12;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(12, "", "-", (Options) null, "*mnnp{;&gF", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      int int0 = helpFormatter0.defaultDescPad;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      helpFormatter1.printHelp("@iL0Il4K+i;b{]=$", "arg", options0, " ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1728, "\n");
      helpFormatter1.renderOptions((StringBuffer) null, 12, options0, 3, 3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 34, options0, 1, (-1862));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      helpFormatter0.setLongOptPrefix("arg");
      int int0 = helpFormatter0.defaultDescPad;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-2331));
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "' contains an illegal character : '", options0, "f+~kVRmmi8");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(" ] [ long ", options0, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "usage: ";
      helpFormatter1.setArgName("dt_K01)GGh{Afb0a");
      String string0 = helpFormatter1.defaultLongOptPrefix;
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.getOptionComparator();
      helpFormatter0.printHelp("V[V", options1, true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("usage: ");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f^ZZ+[I%^;]");
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter1, 1871, options0, 74, (-3411));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter1.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = '*';
      charArray0[3] = ')';
      charArray0[4] = '-';
      charArray0[5] = ')';
      mockPrintWriter0.print(charArray0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "67x=t/.*l~!xJ";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) '*';
      objectArray0[4] = (Object) ')';
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", (String) null, options0, 74, 1959, "usage: ", false);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-164));
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 872, options0, 1, 16);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 0, 1, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("E(@!%.\"");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      Options options0 = new Options();
      options0.hasLongOption("1m>Cut.");
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "E(@!%.\"");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("usage: ", (String) null, options1, "usage: ");
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 521, "", "E(@!%.\"", options1, (-942), 74, "6K`zz)_XE;BKe\"(k", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "E(@!\\%.\"";
      helpFormatter0.setLongOptPrefix("E(@!%.\"");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printOptions((PrintWriter) null, 1, (Options) null, 115, 74);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = new Locale("--", " ");
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'R';
      charArray0[2] = 'r';
      charArray0[3] = ')';
      charArray0[4] = '*';
      mockPrintWriter0.print(charArray0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, " ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", " :: ", options0, 20, 1, "\n", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.setWidth(74);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      helpFormatter0.setLongOptPrefix("%zPI.+");
      helpFormatter0.setArgName("p;'>");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      Option option0 = new Option("arg", true, "org.apache.commons.cli.OptionValidator");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("p;'>", " ", options2, "#FocRE0\"_uf%'");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", options2, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINESE;
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'R';
      charArray0[2] = 'y';
      charArray0[3] = ')';
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "", true, "x(lX(I|Rb&OX");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(1, "arg", "bX:,?ke2m(f!$s", options4, "\n", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("?oqvn", "\n", options0, "?oqvn");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, (-5), 28);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "usage: ";
      helpFormatter1.setArgName("dt_K01)GGh{Afb0a");
      String string0 = helpFormatter1.defaultLongOptPrefix;
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "tndL!xMeol-g");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter2.printHelp("]", "usage: ", options1, "--");
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(")FxcO74kGkuMQ@90", options0);
      helpFormatter2.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(")FxcO74kGkuMQ@90");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 508, "#W");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter4.renderWrappedText((StringBuffer) null, 0, 74, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-410));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter1.printHelp("67x=t/.*l~!xJ", options0);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("wdp>jl!");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "usage: ");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setArgName("   ");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter4.printHelp("arg", "usage: ", options1, "");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = ":9af1$;J";
      String string0 = helpFormatter1.defaultLongOptPrefix;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultOptPrefix = "--";
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      helpFormatter1.getOptPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter3;
      objectArray0[1] = (Object) ":9af1$;J";
      objectArray0[2] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 1, (String) null, (String) null, options0, 7, (-2156), "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('J');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3987, 3987, "jhUZZ7");
      helpFormatter0.setWidth(1);
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "E(@!%.\"");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      helpFormatter0.printHelp("'", options1, true);
      helpFormatter1.printHelp("9>(_<j>w23p", options1, true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("E(@!%.\"");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "E(@!%.\"");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("usage: ", (String) null, options1, "usage: ");
      helpFormatter3.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "r/R[W6f0 L`mn8");
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, (-456), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth((-1747));
      Options options0 = new Options();
      Options options1 = options0.addOption("Elg", "\n", true, "\n");
      helpFormatter0.printHelp("G7HBjbr4X<Nh", "<", options1, "");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "", options0);
      Options options1 = new Options();
      options1.addOption("arg", "arg", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", ">D*$6ouQGu9mhuo{'Mj", options1, ">ia");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.setWidth(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "-");
      options1.addOption((String) null, "j_t", false, "");
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter3.printHelp("-", " ", options0, "arg");
      helpFormatter4.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("OuYA\"&O^,");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp("QZX>JE\"Aw.1`", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("", "\n");
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "3FjA$7/", "-", options0, 64, 64, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.createPadding(0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" Q$$VT.CY}cP", options1);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("]");
      int int0 = 459;
      helpFormatter0.createPadding(459);
      helpFormatter0.rtrim("]");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (Options) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "/9(m/i[,*M=0+.ML=v@");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped(printWriter0, 2239, "/9(m/i[,*M=0+.ML=v@");
      int int0 = 3;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "-:Y|1XD@)iua";
      String string1 = "org.apache.commons.cli.Util";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("--", "usage: ", true, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" | ", "arg", (Options) null, ">", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter1.getDescPadding();
      MockFile mockFile0 = new MockFile("t-_6@");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 20, 1);
      helpFormatter1.setArgName("");
      helpFormatter1.setArgName((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("$*DyX9h", "Qz~r}s'6;crF3W", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "8q>\\)An1=NR\\>-*1\\";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8q>)An1=NR>-*1", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      int int0 = 2617;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-622), "8q>)An1=NR>-*1");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r/R[W6f0 L`mn8", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setWidth(101);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("org.apache.commons.cli.AlreadySelectedException", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultLongOptPrefix;
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.createPadding(74);
      helpFormatter2.printHelp("org.apache.commons.cli.AlreadySelectedException", "", options0, "\n");
      helpFormatter2.printHelp(7, "jrK~<0pnSjSx 2S", "jrK~<0pnSjSx 2S", options0, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(101, "", "", options0, "%");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setArgName("");
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-1867), 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("x[0LAMKf");
      Options options0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "?YVjZ|I-b_(k<";
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp("-", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.setWidth(74);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      String string0 = helpFormatter1.defaultLongOptPrefix;
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(">", "x\"L]?Z%j$g}S", options0, "\n");
      helpFormatter0.printHelp(1488, "arg", "--", options0, "");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      helpFormatter0.printUsage(printWriter0, 2617, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "org.apache.commons.cli.HelpFormatter$OptionComparator", "usage: ", options0, "arg", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.findWrapPos("\n", 1, 1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      mockFile0.toURL();
      Options options1 = new Options();
      helpFormatter0.printHelp("\n", options1);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hr/R[W6f0 L`Fn", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print((Object) "Hr/R[W6f0 L`Fn");
      helpFormatter0.rtrim("Hr/R[W6f0 L`Fn");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = (-5179);
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 7, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 13, "arg", "", options0, (-2527), 6, "\"");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINESE;
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'R';
      charArray0[2] = 'y';
      charArray0[3] = ')';
      charArray0[4] = '*';
      mockPrintWriter0.print(charArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, (-367), " }ix0F{6", "", options0, 0, 4480, "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.findWrapPos("\n", 0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("5UF TUa,_]4F-O^ry", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setArgName("");
      helpFormatter1.setArgName("U[*=g@2H[T#!d");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("usage: ", "", (Options) null, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.findWrapPos("\n", 0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("\n", "");
      mockFile0.toURL();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "", options0, 1, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
      helpFormatter1.rtrim("-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("5%%exi&w;}");
      helpFormatter1.getDescPadding();
      helpFormatter1.setArgName("[");
      helpFormatter1.setNewLine("--");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", (String) null, (Options) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setWidth(1);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", (String) null, options0, "x\"L]?Z%j$g}S");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      String string0 = helpFormatter1.defaultLongOptPrefix;
      Options options0 = new Options();
      helpFormatter0.printHelp("D~zbU29l]l+|!RI", options0);
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim("");
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4015), ">", "-", options0, (-4015), (-2617), "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("OuYA\"&O^,");
      Options options0 = new Options();
      helpFormatter0.printHelp("OuYA\"&O^,", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("-", 10, 10);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.setWidth(1);
      helpFormatter0.findWrapPos("usage: ", 0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r/R[W6f0 L`mn8", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print((Object) "r/R[W6f0 L`mn8");
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1, 3, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 97, 3745, " ");
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3, "");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter1.findWrapPos("--", 3, 1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r/R[W6f0 L`mn8", true);
      helpFormatter0.setWidth((-1841));
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOptions();
      Options options2 = options1.addOption("", "]}uq.U{$d~V=x:,=Q.", true, "KmA(d=dn");
      Option option0 = new Option("", "]5ONQ'oo{{");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("<", "2x#", options3, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r/R[W6f0 L`mn8", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println(false);
      mockPrintWriter0.print((Object) "r/R[W6f0 L`mn8");
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter1.printHelp("W30jC", options0);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getLeftPadding();
      helpFormatter1.setWidth(1);
      helpFormatter0.findWrapPos("-", 4, 4085);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1837, 1, "-");
      helpFormatter1.getWidth();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 587, (-3850), "-");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      helpFormatter0.setOptPrefix("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-2));
      helpFormatter0.rtrim(">");
      helpFormatter0.rtrim("S1Y$Vk");
      helpFormatter1.getDescPadding();
      helpFormatter0.setArgName("_:");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("l*wm", "\n", (Options) null, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.findWrapPos("\n", 0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      helpFormatter0.defaultSyntaxPrefix = "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "\n";
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      int int0 = 587;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-3850), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r/R[W6f0 L`mn8", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print((Object) "r/R[W6f0 L`mn8");
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 7, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 97, 3745, " ");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("arg", (-1), (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1414, options0, 32, 32);
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer1 = new StringBuffer();
      int int0 = (-2090);
      int int1 = 948;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Yv*IJ'NGi0";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2090), 948, "Yv*IJ'NGi0");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("<");
      helpFormatter0.rtrim("<");
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("<");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("O2*D-)p!R?#l\"E`e", "UE+");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = new Locale("\n", "-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "UE+";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ")";
      objectArray0[5] = (Object) helpFormatter0;
      helpFormatter0.rtrim(")");
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName(" | ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((String) null, (String) null, (Options) null, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2649;
      helpFormatter0.setLeftPadding(2649);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp(2649, " ", "jy>'4", options0, "jy>'4", true);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2649, "jy>'4", " ", options0, (-588), (-588), " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r/R[W6f0 L`mn8", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print((Object) "r/R[W6f0 L`mn8");
      helpFormatter0.rtrim("r/R[W6f0 L`mn8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("usage: ", "-", (Options) null, "d(F");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.defaultOptPrefix = "mu>3@y]i>\"!P";
      helpFormatter0.setLongOptPrefix("P##[p1*?");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '\\';
      charArray0[2] = 'z';
      charArray0[3] = '5';
      charArray0[4] = 'V';
      charArray0[5] = 'l';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "line.separator");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.rtrim("OuYA\"&O^,");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, " ", " ", (Options) null, "'", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = "   ";
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      options0.addOption(option0);
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.setLongOptSeparator(">");
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("\n", "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("<");
      helpFormatter0.rtrim("<");
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("<");
      // Undeclared exception!
      helpFormatter0.printHelp("l*wm", "<", (Options) null, "l*wm");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(44);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "x/p1*\" 2M'JK";
      Options options0 = new Options();
      options0.hasOption("arg");
      options0.helpOptions();
      helpFormatter0.printHelp("x/p1*\" 2M'JK", ",SUn<hu8S~A41}PF$", options0, "vT=mZr4aPJ'[CCog^");
      PrintWriter printWriter0 = null;
      int int0 = (-121);
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-121), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2649;
      helpFormatter0.setLeftPadding(2649);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp(2649, " ", "jy>'4", options0, "jy>'4", false);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2649, "jy>'4", " ", options0, (-588), (-588), " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("d#!pMTSor[Sp0I()");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      options1.hasLongOption("org.apache.commons.cli.Options");
      String string0 = "\"a@4HsMip.<D^";
      Options options2 = options1.addOption("", true, "\"a@4HsMip.<D^");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "y=0;U1t%k.-", "y=0;U1t%k.-", options2, "\"a@4HsMip.<D^");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, "org.apache.commons.cli.Options");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 32, "org.apache.commons.cli.Options");
      helpFormatter0.setLeftPadding((-155));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 2106, "");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r/R[W6f0 L`mn8", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print((Object) "r/R[W6f0 L`mn8");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      mockFileOutputStream0.write(byteArray0, 0, 31);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "r/R[W6f0 L`mn8");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      helpFormatter0.findWrapPos("\n", 0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      helpFormatter0.defaultSyntaxPrefix = "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "\n";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1167, 587, "@F!0Ks?nTmgY_unc;");
      helpFormatter0.getWidth();
      helpFormatter0.printWrapped(printWriter0, 31, 1540, "T^nMq)[oEN6e<Kp^eFZ");
      assertEquals("\n", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = (-1248);
      char[] charArray0 = new char[8];
      char char0 = 'K';
      MockFile mockFile0 = new MockFile("elq-SRE&{L-Z7{{Mn}/", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1248), (-1248), "elq-SRE&{L-Z7{{Mn}/");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "vacxP\\K{";
      String string1 = "NP`>@<_-<AG5}2Q5g@";
      Options options0 = new Options();
      String string2 = "\"#GE9D";
      boolean boolean0 = false;
      options0.hasOption("]");
      // Undeclared exception!
//      try { 
        options0.addOption("\"#GE9D", "--", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '\"#GE9D' contains an illegal character : '\"'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
