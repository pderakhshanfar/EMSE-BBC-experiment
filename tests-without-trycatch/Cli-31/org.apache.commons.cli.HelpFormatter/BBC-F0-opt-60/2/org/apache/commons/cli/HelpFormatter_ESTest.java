/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:13:25 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.getArgName();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", options0, false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("=;.*1iEFm.%nF//&2d]");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("=;.*1iEFm.%nF//&2d]", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3299, "]_Wz'6t", "=;.*1iEFm.%nF//&2d]", options1, "", false);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printUsage(printWriter0, 31, "7<F.^0h{4hg3j1[", options1);
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.renderOptions((StringBuffer) null, (-2), options1, 4635, 4635);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.createPadding(0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderOptions((StringBuffer) null, 13, options0, 0, 3);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 59, 1355, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(33, "X>R+", "X>R+", (Options) null, "X>R+");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("' contains an illegal character : '", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultNewLine = "arg";
      helpFormatter0.printHelp("<", "<", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 48;
      helpFormatter0.defaultWidth = 48;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "H6u:h2RO3!", "H6u:h2RO3!", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('k');
      stringWriter0.write(1);
      stringWriter2.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 532, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("]");
      helpFormatter0.getNewLine();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.findWrapPos("usage: ", (byte)3, (byte)1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.createPadding(2671);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 44, (-2272), string0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = null;
      Option option0 = null;
//      try {
        option0 = new Option("cmdLineSyntax not provided", "", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 4515, options0, 4515, 4515);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 339, "BvG&+mO@Q");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3045), "bu", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-4464);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "@Df");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(47, "arg", "arg", options1, "arg", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setWidth(2);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("d");
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "N/UHw%O_|M}9Xr", true, " ");
      Options options3 = options2.addOption((String) null, true, " ");
      Option option0 = new Option("arg", true, (String) null);
      option0.setRequired(true);
      options0.getMatchingOptions("--");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("arg", (String) null, options4, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-768));
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-622));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ")M7y{Fp=?|j,\"fE", "", (Options) null, "", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.hasShortOption("HXoY'~6");
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", true, "@Df");
      options1.getMatchingOptions("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1256), "arg", "arg", options1, "arg", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", true, "@Df");
      options1.getMatchingOptions("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1256), "arg", "arg", options1, "arg", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultLeftPad = (-300);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("wBk9zP~u", "arg", options1, "-");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("JEU5c~");
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "JEU5c~";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "~H9C`UT3", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "U7Zp&.]o;/YqZob");
      Options options2 = options1.addOption("", "", true, "arg");
      Option option0 = new Option("arg", false, "g^FpXT&SkhQ=Q(p6$I");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-726), (String) null, options3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("=;.*1iyEFm.%nF//&2d]");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      helpFormatter0.printHelp(3278, "--", "=;.*1iyEFm.%nF//&2d]", options1, "usage: ", false);
      helpFormatter0.getOptPrefix();
      Options options2 = options1.addOption("", "arg", false, "9Ny_B2 q?rL~((R@V");
      helpFormatter0.printHelp(1233, "RL:", "-", options2, "-", false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "hlY`*[76v^w");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.printHelp("usage: ", (String) null, options0, "\n");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, true, "@Df");
      helpFormatter0.printHelp(35, "fAv-0i{zgx=CWJTI0Z", "@Df", options2, (String) null, true);
      String string0 = " :: ";
      String string1 = "";
      // Undeclared exception!
//      try { 
        options1.addOption("]", true, "aU4?J'd>sxD,2$Ngm");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      String string0 = "`i7viNbE2RjS1.qSc*";
      stringWriter0.close();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3820, "`i7viNbE2RjS1.qSc*");
      FileSystemHandling.shouldAllThrowIOExceptions();
      option0.getValues();
      helpFormatter0.setNewLine("`i7viNbE2RjS1.qSc*");
      option0.setArgs(3000);
      Options options2 = options1.addOption("arg", true, "");
      options2.hasOption("-");
      options2.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-116), "`i7viNbE2RjS1.qSc*", "`i7viNbE2RjS1.qSc*", options2, (-1), 31, "`i7viNbE2RjS1.qSc*", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      PrintWriter printWriter0 = null;
      PrintWriter printWriter1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 2209;
      StringBuffer stringBuffer0 = new StringBuffer(2209);
      int int1 = 1389;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      File file0 = MockFile.createTempFile("arg", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("gn:");
      helpFormatter0.printHelp("mqQ@X_cS(Adj64$e", "", options0, "mqQ@X_cS(Adj64$e");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 31);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-1), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options1 = new Options();
      Option option0 = new Option((String) null, false, (String) null);
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp(10, "Z-6Zl", "!KS", options2, "Z-6Zl", true);
      String string0 = "y";
      String string1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "y", options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) optionGroup0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 9, "usage: ", (String) null, options0, (-169), 9, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(">v#AF3/L", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "*?-mcc'gm*");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 38, "-", "-", options1, 9, 38, "", true);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 9, options1, 38, 38);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.OptionGroup", "org.apache.commons.cli.HelpFormatter$OptionComparator", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-909), "org.apache.commons.cli.OptionGroup");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(">v#AF3/L", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "*?-mcc'gm*");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 38, "}lGD", "}lGD", options1, 9, 38, "", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "t0e1].dN0<Do%%&~z", true, "i,^_S5z]=");
      options1.addOption(option0);
      helpFormatter1.printHelp("*1'wzTrY'$Gr#fx8`A{", "*?S5E!", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(886);
      Options options1 = new Options();
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      Options options2 = options0.addOption("B", "-", true, "--");
      helpFormatter0.printHelp("*Q1Bc&{(D6.Km7xcEz)", "", options2, "*Q1Bc&{(D6.Km7xcEz)");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 10;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, (Options) null, 10, 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PrintWriter printWriter0 = null;
      int int0 = 484;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1851, ";");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 484, 1520, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printOptions(mockPrintWriter0, 44, options1, 44, 44);
      helpFormatter0.findWrapPos("", 233, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream1, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 498, "eni%{+s", "(P E", (Options) null, 3184, 326, "[ARG...]", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, false, "1QC&$VQHTEw`??");
      Options options2 = options1.addOption("", "arg", false, "--");
      options2.getOptions();
      helpFormatter0.setOptPrefix("<");
      Options options3 = new Options();
      String string0 = "%;K";
      String string1 = "org.apache.commons.cli.ParseException";
      String string2 = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.OptionValidator", options1, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("=;.*1iEFm.%nF//&2d]");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.format("=;.*1iEFm.%nF//&2d]", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3299, "]_Wz'6t", "=;.*1iEFm.%nF//&2d]", options1, "", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("ECfXTy", options0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 420, "4.m>i$?T;3R,v<WjE", "eni%{+s", options1, 3184, 498, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-2040));
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "usage: ", options0, "arg", false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("--", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "9)*cD~n^K#", "-", options0, 31, 347, "-");
      helpFormatter0.setOptPrefix(")(zcM0='NZ<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("I_vT:u!`dwutf ET@$!", "", options0, "6EyXL", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(3, "A CloneNotSupportedException was thrown: ", "--", options0, "P'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1:`Tm/>:ZHV$R<");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(17);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("?eVz7;W4n+#\"E", "[", options0, "JK=UgrWIPP", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, "J46V%A,", "_.4z%z@^$", options0, 498, 17, "", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 16, 1271, "b&6ktCaBSkaJN");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 23, options0, 1884, 1271);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(1);
      helpFormatter2.getLongOptPrefix();
      Options options1 = new Options();
      helpFormatter1.printHelp("arg", "\n", options1, "]", true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("lU(z)$%r0");
      mockPrintWriter1.println(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-272), "", "--", options1, 2565, 74, "--", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-4931));
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("kMHdTlGlex`ZF#v7Q%2");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("]V+UH-!/jDGFcH9>", "\n", options1, "--", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("=;.*1iEFm.%nF//&2d]");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("=;.*1iEFm.%nF//&2d]", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3299, "]_Wz'6t", "=;.*1iEFm.%nF//&2d]", options1, "", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printUsage(printWriter0, 31, "7<F.^0h{4hg3j1[", options1);
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 326, "eni%{+s", "8", options1, 498, 3184, "(P E", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "qF&U^tA.q[Pkr@E5*");
      options1.getOptions();
      helpFormatter0.setOptPrefix("QHVI;A@&qc}zvM/}7R");
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", "%;K", options1, "4PccH9e", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(978);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "cJB$[", options0, "org.apache.commons.cli.Options", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tvToC_5Pgh");
      mockPrintWriter0.println(true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, (String) null, "cJB$[", options0, (-272), 978, "Cannot add value, list full.", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("=;.*1iEFm.%nF//&2d]");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(751);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter1.getLongOptPrefix();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "\n", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      int int0 = 72;
      helpFormatter0.defaultWidth = 72;
      int int1 = 1389;
      String string0 = helpFormatter0.createPadding(1389);
      helpFormatter0.rtrim(string0);
      helpFormatter0.getOptPrefix();
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option(" ", true, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("j");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("line.separator");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter2.setNewLine("arg");
      helpFormatter2.getLongOptPrefix();
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "usage: ", options0, "-", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      mockPrintWriter0.println(false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2556, "--", "", options0, 74, (-2467), ">rtNb!(Y|UL2Y", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "{[,}x&QlP3~HRqU=v");
      File file0 = MockFile.createTempFile("arg", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("L@vv/SWr9V", objectArray0);
      int int0 = 1;
      String string0 = "X|&_]?";
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage(printWriter0, 1, "X|&_]?", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 66;
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 66, options0, (-1959), 66);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      options0.getOptions();
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "", options0, "%;K", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "", "%;K", options1, "E.e4&C8,CIfg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "-");
      stringWriter0.getBuffer();
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-219), 10, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("j");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1:`Tm/>:ZHV$R<");
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(17);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("?eVz7;W4n+#\"E", "[", options0, "JK=UgrWIPP", false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      mockPrintWriter1.println(false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 38, "--", "--", options0, 13, (-272), "--", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("tFn", "tFn", options1, "tFn");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "5{om$dcO|IDBx^q< <\\";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "`}E%`lJfD~or*Nw(Em,", "5{om$dcO|IDBx^q< <", options0, 3244, 13, "5{om$dcO|IDBx^q< <", false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("=;.*1iEFm.%nF//&2d]");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(751);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter0.setNewLine("arg");
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setLeftPadding(1);
      helpFormatter2.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter1.printHelp("=;.*1iEFm.%nF//&2d]", "", options0, "%_gQsL'h1", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println(false);
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-272), "-", "org.apache.commons.cli.HelpFormatter", options0, 13, 3, " | ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 31, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1787, 692, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("):dO5= hOC`:m2", "BsO(", options1, "BsO(", false);
      helpFormatter0.rtrim("BsO(");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Spv");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("\n", "\"k");
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 487, "\"k");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("' was specified but an option from this group ", "", options0, " | ", true);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('[');
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 1, (-734), "-");
      helpFormatter2.rtrim("arg");
      helpFormatter1.getLongOptPrefix();
      helpFormatter2.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options1, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1548));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      options0.getOptions();
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      Options options2 = new Options();
      helpFormatter0.printHelp("]V+UH-!/jDGFcH9>", "%;K", options1, "--", true);
      helpFormatter0.printHelp(1851, "|G CPvm6)p/(fxS\"b$;", "E.e4&C8,CIfg", options2, "E.e4&C8,CIfg");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3307, "");
      helpFormatter0.createPadding(3307);
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
//      try { 
        options0.addOption("0q&<<Q.", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '0q&<<Q.' contains an illegal character : '&'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("=;.*1iEFm.%nF//&2d]");
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("=;.*1iEFm.%nF//&2d]", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 63, " ");
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3299, "K_oW%'6t", "=;.*1iEFm.%nF//&2d]", options1, "", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("usage: ", 63, (-103));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      stringWriter1.getBuffer();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      String string0 = "4n5Xg6G:0[Q";
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "4n5Xg6G:0[Q", "4n5Xg6G:0[Q", options0, 0, 10, "{Q|IO'bCc](I*M8i2");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options1.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "`v:LEh_luxxR48d*{", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      Options options2 = new Options();
      helpFormatter0.printHelp("]V+UH-!/jDGFcH9>", "%;K", options1, "--", false);
      helpFormatter0.printHelp(1851, "|G CPvm6)p/(fxS\"b$;", "E.e4&C8,CIfg", options2, "E.e4&C8,CIfg");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append(']');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter0.append('[');
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer("");
      helpFormatter1.renderWrappedText(stringBuffer0, 9, 3, "<h|pYx+Cn");
      helpFormatter0.rtrim("-X7W<p)F[||j+e@'");
      helpFormatter1.setWidth(70);
      helpFormatter1.printHelp(2556, " ", (String) null, options0, "vUr:abxU=mz=rX;>[u", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter0.append('[');
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer("RnwxBE7Lmu=_9tQs");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 3, "");
      helpFormatter1.rtrim("usage: ");
      helpFormatter0.setWidth(13);
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 54, 0, "\n");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 0;
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "--", "]", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = 3067;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 40, 3067, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Options options0 = null;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setOptPrefix("\n");
      Options options0 = new Options();
      helpFormatter1.printHelp("@9C\"'z", "[ option: ", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      int int0 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("@");
      StringBuffer stringBuffer0 = new StringBuffer(4938);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, 3, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOption("-");
      optionGroup0.setRequired(false);
      helpFormatter0.findWrapPos("", 9, 9);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "]V+UH-!/jDGFcH9>", "]V+UH-!/jDGFcH9>", options2, 0, 0, "&B", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1931);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-951), "", "arg", (Options) null, "Mb&lt}o]fRjB9z", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "TBC+OOb(1dH";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1133, (String) null, (String) null, options0, 2, 1133, "6wDK`^7;s");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter0.append('[');
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer("RnwxBE7Lmu=_9tQs");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 3, "");
      helpFormatter1.rtrim("usage: ");
      helpFormatter0.setWidth(13);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "usage:", " ", options0, " ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, options0, 1, 1, "' was specified but an option from this group ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setOptPrefix("z.:");
      Options options1 = new Options();
      helpFormatter1.printHelp("\u0003>Au+aw", "`v:LEh_luxxR48d*{", options1, "+@R~(Iagj\"sgha%+", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int0 = 142;
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 142, ":k>Mn\")", ":k>Mn\")", options0, 0, 40, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "\n");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile(": 1LoV");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 2919, "[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      stringBuffer1.setLength(0);
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1, "");
      helpFormatter0.getArgName();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-518), "");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "1{545ZW_!<hkX");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        options2.addOption("-", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1609));
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", false, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("@=0U&i[CCp", false, "@=0U&i[CCp");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '@=0U&i[CCp' contains an illegal character : '@'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("mqQ@X_cS(Adj64$e", "", options0, "mqQ@X_cS(Adj64$e");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-693), (-693));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      String string0 = "&8=.SnmZmmvj,RvThiP";
      Options options0 = new Options();
      options0.hasShortOption("--");
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setOptPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("(W$uL");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = null;
      int int0 = 31;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-1885), 31);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 2606, "");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = (-1979);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 3, (-1979));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setOptPrefix((String) null);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "line.separator");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // line.separator
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "TBC+OOb(1dH";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, 1787, "TBC+OOb(1dH");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "]V+UH-!/jDGFcH9>", "]V+UH-!/jDGFcH9>", options2, 0, 0, "&B", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options2, (-1), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setArgName("--");
      helpFormatter0.setWidth(840);
      helpFormatter0.setLongOptPrefix("w3#JFerYy:J|>");
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("LKLB<Ouow]L~1ZV{SeN", "*myw&-\"I", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'LKLB<Ouow]L~1ZV{SeN' contains an illegal character : '<'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("j");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1:`Tm/>:ZHV$R<");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 17, "org.apache.commons.cli.HelpFormatter", options0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("j", "--", options2, "/!hYu0 %d)6$E;Y}]=?", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 1133;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1133, "org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, options0, 1133, 1133, "' was specified but an option from this group ");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      String string0 = "org.apache.commons.cli.OptionGroup";
      String string1 = "+`2q~R#o;#7D&\"pw";
      Options options0 = null;
      String string2 = "llovWU-nM9YPx;}";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("B&ZYdqgi!&1sr`&Ct", "org.apache.commons.cli.OptionGroup", (Options) null, "org.apache.commons.cli.OptionGroup");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile(": 1LoV");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5, 2919, "[");
      helpFormatter0.defaultArgName = "B";
      helpFormatter0.setWidth((-1059));
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-2), 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }
}
