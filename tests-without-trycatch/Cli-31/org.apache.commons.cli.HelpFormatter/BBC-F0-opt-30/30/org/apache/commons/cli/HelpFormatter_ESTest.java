/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:54:48 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ", 0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2040));
      helpFormatter0.setWidth((-2040));
      helpFormatter0.getDescPadding();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.createPadding(44);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("BBWxs0jS");
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.printHelp(6, "\n", "arg", options0, "--");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter1.findWrapPos("!I,gk 7NZ<|w(pm7", 1, 3);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-592), options3, 45, 14);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("w");
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1));
      Options options1 = options0.addOption("arg", true, "w");
      Options options2 = options1.addOption("w", "--", true, "");
      Option option0 = new Option("arg", "", true, "arg");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("`%RZStC0VLQenOD6 T", "[", options3, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      int int0 = (-331);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-69);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(6, "\n", "arg", options0, "--");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("TKF", "-", false, "");
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1165, "'`#M+8v", options0);
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gH|$Co'bSH/?>bB-N");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "gH|$Co'bSH/?>bB-N", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "mda6twXhd1m/E8e2o");
      Options options3 = options2.addOption("R", ";;0", false, "arg");
      helpFormatter0.printHelp("v'y**k\"w965Iq-d*QGa", options3, true);
      helpFormatter0.setOptPrefix("OSb");
      Options options4 = new Options();
      helpFormatter0.printHelp("arg", options4);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      Options options5 = new Options();
      int int0 = (-1205);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('?');
      stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        stringWriter1.append((CharSequence) " ", 74, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "   ");
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3733);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", " ", options0, "\n", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", (String) null, true, "usage: ");
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultWidth = (-5130);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", "K?(JUgV(%s[", options0, "--", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2040);
      helpFormatter0.setDescPadding((-2040));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("mw#z~", (Options) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      options0.addOption((String) null, true, "<");
      mockPrintWriter0.write(0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 410, " uV", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 410, options0, 410, 410);
      helpFormatter0.printHelp("[", "y%U", options0, "]", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultWidth = (-3638);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "-", "", options0, (-1347), 18, "@FW'#^!Zy", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(4, "-", " ", (Options) null, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 123;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      int int1 = 45;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 123, (Options) null, 123, 45);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 63, options0, 23, 3);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      String string1 = "jV2D0%n`W\\Nv/S6Bl.!3";
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/S6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      int int0 = 0;
      int int1 = 432;
      StringBuffer stringBuffer0 = new StringBuffer(432);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      int int2 = 541;
      int int3 = 2;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 541, 2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", (String) null, true, "usage: ");
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", "usage: ", options0, "V;nR/zI'4;V_g", true);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) null, 73, "usage: ", (String) null, options0, 3, 1, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "oT)Y']{ O?SWtDc8P");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "axCh)ep}G", true, "ICj~!L");
      helpFormatter0.printHelp("K?(JUgV(%s[", "K?(JUgV(%s[", options2, (String) null, true);
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile(" K\"{)Py");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options3 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-732), "axCh)ep}G", "axCh)ep}G", options3, (-2), 1517, "0TQSR*I*,Ve", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      Option option0 = new Option("N", true, "");
      Options options2 = options0.addOption(option0);
      Options options3 = options2.addOption("", "", true, "");
      helpFormatter0.printHelp(856, "GlK755M\u0000%Z>[EGxeYd", "ct|,A/cm", options3, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 101, "]x.<Y4]zl>&XNw@R", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", "", (Options) null, "arg", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      options0.toString();
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", "K?(JUgV(%s[", options0, "--", true);
      helpFormatter1.printHelp(74, "\n", "K?(JUgV(%s[", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1315));
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("[ Options: [ short ");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      String string0 = "kP%o7.!e13";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "kP%o7.!e13");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // kP%o7.!e13
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 13, "-", (String) null, options0, 15, 64, "CPIE6.{F( cRS:)U", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "--");
      Options options1 = new Options();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-665), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, (String) null);
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 31, "-", options1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, true, "--");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("<3gd&aCL*b'", "-", options1, "-", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option("ya", " | ", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup2);
      // Undeclared exception!
//      try { 
        options0.addOption("--", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1643, 74, "   ");
      Options options1 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-453), options0, (-5183), (-2317));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ")Y9%|rMeX9E+PM!P", "-", options0, 74, 74, ")Y9%|rMeX9E+PM!P", false);
      helpFormatter0.printHelp(74, "--", ")Y9%|rMeX9E+PM!P", options0, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "--", options0, 74, 74, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 71, "jV2D0%n`WNv/6Bl.!3");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter1.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.setNewLine("line.separator");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, " ", options0, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      int int0 = 74;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "[ option: ", "FJNLI<'8sL?]AL+P,|O", (Options) null, 74, 266, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      int int0 = 74;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "The option '", "=;A|c:5R%R3R6jL2*", options0, 74, 3789, "The option '");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, (String) null, "\"|n", options0, 74, (-982), ")Y9%|rMeX9E+PM!P", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("line.separator", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(948, "Se.$#^b}|5<h\"mqQ", "1d|t- YlXgk%J4(5t9", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("]NplbZc9;/PM;[2", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.addOption("arg", false, "pds\"Dx");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("]NplbZc9;/PM;[2", " ", options1, (String) null);
      Options options3 = options1.addOption((String) null, false, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "pds\"Dx", options3, "-", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "' contains an illegal character : '");
      options0.addOption(option0);
      Options options1 = options0.addOption((String) null, false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "' contains an illegal character : '", "", options1, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("`'#m", "q\"", options0, "{AUiE");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer("`|p");
      helpFormatter0.setDescPadding(2364);
      String string0 = "q@D5'H*y";
      Option option0 = null;
//      try {
        option0 = new Option("S:", true, "q@D5'H*y");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'S:' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ")Y9%|rMeX9E+PM!P", "", options0, 74, 74, ")Y9%|rMeX9E+PM!P", false);
      helpFormatter0.printHelp(printWriter0, 65, "Q-5", "", options0, 74, 0, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 1, options0, 74, 4229);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 65, options0, (-1), 3);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      File file0 = MockFile.createTempFile("   ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 74, ")Y9%|rMeX9E+PM!P", "   ", options0, 1783, 74, "[ option: ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "", options0, "", false);
      helpFormatter1.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(20);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 48, (-492), "");
      helpFormatter1.renderOptions(stringBuffer1, 63, options0, 74, 20);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockFile mockFile0 = new MockFile("", "");
      String string0 = "";
      File file0 = MockFile.createTempFile("5^px`~^M-DRYL|]yZ8[", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('i');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      options0.hasOption("kFj");
      helpFormatter0.printHelp(printWriter0, 110, "[ option: ", " ", options0, 1, 1783, " ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "cB=bO~I%nui51", "5^px`~^M-DRYL|]yZ8[", options0, ")Y9%|rMeX9E+PM!P", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = null;
//      try {
        stringBuffer1 = new StringBuffer((-1332));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "!<!Rr2vDXl<_i)'", "org.apache.commons.cli.OptionGroup").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("jV2D0%n`WNv/6Bl.!3");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage(printWriter0, 74, "\n", options1);
      helpFormatter0.getArgName();
      helpFormatter0.printOptions(printWriter0, (-1476), options1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("$C\"'g/]QOrC2zF|9", "", options2, "--", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 17, (String) null, options1);
      helpFormatter2.getNewLine();
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2978;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2978, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" | ");
      Options options0 = null;
      String string0 = "56f![ JsO";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(" | ", " | ", (Options) null, "56f![ JsO");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "usage: ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      pipedInputStream0.mark(74);
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2055, "t<aU<X6{K");
      Options options2 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "--", (String) null, options1, "cmdLineSyntax not provided");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("$C\"'g/]QOrC2zF|9", "", options2, "--", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter2.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 2533, 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringWriter1;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1895), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.rtrim("g=.G.+&<24M");
      helpFormatter0.createPadding(74);
      PipedInputStream pipedInputStream0 = new PipedInputStream(331);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      pipedInputStream0.mark((-2268));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1008, "m2<LP;J");
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "[ option: ", "", options0, 74, 0, ")Y9%|rMeX9E+PM!P", false);
      helpFormatter0.printHelp(74, ")Y9%|rMeX9E+PM!P", "", options0, "line.separator", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("W", options0, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "[ option: ", "", options0, 74, 0, ")Y9%|rMeX9E+PM!P", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "line.separator", options0, 44, 10, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      options0.hasLongOption("`;s5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print((double) 74);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("A'Z+D7", (String) null, options0, "org.apache.commons.cli.OptionValidator", true);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('w');
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "`;s5", "arg", options1, 68, (-2), "org.apache.commons.cli.OptionValidator", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "!<!Rr2vDXl<_i)'", "org.apache.commons.cli.OptionGroup").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("NZ)s7.Fp> xGcGX");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "\n", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, "\n");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("~8V{JZLJX?gG}", "usage: ", options2, "OSb", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d#<G");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter1.getNewLine();
      helpFormatter1.getOptionComparator();
      helpFormatter1.printHelp("{FfX$", "d#<G", options0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" Oh=:+", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped(printWriter0, (-4841), "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockFile mockFile0 = new MockFile("usage: ", "-");
      File file0 = MockFile.createTempFile("   ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 74, ")Y9%|rMeX9E+PM!P", "   ", options0, 1783, 74, "[ option: ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "", options0, "", false);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printUsage(printWriter0, 409, "n[.7p");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("[", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "org.apache.commons.cli.Option", "jV2D0%n`WNv/6Bl.!3", options0, (-2), (-1), "org.apache.commons.cli.Option", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("NZ)s7.Fp> xGcGX");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-1), "i0(BaxwT&//=-;Kyx", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      options0.hasLongOption("`;s5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print((double) 74);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("A'Z+D7", (String) null, options0, "org.apache.commons.cli.OptionValidator", true);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('w');
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 2, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.Option", options2, (-1635), (-809), "E46B*?-Ft$");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      boolean boolean0 = true;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getOptionComparator();
      String string1 = "E46B*?-Ft$";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E46B*?-Ft$");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-44), "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      helpFormatter0.setOptPrefix("OSb");
      helpFormatter0.setDescPadding(67);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(19, "", "", options0, "2gz-%>9,.", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      StringBuffer stringBuffer0 = new StringBuffer(" [ARG]");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("OSb", false, "OSb");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2165, "arg", "usage: ", options2, 52, 56, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "^F]f1%XbSFkC|-\"L", "^F]f1%XbSFkC|-\"L", options0, 74, (-297), " ");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-487), "{9! dJsqL%@Yu.Ix7");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("OSb", false, "OSb");
      helpFormatter0.printHelp(" ", "OSb", options1, "", false);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "[ option: ", "", options0, 74, 0, ")Y9%|rMeX9E+PM!P", false);
      helpFormatter0.printHelp(74, ")Y9%|rMeX9E+PM!P", "", options0, "line.separator", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(74, "jV2D0%n`WNv/6Bl.!3", "", options0, "jh{");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("OSb", false, "OSb");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("OSb", "", options1, " ", true);
      helpFormatter1.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "' was specified but an option from this group ", "' was specified but an option from this group ", options0, "[ option: ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("OSb", false, "OSb");
      String string0 = "'\\+ep3)Sg#xi4?mQ.c@";
      Options options2 = new Options();
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-538), "'+ep3)Sg#xi4?mQ.c@", "", options2, (-2), (-538), "arg", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "brRG_dC#,:[LE#3XSw,", "brRG_dC#,:[LE#3XSw,", options0, (-2), (-2), "brRG_dC#,:[LE#3XSw,", false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = ";";
      helpFormatter0.rtrim(";");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2268));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("5'K5#k 37");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jV2D0%n`W\\Nv/6Bl.!3";
      MockFile mockFile0 = new MockFile("\n", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 32, ", ");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('?');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-66), options1, 1533, (-1205));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.findWrapPos("", 0, 33);
      helpFormatter0.setArgName("   ");
      helpFormatter0.setOptPrefix("   ");
      File file0 = MockFile.createTempFile("i4|y2", "");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "--");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // --
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "org.apache.commons.cli.OptionValidator", true);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E46B*?-Ft$");
      PrintWriter printWriter0 = mockPrintWriter0.append('w');
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "   ", "", options1, (-1635), 0, "");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a<yDvbGJhOId[";
      StringBuffer stringBuffer0 = new StringBuffer("a<yDvbGJhOId[");
      int int0 = (-1433);
      int int1 = (-1007);
      String string1 = "pU_ vcfDKTH&BUy E";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1007), "a<yDvbGJhOId[", "cmdLineSyntax not provided", options0, "a<yDvbGJhOId[");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setDescPadding(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A CloneNotSupportedException was thrown: ");
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "6e:*>b Z\"k6vL&kq", "6e:*>b Z\"k6vL&kq", options0, "6e:*>b Z\"k6vL&kq", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "OSb", "OSb", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("OSb", false, "OSb");
      helpFormatter0.printHelp("hiBh3J@6Cj", "OSb", options1, "", false);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5wS%;)/X&BQ$c");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "rO");
      OptionGroup optionGroup1 = new OptionGroup();
      Option option1 = new Option("", true, "\n");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write(0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 410, " uV", options0);
      helpFormatter0.getArgName();
      helpFormatter0.printOptions(mockPrintWriter0, 410, options0, 410, 410);
      helpFormatter0.printHelp("[", "y%U", options0, "]", true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      options0.addOption(option0);
      helpFormatter0.defaultLeftPad = 0;
      Options options1 = options0.addOption("rLW", true, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "rLW", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("^[Sy<]\"j", "usage: ", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '^[Sy<]\"j' contains an illegal character : '^'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "   ");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a<yDvbGJhOId[";
      StringBuffer stringBuffer0 = new StringBuffer("a<yDvbGJhOId[");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1433), (-1007), "pU_ vcfDKTH&BUy E");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "[";
      helpFormatter0.defaultArgName = "[";
      helpFormatter0.setArgName("[");
      helpFormatter0.setLongOptPrefix("[");
      String string0 = "line.separator";
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      String string1 = null;
      Option option0 = new Option("", "--", false, "");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options0.addOption(" ", (String) null, false, "[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("OSb");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.write(0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 410, " uV", options0);
      helpFormatter0.getArgName();
      helpFormatter0.printOptions(mockPrintWriter0, 410, options0, 410, 410);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 44;
      String string0 = "nsxzOm>U~6*LAZX";
      Options options0 = new Options();
      int int1 = 2932;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 44, 2932, "cmdLineSyntax not provided");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptPrefix();
      String string0 = "";
      String string1 = "G}GpS~a<SEP8p)$|";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = false;
      options0.addOption((String) null, "", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string3 = "gIJklN@p\\r";
      String string4 = "72=<^";
      Option option0 = null;
//      try {
        option0 = new Option(" ", "usage: ", false, "72=<^");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "";
      helpFormatter0.rtrim("");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-267));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLeftPad = 1;
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.OptionGroup");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append(',');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ':';
      charArray0[2] = ',';
      charArray0[3] = 'z';
      stringWriter1.write(charArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 3, "", "|", (Options) null, 57, 968, "|");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, ".", "-", options0, ",kR%re3");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.close();
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      int int0 = 32;
      helpFormatter0.printWrapped(printWriter0, 0, 32, "");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, false);
      mockFile0.getAbsoluteFile();
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "jV2D0%n`WNv/6Bl.!3");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "jV2D0%n`W\\Nv/6Bl.!3";
      MockFile mockFile0 = new MockFile("line.separator", "jV2D0%n`WNv/6Bl.!3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 32, "");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, false);
      mockFile0.getAbsoluteFile();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "jV2D0%n`WNv/6Bl.!3");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.createPadding(10);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("]", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2754, 2855, "");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.rtrim("");
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      String string1 = "C";
//      try { 
        MockURI.URI("gp5A7K!\"9=Iz,c2!", "F45g8f7DA", "C", "arg", "\n");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: gp5A7K!\"9=Iz,c2!://F45g8f7DAC?arg#%0A
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOption(" ");
      // Undeclared exception!
//      try { 
        options0.addOption("uVFA|0rV16V", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'uVFA|0rV16V' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-W'1FGN&t*}");
      helpFormatter0.setNewLine(";Ijn");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setLongOptPrefix((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("]", (-2610), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.defaultOptPrefix = "kU^|W|zAqQ@Hd:i}R";
      helpFormatter0.setWidth((-2));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "";
      String string0 = "!))d9-{<7;70S";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3380), "", "-", (Options) null, "   ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "19xxC;qL?@R_90e1.";
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      String string1 = null;
      Options options0 = new Options();
      String string2 = "bCbw80s;,M's";
      String string3 = ";Sq^z9M@|vD)";
      options0.hasShortOption("]lw/rwJ8k3=M?");
      options0.hasShortOption(";Sq^z9M@|vD)");
      options0.hasShortOption("bCbw80s;,M's");
      options0.hasLongOption("-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", (String) null, options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
//      try {
        option0 = new Option("\n", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-265));
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setWidth(0);
      assertEquals((-265), helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      String string0 = " [ARG]";
      StringBuffer stringBuffer0 = new StringBuffer(" [ARG]");
      int int0 = 1;
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = '.';
      charArray0[2] = '+';
      charArray0[3] = 'o';
      charArray0[4] = '4';
      // Undeclared exception!
//      try { 
        stringBuffer0.append(charArray0, 74, (-1862));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "h(Fp<u>0Pd";
      // Undeclared exception!
//      try { 
        options0.addOption("-", "*BR~$J%ZopzClA", false, "h(Fp<u>0Pd");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
//      try { 
        mockPrintWriter0.write("--", 3, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
