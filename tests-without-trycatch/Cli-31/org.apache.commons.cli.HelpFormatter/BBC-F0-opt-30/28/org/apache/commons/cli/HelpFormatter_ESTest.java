/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:41:08 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-896);
      helpFormatter0.defaultDescPad = 24;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.rtrim("]");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.printHelp(" ", options0);
      MockFile mockFile0 = new MockFile(" ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "arg", 0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "usage: ", "\n", options0, " ");
      helpFormatter0.findWrapPos("has already been selected: '", (-1), 13);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-4129));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultLongOptPrefix = "Mc>B^&";
      String string0 = null;
      helpFormatter0.defaultWidth = (-4129);
      String string1 = "";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Mc>B^&", "", options0, "UbYMh,v,Cwb?nOuj%", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3067);
      helpFormatter0.defaultDescPad = (-3067);
      Options options0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("IIV6#h)d_{Ni]x2u", "IIV6#h)d_{Ni]x2u", (Options) null, "IIV6#h)d_{Ni]x2u");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Cannot add value, list full.", options0, true);
      helpFormatter0.setLeftPadding((-1578));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      options1.hasShortOption("-I0I0sNSbm");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", options1, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("\n", options0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "O S<PIp?ZZCT!4m;+");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 20, options2, 1, 281);
      options2.helpOptions();
      options2.toString();
      options1.helpOptions();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options2, 64, 3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "Gjmo8", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1393));
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("HUL4YHo", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      String string0 = "-;`~-TQ;kS&";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LQLqS.3w=");
      int int0 = 2937;
      helpFormatter0.defaultLeftPad = (-4288);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("p:` =Y5d+", options0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.addOption("", " ", true, "usage: ");
      Option option0 = new Option("", "usage: ", true, "\n");
      helpFormatter0.printHelp("w=", options0, true);
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 31, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-543));
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.Options");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", options1, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ] [ long ", "6W(d7xw}oaN", options0, "6W(d7xw}oaN");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 133, "@!V[T6|k*PNuG74");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "FNk;R!7$yS(amey3", "6W(d7xw}oaN", options0, 0, 0, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.Options");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      helpFormatter0.printHelp("\n", options1, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.print("usage: ");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.defaultLeftPad = 1619;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "", objectArray0);
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 1, (Options) null, 74, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 559, "\"p", (String) null, options0, 559, (-481), "-;`~-TQ;kS&", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('X');
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1040, 1040, "--");
      helpFormatter0.renderWrappedText(stringBuffer1, 1040, 0, "D8%2$h~Y|i:GTSv");
      helpFormatter0.createPadding(10);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      stringBuffer0.trimToSize();
      Options options1 = options0.addOption("K8", "-", false, "u");
      stringWriter0.close();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, 1, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("arg", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1572, " ]", " ]", options0, 1572, 1572, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      helpFormatter0.defaultLeftPad = (-4288);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2937, "`^G-+ wZW", "Jaltc&de1n)\"{5", options0, "-;`~-TQ;kS&");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 115, "j7YkJo,?yB*{20", ">", options0, 115, 115, "\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "HW@QzVFRAs.NziVO");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "HW@QzVFRAs.NziVO", options0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      String string1 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1934));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", "' was specified but an option from this group ", true, "#kDT|^S");
      helpFormatter0.printHelp("usage: ", options2, true);
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("l`[\">::_V!2^24R", "l`[\">::_V!2^24R", (Options) null, "7=", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$1", "has already been selected: '", options1, "has already been selected: '", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", false, "usage: ");
      boolean boolean0 = true;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 630, (Options) null, 63, 63);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2796;
      StringBuffer stringBuffer0 = new StringBuffer(2796);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 88, options0, 2796, 2796);
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer1, 2796, 2796, "");
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = ',';
      charArray0[2] = 'O';
      charArray0[3] = ')';
      charArray0[4] = 'L';
      charArray0[5] = 'h';
      charArray0[6] = '\"';
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(3, charArray0, 207, 64);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 3
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 770, (-1), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXiP?h7uJMCe");
      boolean boolean0 = true;
      options0.addOption("", true, " ");
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 4388, options0, 4388, 4388);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp(9, "\n", " ", options0, "has already been selected: '", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "\n", "arg", options0, ":!{j70KBm6ZB]A\"ph");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXiP?h7uJMCe");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions(" ");
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "\n", "\n", options0, "+pm;oc(");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("   ");
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2128, 2128, "P;I0>{");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 43, " ", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp(1436, "org.apache.commons.cli.OptionValidator", "usage: ", options0, "--");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-79), "arg", " ", options0, 74, 1, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXiP?h7uJMCe");
      options0.addOption("", true, " ");
      helpFormatter0.defaultLeftPad = 235;
      options0.addOption((String) null, "-", true, "-");
      helpFormatter0.printHelp("'[THpJ2B", options0, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setExecutable(true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 832, ",{7F_/c./5", "arg", options0, 832, 30, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 1435, 623);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXiP?h7uJMCe");
      Options options1 = options0.addOption("", true, " ");
      options1.addOption("arg", (String) null, true, "");
      helpFormatter0.printHelp("'[THpJ2B", options0, false);
      options0.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 34, (String) null, "x$k KmlqA4VJ*%vvg", options0, (-1), 34, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXiP?h7uJMCe");
      options0.addOption("", true, " ");
      helpFormatter0.setNewLine("");
      options0.addOption((String) null, "-", true, "-");
      helpFormatter0.printHelp("'[THpJ2B", options0, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("   ");
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 900, 35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1067, "Ti`", "   ", options0, 103, 10, "", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions("-");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "QL}{SM4:9xP", "-", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.format("vUk#j+/Q0NrMK##>(", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 3848, (int) (byte)26, "arg");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(1612, "^+jv'jE<I'9*", "-", options0, "--");
      // Undeclared exception!
//      try { 
        helpFormatter1.findWrapPos("usage: ", (-2775), 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getMatchingOptions(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-119), (String) null, (String) null, options2, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" ");
      options0.getMatchingOptions("-");
      String string0 = "rS_KCVOGSM-F#H~c";
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 23, "Gzqf|", "", options0, 23, 30, "\"8(4%", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("| VfKHhHDr:X}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 21, "   ", "#6u8*0APZh4Bb} ", options0, 6, 30, " ", false);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXiP?h7uJMCe");
      options0.addOption("", true, " ");
      options0.addOption((String) null, "-", true, "-");
      helpFormatter0.printHelp("'[THpJ2B", options0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" ");
      options0.getMatchingOptions("-");
      options0.addOption("Fc3W", "-", true, "");
      options0.addOption("", "71%0lcoho]S!6`[b", true, "arg");
      helpFormatter0.printHelp("usage: ", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "arg", "", options0, "-");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 66, ",{7F_/c./5", "arg", options0, 832, 30, "usage: ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-3021), "rS_KCVOGSM-F#H~c", "' contains an illegal character : '", options0, "\n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" ");
      options0.getMatchingOptions("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":XT");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "wnA,7XAPEj'8GY'-Q~", options0, (-2), (-2), "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", (String) null, options1, 0, 0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 832, "rS_KCVOGSM-F#H~c", "--", options0, (-3021), 1, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions(" ");
      helpFormatter0.rtrim("o/l7kJz$5");
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(2944);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 5, 32, "o/l7kJz$5");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 9;
      helpFormatter0.printHelp(9, "' was specified but an option from this group ", "M'fvrg FvE[p", options0, "9B");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = 34;
      helpFormatter0.printHelp(34, "M'fvrg FvE[p", "usage: ", options0, "9B");
      helpFormatter0.printHelp("' was specified but an option from this group ", options0);
      helpFormatter1.getWidth();
      helpFormatter1.getLeftPadding();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("6d8pPJ", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "'1V_nuI<8rfVrDfX9", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", (String) null, true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1814), "", "6d8pPJ", options3, 2711, 24, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "   ", "wnA,7XAPEj'8N?GY'-Q", options0, 0, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "   ", "wnA,7XAPEj'8GY'-Q~", options0, 0, 0, "", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+Mj2#\"(d.<zmEH.mB";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("+Mj2#\"(d.<zmEH.mB", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(3, "-", "   ", (Options) null, "   ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(74, "arg", "Th] option '", options1, "arg", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append((Object) helpFormatter0);
      stringBuffer0.append(0.0F);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 34, "usage: ");
      helpFormatter0.setLongOptPrefix((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ");
      options0.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "ey>~.be", "\n", options0, "6HOb5z");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("arg");
      options0.getMatchingOptions("OXiP?hHJ_MCJe");
      String string0 = "";
      String string1 = "F8 E5CA";
      options0.addOption("", "\n", true, "F8 E5CA");
      String string2 = null;
      Options options1 = options0.addOption((String) null, "-", true, "-");
      helpFormatter0.printHelp("'[THpJ2B", options0, true);
      MockFile mockFile0 = new MockFile("'[THpJ2B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "g2>j2P5\"K#FeG9", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXi?hHJ_MJe");
      helpFormatter0.printHelp(359, "OXi?hHJ_MJe", "OXi?hHJ_MJe", options0, "");
      MockFile mockFile0 = new MockFile("OXi?hHJ_MJe");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 359, "");
      helpFormatter0.printOptions(mockPrintWriter0, 359, options0, 359, 1548);
      helpFormatter0.printHelp("5L]&RqwZ>1l,({", "", options0, (String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append((Object) helpFormatter0);
      stringBuffer0.append(0.0F);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 34, "usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ");
      options0.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options0);
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-887), "-", "--", options0, " n");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption(" ");
      options0.getMatchingOptions("-");
      options0.addOption("Fc3W", "-", true, "");
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 684, 1229, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2128, 2128, " ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("B5D0", (String) null, options0, "org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(9, "line.separator", (String) null, options0, "E/'Ap[7\"5=d0N");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7p!\u0003o]!ZWWa,'xz");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      Locale.setDefault(locale0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)80;
      Options options0 = new Options();
      Option option0 = new Option("", "V/`@~h:x", false, "NyJ2e");
      Options options1 = new Options();
      options0.addOption("", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(34, "30<QfXSOlTB5", "", options1, "cmdLineSyntax not provided");
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("0j~d=r)F$6JMC", (byte)50, (byte)50);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append((Object) helpFormatter0);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 34, "usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator(" ]");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "NO_ARGS_ALLOWED");
      Options options1 = options0.addOption("", true, "arg");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(99);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " ]");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(34);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("arg");
      options0.getMatchingOptions("OXiP?hHJ_MCJe");
      options0.addOption("", "\n", true, "F8 E5CA");
      options0.addOption((String) null, "-", true, "-");
      helpFormatter0.printHelp("'[THpJ2B", options0, true);
      helpFormatter0.printHelp(359, "OXiP?hHJ_MCJe", "OXiP?hHJ_MCJe", options0, "");
      MockFile mockFile0 = new MockFile("OXiP?hHJ_MCJe");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getDescPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 359, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "--", options0, "!\u0000.o-z1kdb");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('e');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 1631, "arg", "}mn4SMfcJsbK>oDo&T.", options0, 38, 1631, "vSdD#Op?TYW|3JVC?x");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "org.apache.commons.cli.HelpFormatter$1");
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, true, "-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter$1", "The option '", options1, "org.apache.commons.cli.HelpFormatter$1", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OXiP?hHJ_MCJe");
      String string0 = "";
      Options options1 = options0.addOption("", "\n", true, "F8 E5CA");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(2, "usage: ", " ", options1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7p!\u0003o]!ZWWa,'xz");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option((String) null, "-", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("E", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 2281, "tGLb9N{)d $z^)#{3", " ", options2, (-2), 2281, "tGLb9N{)d $z^)#{3");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 34, "");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator(" ]");
      helpFormatter0.getArgName();
      int int0 = 1;
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "org.apache.commons.cli.HelpFormatter");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7p!\u0003o]!ZWWa,'xz");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)80;
      Options options0 = new Options();
      Option option0 = new Option("", "V/`@~h:x", false, "NyJ2e");
      options0.addOption(option0);
      options0.addOption("", false, "-");
      helpFormatter0.printHelp(34, "/9!~{m%m%bX+`\"R%}", "NyJ2e", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.printHelp(" | ", " | ", options0, " | ", false);
      helpFormatter0.printHelp("0fc[BAL{x;5)nrYEF_k", "0fc[BAL{x;5)nrYEF_k", options0, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 2378, 2378, " ");
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockFile mockFile1 = new MockFile("hmg|u[`T", "--");
      MockFile mockFile2 = new MockFile("usage: ", "&TWx");
      MockFile mockFile3 = new MockFile(mockFile2, "x=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile3);
      helpFormatter0.rtrim("");
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2378, 2378, "i");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 2378, 2378, " ");
      String string0 = "";
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockFile mockFile1 = new MockFile("hmg|u[`T", "--");
      MockFile mockFile2 = new MockFile("usage: ", "&TWx");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("arg", "--", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        options1.addOption("d_`o]V(lp[e$^_~", false, "DlGswP/L");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'd_`o]V(lp[e$^_~' contains an illegal character : '`'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "t`cAlf+Z'", options0, "I@", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";7qw/JKQr:%";
      String string1 = "27-d\"v$xC]";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      String string2 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(";7qw/JKQr:%", "27-d\"v$xC]", options3, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("k2FJ#PZKo9MSU(PWZ8+", "Rgy06sQ|PG?uy2Ja&s,", options0, "Rgy06sQ|PG?uy2Ja&s,", true);
      helpFormatter0.getWidth();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2, options0, 1931, (-156));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("OX|iP?hHJ_MpCJe");
      String string0 = "";
      options0.addOption("", "\n", true, "F8 E5CA");
      helpFormatter0.printHelp("'[THpJ2B", options0, true);
      String string1 = null;
      helpFormatter0.printHelp(359, "OX|iP?hHJ_MpCJe", "OX|iP?hHJ_MpCJe", options0, "");
      Options options1 = options0.addOption((String) null, "8da}9>)nwI~E", false, "OX|iP?hHJ_MpCJe");
      // Undeclared exception!
//      try { 
        options1.addOption("f^WmP&07xKA1v", false, "5I@)0K>w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'f^WmP&07xKA1v' contains an illegal character : '^'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 2378, 2378, " ");
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockFile mockFile1 = new MockFile("hmg|u[`T", "--");
      MockFile mockFile2 = new MockFile("usage: ", "&TWx");
      MockFile mockFile3 = new MockFile(mockFile2, "x=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2378, "");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "v6~~]U+'Hm+", options0, " ");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 122, 122, "");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      MockFile mockFile1 = new MockFile("usage: ");
      MockFile mockFile2 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "   ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "org.apache.commons.cli.HelpFormatter$1");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter$1", "The option '", options2, "org.apache.commons.cli.HelpFormatter$1", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7p!\u0003o]!ZWWa,'xz");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      Option option0 = new Option((String) null, "-", false, "-");
      Options options1 = options0.addOption(option0);
      String string1 = null;
      Options options2 = options1.addOption("E", false, (String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 2281, "tGLb9N{)d $z^)#{3", "Cannot add value, list full.", options2, (-2), 2281, "tGLb9N{)d $z^)#{3");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions(" ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", (String) null, options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      options0.getMatchingOptions(" ");
      options1.addOption((String) null, "", false, "usage: ");
      MockFile mockFile0 = new MockFile((String) null, "A^]nMna&Q]t");
      MockFile mockFile1 = new MockFile(mockFile0, "Q)kd6/N!Ov,kV(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2211, "x,7N7pg.?BI\"");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1840), (String) null, "cmdLineSyntax not provided", options1, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.getOptions();
      Option option0 = new Option((String) null, true, "\n");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", true, "arg");
      Options options5 = options4.addOption((String) null, true, "-");
      Options options6 = options5.addOption(option0);
      Options options7 = options6.addOptionGroup(optionGroup0);
      options7.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-2), "", "", options7, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, true, "\n");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", true, "arg");
      option0.clearValues();
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "", "org.apache.commons.cli.Options", options4, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "$");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1", "--");
      MockFile mockFile1 = new MockFile("", "' was specified but an option from this group ");
      MockFile mockFile2 = new MockFile(mockFile1, "Pj(?&&GQsgxq}0'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "zeCNn");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.printHelp("--", options0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(" ", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptions();
      List list0 = new LinkedList<String>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.append('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "AWGG:zP'b^V{PGn";
      String string1 = "%V4\"3fTXG3\\PH>";
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1154));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      String string0 = "1Dm$3(";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      String string0 = "";
      String string1 = "1Dm$3(";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('X');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 1040;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1040, 1040, "--");
      String string0 = "D8%2$h~Y|i\\:GTSv";
      helpFormatter0.renderWrappedText(stringBuffer1, 1040, 0, "D8%2$h~Y|i:GTSv");
      helpFormatter0.createPadding(10);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      stringBuffer0.trimToSize();
      Options options1 = options0.addOption("K8", "-", false, "u");
      stringWriter0.close();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, (-1441), 0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1434), (Options) null, (-1434), (-1571));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1561, "cq)pk b3%:p6=ot");
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1561);
      helpFormatter0.getDescPadding();
      mockPrintWriter0.close();
      int int0 = (-4065);
      mockPrintWriter0.println((Object) null);
      int int1 = (-41);
      int int2 = (-2909);
      String string1 = ">";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption("\n", " ", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 1;
      int int1 = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "$");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$1", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "usage: ";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("--", "$");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("AWGG:zP'b^V{PGn", "%V4\"3fTXG3PH>");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "%V4\"3fTXG3PH>");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-_qJ3Z&aR-/5\u0004\"K=");
      String string0 = "sW";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", "usage: ", false, "Q,T>6ji/e");
      option0.setOptionalArg(false);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options0.helpOptions();
      Options options2 = options1.addOption("", true, "");
      // Undeclared exception!
//      try { 
        options2.addOption("-", "", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = null;
      int int0 = 1773;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("--", (String) null, true, "@ AU:f6k7m6}");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = (-2039);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("veB,%6");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = "";
      // Undeclared exception!
//      try { 
        MockFile.createTempFile(", ", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      int int0 = (-470);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter", (-5267), (-470));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "](^TIN.";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "_\\U2l8";
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", false, "_U2l8");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "oCiPX2d0aj^Ft-K.c$";
      helpFormatter0.setArgName("oCiPX2d0aj^Ft-K.c$");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      boolean boolean0 = false;
      int int0 = (-2771);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.write("usage: ", (-2771), 74);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = null;
      boolean boolean0 = true;
      Option option0 = new Option((String) null, true, "\n");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", true, "arg");
      option0.clearValues();
      String string3 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options4, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = 31;
      String string0 = "@!s[;6w|k*PNluG74";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 31, "@!s[;6w|k*PNluG74");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1394);
      int int0 = (-1710);
      String string0 = "[";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("-", true, "\n");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(40);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth(1918);
      helpFormatter0.getOptPrefix();
      String string0 = "KO8*|#\\Q[sPJE-uH";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "KO8*|#Q[sPJE-uH");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // KO8*|#Q[sPJE-uH
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
      int int0 = 1338;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, true, "!M>\"t");
      options1.addOption("arg", (String) null, true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      optionGroup0.addOption(option0);
      option0.clearValues();
      Option option1 = null;
//      try {
        option1 = new Option("usage: ", "Bj", false, "c.+&f2Gn.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3233), (-3233), "RY-i");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      options0.getMatchingOptions(" ");
      String string1 = "";
      boolean boolean0 = false;
      Options options2 = options1.addOption((String) null, "", false, "usage: ");
      helpFormatter0.printHelp("line.separator", options2, true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", (String) null, options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.setWidth(9);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptions();
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "%5(3y34n K`9&%");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = 31;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("%5(3y34n K`9&%", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '%5(3y34n K`9&%' contains an illegal character : '%'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
