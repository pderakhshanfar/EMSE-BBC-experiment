/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 11:58:30 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "5Se'm'J;(heB", false, (String) null);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2560, options1, 2560, 2010);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 2560, options1, 2010, 2010);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2354);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("<", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1829, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1829, " ", options0);
      String string0 = helpFormatter0.createPadding(1829);
      helpFormatter0.findWrapPos(string0, 1829, (-1403));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 3098, 995);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.setSyntaxPrefix("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "\n", "arg", (Options) null, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "<J1l+#55<)E\"!*cWT!G";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("<J1l+#55<)E\"!*cWT!G", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Options", "<J1l+#55<)E\"!*cWT!G", options0, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("{1L(X/7MBv+//,a&ELi");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 26, "{1L(X/7MBv+//,a&ELi", (String) null, options0, 25, 25, "$@|j6", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "JsK";
      options0.addOption("JsK", "arg", true, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ",r6HA4dah-7T;/`O,!", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jH%-J1k");
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 3;
      helpFormatter0.setSyntaxPrefix("6P0QHumlWS$BkD");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("The option '", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = ".JEB}q";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".JEB}q");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2504, "<J1l+#55<)EC\"!*cWT!G", "", (Options) null, 2504, 2543, "ine.separator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "&3&X`f$&");
      Option option1 = new Option((String) null, "--", true, "-");
      optionGroup0.addOption(option1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("org.apache.commons.cli.ParseException", (String) null, options1, "", true);
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp(3232, (String) null, "arg", options1, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+h<#N`'@,b9-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "+h<#N`'@,b9-", "org.apache.commons.cli.OptSonGroup", (Options) null, 4171, 3, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("6P0QHumlWS$BkD");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "", (Options) null, 34, 0, "");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("6P0QHumlWS$BkD");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "\n", "arg", (Options) null, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "--", options0, 1, 54, "\n", true);
      Options options1 = new Options();
      helpFormatter1.createPadding(3);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options0, (-1), (-1001));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 0;
      mockPrintWriter0.println((-346.712532867046));
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "arg", options0, (-1633), 0, "", true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("has already been selected: '");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, (-2734), "has already been selected: '");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, (-1927), options0, 34, 753);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, 1401, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-876), (String) null, (String) null, options0, (-876), (-876), "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultWidth = (-1228);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "\n", options1, 12, 1, " ", false);
      options1.helpOptions();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter3.renderWrappedText(stringBuffer0, 74, 1, "arg");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      Options options0 = null;
      int int0 = 3;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "has already been selected: '", "has already been selected: '", (Options) null, "has already been selected: '", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1966, "+Vz&J(up*", "--", options0, 1, 1, (String) null, true);
      options1.helpOptions();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter2.renderWrappedText(stringBuffer0, 3, 2, " ");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 882;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 882, "(", " [ARG]", (Options) null, 882, 74, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been selected: '");
      Options options2 = new Options();
      Options options3 = options1.addOption("", "", false, "");
      helpFormatter0.printHelp(693, ",ow;uH[jmKx", (String) null, options3, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "kj4'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`+aq]3.P-+");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("[ARG...]", "' contains an illegal character : '", options1, "", true);
      Options options2 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 2473, 1823);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[ Options: [ short ");
      int int0 = 64;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding(64);
      boolean boolean0 = false;
      Options options2 = options1.addOption("", false, "\n");
      options2.hasOption((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 64, options2, 64, 63);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "*eDM*Zf$k2-i#, pv", options0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "@", options1, 12, 1998, " ", false);
      options1.helpOptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append(';');
      helpFormatter2.printUsage(printWriter1, 288, "\n", options1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y7$k&j");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 57, 15, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 71, (Options) null, 1, 71);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 1998, "I!I\"7eqv-x-3Sqs7", "--", options1, (-2567), 1, "I!I\"7eqv-x-3Sqs7", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, (String) null);
      helpFormatter0.printHelp("DQmpUyS", ", ", options0, "-", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options2.addOption("\n", "DQmpUyS", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been elected: '");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 108, "f{'CcJgB4", "--", options1, 108, 74, "");
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1706, "4~u", "arg", options1, 74, 288, "\n", false);
      options0.helpOptions();
      PrintWriter printWriter0 = null;
      int int0 = (-424);
      String string0 = "K&Y";
      int int1 = 131;
      int int2 = 13;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 63, "arg", "arg", options1, (-424), 551, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp(24, "H_ji|~}.#mxEHrD", "", options0, "H_ji|~}.#mxEHrD", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer0, (-1683), options0, 3, 2548);
      helpFormatter0.renderWrappedText(stringBuffer2, 44, (-3076), "7");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      int int0 = (-924);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1802), (-924), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been selected: '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("' was specified but an option from this group ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 61, options1, 3, 74);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 775, 1, "--");
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, (-3316), 851, "arg");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "--", options0, 1, 71, "\n", true);
      Options options1 = options0.addOption((String) null, "-", true, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "kj4\\'";
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      int int0 = 236;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1854), "-", "", options1, 236, 236, " ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "arg");
      String string0 = "M\\?&?:+])v(,n";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1317), "", "3W<HeHT=2{", options1, 478, 478, "M?&?:+])v(,n", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 108, "org.apache.commons.cli.OptionValidator", "-", options0, 108, 1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "org.apache.commons.cli.Option", options0, 108, 342, "y=(.jXy1GN>", false);
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1665), "org.apache.commons.cli.Option", "arg", options1, "-", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "kj4\\'";
      options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(2523, "", "", options0, "CE,:HSEzj^vt$ Us");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      helpFormatter0.defaultLeftPad = (-2668);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.addOption("", false, "arg");
      Option option0 = new Option("", "--", false, "dvS,pyV&rK");
      Options options1 = options0.addOption(option0);
      options1.toString();
      Option option1 = new Option("", "S vpg1#@Mhc", false, "dvS,pyV&rK");
      options0.addOption(option1);
      Options options2 = new Options();
      helpFormatter0.printHelp(" A0gf.P3+E_]f@/Q", options2, true);
      helpFormatter0.printUsage(printWriter0, 484, "");
      helpFormatter0.getSyntaxPrefix();
      Options options3 = new Options();
      helpFormatter0.printUsage(printWriter0, 16, "", options3);
      helpFormatter0.printHelp("\"", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dpE3kzG2H9ONmK";
      MockFile mockFile0 = new MockFile("", " ");
      MockFile mockFile1 = new MockFile(mockFile0, "'A 8");
      File file0 = MockFile.createTempFile("dpE3kzG2H9ONmK", " ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 2076;
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2076, "", "", options0, 2076, 2076, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been selected: '");
      helpFormatter0.printHelp("has already been selected: '", "%GE(.o", options1, (String) null, true);
      Options options2 = options1.addOption("arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.helpOptions();
      helpFormatter0.printHelp(13, "%GE(.o", "", options1, "\n", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("has already been selected: '");
      helpFormatter1.renderWrappedText(stringBuffer0, 1445, 13, "   ");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "has already been selected: '");
      helpFormatter0.printHelp(338, "I5", "]", options0, "I5");
      helpFormatter0.defaultSyntaxPrefix = "X1d~C{F|";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setDescPadding(2617);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      Options options2 = new Options();
      options2.addOption("", "arg", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-772);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been selected: '");
      String string0 = "";
      boolean boolean0 = true;
      String string1 = ", ";
      String string2 = "%GE(.o";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("has already been selected: '", "%GE(.o", options1, (String) null, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      helpFormatter0.findWrapPos("NO_ARGS_ALLOWED", 25, 382);
      Options options2 = options0.addOption(option0);
      options2.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "kj4\\'";
      options0.addOption("", false, "kj4'");
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = "U3%joPJ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("U3%joPJ", "U3%joPJ", (Options) null, " :: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been selected: '");
      helpFormatter0.printHelp("has already been selected: '", "%GE(.o", options1, (String) null, true);
      Options options2 = options1.addOption("arg", "", true, ", ");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.helpOptions();
      helpFormatter0.printHelp(13, "%GE(.o", "", options1, "B.x^t", true);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, (String) null, options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options0.addOption(option0);
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options3, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("1 ZF", options2, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 6, 569, "kj4'");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      String string0 = "";
      options0.addOption("", "arg", true, "org.apache.commons.cli.AlreadySelectedException");
      OptionGroup optionGroup0 = null;
      String string1 = " [ARG]";
      helpFormatter0.findWrapPos("", 31, (-1));
      options0.hasOption("");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, "' contains an illegal character : '", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      Options options2 = options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.findWrapPos("", 31, (-1));
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("Ti:E9O9Mqkif E", options2, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "' contains an illegal character : '");
      helpFormatter0.renderWrappedText(stringBuffer0, 31, (-1), "os<IB)xz_*5{j");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("", 535, 535);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(578);
      Options options0 = new Options();
      options0.hasLongOption(",E4nI9[{,oN[*q1VG");
      Options options1 = options0.addOption("", false, "");
      options1.getOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, options
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      helpFormatter0.printHelp("kj4'", "' contains an illegal character : '", options1, "", true);
      Options options2 = options0.addOption("", "arg", false, "-");
      helpFormatter0.printHelp("H_ji|~}.#mxEHD", "\n", options2, "", true);
      File file0 = MockFile.createTempFile("Us^=+`", "sz+");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      mockPrintWriter0.print("`d?Dz5w#f9R3#htw8");
      helpFormatter0.printOptions(mockPrintWriter0, 64, options0, 33, 64);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      Options options2 = options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printHelp("H_ji|~}.#mxEHD", "", options2, "", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 24, 55, "=94qW(");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(62, (String) null, "", options1, ")+]7C$=|,*jh", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", (String) null, options0, ")h>h/f.3FB~('|q(", false);
      Options options1 = options0.addOption((String) null, "So7%?74\"6*", false, "\"");
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, ")>[&H!qG?_p|Xm", options1, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      Options options0 = null;
      Options options1 = new Options();
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, ">", (Options) null, "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache6commons.cli.AlreadySelectedException", "' containsan illega character : '", options1, "", true);
      String string0 = "";
      Options options2 = options0.addOption("", "arg", false, "org.apache6commons.cli.AlreadySelectedException");
      MockFile mockFile0 = new MockFile("-", "<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3480, "' containsan illega character : '");
      OptionGroup optionGroup0 = null;
      String string1 = " [ARG]";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = (-189);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1669), (-189), "\"o`:SKT");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      String string0 = "";
      options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      OptionGroup optionGroup0 = null;
      String string1 = " [ARG]";
      helpFormatter0.findWrapPos("", 31, (-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, "' contains an illegal character : '", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      helpFormatter0.findWrapPos("NO_ARGS_ALLOWED", 25, 382);
      String string0 = "";
      Options options2 = options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      OptionGroup optionGroup2 = null;
      String string1 = " [ARG]";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("**Uyi");
      helpFormatter0.setDescPadding(33);
      MockFile mockFile0 = new MockFile("N)#8I ", "-");
      StringBuffer stringBuffer0 = new StringBuffer(33);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-661), (Options) null, 33, (-661));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      String string0 = "[";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2427, 13, "[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      String string0 = "";
      Options options2 = options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      OptionGroup optionGroup0 = null;
      String string1 = " [ARG]";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      Options options2 = options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printHelp("H_ji|~}.#mxEHD", "", options2, "", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 24, 55, "=94qW(");
      helpFormatter0.renderWrappedText(stringBuffer1, 24, 24, "=94qW(");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "org.apache.commons.cli.Option");
      Option option0 = new Option((String) null, "--", true, "--");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " K|>dFV}7y+\"5;Lu", "", options3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print((-1.0));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 62, "v(?V}x+~~:E9");
      String string0 = "   ";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 62, "   ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been selected: '");
      helpFormatter0.printHelp("has already been selected: '", "%GE(.o", options1, (String) null, true);
      options1.addOption("arg", "", true, ", ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1566, "6s", "xetHXJ;~?F/G{/zZg", options2, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) " ");
      String string0 = "_";
      int int0 = (-435);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-435), "_");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "arg");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) helpFormatter0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "af1r\"@$G8Y7>1:cTkN~", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", " | ", options0, (String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "-", (Options) null, "", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1, "cmdLineSyntax not provided", ">", (Options) null, "cmdLineSyntax not provided");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "kj4'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "' contains an illegal character : '", options1, "", true);
      String string0 = "";
      options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
//      try { 
        options1.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2913);
      int int1 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = null;
      Options options0 = new Options();
      options0.hasOption("org.apache.commons.cli.OptionGroup");
      String string1 = "";
      // Undeclared exception!
//      try { 
        options0.addOption(" ", false, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-3141);
      String string0 = "M.y/R&-W";
      helpFormatter0.setSyntaxPrefix("M.y/R&-W");
      // Undeclared exception!
//      try { 
        stringBuffer0.insert(1, (double) 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//         //
//         // String index out of range: 1
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-473);
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("};.", (-473), (-473));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "uOw77,d8<");
      String string0 = "";
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("Sz*/Gukm<");
      Options options3 = options2.addOption("", true, "-H_oS)v");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1568), "qV3_/@z", "qV3_/@z", options4, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, "usage: ");
      int int0 = (-504);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "arg";
      options0.addOption("zoSUsC", false, "arg");
      String string1 = "9!re[3bCnlbT&,";
      Option option0 = null;
//      try {
        option0 = new Option("-", "9!re[3bCnlbT&,");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.setSyntaxPrefix("' was specified but an option from this group ");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", (String) null, true, " ");
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options1.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      String string1 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "has already been selected: '");
      boolean boolean0 = true;
      helpFormatter0.printHelp("has already been selected: '", "%GE(.o", options1, (String) null, true);
      Options options2 = options1.addOption("arg", "", true, ", ");
      // Undeclared exception!
//      try { 
        options2.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3809, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "cmdLineSyntax not provided", ">", (Options) null, "cmdLineSyntax not provided");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "80#/5(Ql6";
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-592));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.setLongOptSeparator("2n-Hbm6>{*Ws<(sqh");
      String string0 = "^v^BZN64!bqDZqN8";
      helpFormatter0.setArgName("^v^BZN64!bqDZqN8");
      helpFormatter0.getSyntaxPrefix();
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "Ll\"q_X)";
      helpFormatter0.createPadding(84);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 0, "");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("-");
      int int0 = (-1044);
      String string0 = null;
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("DnnMdH[!6pY*vWsH", true, "YvR2/2{)Y");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'DnnMdH[!6pY*vWsH' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 0;
      String string0 = "73M/UtS^NjP8lf(Eag";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "73M/UtS^NjP8lf(Eag");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 73M/UtS^NjP8lf(Eag
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setArgName(" `c8sa\"b?h!2M@<,js");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim(" `c8sa\"b?h!2M@<,js");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName(" `c8sa\"b?h!2M@<,js");
      MockFile mockFile0 = new MockFile(" `c8sa\"b?h!2M@<,js", " `c8sa\"b?h!2M@<,js");
      MockFile mockFile1 = new MockFile(mockFile0, "2_]_NTSa4r-4i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      mockPrintWriter0.printf("2_]_NTSa4r-4i", objectArray0);
      objectArray0[2] = (Object) " `c8sa\"b?h!2M@<,js";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "2_]_NTSa4r-4i";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockFile1;
      objectArray0[7] = (Object) mockPrintWriter0;
      locale0.getUnicodeLocaleAttributes();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "V", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, 0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string2 = "g>,W-!HV";
      Option option0 = null;
//      try {
        option0 = new Option("-", false, "g>,W-!HV");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth(2938);
      helpFormatter0.getWidth();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      String string1 = "_P}";
      String string2 = "line.separator";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("\n", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '
//         // '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      String string0 = "-";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int0 = 1189;
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1694), options1, 0, 1189);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }
}
