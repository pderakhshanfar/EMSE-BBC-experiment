/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:14:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3962));
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "-", options1, "-", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-9));
      String string0 = "";
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) mockPrintWriter0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      int int0 = 0;
      Option option0 = new Option("", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("C_Mp_", options0, true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      String string0 = "Cannot add value, list full.";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.findWrapPos("usage: ", 1, 1);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZZpHeWTst");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "line.separator");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, 13, options1, 13, 4460);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "-", " ", options0, " ");
      String string0 = "Cannot add value, list full.";
      StringBuffer stringBuffer0 = new StringBuffer("Cannot add value, list full.");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 7, (-1), "Cannot add value, list full.");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOption("s", true, "usage: ");
      helpFormatter0.printHelp(" ", "s", options0, "arg", true);
      helpFormatter0.getNewLine();
      Option option0 = new Option("", "-", true, " | ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 101, "\n", "", options2, (-4508), 1310, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setDescPadding((-2265));
      Options options1 = options0.addOption("s", true, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("s", "s", options1, "s", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("Fd\r)!kB", "", options0, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("", 9, 74);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.US;
      String string0 = "org.apache.commons.cli.OptionValidator";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("   ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "\n");
      Options options2 = options1.addOption((String) null, true, "4Z");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("|", "", options2, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3654);
      helpFormatter0.defaultLeftPad = (-3654);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "--", " ", options0, " ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cLineSytax not provided");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "line.separator", options0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, ";U}", ";U}", (Options) null, 0, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(969, "arg", (String) null, options1, "`P*inU(5D7T>>");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultDescPad = (-3600);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1965), "The option '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "#kJ[)eT`*jnq", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "\n", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "'+&;";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'+&;");
      Locale locale0 = Locale.US;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-449), "'+&;", "'+&;", options0, "&Zy]OuU%", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(37, "32g", "usage: ", options1, "D'");
      helpFormatter0.setDescPadding(173);
      Option option0 = new Option("", false, "Qq|ycgmU");
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "\"u");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = ",hc0gG<_\\l/}+?+_ ";
      helpFormatter0.setSyntaxPrefix(",hc0gG<_l/}+?+_ ");
      String string1 = "[";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "[", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("C", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "#kJ[)eT`*jnq", true, " ");
      helpFormatter0.printHelp(23, "u!n s8d)'ow0d", "", options1, "#kJ[)eT`*jnq", false);
      helpFormatter0.printHelp("has already been selected: '", (String) null, options0, "=.&N7&RPE", true);
      helpFormatter0.setNewLine("=.&N7&RPE");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      stringWriter0.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.US;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 502, "7:g'OF^lYNt/rZ0V", "", options0, 0, 0, (String) null, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "`a(,k{CH1O>ZymE[,G");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.US;
      helpFormatter0.setNewLine("c9*q}Y$SY*`S\b^]M");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "%jlesKie", "", options0, "c9*q}Y$SY*`S\b^]M");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      int int0 = 801;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(801, "arg", "arg", (Options) null, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("C", "-", true, "\n");
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "/";
      objectArray0[2] = (Object) "C";
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format(locale0, "--", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 440, "l)<ZYQ");
      helpFormatter0.setNewLine("l)<ZYQ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 465, "<", "C", options1, (-622), 80, "<");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "~L[7IawEbL7P~v?Y9P", "arg", options0, 465, 465, "`a(,k{CH1O>ZymE[,G", true);
      helpFormatter0.printHelp("^W_7VG=h9#9O_|Bq2", (String) null, options0, "&%ZgPpJmf*3B", true);
      Options options1 = options0.addOption("hgPx8", "usage: ", true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 465, ", ", options1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "~L[7IawEbL7P~v?Y9P", "arg", options0, 465, 465, "`a(,k{CH1O>ZymE[,G", true);
      helpFormatter0.printHelp("^W_7VG=h9#9O_|Bq2", (String) null, options0, "&%ZgPpJmf*3B", true);
      Options options1 = options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 465, ", ", options1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 45;
      String string0 = "%'qf";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 45, "%'qf");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("<");
      Locale locale0 = new Locale("-", " ", "arg");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "8SkS)WRK", false, " ");
      // Undeclared exception!
      helpFormatter0.renderOptions((StringBuffer) null, 4105, options1, 4105, 4105);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("C", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "#kJ[)eT`*jnq", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("l)<ZYQ", ", ", options1, "", true);
      helpFormatter0.findWrapPos("\n", 3, 3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      helpFormatter0.setWidth(157);
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 157, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 4125, 4125);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 3, 446);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "~L[7IawEbL7P~v?Y9P", "arg", options0, 465, 465, "`a(,k{CH1O>ZymE[,G", true);
      helpFormatter0.printHelp("^W_7VG=h9#9O_|Bq2", (String) null, options0, "&%ZgPpJmf*3B", true);
      Options options1 = options0.addOption("hgPx8", "usage: ", true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 465, ", ", options1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[5] = (Object) "!Rkn0Gljb,!`g+>?(l";
      objectArray0[6] = (Object) null;
      int int0 = helpFormatter0.defaultDescPad;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "\"81I'cvIlZdF/'1[", options0, 1, 3, (String) null);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1, 1);
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.printHelp(74, "--", "arg", options0, "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Option option0 = new Option("", ")N)-R &Z+T3");
      options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 432, options1, 432, 31);
      options0.toString();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("[ARG...]", (-944), 403);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 4125, 4125);
      helpFormatter1.setNewLine("-");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((-1250), "*Lc", "&5fyq]!}Z)=-}", options0, "*Lc");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(10, "", (String) null, options0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(168);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "<";
      objectArray0[4] = (Object) "<";
      objectArray0[5] = (Object) "9JSfI~Q";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "9JSfI~Q", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 465, " ");
      helpFormatter0.setNewLine(".m<{n");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      helpFormatter0.printOptions(mockPrintWriter0, 432, options1, 432, 31);
      options0.toString();
      String string0 = "-";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 403;
      Option option0 = new Option("", "-");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(432, "", "-", options2, "-", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "-", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NO_ARGS_ALLOWED");
      Locale locale0 = Locale.US;
      int int0 = 31;
      int int1 = 4100;
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 4100, options0, 4113, 1978);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "-", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options1 = new Options();
      String string0 = "";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 465, "~L[7IawEbL7P~v?Y9P", "j}@t", options1, 465, 2732, "", false);
      MockFile mockFile0 = new MockFile("\n", "~L[7IawEbL7P~v?Y9P");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter(mockFile0, "I58F$M6}4n-F@#c");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // I58F$M6}4n-F@#c
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp((PrintWriter) null, 430, ">*!_j*EV", "~L[7IawEbL7P~v?Y9P", options0, 13, 74, "-", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      helpFormatter0.printOptions(mockPrintWriter0, 432, options1, 432, 31);
      options0.toString();
      helpFormatter0.printHelp("q'vZ}IHTR", "q'vZ}IHTR", options1, "-", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, options1, 34, (-2159));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "\n");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      options1.getOption("--");
      String string0 = "--";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) stringWriter0;
      mockPrintWriter0.format("--", objectArray0);
      int int0 = helpFormatter0.defaultDescPad;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options1, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Options options1 = new Options();
      int int0 = 465;
      String string0 = "~L[7IawEbL7P~v?Y9P";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "~L[7IawEbL7P~v?Y9P", "", options1, 465, 465, "`a(,k{CH1O>ZymE[,G", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", ",[Sg3x`I_HY)}Od", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 465, "--", " ", options1, 1, 1, "M?6gPzP;/0qOE?<422", false);
      MockFile mockFile0 = new MockFile("", "\n");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter("M?6gPzP;/0qOE?<422", "usage: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // usage: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("qiNEg7Q0#^Ix7>kBV", options0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(168);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      Locale locale0 = Locale.US;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-963), (String) null, "'", options0, 887, 887, "'", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("2", "-", true, "\n");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter2.format("2", objectArray0);
      helpFormatter0.findWrapPos("2", 57, 73);
      helpFormatter0.printHelp("5Gx>@=,T>Bmg@>", (String) null, options1, " :: ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ]", "5Gx>@=,T>Bmg@>", options0, 55, 73, "5*");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("74^v6z3i");
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      String string0 = "3o'F)'Z@wV6";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 894, "has already been selected: '", (String) null, options0, 894, (-2964), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 1, 74);
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 77, "", "]W2DHxU*]", options0, 77, 0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      String string1 = null;
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options1 = options0.addOption((String) null, false, "--");
      helpFormatter0.setLongOptPrefix(" :: ");
      helpFormatter0.printHelp(33, " :: ", (String) null, options1, " :: ", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " :: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 9;
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-2185));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      helpFormatter0.printHelp("q'vZ}IHTR", "q'vZ}IHTR", options1, "-", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, options1, 34, (-2159));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "!Rkn0Gljb,!`g+>?(l";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) stringWriter1;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 119, "!Rkn0Gljb,!`g+>?(l", "", options0, 263, 0, "n31&Yrsl2v7Y&]{e");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1010), "n31&Yrsl2v7Y&]{e");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      mockPrintWriter0.format((Locale) null, "", objectArray0);
      mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 16, 798);
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1789);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1789), "line.separator", "", (Options) null, "line.separator", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Options options1 = new Options();
      String string0 = "]";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 465, "~L[7IawEbL7P~v?Y9P", "sSBE~H0G\"W:*", options0, 465, 465, "]", true);
      MockFile mockFile0 = new MockFile("sSBE~H0G\"W:*", "");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter(mockFile0, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      helpFormatter0.printHelp("q'vZ}IHTR", "q'vZ}IHTR", options1, "-", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, options1, 34, (-2159));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "hB24J A%";
      helpFormatter0.setArgName("hB24J A%");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1829, options0, 1829, 1829);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, (-231));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('F');
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      int int0 = (-2758);
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1988), options0, (-1988), (-2758));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("hB24J A%");
      int int0 = (-414);
      Options options0 = new Options();
      int int1 = 971;
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 971, "", "hB24J A%", options0, 971, (-287), "", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("\n", "\n", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) options0;
      stringWriter1.append((CharSequence) "\n");
      objectArray0[5] = (Object) "!Rkn0Gljb,!`g+>?(l";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "\n", objectArray0);
      helpFormatter0.printHelp("Ja/H@Zk&@=Q", options0, true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(2);
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-442), "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("!Rkn0Gljb,!`g+>?(l", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      mockPrintWriter0.format("arg", objectArray0);
      String string0 = "has already been selected: '";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-442), "has already been selected: '", "`[JK{X17;sI47tN1}[Q", options0, (-442), (-442), "PY:=:NhZ2_/iGgutU");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getSyntaxPrefix();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("usage: ");
      optionGroup0.addOption(option0);
      option0.setArgName("<");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("]xB;SMQy");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("arg");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) mockPrintWriter0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "/", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 651, "");
      MockFile mockFile0 = new MockFile("O1+PQ9y", "-");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter3 = (MockPrintWriter)mockPrintWriter1.append('r');
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter3, 620, 653, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("-", "-");
      String string0 = "[ Options: [ short ";
      MockFile mockFile1 = new MockFile(mockFile0, "[ Options: [ short ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "!mtpTu1vg2?p3";
      objectArray0[2] = (Object) mockFile1;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockFile0;
      mockPrintWriter0.printf(locale0, "!mtpTu1vg2?p3", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      int int0 = (-415);
      int int1 = 37;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-415), 37, "Illegal option name '");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "h&2n4)J A%";
      helpFormatter0.findWrapPos("h&2n4)J A%", 1, 634);
      int int0 = (-995);
      String string1 = "[UuzQF@#";
      Options options0 = new Options();
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        options0.addOption("].`.^!h!1au;^jU7mI", true, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '].`.^!h!1au;^jU7mI' contains an illegal character : ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "!Rkn0Gljb,!`g+>?(l";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) stringWriter1;
      mockPrintWriter0.format((Locale) null, "\n", objectArray0);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-826));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = (-2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      mockPrintWriter0.println(charArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "j:K2o'1s`");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7%j\"\"bz";
      int int0 = 1;
      int int1 = helpFormatter0.defaultLeftPad;
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "NO_ARGS_ALLOWED", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1, 1, "]");
      MockPrintWriter mockPrintWriter1 = null;
//      try {
        mockPrintWriter1 = new MockPrintWriter((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.setNewLine(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 1, 30);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      options0.addOption("", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter0.format("\n", objectArray0);
      objectArray0[3] = (Object) mockPrintWriter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "Nr_M-&;hLv4");
      helpFormatter0.rtrim("Nr_M-&;hLv4");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "/", objectArray0);
      Option option0 = new Option("", true, "usage: ");
      helpFormatter0.printHelp("C_Mp_", options0, true);
      optionGroup0.setSelected(option0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "y} ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "a#G4O";
      Option option0 = null;
//      try {
        option0 = new Option("a#G4O", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'a#G4O' contains an illegal character : '#'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.setNewLine(" ");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "arg");
      int int0 = 1604;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1604, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.setLongOptSeparator("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(441);
      // Undeclared exception!
//      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, (Options) null, 902, 902);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 1618;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int1 = (-495);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1618, options1, 1618, (-495));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "/", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "y} ");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ke ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = (-328);
      String string1 = "p1";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-328), "p1");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('L');
      int int0 = 1522;
      // Undeclared exception!
//      try { 
        stringWriter1.append((CharSequence) "arg", 1, 1522);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "has already been selected: '";
      options0.getOptionGroups();
      options0.getMatchingOptions("org.apache.commons.cli.HelpFormatter$OptionComparator");
      options0.hasOption("has already been selected: '");
      options0.hasShortOption("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("/ZN", 1, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("/ =1L+9KSK{I");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aKQsnx=O(TCwZNHn");
      String string0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (String) null, (Options) null, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-442);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "!Rkn0Gljb,!`g+>?(l";
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "!Rkn0Gljb,!`g+>?(l";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "\n", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 31, "", (String) null, options0, 0, 31, "IsRr]~0)BCqn;mNJ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("h&2n4)J A%");
      int int0 = (-414);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-414), "h&2n4)J A%", "h&2n4)J A%", options0, (-414), (-414), "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options0, 4125, 4125);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      StringBuffer stringBuffer2 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer2, 1, 74, "");
      assertEquals("arg", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7kxLbRl");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("k#C-&k[66iz4]@R3.vF", "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        options0.addOption("-", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "NO_ARGS_ALLOWED");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "UFH~kVrT'z+iAW^";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setWidth(654);
      Options options2 = options1.addOption("arg", "-", false, "usage: ");
      Option option0 = new Option((String) null, "C*='fTn.Q!US");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
//      try { 
        options3.addOption("A CloneNotSupportedException was thrown: ", "-", false, "]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("--", "' was specified but an option from this group ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8]g";
      helpFormatter0.setOptPrefix("8]g");
      helpFormatter0.defaultSyntaxPrefix = "8]g";
      helpFormatter0.setDescPadding((-748));
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("Fg");
      helpFormatter0.setLongOptSeparator("Fg");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = null;
//      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }
}
