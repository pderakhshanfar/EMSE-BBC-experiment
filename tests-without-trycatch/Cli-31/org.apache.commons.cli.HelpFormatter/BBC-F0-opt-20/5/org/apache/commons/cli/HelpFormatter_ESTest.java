/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:15:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 13, options0, 5034, 13);
      helpFormatter0.printHelp("%dTTP", "%dTTP", options0, "%dTTP");
      // Undeclared exception!
      helpFormatter0.createPadding(5034);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.append('o');
      int int0 = 0;
      String string0 = "s";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "s", "*Ht`Vj@", options0, 0, (-1298), "*Ht`Vj@");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-610);
      Options options1 = options0.addOption("arg", "--", true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", options1, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptPrefix((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLeftPadding((-286));
      helpFormatter0.setDescPadding(15);
      helpFormatter0.setNewLine(">");
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-990));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.setLeftPadding(2763);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getArgName();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 2785, 2785);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getArgName();
      helpFormatter0.defaultNewLine = "8tqy/>Mw'7SMK}/";
      helpFormatter0.setLongOptPrefix("4OaWD");
      helpFormatter0.findWrapPos("arg", 72, 1);
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "line.separator");
      Options options1 = options0.addOption("arg", false, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(72, "[", "4OaWD", options1, "[", false);
      helpFormatter0.setLeftPadding(1966);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("arg");
      helpFormatter0.createPadding(1968);
      helpFormatter0.getDescPadding();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      options1.getOptionGroups();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "+4SBoF(8D,Bvb7V$<", options1, "=#$`yNJ$?_p", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.OptionGroup");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setArgName("^#6!\">. 1-lDm");
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(2792);
      helpFormatter0.setDescPadding(2782);
      helpFormatter0.defaultWidth = (-53);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(2792);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      String string0 = "3J!W;+-)bz-y$5";
      int int0 = (-14);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 2716, options3, 2719, 2719);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("n}PN", "2dW`roe;[~snjjv", options0, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-4074));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 0;
      String string0 = "GPK|b-y_;";
      Options options0 = null;
      String string1 = ">vp>@`__IvqE";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "GPK|b-y_;", "GPK|b-y_;", (Options) null, ">vp>@`__IvqE", false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "--");
      helpFormatter0.printHelp("-", options1, true);
      helpFormatter0.findWrapPos("usage: ", 3, 3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "r1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 65, "r1", "r1", options0, (-1), 65, "9]&");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-934);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-934), "CID3S462:");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("QOm");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("QOm", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 38, "QOm", options1);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("QOm", options1, false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", " ", options0, " ");
      helpFormatter0.defaultDescPad = (-1189);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(1314, "has already been selected: '", "has already been selected: '", options0, "has already been selected: '", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*y~!t`5ex# ");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-53));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", (Options) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*y~!t`5ex# ");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-53));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, "*y~!t`5ex# ", options0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(15, "-]fKR/}", "7PHhD?Hg=9i3q]", options0, (String) null);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultOptPrefix = "R_+'_w*ey5an";
      Options options0 = new Options();
      options0.addOption("arg", "R_+'_w*ey5an", true, "R_+'_w*ey5an");
      // Undeclared exception!
      helpFormatter0.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*y~!t`5ex# ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 91, "*y~!t`5ex# ", (String) null, options0, 91, 91, ":?;Nz_5t'C>U>3[iDP", false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("B");
      helpFormatter0.setArgName("<");
      MockFile mockFile0 = new MockFile("'E");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "3|");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*y~!t`5ex# ");
      Options options0 = new Options();
      options0.hasLongOption("*y~!t`5ex# ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3872, "*y~!t`5ex# ");
      options0.getOptionGroups();
      helpFormatter0.setLeftPadding((-53));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("K6yf42_+sVz", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.getOptionGroups();
      helpFormatter0.setLeftPadding((-19));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1733, "sXv\"rR%Rx-,K'S}", options0);
      helpFormatter1.rtrim("has already been selected: '");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "Sf%;k$6Af[s[ ", options0, "<", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2367, "6K 4>21/UH#", "", options0, 2367, 2, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = null;
      helpFormatter0.setLongOptSeparator("ZT");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.Option";
      boolean boolean0 = false;
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", "--", (Options) null, "", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("4kM6fZ&~7Z", "dHaf%082IR+%]PKPMC", (Options) null, "&^jlG!~zSuJ~ AL>?7");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("1Om");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      helpFormatter1.printWrapped(printWriter0, 2657, 1, "   ");
      Options options0 = new Options();
      Options options1 = options0.addOption("OR", false, "OR");
      Option option0 = new Option("", (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp("aM[y!''", options2, false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "*il@d)k*/53.w($z|c";
      helpFormatter0.setDescPadding(32);
      helpFormatter0.setLongOptPrefix("*il@d)k*/53.w($z|c");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 33, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("1Om");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 208, options1, 208, 44);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, " ] [ long ", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "U";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("U", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ho@Io$zdO");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3861), "_>[i=\"miT");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, (String) null, options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 53);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter1, 74, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("]");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P,YB<5H7ni]-=,1f(");
      mockPrintWriter0.println((double) 74);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1221), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",l5{iKxXQ[$Y");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), ",l5{iKxXQ[$Y", "3U%=e", (Options) null, (-1), (-1076), ",l5{iKxXQ[$Y");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      options0.helpOptions();
      options0.hasLongOption("+N$k");
      helpFormatter0.defaultArgName = "";
      options0.hasShortOption("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+N$k");
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp("arg", "arg", options0, "arg", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, ")&UI]r.7,5", "", options0, 254, 3, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "8";
      StringBuffer stringBuffer0 = new StringBuffer(67);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('d');
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "--", options0, 67, 1, "v?N\"<uoKb!oQ", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.setWidth((-1148));
      Options options1 = options0.addOption("arg", "-VY[xr]", false, "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-VY[xr]", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qIR", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "qIR", true, "e9s|W_K-B");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-161), ")#V", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P^%TkQ");
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, (-2506), (-2506));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1, "\n", "", options0, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("_8a|?l54-D+p", "'", options0, "\n", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "fI@iGPG|sp4K0*=_", "", options0, "[ Options: [ short ", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("4kM6fZ&~7", "org.apache.commons.cli.HelpFormatter$1", options0, "%pQn{1BQf+F");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter0.append('\'');
      Options options1 = new Options();
      String string0 = "'";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 9, (String) null, "'", options0, 9, (-2799), (String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 3, 74);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim((String) null);
      String string0 = helpFormatter2.defaultSyntaxPrefix;
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = 91;
      String string1 = "kdG*uPI";
      Options options0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(91, "kdG*uPI", "]", (Options) null, "]", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options0, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append(';');
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 2328, "2&2GkOeQmxc", "--", options1, 1, 3971, "--", false);
      Options options2 = new Options();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2654, "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("I>)i6%~KN");
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = null;
      helpFormatter0.rtrim(" ");
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("I>)i6%~KN");
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultArgName = "I>)i6%~KN";
      helpFormatter0.rtrim(" ");
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "I>)i6%~KN", "kM", options0, "A", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options0, "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("1Om");
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      String string0 = " :: ";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "   ", options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("1O");
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "8A9<lj$PNWJ&#)N`", options0);
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.createPadding(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(74);
      helpFormatter0.rtrim("h'kDo2i<i");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options0, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append(';');
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 2328, "2&2GkOeQmxc", "--", options1, 1, 1586, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      Options options2 = new Options();
      helpFormatter0.setLeftPadding(2);
      helpFormatter0.renderOptions(stringBuffer0, 1964, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-608);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, " ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-608), options1, (-1351), 31);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      boolean boolean0 = true;
      Option option0 = new Option("", true, "UT*Wv");
      helpFormatter0.rtrim("vTa");
      int int0 = (-1460);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "Bx,dTK", options0, " ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      mockPrintWriter0.append('+');
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      Options options1 = new Options();
      helpFormatter1.printOptions(printWriter0, (-1), options1, 13, 74);
      int int0 = 2;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1555, "arg", "arg", options0, 1574, 2, "", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = null;
//      try {
        stringBuffer1 = new StringBuffer((-1853));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1, "\n", "", options0, "-");
      options0.addOption("", ">X+2~X|A<.", false, "\n");
      helpFormatter0.createPadding(74);
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter0.setLeftPadding(105);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("[ option: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "8A9<lj$PNWJ&#)N`", options0);
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1119, 1185, "");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2471), 10, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("--");
      helpFormatter0.setNewLine("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      int int0 = 10;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "--", options0);
      helpFormatter0.setArgName("--");
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1934, 3, "--");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Option option0 = new Option("", true, "UT*Wv");
      helpFormatter0.rtrim("vTa");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "D{Y6eF2 sX!RgR%");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1460), "", options2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "lhO}Pg", true, " ");
      options1.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth((-3633));
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.rtrim("lhO}Pg");
      String string0 = "jY^rCQMT{L/)|";
      File file0 = MockFile.createTempFile("NO_ARGS_ALLOWED", "jY^rCQMT{L/)|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/NO_ARGS_ALLOWED0jY^rCQMT{L");
      helpFormatter0.getDescPadding();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      String string1 = "-X(g pcO]";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-3633), "-X(g pcO]");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options1, "");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1541), 1, "");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "lhO}Pg", true, " ");
      options1.toString();
      helpFormatter0.printHelp("usage: ", options1);
      helpFormatter0.setWidth((-3633));
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.rtrim("lhO}Pg");
      File file0 = MockFile.createTempFile("NO_ARGS_ALLOWED", "jY^rCQMT{L/)|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/NO_ARGS_ALLOWED0jY^rCQMT{L");
      helpFormatter0.getDescPadding();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-3633), "-X(g pcO]");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "lhO}Pg", true, " ");
      options1.toString();
      StringWriter stringWriter0 = new StringWriter(1575);
      stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1575, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("}*xc-Xf*l^p*`'");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", "ZGtT$P", options0, "arg", false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " :: ", options0);
      helpFormatter0.setArgName("vTa");
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, "has already been selected: '", options0, "vTa", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Options options0 = new Options();
      options0.addOption("arg", true, "8>A2FdC");
      options0.hasLongOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " :: ", options0);
      helpFormatter0.setArgName("vTa");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options1, "");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append(';');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      options1.hasLongOption("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ">X+2~X|A<.";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(1, "2]HgmTNc+I7@b/@j7U", (String) null, options0, ">X+2~X|A<.");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(2027, "", "", options0, "1y");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " :: ", options0);
      helpFormatter0.setArgName("vTa");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, " :: ");
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("", "", options0, "}Q:A*23mIj]5(2{", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(" M9S~RvD", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 887, "@HX}$7^(.giN)", "", options0, (-590), 2, " M9S~RvD", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("jG|>S!8]FUj<");
      helpFormatter0.findWrapPos("6|Vr7T={Pb#i", 64, 44);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ypTA([^cn04;6!:Ma/5");
      Option option0 = new Option((String) null, true, "7<IB5z$,`pz8pJ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("A)E-|P");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "ypTA([^cn04;6!:Ma/5", false, (String) null);
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3, "ypTA([^cn04;6!:Ma/5", options1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jG|>S!8]\\FUj<";
      helpFormatter0.createPadding(0);
      StringWriter stringWriter0 = new StringWriter(63);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      int int1 = 887;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, ">", "a:{N(Q", options0, 0, 887, "a:{N(Q", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(37, "us\"9?%at{[&", "<", options0, "us\"9?%at{[&");
      // Undeclared exception!
//      try { 
        options0.addOption("A CloneNotSupportedException was thrown: ", "-", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      helpFormatter0.setNewLine("^");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "-", options0);
      helpFormatter0.setArgName("vTa");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 10, "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M)2FPL`2?";
      helpFormatter0.setNewLine("M)2FPL`2?");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3045, ">LCNE,3*59x~S", ">LCNE,3*59x~S", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Options options0 = new Options();
      options0.hasLongOption("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, " :: ", "", options0, 10, 117, "+AtEUws");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " :: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "{BVmy|J)6c\"r /}p*", "", options0, 3, 24, "rW<u[p0[");
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("rW<u[p0[");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "rW<u[p0[", options0);
      helpFormatter0.setArgName("' was specified but an option from this group ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "{BVmy|J)6c\"r /}p*", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Options options0 = new Options();
      options0.hasLongOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " :: ", options0);
      helpFormatter0.setArgName("vTa");
      helpFormatter0.printHelp(" :: ", "", options0, "org.apache.commons.cli.HelpFormatter", false);
      helpFormatter0.printHelp(" :: ", options0, false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", "", options0, 0, (-2), "org.apache.commons.cli.Util");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter1.setNewLine("ECA(-*NvUh_ X0l|Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      options1.hasLongOption("jVpdng'FRw>((6zgj[h");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1105, "arg", options0);
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      helpFormatter1.printHelp("<", "p-];9`cm", options1, "<", true);
      helpFormatter0.printHelp("usage: ", options1, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      int int0 = 0;
      String string0 = "<6KtKC3fn";
      int int1 = 26;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 26, (Options) null, 5, 1772);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "-");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 2569;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1498), options0, 2569, 2569);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOption("arg", "Cannot add value, list full.", true, "usage: ");
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options1);
      helpFormatter1.setArgName("rcM)myv/CWOR9u#IR");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2574, "usage: ", "'uQJ$CGVz @P608NS", options1, 3, 1, "", true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options1, "");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('+');
      Options options2 = new Options();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter1 = printWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter1, 245, "arg", "2&2GkOeQmxc", options0, 55, 245, " [ARG]", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 55, 55, "");
      helpFormatter0.rtrim("[");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("arg", "2&2GkOeQmxc", true, "vBGd[d");
      options1.addOption("", "", true, " ");
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.toString();
      Options options4 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "lhO}Pg", true, " ");
      options1.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth((-3633));
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.rtrim("lhO}Pg");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, (String) null);
      helpFormatter0.printHelp("[", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-65), (-65), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "PQObkn]PwthQw";
      String string1 = "2&2GkOeQmxc";
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options1, "");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append(';');
      int int0 = 2328;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      options0.getOption("--");
      objectArray0[2] = (Object) mockPrintWriter0;
      // Undeclared exception!
//      try { 
        mockPrintWriter1.format((String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(64);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "                                                                ", "jG|>S!8]FUj<", options0, 37, 887, "", true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "arg", "arg", options0, (-1092), (-1092), "VOs%R}cDH", true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(93);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("oR", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.PRC;
      int int0 = (-1092);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1092), "", "Wbj]$f'VH/{:3o", options0, (-1), (-1), "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("M)2FPL`2?");
      helpFormatter0.setNewLine("M)2FPL`2?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "g-QbsTud";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1563), "g-QbsTud", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      int int0 = 31;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1092), "#pC}|6/}}x", "", options0, 31, 177, "#pC}|6/}}x", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      String string1 = "VOs%R}cDH";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "^sNv_v", "p&*ms'=wzqy", options0, 0, 2, " ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-36);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("COx|,F", "{'Aqtj.G", options0, "org.apache.commons.cli.HelpFormatter", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "PQObkn]PwthQw";
      Options options0 = new Options();
      String string1 = "";
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options1, "");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append(';');
      int int0 = 2328;
      String string2 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      options0.getOption("--");
      objectArray0[2] = (Object) mockPrintWriter0;
      // Undeclared exception!
//      try { 
        mockPrintWriter1.format((String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "lhO}Pg", false, " ");
      options1.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth((-3633));
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("LC4 \t$", "org.apache.commons.cli.HelpFormatter", options1, "NO_ARGS_ALLOWED", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "lhO}Pg", true, " ");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth((-3633));
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " :: ", options0);
      helpFormatter0.setArgName("vTa");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = 111;
      helpFormatter0.renderWrappedText(stringBuffer0, 111, (-2190), "org.apache.commons.cli.OptionGroup");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C9KAJ^H@wQ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = 'G';
      int int2 = (-2045);
      int int3 = 32;
      // Undeclared exception!
//      try { 
        mockPrintWriter0.write(charArray0, (-2045), 32);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "org.apache.commons.cli.OptionGroup");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = null;
      int int0 = 1292;
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "arg");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Options options0 = new Options();
      options0.hasLongOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1508, "", options0);
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp("o/6yKBP", "vTa", options0, "vTa", false);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1;
      String string0 = null;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = null;
      String string1 = ")wuGo5mWn!QWQDC+y<";
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", (Options) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("M)2FPL`2?");
      helpFormatter0.setNewLine("M)2FPL`2?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "g-QbsTud";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1563), "g-QbsTud", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "gW~dK1w0!~;!Y";
      String string0 = "";
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, "gW~dK1w0!~;!Y");
      options0.addOption("", true, "[ option: ");
      options0.getOptions();
      options0.getOption("arg");
      String string1 = "YKU^oM4q[G3w_{/*";
      options0.hasLongOption("YKU^oM4q[G3w_{/*");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(0, "", "", options0, ".Qg}_;VU.%i]k\";Ky", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      int int0 = (-1);
      helpFormatter0.defaultWidth = (-1);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1888));
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", true, "usage: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("?Idy");
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setNewLine("A CloneNotSupportedException was thrown: ");
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.defaultLeftPad = 1606;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 1535, " ");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      StringBuffer stringBuffer0 = new StringBuffer(67);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("?", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      options2.addOption("", "arg", true, "-");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("?", options3);
      Option option1 = null;
//      try {
        option1 = new Option("{}m", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '{}m' contains an illegal character : '{'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "*|nea*7u");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("pd<k*A-V]K`~oJ", ">~'", options1, "");
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      mockPrintWriter0.append('X');
      Options options2 = new Options();
      int int0 = (-1853);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, 11, (-1), "O", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      int int0 = 42;
      helpFormatter0.setNewLine("A CloneNotSupportedException was thrown: ");
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.defaultLeftPad = 1606;
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 42, 1535, " ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      helpFormatter0.printHelp("PQObkn]PwthQw", "2&2GkOeQmxc", options0, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append(';');
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 2328, "2&2GkOeQmxc", "--", options1, 1, 1586, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 4880, (-2156), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.setDescPadding(1300);
      helpFormatter0.getWidth();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 74, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ", ";
      helpFormatter0.setLongOptPrefix(", ");
      int int0 = 1995;
      helpFormatter0.setWidth(1995);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("\n", ", ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // , 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "lhO}Pg", true, " ");
      options1.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      helpFormatter0.setWidth((-3633));
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "lhO}Pg", true, " ");
      options1.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1);
      options1.hasLongOption("[ Options: [ short ");
      Options options2 = options0.addOption("", "arg", true, (String) null);
      // Undeclared exception!
//      try { 
        options2.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-2);
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
//      try {
        option0 = new Option("usage: ", true, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 146;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("Yl7kzr.'J>sDTQ6;v", false, "--");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'Yl7kzr.'J>sDTQ6;v' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}`@(Vr>X}c1m<[=_";
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultNewLine = "}`@(Vr>X}c1m<[=_";
      helpFormatter0.setSyntaxPrefix("   ");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "z&C7@$");
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultWidth = 1359;
      options0.hasLongOption("arg");
      Options options2 = options1.addOption((String) null, "arg", true, " V2tUc'F@'?Spapo2t5");
      // Undeclared exception!
//      try { 
        options2.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-", 1, 1);
      StringWriter stringWriter3 = stringWriter2.append('W');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      stringWriter3.append('W');
      Options options0 = new Options();
      int int0 = 112;
      options0.hasLongOption("PrwrD");
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 112, (-2454));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#0iw+JP'3Az+6xO'";
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultNewLine = "#0iw+JP'3Az+6xO'";
      helpFormatter0.getOptPrefix();
      String string1 = ":bJ(zE+mh<m!?mg0B";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      helpFormatter0.setNewLine("D{Y6eF2 sX!RgR%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTa");
      Options options0 = new Options();
      helpFormatter0.printHelp("ZEkeiQy|$'[js", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(103);
      helpFormatter1.setSyntaxPrefix((String) null);
      helpFormatter0.createPadding(1);
      helpFormatter0.setDescPadding(64);
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = null;
      int int0 = 1;
      Options options0 = new Options();
      options0.addOption("arg", "usage: ", false, "arg");
      Option option0 = null;
//      try {
        option0 = new Option("-", "arg", false, "#yGw`'");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.defaultLongOptPrefix = "Yc.Db }kT$*=N";
      helpFormatter0.setNewLine("Hl-tUws.owyX;?<Yb");
      helpFormatter0.defaultArgName = "Hl-tUws.owyX;?<Yb";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("I>)i6%~KN");
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-569), (-569));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((float) 74);
      String string0 = "\"9T\"nW&0>8";
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1969), (-1969), "\"9T\"nW&0>8");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('^');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.forLanguageTag("");
      String string1 = ">";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.format(locale0, ">", objectArray0);
      int int0 = 0;
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        options1.addOption("--", "--", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '--' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setOptPrefix("   ");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      PrintWriter printWriter0 = null;
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
//      try {
        option0 = new Option("-", "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "jG|>S!8]\\FUj<";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "jG|>S!8]FUj<", "jG|>S!8]FUj<", options0, "jG|>S!8]FUj<");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "Rd$eOA3=<pR'cVpvT)-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("<*FZ6");
      Option option0 = new Option("", " 2\"w");
      Options options3 = options2.addOption(option0);
      option0.clearValues();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1654, "", (String) null, options3, (-1017), (-1241), ".", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M.\"{";
      Options options0 = new Options();
      String string1 = null;
      boolean boolean0 = false;
      Option option0 = null;
//      try {
        option0 = new Option("[!&9I#Ot4d%", (String) null, false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[!&9I#Ot4d%' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }
}
