/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:05:25 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      String string0 = "E";
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options1 = options0.addOption("E", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = 278;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 278);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2));
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("1_CC;&3X(.Q", options0, false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      helpFormatter0.defaultDescPad = (int) (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("V|G!@`Z");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 31, (String) null, "--", options0, (-128), 63, "X$", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 777;
      helpFormatter0.defaultDescPad = 777;
      helpFormatter0.createPadding(777);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultOptPrefix
      String string0 = ">Gxz";
      Options options0 = new Options();
      options0.hasOption("");
      Option option0 = new Option("arg", "kJrH*M#nxl", false, " ");
      options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 777, options0, 63, 777);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.defaultWidth = (-1207);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      String string0 = "KU2rj~Gc=8V'w>-(";
      helpFormatter0.rtrim("KU2rj~Gc=8V'w>-(");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "N:!A+K", "mxCIey2s#+~h", options0, 0, 4098, "mxCIey2s#+~h");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      String string0 = null;
      String string1 = "J";
      Options options0 = new Options();
      String string2 = "[].QD";
      Option option0 = null;
//      try {
        option0 = new Option("[].QD", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[].QD' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      helpFormatter0.defaultWidth = (-2);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("--", options1, true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setDescPadding((-1951));
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(42, "dAKKz+!puoIF 5Mj\"2", "dAKKz+!puoIF 5Mj\"2", options0, "-");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Cannot add value, list full.", "Cannot add value, list full.", options0, "Cannot add value, list full.", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(13, "YJO*", "", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((int) (byte)44, "P`?", "HU", (Options) null, "usage: ", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " IN7$W>IAk{wHn^Yb2");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim(" :: ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", "B7", false, "+!y");
      Option option0 = null;
//      try {
        option0 = new Option("%,w9~hsfg0opPp", false, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '%,w9~hsfg0opPp' contains an illegal character : '%'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", false, " ");
      helpFormatter0.printHelp("-", "-", options0, "-");
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions((PrintWriter) null, 32, options0, 2, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "O_L8 N", "   ", options0, "");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.printf("E C;oZlcD9", (Object[]) null);
      Options options0 = new Options();
      Option option0 = new Option("", " ] [ long ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, 14, "IT", "", options1, 1, (-447), "");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.printHelp("The option '", options1);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 9, 9);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, (-149), "\n");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 10, options0, 10, 10);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      helpFormatter0.setDescPadding((-942));
      String string0 = "*]K?8$h> Vbl";
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", "", options0, "*]K?8$h> Vbl", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptPrefix("9I}E9yNDF:ZyD");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-547));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1396, "usage: ");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "";
      Options options1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "-", options0, 3, 44, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("I<iimzM*N~TrKL", "g", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Object object0 = new Object();
      Locale locale0 = Locale.forLanguageTag("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3, "usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 74, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "' was specified but an option from this group ";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "' was specified but an option from this group ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options0, 66, (-1));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      option0.setArgName("usage: ");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("x%bX8[(Sp4M");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      option0.setArgName("usage: ");
      optionGroup0.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "q%KwJHH;s81,/'Ypk", "q%KwJHH;s81,/'Ypk", options1, "W),w%~d");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("V|G!@`Z");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp(printWriter0, 31, (String) null, "--", options0, (-145), 63, "X$", false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp(108, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options1 = new Options();
      options1.addOption("6vIPPh", "#qN~", true, "@-%'0,Lcm3]+N)");
      helpFormatter0.printHelp("aDRhKcJJ= jW\"{>]@", "#qN~", options0, "6vIPPh");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(3, "", "H:]+otB01_4xE:F", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 74, options0, 1, 2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.OptionGroup");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append(',');
      int int0 = 44;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "usage: ", "SaIp&f[MMU0dph&o9", options0, (-1791), 1, "--", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("?q93x", options0, false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(117);
      File file0 = MockFile.createTempFile("K<JGKX", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "K<JGKX";
      Object object1 = new Object();
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[6] = (Object) helpFormatter0;
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "|jmx.1Qa59@", options0, (-1), 117, "usage: ", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 81, "%k_kaM<3fkNp)i@`?sZ");
      helpFormatter0.printHelp("%k_kaM<3fkNp)i@`?sZ", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.createPadding((-921));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption("arg", false, "\n");
      Options options2 = options1.addOption((String) null, "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("L8k0uJiMj", options3, false);
      helpFormatter0.defaultWidth = (-3026);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("-", "L8k0uJiMj", options3, "'0I_5%%x^y0O<");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, (String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "", true, "<=GL8MH,`mk9\"#");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", true, "");
      options4.addOption("ee", false, "arg");
      Options options5 = options2.addOption("", "arg", true, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("arg", options5, true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("?q93x", options0, false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(117);
      File file0 = MockFile.createTempFile("K<JGKX", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("usage: ", options2, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      List list0 = options0.helpOptions();
      Option option0 = new Option("arg", "-");
      option0.setType("usage: ");
      optionGroup0.setRequired(false);
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Object object0 = new Object();
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = object0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      String string0 = ":t2} </BR";
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped(printWriter0, (-1), ":t2} </BR");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      optionGroup0.setRequired(false);
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("v0fKu\"n2Z#:o]'#6", options1, true);
      helpFormatter0.getSyntaxPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("V|G!@`Z");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      helpFormatter0.printHelp(printWriter0, 2071, " ", " ", options0, 2071, 2, "usage: ", false);
      helpFormatter0.setWidth(2);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, (String) null, "V|G!@`Z", options0, (int) (byte) (-108), (-184), ",._#vADDO_");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("--");
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "");
      helpFormatter0.printHelp("arg", "arg", options0, "aDRhKcJJ= jW\"{>]@");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 3, (-2043), "aDRhKcJJ= jW\"{>]@");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("?q93x", (Options) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("?q93x", options0, false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(117);
      File file0 = MockFile.createTempFile("K<JGKX", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "K<JGKX";
      Object object1 = new Object();
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "?q93x";
      Object object2 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, "\n");
      helpFormatter0.printUsage(printWriter0, 13, ";2fT|H2Gl", options0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("?q93x", options0, false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(113);
      File file0 = MockFile.createTempFile("K<JGKX", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "K<JGKX";
      mockPrintStream0.print('l');
      Object object1 = new Object();
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "?q93x";
      Object object2 = new Object();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 362, "arg", "arg", options0, 0, 10, "");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)2;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, (byte)2, 10);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append('_');
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-4310), "");
      Options options0 = new Options();
      options0.addOption("arg", false, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f}r`5(Z[}");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print(false);
      // Undeclared exception!
//      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "\n", options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = helpFormatter0.defaultDescPad;
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      options0.addOption("", false, "M\"nDtC;eZ");
      helpFormatter0.printHelp(printWriter0, 2071, " ", " ", options0, 2071, 2, "", false);
      helpFormatter0.setWidth(2);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "E";
      String string1 = "k `3x<'r";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      String string2 = "x%bX8[(Sp4M";
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      optionGroup0.setRequired(false);
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup2);
      options0.addOption((String) null, true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("E", "k `3x<'r", options1, "C", true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("x$/0# TSs0!MGV5", options0, false);
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(117);
      File file0 = MockFile.createTempFile("C';j8XMU", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      // Undeclared exception!
//      try { 
        options0.addOption("usage: ", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'usage: ' contains an illegal character : ':'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "\n");
      Options options3 = options2.addOption((String) null, "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", options4, false);
      helpFormatter0.defaultWidth = (-3026);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options2;
      objectArray0[2] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 64, "", options4);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(printWriter0, (-3350), "A CloneNotSupportedException was thrown: ", "A CloneNotSupportedException was thrown: ", options4, 2435, 64, "4jk^|?");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("?q93x", options0, false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(117);
      File file0 = MockFile.createTempFile("K<JGKX", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Options options1 = options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp("e_90", "--", options1, "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("?q93x", options0, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultLeftPad = (-515);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(117);
      File file0 = MockFile.createTempFile("K<JGKX", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "K<JGKX";
      Object object1 = new Object();
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "?q93x";
      Options options1 = options0.addOption("arg", "arg", true, "e,;");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("usage: ", "arg", options1, "arg");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      helpFormatter0.printHelp(printWriter0, 2071, " ", " ", options0, 2071, 2, "", false);
      helpFormatter0.setWidth(2);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.setNewLine("%k_kaM<3fkNp)i@`?sZ");
      helpFormatter0.printHelp("%k_kaM<3fkNp)i@`?sZ", options0, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(117);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = (-2360);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp("usage: ", "", options0, "usage: ");
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "usage: ");
      Options options2 = options1.addOption("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOption(option0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage(printWriter0, (-424), "zn}Nj$i<28_<4_");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      int int0 = (-2597);
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1422, (-2597), "WtXo8Ku]l#");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      option0.setArgName(">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.setSelected(option0);
      optionGroup1.toString();
      options1.addOptionGroup(optionGroup0);
      OptionGroup optionGroup3 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter1.getArgName();
      helpFormatter2.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2949, "[-  ]", "|?j<{l!", options2, 37, (-2), "-", false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(31, "line.separator", "line.separator", options0, "line.separator", true);
      helpFormatter0.renderOptions((StringBuffer) null, 290, options0, 290, 31);
      helpFormatter0.setOptPrefix("#`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";mz=x8x6+b3");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print((long) 290);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "#`", 34, 32);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "usage: ");
      Options options2 = options1.addOption("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOption(option0);
      MockFile mockFile0 = new MockFile("wq4Ua00>~)X|SL#`M]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, "usage: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
//      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 35, "");
      helpFormatter0.renderOptions(stringBuffer1, 35, options0, 0, 32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("?q93x", options0, false);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(117);
      File file0 = MockFile.createTempFile("K<JGKX", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "K<JGKX";
      Object object1 = new Object();
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "?q93x";
      Object object2 = new Object();
      objectArray0[8] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 0, "");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(0, stringBuffer1.length());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      Options options0 = new Options();
      options0.addOption("arg", true, "aDRhKcJJ= jW\"{>]@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f}r`5(Z[}");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null, options0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("%k_kaM<3fkNp)i@`?sZ", options0, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(";Sx&DkC@dIp(");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 117, "%k_kaM<3fkNp)i@`?sZ", options0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "usage: ");
      Options options2 = options1.addOption("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1000, " bzTt[E,3?5>&|<Es", " bzTt[E,3?5>&|<Es", options4, 239, 239, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.getMatchingOptions("usage: ");
      options0.hasOption("--");
      helpFormatter0.printHelp("M", options0);
      helpFormatter0.printHelp("M", "M", options0, "M");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "M", "[", options0, (-1), (-1), "-", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      int int0 = 1391;
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((String) null, options0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2, options0, (-2), 13);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 0, "");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-386), "", "[", options0, 1355, 1342, "arg", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      option0.setArgName(">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.setSelected(option0);
      optionGroup1.toString();
      options1.addOptionGroup(optionGroup0);
      OptionGroup optionGroup3 = new OptionGroup();
      options1.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("|o\"", "--", options0, "", true);
      helpFormatter0.getDescPadding();
      String string0 = "]";
      helpFormatter0.setOptPrefix("9r]9I:$R3 *");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.print((long) 74);
      // Undeclared exception!
//      try { 
        mockPrintWriter0.append((CharSequence) "--", 74, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      options0.hasOption("--");
      helpFormatter0.printHelp(" ", options0);
      Options options1 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 0;
      String string0 = "xC ";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "xC ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 0, "");
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      boolean boolean0 = false;
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.Util";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.setSyntaxPrefix("JoM");
      String string0 = "~GYx";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~GYx");
      helpFormatter0.getWidth();
      String string1 = null;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos((String) null, 74, 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.getMatchingOptions("usage: ");
      options0.hasOption("--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", options0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      int int0 = (-942);
      helpFormatter0.setDescPadding((-942));
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print(false);
      String string0 = "*]K?8$h> Vbl";
      String string1 = "";
      mockPrintWriter0.println("usage: ");
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-815), "*]K?8$h> Vbl", "", options0, (-815), (-815), "", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("%k_kaM<3fkNp)i@`?sZ", options0, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(117);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 12, "                                                                                                                     ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      optionGroup0.setRequired(false);
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setSelected(option0);
      optionGroup1.toString();
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "\"8+aqSEQKM[", options0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.write(11);
      Options options0 = new Options();
      helpFormatter0.createPadding(64);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1391, "%k_kaM<3fkNp)i@`?sZ", (String) null, options0, (-1909), (-1909), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      optionGroup0.setRequired(false);
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("E", "k `3x<'r", options2, "C", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null, options1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1732, (-572), "E");
      assertEquals("E", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.rtrim("");
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("", string0);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "E";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      boolean boolean0 = false;
      optionGroup0.setRequired(false);
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      optionGroup1.toString();
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("E");
      String string1 = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-1), "x%bX8[(Sp4M", " .plov9`w5[i2%eWa", options1, " .plov9`w5[i2%eWa", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.setArgName(".+(lVR6$q");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((-440), "line.separator", "line.separator", options0, "line.separator", true);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = null;
      Options options0 = new Options();
      options0.addOption((String) null, "cOa9|", true, "--");
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1391, "%k_kaM<3fkNp)i@`?sZ", (String) null, options0, (-1909), (-1909), "", true);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.Options");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, (String) null);
      Options options3 = options2.addOption((String) null, "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", options4, false);
      helpFormatter0.defaultWidth = (-3026);
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp(">", "", options4, "", false);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.Options");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "");
      assertEquals(0, stringBuffer1.length());
      
      helpFormatter0.getLeftPadding();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.setNewLine("arg");
      helpFormatter0.getArgName();
      assertEquals("arg", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setOptPrefix("9I}E9yNDF:ZyD");
      helpFormatter0.getLongOptSeparator();
      int int0 = (-547);
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-547));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      assertEquals("--", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(64);
      helpFormatter0.renderWrappedText(stringBuffer0, 2113, (-2614), "xC ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`jLAE@:O+Ty0<Nl;`Br");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
//      try { 
        helpFormatter2.printHelp("xC ", "arg", (Options) null, "arg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("", "", options0, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cmdLineSyntax not provided
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "3,[B+8Bb^U";
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp("Qp9)", "[ Options: [ short ", (Options) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2251);
      helpFormatter0.getNewLine();
      int int0 = 654;
      helpFormatter0.findWrapPos("\n", 654, 2251);
      String string0 = "GFvfGY!a FTM";
      Options options0 = new Options();
      options0.hasLongOption("\n");
      // Undeclared exception!
//      try { 
        helpFormatter0.printUsage((PrintWriter) null, 654, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
//      try { 
        helpFormatter0.createPadding((-2394));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("gS@eTk1'");
      helpFormatter0.setNewLine("gS@eTk1'");
      URI uRI0 = null;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // -
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4746, 4746, "");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.setArgName("");
      String string0 = "i9P'~v~SayoJ";
      helpFormatter0.setLongOptPrefix("i9P'~v~SayoJ");
      helpFormatter0.getLeftPadding();
      mockPrintWriter0.println('9');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.append((CharSequence) "-");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "i9P'~v~SayoJ";
      mockPrintWriter1.printf(locale0, "org.apache.commons.cli.Option", objectArray0);
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 1, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.HelpFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      int int0 = (-729);
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
//      try {
        option0 = new Option("P&eSh-h 7", "usage: ", false, "7NXEp(+");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'P&eSh-h 7' contains an illegal character : '&'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("arg", "x%bX8[(Sp4M");
      option0.setType("x%bX8[(Sp4M");
      optionGroup0.setRequired(false);
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      optionGroup1.toString();
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp("E", "k `3x<'r", options1, "C", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.rtrim(".E%hOh71_-");
      assertEquals("]", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = ";tyQ?j;8Kw|d<0[";
      StringBuffer stringBuffer0 = new StringBuffer(";tyQ?j;8Kw|d<0[");
      int int0 = 1276;
      String string1 = "9Y4k6rx%5H";
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = null;
//      try {
        option0 = new Option("org.apache.commons.cli.ParseException", true, "-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
//      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2380), (-2380), "a");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1391, "%k_kaM<3fkNp)i@`?sZ", (String) null, options0, (-1909), (-1909), "", false);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.AbstractStringBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\"y{#BD9Dk}X");
      assertEquals("\"y{#BD9Dk}X", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "mk";
      int int0 = 0;
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("mk", 0, 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("s,G*7]-iyM-c~MG{Fe");
      int int0 = 0;
      String string0 = "`O'bV";
      String string1 = "sF";
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption(" ", "s,G*7]-iyM-c~MG{Fe", true, "NJ;");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-334));
      helpFormatter0.setWidth(1912);
      String string0 = "";
      String string1 = "";
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
//      try { 
        helpFormatter0.findWrapPos("", (-334), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options2.addOption("", false, "usage: ");
      helpFormatter0.printHelp("~NjedluMQ?TiB!S'4", "has already been selected: '", options3, "", true);
      helpFormatter0.getDescPadding();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = helpFormatter2.getDescPadding();
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, int0);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(">");
      int int0 = 1;
      String string0 = "l7I>";
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
//      try { 
        options0.addOption("-", "arg", false, "m.v");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.Options");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, (String) null);
      Options options3 = options2.addOption((String) null, "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(">", options4, false);
      helpFormatter0.defaultWidth = (-3026);
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 290, options1, 290, 31);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("eT7!vL6)y!", 72, 72);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile((String) null, "w|4p_Xf>=$8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }
}
