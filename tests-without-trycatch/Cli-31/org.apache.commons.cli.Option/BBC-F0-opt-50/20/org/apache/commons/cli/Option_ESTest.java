/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:34:03 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Cannot add value, list full.");
      option0.setValueSeparator('j');
      option0.addValueForProcessing("WRyy");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("jnFC&[67<?hOq =qfe");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "[ARG...]");
      option0.setArgs((-468));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-468), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("fBnE", "", true, "fBnE");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("6uiF?");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('7');
      char char0 = option0.getValueSeparator();
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('G');
      char char0 = option0.getValueSeparator();
      assertEquals('G', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("MNO_ARGS_ALLOED", "org.apache.commons.cli.OptionValidator", true, "MNO_ARGS_ALLOED");
      option0.getValue((String) null);
      assertEquals("MNO_ARGS_ALLOED", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("MNjDARGS_ALLOED", "MNjDARGS_ALLOED", true, "MNjDARGS_ALLOED");
      option0.addValueForProcessing("MNjDARGS_ALLOED");
      String string0 = option0.getValue(0);
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, true, "+;N/Bx");
      option0.setType("_;j3 0 b");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("fBnE", "", true, "fBnE");
      option0.getOpt();
      assertEquals("fBnE", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "[ARG...]", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("[ARG...]", string0);
      assertEquals("", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.getKey();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      String string0 = option0.getKey();
      assertEquals("NO_ARGS_ALLOWED", string0);
      assertTrue(option0.hasArgName());
      assertEquals("MJQk5n", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.getDescription();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", " ", false, "");
      String string0 = option0.getDescription();
      assertEquals(" ", option0.getLongOpt());
      assertEquals("", string0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("I", "I");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("EuK$", "EuK$", true, "EuK$");
      option0.setArgName((String) null);
      String string0 = option0.getArgName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("MJQk5n", option0.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
//      try { 
        option0.getValue(82);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 82, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("y", true, "");
      option0.addValueForProcessing("f_");
//      try { 
        option0.getValue((-564));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
//      try { 
        option0.getId();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option((String) null, true, "+;N/Bx");
      option0.setValueSeparator('j');
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("[ARG...]", false, "Cannot add value, list full.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ARG...]' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("4hu%K&Gj3<b", "r$Kt1dX &n}N|#", false, "4hu%K&Gj3<b");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '4hu%K&Gj3<b' contains an illegal character : '%'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
//      try {
        option0 = new Option("sv-n=4qhW[", "Pm!Dt:");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'sv-n=4qhW[' contains an illegal character : '-'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("o", true, "o");
      option0.addValueForProcessing("o");
      String string0 = option0.getValue();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("MNO_ARGS_ALLOED", "org.apache.commons.cli.OptionValidator", true, "MNO_ARGS_ALLOED");
      option0.setValueSeparator('x');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('x', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "[ARG...]", true, "");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertEquals("[ARG...]", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "[ARG...]", true, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals("", option0.getDescription());
      assertEquals("[ARG...]", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      boolean boolean0 = option0.hasArg();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertEquals(78, option0.getId());
      assertFalse(boolean0);
      assertEquals("MJQk5n", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("o", true, "o");
      option0.hasArg();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      option0.getValueSeparator();
      assertEquals("", option0.getLongOpt());
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertEquals("MJQk5n", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.hasOptionalArg();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "Jw{+cDkk?O4W|C?<", true, "Jw{+cDkk?O4W|C?<");
      option0.addValueForProcessing("Jw{+cDkk?O4W|C?<");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("R5F", "[ option: ", true, "e;Rw$U8wb*+vx");
      option0.hashCode();
      assertEquals("[ option: ", option0.getLongOpt());
      assertEquals("e;Rw$U8wb*+vx", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals(82, option0.getId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("MN_ARGS_ALLOED", true, "MN_ARGS_ALLOED");
      Option option1 = new Option("MN_ARGS_ALLOED", "AKg+vibBf5+V>V~", true, "MN_ARGS_ALLOED");
      boolean boolean0 = option0.equals(option1);
      assertEquals("MN_ARGS_ALLOED", option1.getDescription());
      assertFalse(boolean0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Option option1 = new Option((String) null, "", true, "3@");
      boolean boolean0 = option1.equals(option0);
      assertEquals("3@", option1.getDescription());
      assertFalse(boolean0);
      assertEquals("", option1.getLongOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("MJQk5n", "MJQk5n", false, "MNO_ARGS_ALLOWED");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals("MJQk5n", option1.getLongOpt());
      assertEquals("MJQk5n", option1.getOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
      assertEquals("MNO_ARGS_ALLOWED", option1.getDescription());
      assertEquals("arg", option1.getArgName());
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option((String) null, true, "");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("MJQk5n", "MJQk5n", false, "MNO_ARGS_ALLOED");
      Option option1 = new Option("MNO_ARGS_ALLOED", "MNO_ARGS_ALLOED", false, "MJQk5n");
      boolean boolean0 = option0.equals(option1);
      assertEquals("MNO_ARGS_ALLOED", option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("MNO_ARGS_ALLOED", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("MJQk5n", option1.getDescription());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals("arg", option1.getArgName());
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", true, "NO_ARGS_ALLOWED");
      boolean boolean0 = option0.equals("J");
      assertFalse(boolean0);
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "T+1(J-naSUrxd:", false, "T+1(J-naSUrxd:");
      option0.setType("T+1(J-naSUrxd:");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option:  T+1(J-naSUrxd:  :: T+1(J-naSUrxd: :: T+1(J-naSUrxd: ]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      option0.setArgs(4848);
      option0.toString();
      assertEquals(4848, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("I", "I");
      String string0 = option0.toString();
      assertEquals("[ option: I  :: I ]", string0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("L", false, "L");
      String[] stringArray0 = option0.getValues();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(stringArray0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", true, "NO_ARGS_ALLOWED");
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      String[] stringArray0 = option0.getValues();
      assertEquals("", option0.getOpt());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
      assertNotNull(stringArray0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getValue("[ option: ");
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", true, "]%:yQ");
      option0.getValue(31);
      assertFalse(option0.hasLongOpt());
      assertEquals("]%:yQ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue((int) '\u0000');
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("NO_ARGS_ALLOWED");
      assertEquals("", string0);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Cannot add value, list full.");
      option0.setArgs(397);
      option0.setValueSeparator('j');
      option0.addValueForProcessing("jnFC&[67<?hOq =qfe");
      assertEquals(397, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Cannot add value, list full.");
      option0.setValueSeparator('j');
      option0.addValueForProcessing("jnFC&[67<?hOq =qfe");
      assertEquals('j', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // NO_ARGS_ALLOWED
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("arg", " [ARG]", true, "MNO_ARGS_ALLOED");
      option0.setArgs(3677);
      boolean boolean0 = option0.hasArgs();
      assertEquals(3677, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgName();
      assertEquals(1, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("L", false, "L");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("MJQk5n", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("I", "I");
      option0.getId();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("L", false, "L");
      option0.clearValues();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option((String) null, "[ARG...]", false, "[ARG...]");
      int int0 = option0.getArgs();
      assertTrue(option0.hasLongOpt());
      assertEquals((-1), int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", true, "NO_ARGS_ALLOWED");
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      
      option0.setLongOpt("BYMy^nU+rA:=iP;");
      assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option((String) null, "[ARG...]", false, "[ARG...]");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("L", false, "L");
      option0.setDescription("org.apache.commons.cli.OptionValidator");
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option((String) null, true, "+;N/Bx");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", true, "NO_ARGS_ALLOWED");
      // Undeclared exception!
//      try { 
        option0.addValue("S");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("L", false, "L");
      option0.getValuesList();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("fBnE", "", true, "fBnE");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertEquals("fBnE", option0.getOpt());
      assertEquals("fBnE", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", true, "NO_ARGS_ALLOWED");
      option0.setArgs(0);
      // Undeclared exception!
//      try { 
        option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot add value, list full.
//         //
//         verifyException("org.apache.commons.cli.Option", e);
//      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", true, "NO_ARGS_ALLOWED");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getArgName();
      assertEquals("arg", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", false, "MJQk5n");
      String string0 = option0.getDescription();
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("MJQk5n", string0);
  }
}
