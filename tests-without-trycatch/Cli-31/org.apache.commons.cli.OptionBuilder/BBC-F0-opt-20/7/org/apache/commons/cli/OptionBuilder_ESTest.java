/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 15:36:17 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionBuilder_ESTest extends OptionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionBuilder.withValueSeparator();
      Option option0 = OptionBuilder.create("");
      assertEquals('=', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionBuilder.hasOptionalArgs((-2));
      Option option0 = OptionBuilder.create("");
      assertTrue(option0.hasOptionalArg());
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionBuilder.withLongOpt(">')Lf}oWI^");
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionBuilder.hasArgs();
      Option option0 = OptionBuilder.create("");
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionBuilder.withArgName((String) null);
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = OptionBuilder.create("ZiuUaB");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionBuilder.hasArgs(0);
      Option option0 = OptionBuilder.create("");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionBuilder.hasArg();
      Option option0 = OptionBuilder.create("");
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionBuilder.isRequired(true);
      Option option0 = OptionBuilder.create('e');
      assertEquals((-1), option0.getArgs());
      assertEquals(101, option0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionBuilder.withValueSeparator();
      Option option0 = OptionBuilder.create('Z');
      assertEquals('=', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertEquals("Z", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionBuilder.hasOptionalArgs(2043);
      Option option0 = OptionBuilder.create('3');
      assertEquals(51, option0.getId());
      assertTrue(option0.hasOptionalArg());
      assertEquals(2043, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionBuilder.withLongOpt("vs9UMx^w5^qc{@pZ%");
      Option option0 = OptionBuilder.create('3');
      assertEquals((-1), option0.getArgs());
      assertEquals(51, option0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionBuilder.withArgName((String) null);
      Option option0 = OptionBuilder.create('Z');
      assertEquals((-1), option0.getArgs());
      assertEquals("Z", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionBuilder.hasArgs(0);
      Option option0 = OptionBuilder.create('O');
      assertEquals(0, option0.getArgs());
      assertEquals("O", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionBuilder.withLongOpt("BS~'`QRq_AW8R%");
      OptionBuilder.isRequired();
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionBuilder.withArgName((String) null);
      OptionBuilder.withLongOpt("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
//      try { 
        OptionBuilder.create("8m.3|AN)q(dt&ev");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '8m.3|AN)q(dt&ev' contains an illegal character : '.'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
//      try { 
        OptionBuilder.create('|');
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
//      try { 
        OptionBuilder.create();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // must specify longopt
//         //
//         verifyException("org.apache.commons.cli.OptionBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionBuilder.hasArg(true);
      OptionBuilder.withLongOpt(";mL[I]_4x$");
      Option option0 = OptionBuilder.create();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withDescription((String) null);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionBuilder.hasArgs();
      OptionBuilder.withLongOpt("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Option option0 = OptionBuilder.create();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArg();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionBuilder.withValueSeparator();
      OptionBuilder.withLongOpt("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Option option0 = OptionBuilder.create();
      assertEquals('=', option0.getValueSeparator());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionBuilder.withLongOpt("{7I0x )3%p.PRu_<-");
      OptionBuilder.hasOptionalArgs(0);
      Option option0 = OptionBuilder.create();
      assertTrue(option0.hasOptionalArg());
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator('D');
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionBuilder.isRequired();
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withType("{7I0x )3%p.PRu_<-");
      assertNotNull(optionBuilder0);
  }
}
