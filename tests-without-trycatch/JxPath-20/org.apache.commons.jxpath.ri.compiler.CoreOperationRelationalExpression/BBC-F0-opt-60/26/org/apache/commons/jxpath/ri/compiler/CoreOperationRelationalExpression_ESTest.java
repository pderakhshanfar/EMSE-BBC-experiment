/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 01:12:39 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreOperationRelationalExpression_ESTest extends CoreOperationRelationalExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Constant constant0 = new Constant(float0);
      QName qName0 = new QName("-<$Q>swa", "ng+~(kb5fc$ BSN:X9");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationDivide0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, true);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
//      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, childContext0, (Pointer) null);
//       //  fail("Expecting exception: NoClassDefFoundError");
       // Unstable assertion
//      } catch(NoClassDefFoundError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[3]);
      // Undeclared exception!
      coreOperationLessThan0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreOperationLessThanOrEqual0);
      // Undeclared exception!
//      try { 
        coreOperationLessThan0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, nameAttributeTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-846));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreOperationGreaterThanOrEqual0.computeValue(namespaceContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Constant constant0 = new Constant(float0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationLessThan0.args = expressionArray0;
      // Undeclared exception!
//      try { 
        coreOperationLessThan0.computeValue((EvalContext) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Constant constant0 = new Constant(float0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, constant0);
      // Undeclared exception!
//      try { 
        coreOperationLessThan0.computeValue((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step((-691), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = stepArray0[0];
      stepArray0[4] = stepArray0[1];
      stepArray0[5] = stepArray0[4];
      stepArray0[6] = stepArray0[3];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, coreOperationLessThan0);
      // Undeclared exception!
//      try { 
        JXPathContext.newContext((Object) coreOperationLessThanOrEqual0);
//       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl cannot be cast to org.apache.commons.jxpath.JXPathContextFactory
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContextFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Constant constant0 = new Constant(float0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, constant0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.BeanPointer");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "]Bb*_j>@B'^#{kWD");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      Object object0 = coreOperationLessThan0.computeValue(childContext0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Constant constant0 = new Constant(float0);
      Constant constant1 = new Constant("E[Q3fL0peYN0YBQx");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant1);
      Object object0 = coreOperationLessThan0.computeValue((EvalContext) null);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      Object object0 = coreOperationLessThan0.computeValue(namespaceContext0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Constant constant0 = new Constant(float0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      boolean boolean0 = coreOperationGreaterThanOrEqual0.isSymmetric();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Constant constant0 = new Constant(float0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      int int0 = coreOperationLessThanOrEqual0.getPrecedence();
      assertEquals(3, int0);
  }
}
