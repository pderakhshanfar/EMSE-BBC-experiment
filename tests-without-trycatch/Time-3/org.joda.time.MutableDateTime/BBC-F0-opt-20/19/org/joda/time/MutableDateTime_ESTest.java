/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 21:36:13 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MutableDateTime_ESTest extends MutableDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setDateTime(3, (-2935), 1202, 8, 0, 4, 4831);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 4831 for millisOfSecond must be in the range [0,999]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setTime(1896, (-292269054), 1811, (-292269054));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1896 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addSeconds(1);
      assertEquals(1392409282320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      mutableDateTime0.addMinutes(0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      mutableDateTime0.addMonths(147);
      assertEquals(1778790081320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setDate((long) 1);
      assertEquals(73281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      Locale locale0 = Locale.KOREAN;
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set("21", locale0);
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      long long0 = mutableDateTime_Property0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      DateTimeField dateTimeField0 = mutableDateTime_Property0.getField();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      mutableDateTime0.setTime(1, 1, 0, 1);
      assertEquals(1392339660001L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setSecondOfDay(57);
      assertEquals(1392336057320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setRounding((DateTimeField) null);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setMonthOfYear(5);
      assertEquals(1400098881320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setMillisOfSecond(128);
      assertEquals(1392409281128L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setMillisOfDay(616);
      assertEquals(1392336000616L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      mutableDateTime0.setHourOfDay(5);
      assertEquals(1392355281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setDateTime((-1597), 4, 2, 3, 4, 0, 2);
      assertEquals((-112555774559998L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setDate(891, 2, 1);
      assertEquals((-34047142718680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      mutableDateTime0.set(dateTimeFieldType0, 1);
      assertEquals(1392063681320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      mutableDateTime0.add(durationFieldType0, (-678));
      assertEquals((-20002995518680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-438));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(5);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("2014-02-14T20:21:21.320Z");
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      System.setCurrentTimeMillis((-3535L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      System.setCurrentTimeMillis((-2755L));
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      System.setCurrentTimeMillis((-638L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(1392408000000L, mutableDateTime0.getMillis());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      mutableDateTime0.setRounding(dateTimeField0, 2);
      mutableDateTime0.getRoundingField();
      assertEquals(2, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      mutableDateTime0.setRounding(dateTimeField0, 1);
      mutableDateTime0.copy();
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(0, mutableDateTime1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setYear((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setWeekyear((-177));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setWeekOfWeekyear(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for weekOfWeekyear must be in the range [1,52]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setSecondOfMinute((-2238));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -2238 for secondOfMinute must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1674));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setRounding(dateTimeField0, 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-00:00:01.674 (BuddhistChronology[-00:00:01.674])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.millis();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0, 4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // dayOfWeek field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 47);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for clockhourOfDay must be in the range [1,24]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setMinuteOfHour((-768));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -768 for minuteOfHour must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setMinuteOfDay((-292275054));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -292275054 for minuteOfDay must be in the range [0,1439]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setDayOfYear(1864);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1864 for dayOfYear must be in the range [1,365]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setDayOfWeek((-1838));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -1838 for dayOfWeek must be in the range [1,7]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setDayOfMonth(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for dayOfMonth must be in the range [1,28]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      // Undeclared exception!
//      try { 
        mutableDateTime0.set(dateTimeFieldType0, (-957));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -957 for yearOfEra must be in the range [1,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Partial partial0 = new Partial(localTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
//      try { 
        MutableDateTime.parse((String) null, dateTimeFormatter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Partial partial0 = new Partial(dateTimeFieldType0, 0, buddhistChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
//      try { 
        MutableDateTime.parse("", dateTimeFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MutableDateTime.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MutableDateTime.parse("Illegal rounding mode: ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Illegal rounding mode: \"
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Days days0 = Days.THREE;
      Hours hours0 = days0.toStandardHours();
      mutableDateTime0.add((ReadablePeriod) hours0, (-292269054));
      // Undeclared exception!
//      try { 
        mutableDateTime0.addYears((-292269054));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -294667657 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.addYears(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2014 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(31557600000L, (Chronology) null);
      // Undeclared exception!
//      try { 
        mutableDateTime0.addWeekyears(352831696);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 352833666 for weekyear must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
//      try { 
        mutableDateTime0.add((ReadablePeriod) months0, (-1248));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Magnitude of add amount is too large: 2680059592704
//         //
//         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
//      try { 
        mutableDateTime0.add((ReadablePeriod) years0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -2147481634 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
//      try { 
        mutableDateTime0.add((ReadablePeriod) months0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 20
//         //
//         verifyException("org.joda.time.chrono.BasicGJChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
//      try { 
        mutableDateTime0.add(durationFieldType0, 15356250);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1535627014 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
//      try { 
        mutableDateTime0.add(durationFieldType0, 1882);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime(islamicChronology0, (DateTimeZone) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No instant converter found for type: org.joda.time.chrono.IslamicChronology
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime(copticChronology0, zonedChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No instant converter found for type: org.joda.time.chrono.CopticChronology
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime((Object) iSOChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No instant converter found for type: org.joda.time.chrono.ISOChronology
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20);
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime((-2629), 2571, 20, 3, 1421, 6, (-2332), dateTimeZone0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 1421 for minuteOfHour must be in the range [0,59]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime(0, 4, 0, 2, (-171), (-1638), 275, buddhistChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for dayOfMonth must be in the range [1,30]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
//      try {
        mutableDateTime0 = new MutableDateTime(0, 2, 4, 0, 5, 4, 2159);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 2159 for millisOfSecond must be in the range [0,999]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
//      try { 
        mutableDateTime0.add((ReadablePeriod) days0, 192);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows a long: -412316860416 * 86400000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.add((ReadablePeriod) null, 2825);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Duration duration0 = Duration.standardHours(21859200000L);
      // Undeclared exception!
//      try { 
        mutableDateTime0.add((ReadableDuration) duration0, 2681);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows a long: 78693120000000000 * 2681
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 1);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setMillis((-9223372036854775808L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      mutableDateTime0.setMillis((-1L));
      mutableDateTime0.copy();
      assertEquals((-1L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      // Undeclared exception!
//      try { 
        MutableDateTime.parse("", dateTimeFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.DateTimeFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setDate(9223372036854775807L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 73281320 for millisOfDay is not supported: Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-17T05:55:29.704 (Etc/UTC)
//         //
//         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setTime(0L);
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.property((DateTimeFieldType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The DateTimeFieldType must not be null
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      Instant instant0 = new Instant();
      mutableDateTime0.setDate((ReadableInstant) instant0);
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
//      try { 
        mutableDateTime0.add((DurationFieldType) null, 16);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
//      try { 
        mutableDateTime0.add(durationFieldType0, (-86399999));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -8639999900
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.set((DateTimeFieldType) null, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) lenientChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
//      try { 
        mutableDateTime0.set(dateTimeFieldType0, 1941);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      mutableDateTime0.setZoneRetainFields(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      mutableDateTime0.setZoneRetainFields((DateTimeZone) null);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      mutableDateTime0.setZone(dateTimeZone0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1949L), (Chronology) gregorianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      mutableDateTime0.setZone(dateTimeZone0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      mutableDateTime0.add((ReadablePeriod) null);
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.add((ReadableDuration) null, (-1090));
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 5);
      mutableDateTime0.setMillis((long) 5);
      assertEquals(5, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 4);
      mutableDateTime0.setMillis((-1345L));
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      mutableDateTime0.setMillis(1846L);
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(copticChronology0);
      mutableDateTime0.setRounding(dateTimeField0, 2);
      mutableDateTime0.setMillis((long) 2);
      assertEquals(2, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      mutableDateTime0.setRounding(dateTimeField0, 0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gregorianChronology0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setRounding(dateTimeField0, 15271875);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal rounding mode: 15271875
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gregorianChronology0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setRounding(dateTimeField0, (-367));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal rounding mode: -367
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setRounding((DateTimeField) null, (-292269054));
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MutableDateTime.now((Chronology) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Chronology must not be null
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        MutableDateTime.now((DateTimeZone) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Zone must not be null
//         //
//         verifyException("org.joda.time.MutableDateTime", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      mutableDateTime_Property0.addWrapField(2);
      assertEquals(2000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      mutableDateTime_Property0.add((-2680L));
      assertEquals(1392248481320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      mutableDateTime_Property0.set(3);
      assertEquals(1392336201320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      mutableDateTime_Property0.add(20);
      assertEquals(1404505281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(18L, dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      Chronology chronology0 = mutableDateTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      mutableDateTime_Property0.roundFloor();
      assertEquals(1383609600000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      mutableDateTime_Property0.roundCeiling();
      assertEquals(4102444800000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      mutableDateTime_Property0.roundHalfEven();
      assertEquals(1392409260000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      mutableDateTime0.setMinuteOfHour(0);
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      mutableDateTime0.addWeeks((-1714));
      assertEquals(355782081320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-821), (-1129), 0, (-821), 2, 2688, (-154));
      Duration duration0 = mutablePeriod0.toDurationFrom(mutableDateTime0);
      mutableDateTime0.add((ReadableDuration) duration0);
      assertEquals((-1388217110834L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(2872, 2, 1, 1, 3, 3, 0, gregorianChronology0);
      assertEquals(28467064983000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setMillis((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setWeekOfWeekyear(4);
      assertEquals(1390594881320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setMonthOfYear((-2646));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -2646 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addMillis(57);
      assertEquals(1392409281377L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTime0, dateTimeZone0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      mutableDateTime_Property0.set("7");
      assertEquals((-61942246718680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setDayOfYear(1);
      assertEquals(1388607681320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.add(237L);
      assertEquals(1392409281557L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      mutableDateTime_Property0.roundHalfFloor();
      assertEquals(1392409281000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setHourOfDay(326);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 326 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setMillisOfSecond(3431);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 3431 for millisOfSecond must be in the range [0,999]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      String string0 = mutableDateTime0.toString();
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setMillisOfDay((-761));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -761 for millisOfDay must be in the range [0,86399999]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("1");
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      mutableDateTime0.setDayOfMonth(1);
      assertEquals(1391286081320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setDayOfWeek(3);
      assertEquals(1392236481320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setSecondOfMinute(1);
      assertEquals(1392409261320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      mutableDateTime0.setMinuteOfDay(0);
      assertEquals(1392336021320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addMinutes(5);
      assertEquals(1392409581320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setDate((-1552), (-343), (-1439));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -343 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(4, 1, 5, 3, 1, 5, 4, (DateTimeZone) null);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addSeconds(5);
      assertEquals(1392409286320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 4, 2, 4, 0, 5, 4);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, gJChronology0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addHours((-292269054));
      assertEquals((-1050776185118680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
//      try { 
        mutableDateTime0.add((ReadablePeriod) years0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2014 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setWeekyear((-177));
      assertEquals((-67748931518680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addYears((-292269054));
      // Undeclared exception!
//      try { 
        mutableDateTime0.addHours((-292269054));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -9223119115789118680 + -1052168594400000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime mutableDateTime1 = (MutableDateTime)mutableDateTime0.clone();
      assertEquals(0, mutableDateTime1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setTime(4971, 207, 21, 4971);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 4971 for hourOfDay must be in the range [0,23]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);
      mutableDateTime0.addDays(60000);
      assertEquals(6576409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      mutableDateTime0.setChronology(lenientChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = new Period((Object) null);
      Period period1 = period0.minusYears(7678125);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) period1);
      DateTime dateTime0 = localDateTime1.toDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setDate((ReadableInstant) dateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setYear((-957));
      assertEquals((-92363341118680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      // Undeclared exception!
//      try { 
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // clockhourOfHalfday field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
//      try { 
        mutableDateTime0.setSecondOfDay((-2531));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value -2531 for secondOfDay must be in the range [0,86399]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addWeekyears(7);
      assertEquals(1613766081320L, mutableDateTime0.getMillis());
  }
}
