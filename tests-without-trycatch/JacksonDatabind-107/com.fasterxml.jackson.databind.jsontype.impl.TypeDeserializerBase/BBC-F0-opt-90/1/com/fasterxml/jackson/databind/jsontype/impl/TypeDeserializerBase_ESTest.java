/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:54:22 GMT 2021
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "3SZS*WtA 'V^*W_", false, arrayType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext_Impl0, "3SZS*WtA 'V^*W_");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "DmxRsyv/z5>a1", true, arrayType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._handleUnknownTypeId(deserializationContext0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      Class<NioPathDeserializer> class2 = NioPathDeserializer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "3SZS*WtA 'V^*W_", true, arrayType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "b", true, (JavaType) null);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      asExternalTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._findDeserializer((DeserializationContext) null, "b");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "DmxRsyv/z5>a1", true, arrayType0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asExternalTypeDeserializer0, (BeanProperty) null);
      assertEquals("DmxRsyv/z5>a1", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "3SZS*WtA 'V^*W_", true, mapType0);
      asExternalTypeDeserializer0.getTypeInclusion();
      assertEquals("3SZS*WtA 'V^*W_", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, "3SZS*WtA 'V^*W_", true, mapType0);
      TypeIdResolver typeIdResolver0 = asPropertyTypeDeserializer0.getTypeIdResolver();
      assertEquals("3SZS*WtA 'V^*W_", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(typeIdResolver0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, minimalClassNameIdResolver0, "xHep2", false, javaType0);
      String string0 = asExternalTypeDeserializer0.getPropertyName();
      assertEquals("xHep2", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "3SZS*WtA 'V^*W_", true, (JavaType) null);
      asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("3SZS*WtA 'V^*W_", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "3SZS*WtA 'V^*W_", true, mapType0);
      asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("3SZS*WtA 'V^*W_", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "DmxRsyv/z5>a1", true, arrayType0);
      Class<?> class2 = asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("DmxRsyv/z5>a1", asExternalTypeDeserializer0.getPropertyName());
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "3SZS*WtA 'V^*W_", true, mapType0);
      TypeDeserializer typeDeserializer0 = asExternalTypeDeserializer0.forProperty((BeanProperty) null);
      assertEquals("3SZS*WtA 'V^*W_", typeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType0, classNameIdResolver0, "type ids are not statically known", false, mapLikeType0);
      asWrapperTypeDeserializer0.baseTypeName();
      assertEquals("type ids are not statically known", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, resolvedRecursiveType0);
      JavaType javaType0 = asExternalTypeDeserializer0.baseType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType1, (TypeIdResolver) null, "", true, javaType0);
      JavaType javaType1 = asExternalTypeDeserializer0.baseType();
      assertTrue(javaType1.isContainerType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "known type ids = ", false, mapType0);
      JavaType javaType0 = asExternalTypeDeserializer0.baseType();
      assertNotNull(javaType0);
      assertEquals("known type ids = ", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Month> class0 = Month.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      SimpleType simpleType1 = referenceType0.withValueHandler(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType1, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, minimalClassNameIdResolver0, "d%L+", false, simpleType1);
      JavaType javaType0 = asPropertyTypeDeserializer0.baseType();
      assertNotNull(javaType0);
      assertEquals("d%L+", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, minimalClassNameIdResolver0, "1mkep2", false, javaType0);
      JavaType javaType1 = asExternalTypeDeserializer0.baseType();
      assertNotNull(javaType1);
      assertEquals("1mkep2", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(resolvedRecursiveType0, minimalClassNameIdResolver0, "; bas-typ", true, (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
      assertEquals("; bas-typ", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, "x8+;0yw", false, resolvedRecursiveType0);
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer0.baseTypeName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "expected closing END_OBJECT after type information and deserialized value", false, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("i1");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
//      try { 
        asExternalTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext0, "JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: JSON
//         //  at [Source: (String)\"i1\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType0, classNameIdResolver0, "type ids are not statically known", false, mapLikeType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        asWrapperTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, "JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'JSON' as a subtype of [map-like type; class java.lang.String, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, (String) null, true, (JavaType) null);
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, minimalClassNameIdResolver0, "xHep2", false, javaType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, "3SZS*WtA 'V^*W_", false, mapType0);
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", false, resolvedRecursiveType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer1 = new AsWrapperTypeDeserializer(asWrapperTypeDeserializer0, beanProperty_Bogus0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer1._handleUnknownTypeId(defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, minimalClassNameIdResolver0, "1mkep2", false, javaType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        asExternalTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, "1mkep2");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '1mkep2' as a subtype of [simple type, class java.lang.Object]: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "{|%r4f2gc=L+&^HD x", false, resolvedRecursiveType0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, (DeserializationContext) null, typeBindings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "==}3*P:[uYBI+]F{", true, javaType0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 55);
      asExternalTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
      JsonDeserializer<Object> jsonDeserializer0 = asExternalTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
      assertEquals("==}3*P:[uYBI+]F{", asExternalTypeDeserializer0.getPropertyName());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "I[i:PvKt\\wM w", false, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, (ConfigOverrides) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1572);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser0, injectableValues_Std0);
      asExternalTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext0);
      assertEquals("I[i:PvKt\\wM w", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, "", false, (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParserDelegate0, defaultDeserializationContext_Impl0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      Class<HashSet> class1 = HashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, "JSON", false, collectionType0);
      asPropertyTypeDeserializer0.toString();
      assertEquals("JSON", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      Class<CoreXMLDeserializers.Std> class2 = CoreXMLDeserializers.Std.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, "%s (for POJO property '%s')", true, mapType0);
      asPropertyTypeDeserializer0.getTypeIdResolver();
      assertEquals("%s (for POJO property '%s')", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Month> class0 = Month.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo", false, simpleType0);
      Class<?> class1 = asPropertyTypeDeserializer0.getDefaultImpl();
      assertNotNull(class1);
      assertEquals("com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo", asPropertyTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, "", false, (JavaType) null);
      String string0 = asWrapperTypeDeserializer0.getPropertyName();
      assertEquals("", string0);
  }
}
