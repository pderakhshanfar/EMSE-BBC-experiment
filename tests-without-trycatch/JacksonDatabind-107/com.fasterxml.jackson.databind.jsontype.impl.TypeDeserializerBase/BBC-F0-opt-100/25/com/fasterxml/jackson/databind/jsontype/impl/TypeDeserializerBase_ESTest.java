/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 21:12:17 GMT 2021
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = typeFactory0.constructMapType(class0, javaType0, javaType0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, "1Gk{DUR?dY", false, javaType0, jsonTypeInfo_As0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        asPropertyTypeDeserializer0._handleMissingTypeId(defaultDeserializationContext_Impl0, "JSON");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, minimalClassNameIdResolver0, (String) null, false, placeholderForType0, jsonTypeInfo_As0);
      // Undeclared exception!
//      try { 
        asPropertyTypeDeserializer0._handleUnknownTypeId(deserializationContext0, "JSON");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "K\"N", true, javaType0);
      Class<FloatNode> class0 = FloatNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
      asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer0._findDeserializer((DeserializationContext) null, "K\"N");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, "", true, placeholderForType0);
      String string0 = asWrapperTypeDeserializer0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withStaticTyping();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType1, (TypeIdResolver) null, "\"@)V~fPHYPMGbXDv1]", true, mapType0);
      asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("\"@)V~fPHYPMGbXDv1]", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withStaticTyping();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, (TypeIdResolver) null, "\"@)V~fPHYPMGbXDv1]", true, mapType1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType1, (PropertyName) null, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 48, asWrapperTypeDeserializer0, propertyMetadata0);
      assertEquals("\"@)V~fPHYPMGbXDv1]", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "", true, placeholderForType0, jsonTypeInfo_As0);
      JsonTypeInfo.As jsonTypeInfo_As1 = asPropertyTypeDeserializer0.getTypeInclusion();
      assertSame(jsonTypeInfo_As1, jsonTypeInfo_As0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "", false, placeholderForType0);
      TypeIdResolver typeIdResolver0 = asWrapperTypeDeserializer0.getTypeIdResolver();
      assertSame(typeIdResolver0, minimalClassNameIdResolver0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "##!c0'T( 8EhVq;1", true, placeholderForType0, jsonTypeInfo_As0);
      String string0 = asPropertyTypeDeserializer0.getPropertyName();
      assertEquals("##!c0'T( 8EhVq;1", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "]\u0000<U|H_XbznG", true, (JavaType) null);
      asExternalTypeDeserializer0.getDefaultImpl();
      assertEquals("]\u0000<U|H_XbznG", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<JsonGenerator.Feature> class0 = JsonGenerator.Feature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "", false, simpleType0);
      Class<?> class1 = asWrapperTypeDeserializer0.getDefaultImpl();
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<Module> class0 = Module.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(arrayType0, classNameIdResolver0, "type ids are not statically known", true, arrayType0);
      asArrayTypeDeserializer0.getDefaultImpl();
      assertEquals("type ids are not statically known", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "$75", false, placeholderForType0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      assertEquals("$75", typeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      JavaType javaType0 = placeholderForType0.containedTypeOrUnknown(0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaTypeArray0[6], javaTypeArray0, javaType0, javaType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, minimalClassNameIdResolver0, "m=pa", true, javaTypeArray0[6]);
      asExternalTypeDeserializer0.baseTypeName();
      assertEquals("m=pa", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", false, (JavaType) null);
      asExternalTypeDeserializer0.baseType();
      assertEquals("JSON", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType1, simpleType0, simpleType1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapLikeType0, classNameIdResolver0, "8*{D)", false, mapLikeType0);
      JavaType javaType0 = asWrapperTypeDeserializer0.baseType();
      assertEquals("8*{D)", asWrapperTypeDeserializer0.getPropertyName());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "8*{D)", true, placeholderForType0);
      JavaType javaType0 = asWrapperTypeDeserializer0.baseType();
      assertNotNull(javaType0);
      assertEquals("8*{D)", asWrapperTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      Class<InputStream> class1 = InputStream.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(collectionType0, classNameIdResolver0, "Module without defined name", false, collectionType0);
      JavaType javaType0 = asArrayTypeDeserializer0.baseType();
      assertNotNull(javaType0);
      assertEquals("Module without defined name", asArrayTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      JavaType[] javaTypeArray0 = new JavaType[19];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) placeholderForType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(javaTypeArray0[1]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[1], typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(referenceType1, classNameIdResolver0, ";Jg", false, javaTypeArray0[0]);
      JavaType javaType0 = asArrayTypeDeserializer0.baseType();
      assertEquals(";Jg", asArrayTypeDeserializer0.getPropertyName());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JsonGenerator.Feature> class0 = JsonGenerator.Feature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "", false, simpleType0);
      JavaType javaType0 = asWrapperTypeDeserializer0.baseType();
      assertFalse(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object object0 = asExternalTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "8*{D)", true, placeholderForType0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        asWrapperTypeDeserializer0._findDeserializer(defaultDeserializationContext_Impl0, ".>RIDnl4gE)9=`+");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'java.lang.>RIDnl4gE)9=`+' as a subtype of $75: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "\"t", true, placeholderForType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._findDefaultImplDeserializer(defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, (TypeIdResolver) null, "WEAK_MATCH", false, collectionType0);
      // Undeclared exception!
//      try { 
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-11));
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "$-10", false, placeholderForType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "$75", true, placeholderForType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      File file0 = MockFile.createTempFile("8*{D)", "JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
//      try { 
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, deserializationContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(102);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "JSON", false, placeholderForType0);
      PropertyName propertyName0 = PropertyName.construct("No (native) type id found when one was expected for polymorphic type handling", "$103");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, placeholderForType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Std0);
      // Undeclared exception!
//      try { 
        asArrayTypeDeserializer0._handleUnknownTypeId(defaultDeserializationContext_Impl0, "No (native) type id found when one was expected for polymorphic type handling");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(87);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, minimalClassNameIdResolver0, "1Jb3X", false, placeholderForType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
//      try { 
        asExternalTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, "JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'JSON' as a subtype of $88: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "No (native) type id found when one was expected for polymorphic type handling", false, resolvedRecursiveType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0, resolvedRecursiveType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, (TypeIdResolver) null, "Called operation notsupported for TokenBuffer", false, javaType0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2448);
      asExternalTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
      JsonDeserializer<Object> jsonDeserializer0 = asExternalTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
      assertEquals("Called operation notsupported for TokenBuffer", asExternalTypeDeserializer0.getPropertyName());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", true, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
//      try { 
        asExternalTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No (native) type id found when one was expected for polymorphic type handling
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, (String) null, false, javaType0, jsonTypeInfo_As0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[7];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      // Undeclared exception!
//      try { 
        asPropertyTypeDeserializer0.deserializeTypedFromObject(jsonParser0, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, (String) null, false, javaType0, jsonTypeInfo_As0);
      JavaType javaType1 = asPropertyTypeDeserializer0.baseType();
      assertFalse(javaType1.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", true, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      asExternalTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals("JSON", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "(.bQ=H(|0z;", false, (JavaType) null);
      // Undeclared exception!
//      try { 
        asExternalTypeDeserializer0.baseTypeName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", false, (JavaType) null);
      asExternalTypeDeserializer0.getTypeIdResolver();
      assertEquals("JSON", asExternalTypeDeserializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, (TypeIdResolver) null, "known type ids = ", false, referenceType0);
      Class<?> class1 = asWrapperTypeDeserializer0.getDefaultImpl();
      assertEquals("known type ids = ", asWrapperTypeDeserializer0.getPropertyName());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, (TypeIdResolver) null, (String) null, false, javaType0, jsonTypeInfo_As0);
      String string0 = asPropertyTypeDeserializer0.getPropertyName();
      assertEquals("", string0);
  }
}
