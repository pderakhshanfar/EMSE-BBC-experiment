/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:51:04 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Invalid character reference: %s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "NOBR", attributes0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.removeChild(formElement0);
      assertFalse(formElement0.isBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("http:/");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("'$d");
      FormElement formElement0 = new FormElement(tag0, ")zH", (Attributes) null);
      FormElement formElement1 = formElement0.addElement(formElement0);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Input is binary and unsupported");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Input is binary and unsupported", attributes0);
      formElement0.siblingIndex = 1;
      Document document0 = Parser.parse("", "");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.StructuralEvaluator");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(")\"gP5'r@0{fc.", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ";]k]:K#ZDu", attributes0);
      formElement0.setSiblingIndex((-1717986916));
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals(";]k]:K#ZDu", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Input is binary and unsupported");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Input is binary and unsupported", attributes0);
      formElement0.setParentNode(formElement0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("Input is binary and unsupported", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Input is binary and unsupported");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Input is binary and unsupported", attributes0);
      formElement0.prependElement("Input is binary and unsupported");
      Document document0 = new Document("POST");
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C_G^1");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "C3Wd={p{B)~1Va:\"");
      FormElement formElement0 = new FormElement(tag0, "!_X", attributes1);
      attributes0.vals = null;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes1 = attributes0.add("method", "POLT");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nRnD^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ZU_d_6<'g{u(", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r)B2l~azygUD$}-bL");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "r)B2l~azygUD$}-bL", attributes0);
      CDataNode cDataNode0 = new CDataNode("r)B2l~azygUD$}-bL");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("NAME", "NAME");
      attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendChild(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("go7\"%]a6", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "option[selected]", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
//      try { 
        formElement1.formData();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.FormElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("NAME", "NAME");
      Tag tag0 = Tag.valueOf("select");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
//      try { 
        formElement1.formData();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Input is binary8and &nsuppor/ed");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
//      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("NAME", "NAME");
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("NAME", "NAME", attributes0);
      attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("disabled", "select");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes1 = attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: method
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r)B2l~azygUD$}-bL");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "VT7+_7,@_", attributes0);
      Attribute attribute0 = new Attribute("action", "VT7+_7,@_", attributes0);
      attributes0.put(attribute0);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jWz");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ZU_d_6<'g{u(", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h3");
      CDataNode cDataNode0 = new CDataNode("h3");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "h3", attributes0);
      Document document0 = Parser.parseBodyFragment("POST", "s2b");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Input is binary and unsupported");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Input is binary and unsupported", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(formElement0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }
}
