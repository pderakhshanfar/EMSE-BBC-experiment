/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:43:15 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("checked", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "QE)CoP,UT_H;,9x8M", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("", "checked");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) document0;
      formElement0.insertChildren(0, nodeArray0);
      formElement0.removeChild(formElement0);
      assertEquals("checked", formElement0.normalName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":TVP");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("%/*&F|_ToDBms`yW");
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      Document document0 = Document.createShell("][nmcNsVDL\"D");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$xTO.9M}C5l+F]$:$Wg");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zeZ)N2)F`G", attributes0);
      Document document0 = new Document("zeZ)N2)F`G");
      formElement0.setSiblingIndex((-1812));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("$xTO.9M}C5l+F]$:$Wg", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$xTO.9M}C5+F]$:$Wg");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("li", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "li", attributes0);
      Document document0 = Parser.parseBodyFragment("*RKRD.jiXA~5l;}] Q", "POST");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";");
      CDataNode cDataNode0 = new CDataNode("character is not a valid unicode code point");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "character is not a valid unicode code point", attributes0);
      Document document0 = Parser.parse("character is not a valid unicode code point", "Rd_02Ar$Ux{]~?TAB");
      formElement0.appendTo(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(1, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("$xTO.9M}C5+F]$:$Wg", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("BC&t(Gg4`ZYc");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, "$xTO.9M}C5+F]$:$Wg", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("type", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("type", "POST", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.add("POST", "POST");
      FormElement formElement0 = new FormElement(tag0, "type", attributes2);
      String[] stringArray0 = new String[1];
      attributes0.keys = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("!6PZ3`]}", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "menuitem", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.StructuralEvaluator$Root", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.StructuralEvaluator$Root", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$Root", ",owsg8BT(+{j5;]O");
      document0.parentNode = (Node) formElement0;
      // Undeclared exception!
//      try { 
        formElement0.removeChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("kb");
      FormElement formElement0 = new FormElement(tag0, "Split offset must not be greater than current text length", (Attributes) null);
      Document document0 = new Document("KMKW");
      document0.setParentNode(formElement0);
      document0.setSiblingIndex((-1));
      // Undeclared exception!
//      try { 
        formElement0.removeChild(document0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":TVP");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "jmwW", attributes0);
      Tag tag1 = Tag.valueOf("select");
      FormElement formElement1 = new FormElement(tag1, "method", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes0);
      FormElement formElement2 = formElement1.addElement(formElement1);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) formElement1;
      nodeArray0[2] = (Node) formElement0;
      formElement1.addChildren(nodeArray0);
      attributes0.putIgnoreCase("name", "method");
      // Undeclared exception!
      formElement2.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("!6", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Bx{b_5ZjpS:ub;%", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
//      try { 
        formElement0.formData();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.FormElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":TVP");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "jmwW");
      FormElement formElement0 = new FormElement(tag0, "jmwW", attributes0);
      Tag tag1 = Tag.valueOf("select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
//      try { 
        formElement1.formData();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("$xTO.9M}C5+F]$:$Wg", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("{-GBiw fAW3JnY'");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = null;
//      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      attributes0.putIgnoreCase("name", "select");
      formElement0.prependElement("option");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":TVP");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "jmwW", attributes0);
      Tag tag1 = Tag.valueOf("select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      attributes0.putIgnoreCase("name", "method");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("disabled", true);
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$xTO.9M}C5l+F]$:$Wg");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zeZ)N2)F`G", attributes0);
      Document document0 = new Document("zeZ)N2)F`G");
      Element element0 = document0.createElement("select");
      formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$xTO.9M}C5l+F]$:$Wg");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zeZ)N2)F`G", attributes0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$xTO.9M}C5l+F]$:$Wg");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "$xTO.9M}C5l+F]$:$Wg", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("method", "POST");
      attributes0.put(attribute0);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: $xTO.9M}C5l+F]$:$Wg
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$xTO.KUM}C5+F]$:$Wg");
      CDataNode cDataNode0 = new CDataNode("action");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("action", "$xTO.KUM}C5+F]$:$Wg");
      FormElement formElement0 = new FormElement(tag0, "$xTO.KUM}C5+F]$:$Wg", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("%/*&F|_ToDBms`yW");
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":TVP");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "jmwW", attributes0);
      Document document0 = Parser.parse("org.jsoup.nodes.FormElement", ":TVP");
      // Undeclared exception!
//      try { 
        formElement0.removeChild(document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }
}
