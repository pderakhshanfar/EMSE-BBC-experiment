/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:23:14 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("g0]+YpY+kh5v4b", "disabled");
      document0.appendTo(formElement0);
      formElement0.removeChild(document0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CX0ta@f+o*GN R&m*sn");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "HTTP:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "disabled", attributes0);
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      formElement0.addElement(element0);
      Elements elements0 = formElement0.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":^U|8U");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`8GCU>1gYBK|", attributes0);
      Document document0 = Document.createShell("pN");
      formElement0.appendTo(document0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("K4n4iRaB:5Ex*");
      FormElement formElement0 = new FormElement(tag0, "K4n4iRaB:5Ex*", attributes0);
      formElement0.setSiblingIndex((-1));
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":^U|8U");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`8GCU>1gYBK|", attributes0);
      Document document0 = Document.createShell("POST");
      formElement0.appendTo(formElement0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertTrue(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("kz\",gn");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("method", "nQyV");
      attributes1.vals = null;
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      attributes0.add("keygen", "keygen");
      attributes0.add("keygen", "ADI6^@");
      String[] stringArray0 = new String[1];
      attributes0.keys = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("WfkXn$g");
      CDataNode cDataNode0 = new CDataNode("WfkXn$g");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "isindex", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@s922@p]*!Vb\"+8GD");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":has(el) subselect must not be empty", attributes0);
      CDataNode cDataNode0 = new CDataNode("@s922@p]*!Vb\"+8GD");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) pseudoTextElement0;
      nodeArray0[2] = (Node) pseudoTextElement0;
      nodeArray0[3] = (Node) pseudoTextElement0;
      nodeArray0[4] = (Node) pseudoTextElement0;
      nodeArray0[5] = (Node) pseudoTextElement0;
      Document document0 = Document.createShell("HRfjaWn");
      nodeArray0[6] = (Node) document0;
      pseudoTextElement0.addChildren(nodeArray0);
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      attributes0.put("name", "name");
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("K4n4iRaB:5Ex*");
      FormElement formElement0 = new FormElement(tag0, "K4n4iRaB:5Ex*", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
//      try { 
        formElement0.formData();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.FormElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "MV`pu3i`Y.swz9gAs}", attributes0);
      Attributes attributes1 = attributes0.add("name", "name");
      FormElement formElement1 = formElement0.addElement(formElement0);
      Attributes attributes2 = attributes1.put("3vvW(p&NRdZ,u~ ", true);
      attributes2.put("V2W4O1KlzJGv#3^", "KE1GEN");
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      // Undeclared exception!
//      try { 
        formElement1.formData();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
//      try {
        formElement0 = new FormElement((Tag) null, "SelfClosingStartTag", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      Attributes attributes1 = attributes0.put("name", "name");
      Attributes attributes2 = attributes1.put("type", "radio");
      attributes2.put("checked", "type");
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.val("org.jsoup.nodes.FormElement");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      attributes0.put("name", "name");
      Attributes attributes1 = attributes0.add("type", "radio");
      attributes1.put("checked", "type");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      attributes0.put("name", "name");
      attributes0.add("type", "radio");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      formElement0.addElement(formElement0);
      attributes0.put("name", "name");
      attributes0.add("type", "checkbox");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      attributes0.put("name", "name");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "MV`pu3i`Y.swz9gAs}", attributes0);
      attributes0.add("name", "name");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("disabled", ",Gtyk=nQt\"x");
      Element element0 = new Element(tag0, "keygen", attributes1);
      FormElement formElement0 = new FormElement(tag0, "option", attributes1);
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("colgroup");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("POST", "POST");
      formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^0WhKE76");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "^0WhKE76", attributes0);
      attributes0.add("method", "POST");
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: ^0WhKE76
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~lon");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("action", "~lon");
      FormElement formElement0 = new FormElement(tag0, "action", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":^U|8U");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`8GCU>1gYBK|", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element("select");
      FormElement formElement0 = new FormElement(tag0, "MV`pu3i`Y.swz9gAs}", attributes0);
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":^U|8U");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`8GCU>1gYBK|", attributes0);
      Document document0 = Document.createShell("POST");
      // Undeclared exception!
//      try { 
        formElement0.removeChild(document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }
}
