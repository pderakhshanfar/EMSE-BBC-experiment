/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:24:04 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("eB*}C47w#X D`'*i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "eB*}C47w#X D`'*i", attributes0);
      formElement0.appendChild(formElement0);
      formElement0.removeChild(formElement0);
      assertEquals("eB*}C47w#X D`'*i", formElement0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("eB*}C47w#X D`'*i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "eB*}C47w#X D`'*i", attributes0);
      formElement0.addElement(formElement0);
      Elements elements0 = formElement0.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option[selected]");
      FormElement formElement0 = new FormElement(tag0, "option[selected]", (Attributes) null);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.siblingIndex = 2578;
      FormElement formElement2 = formElement0.addElement(formElement0);
      assertEquals("option[selected]", formElement2.normalName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("selUc");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "selUc", attributes0);
      formElement0.siblingIndex = (-1249);
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertEquals("seluc", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("link", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "link", attributes0);
      Document document0 = Parser.parseBodyFragment("checkbox", "link");
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cP~%QbS|84ExP*N-]l");
      FormElement formElement0 = new FormElement(tag0, "cP~%QbS|84ExP*N-]l", (Attributes) null);
      formElement0.prependText("+fvU8#;");
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("cP~%QbS|84ExP*N-]l", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "O`aN", attributes0);
      Attributes attributes1 = attributes0.add("method", "O`aN");
      attributes1.vals = null;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("method", "O`xN");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`_?)z@");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`_?)z@", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cP~%QbS|84ExP*N-]l");
      FormElement formElement0 = new FormElement(tag0, "cP~%QbS|84ExP*N-]l", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("cP~%QbS|84ExP*N-]l");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cP~%QbS|84ExP*N-]l");
      FormElement formElement0 = new FormElement(tag0, "cP~%QbS|84ExP*N-]l", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("cP~%QbS|84ExP*N-]l");
      Node node0 = cDataNode0.doClone(formElement0);
      node0.siblingIndex = (-728);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(node0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "REQUEST HAS ALRADY BEN READ", attributes0);
      Attributes attributes1 = attributes0.add("name", "select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) pseudoTextElement0;
      pseudoTextElement0.addChildren(nodeArray0);
      formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cP~%QbS|84ExP*N-]l");
      FormElement formElement0 = new FormElement(tag0, "cP~%QbS|84ExP*N-]l", (Attributes) null);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
//      try { 
        formElement1.formData();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.FormElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      Attributes attributes1 = attributes0.add("name", "select");
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes1);
      formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
//      try { 
        formElement0.formData();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FormElement formElement0 = null;
//      try {
        formElement0 = new FormElement((Tag) null, "org.jsoup.nodes.PseudoTextElement", (Attributes) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes0);
      attributes1.put("CHECKED", "name");
      FormElement formElement0 = new FormElement(tag0, "TEXTAREA", attributes1);
      pseudoTextElement0.prependText("Q%+M*|^EH@W[)LUW");
      formElement0.addElement(pseudoTextElement0);
      attributes0.add("type", "radio");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes0);
      attributes1.put("CHECKED", "name");
      FormElement formElement0 = new FormElement(tag0, "TEXTAREA", attributes1);
      formElement0.addElement(pseudoTextElement0);
      attributes0.add("type", "radio");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes0);
      FormElement formElement0 = new FormElement(tag0, "TEXTAREA", attributes1);
      formElement0.addElement(pseudoTextElement0);
      attributes0.add("type", "radio");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes0);
      attributes0.put("type", "checkbox");
      FormElement formElement0 = new FormElement(tag0, "TEXTAREA", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes0);
      FormElement formElement0 = new FormElement(tag0, "TEXTAREA", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "RADIO", attributes0);
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Attributes attributes1 = attributes0.add("disabled", "select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "disabled", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Iao", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Iao", (Attributes) null);
      Document document0 = Parser.parse("org.jsoup.nodes.PseudoTextElement", "Iao");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes0 = new Attributes();
      attributes0.put("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: POST
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oiHVr");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("action", "oiHVr", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "oiHVr", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "fTp:q5doixf", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "cP~%QbS|84ExP*N-]l", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "RADIO", attributes0);
      FormElement formElement0 = new FormElement(tag0, "type", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "cP~%QbS|84ExP*N-]l", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(formElement0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }
}
