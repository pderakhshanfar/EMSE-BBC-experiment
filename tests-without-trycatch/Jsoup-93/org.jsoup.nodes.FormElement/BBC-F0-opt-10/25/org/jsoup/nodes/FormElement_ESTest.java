/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:40:40 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?!*");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "?!*", attributes0);
      Document document0 = Parser.parseBodyFragment("tbody", "?!*");
      formElement0.prependChild(document0);
      formElement0.removeChild(document0);
      assertEquals("?!*", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("action", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Rpl_pi3[@LZ?$@Y;k", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("action", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Rpl_pi3[@LZ?$@Y;k", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      formElement1.siblingIndex = 4506;
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertFalse(formElement2.isBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("F#}>XdVDV[f");
      CDataNode cDataNode0 = new CDataNode("F#}>XdVDV[f");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "ScriptData", attributes0);
      formElement0.setSiblingIndex((-1994920594));
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals((-1994920594), formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("header", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "f;rl", attributes0);
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", "f;rl");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("a7]lZ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "a7]lZ", attributes0);
      CDataNode cDataNode0 = new CDataNode("a7]lZ");
      formElement0.parentNode = (Node) cDataNode0;
      Document document0 = Parser.parse("a7]lZ", "a7]lZ");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("a7]lZ", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?!*");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "?!*", attributes0);
      Document document0 = Parser.parseBodyFragment("tbody", "?!*");
      formElement0.prependChild(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[%s=%sp]");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "VOST");
      FormElement formElement0 = new FormElement(tag0, "VOST", attributes0);
      attributes1.keys = null;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("select", true);
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.LeafNode", attributes1);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("Rs?aLh");
      FormElement formElement0 = new FormElement(tag0, "Rs?aLh", attributes0);
      List<Node> list0 = Parser.parseXmlFragment("checked", "1HSILHHFNWY");
      formElement0.childNodes = list0;
      CDataNode cDataNode0 = new CDataNode("method");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(node0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("',)| B<A;^.hafX3`Ru");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ",s2P;C=]", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("Rs?aLh");
      FormElement formElement0 = new FormElement(tag0, "Rs?aLh", attributes0);
      CDataNode cDataNode0 = new CDataNode("method");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendChild(formElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-child(%d)");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":nth-child(%d)", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
//      try { 
        formElement0.formData();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.FormElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
//      try { 
        formElement1.formData();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?!*");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
//      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "'<iHX@ZYNa3jy");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("B:NE#I");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("disabled", "");
      FormElement formElement0 = new FormElement(tag0, "B:NE#I", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0Wj,>a=opFH");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "0Wj,>a=opFH", attributes0);
      Element element0 = new Element("select");
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("a7]lZ");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("action");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("action", "a7]lZ");
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "Array must not contain any null objects", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?!*");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "?!*", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Q", attributes0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Q", "09imh7Bd|BtE");
      formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?!*");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "?!*", attributes0);
      Document document0 = Parser.parseBodyFragment("tbody", "?!*");
      // Undeclared exception!
//      try { 
        formElement0.removeChild(document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }
}
