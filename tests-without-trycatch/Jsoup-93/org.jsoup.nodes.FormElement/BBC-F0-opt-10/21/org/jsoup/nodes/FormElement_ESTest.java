/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:30:18 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menu");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "menu", attributes0);
      Document document0 = Parser.parse("menu", "menu");
      document0.appendTo(formElement0);
      formElement0.removeChild(document0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$t+");
      CDataNode cDataNode0 = new CDataNode("nth-last-child");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "nth-last-child", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<@Jc`SD", attributes0);
      formElement0.addElement(pseudoTextElement0);
      Elements elements0 = formElement0.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("&RQq", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("T9B=lk+dEXS", "");
      formElement0.siblingIndex = 1;
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(1, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("&RQq", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("T9B=lk+dEXS", "");
      formElement0.siblingIndex = (-41);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals((-41), formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menu");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "menu", attributes0);
      Document document0 = Parser.parse("menu", "menu");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("menu", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q*[ezcP&Se Oyfbg");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("quirks", "Q*[ezcP&Se Oyfbg");
      FormElement formElement0 = new FormElement(tag0, "<'P=0-HaND$ [Dju", attributes0);
      formElement0.setParentNode(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("q*[ezcp&se oyfbg", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":yr,\f[NNyie5#eh");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("METHOD", "Mmpe");
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes1);
      attributes1.keys = null;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("W$WLD)");
      Attributes attributes0 = new Attributes();
      attributes0.add("L.", "=I'P,fuuy p'e=ZY");
      Attributes attributes1 = attributes0.put("METHOD", true);
      FormElement formElement0 = new FormElement(tag0, "#+C>+G", attributes1);
      String[] stringArray0 = new String[1];
      attributes0.vals = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S:XS");
      FormElement formElement0 = new FormElement(tag0, "S:XS", (Attributes) null);
      Document document0 = Parser.parse("org.jsoup.helper.HttpConnection$Response", "org.jsoup.helper.HttpConnection$Response");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Node> list0 = Parser.parseFragment("S:XS", (Element) document0, "org.jsoup.helper.HttpConnection$Response");
      formElement1.childNodes = list0;
      FormElement formElement2 = formElement1.addElement(document0);
      formElement2.parentNode = (Node) formElement1;
      // Undeclared exception!
//      try { 
        formElement2.removeChild(formElement1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("yV|E_6qo4nQa1J0=", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("yV|E_6qo4nQa1J0=");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "yV|E_6qo4nQa1J0=", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Accept-Encoding");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Accept-Encoding", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Accept-Encoding", (String) null, false);
      xmlDeclaration0.setParentNode(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(xmlDeclaration0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Accept-Encoding");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Accept-Encoding", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Accept-Encoding", (String) null, false);
      xmlDeclaration0.setParentNode(formElement0);
      xmlDeclaration0.siblingIndex = (-2054322424);
      // Undeclared exception!
//      try { 
        formElement0.removeChild(xmlDeclaration0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "/");
      Tag tag0 = Tag.valueOf("select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "/", attributes0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) pseudoTextElement0;
      nodeArray0[2] = (Node) pseudoTextElement0;
      nodeArray0[3] = (Node) pseudoTextElement0;
      nodeArray0[4] = (Node) pseudoTextElement0;
      pseudoTextElement0.addChildren(nodeArray0);
      FormElement formElement0 = new FormElement(tag0, "select", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(".8", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ORCfv=B=gU==)j<%9d", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
//      try { 
        formElement1.formData();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.FormElement", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      CDataNode cDataNode0 = new CDataNode("name");
      Attributes attributes1 = cDataNode0.attributes();
      Attributes attributes2 = attributes1.add("name", "Rmuv");
      String[] stringArray0 = new String[1];
      attributes2.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "l", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes2);
      formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
//      try { 
        formElement0.formData();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qQ*[ezcP&Se Oyfbg");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
//      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "input");
      Tag tag0 = Tag.valueOf("input");
      attributes1.put("type", "radio");
      attributes1.putIgnoreCase("CHECKED", "type");
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      formElement0.val("T1`Y");
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "input");
      Tag tag0 = Tag.valueOf("input");
      attributes1.put("type", "radio");
      attributes1.putIgnoreCase("CHECKED", "type");
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      Tag tag0 = Tag.valueOf("input");
      attributes1.put("type", "radio");
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes2 = attributes1.put("type", "aMdcihio");
      FormElement formElement0 = new FormElement(tag0, "$Rsb}@R", attributes2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NU";
      stringArray0[1] = "checkbox";
      attributes2.vals = stringArray0;
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "Rmuv");
      FormElement formElement0 = new FormElement(tag0, "S'Xm", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "input");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "RUV", attributes1);
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("disabled", "radio", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "input", attributes1);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":containsData(%s)", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("W$WLD)");
      Tag tag0 = Tag.valueOf("W$WLD)");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#+C>+G", attributes0);
      formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qQ[e)-P&Se OyfbS");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: method
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menu");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "menu", attributes0);
      attributes0.put("action", true);
      // Undeclared exception!
//      try { 
        formElement0.submit();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$t+");
      CDataNode cDataNode0 = new CDataNode("nth-last-child");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "nth-last-child", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "http:/", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menu");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "menu", attributes0);
      Document document0 = Parser.parse("menu", "menu");
      // Undeclared exception!
//      try { 
        formElement0.removeChild(document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }
}
