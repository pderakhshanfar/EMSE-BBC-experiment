/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:41:51 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(18);
      Double double0 = new Double(18);
      Double double1 = new Double(5.74952254077566E-19);
      Pair<String, Double> pair0 = new Pair<String, Double>("]]9W X?cW h'mS]<vZW", double1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.add(pair0);
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 18);
      mersenneTwister0.setSeed(2575);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.probability((String) null);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Integer integer0 = new Integer(2575);
      Double double0 = new Double(0.7471480685095098);
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Double double1 = new Double(0.7471480685095098);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      discreteDistribution0.reseedRandomGenerator(1L);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      well19937c0.nextLong();
      discreteDistribution1.sample(1317);
      discreteDistribution0.sample();
      discreteDistribution1.sample();
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList1);
      List<Pair<Integer, Double>> list0 = discreteDistribution2.getSamples();
      LinkedList<Pair<Pair<String, Float>, Double>> linkedList2 = new LinkedList<Pair<Pair<String, Float>, Double>>();
      discreteDistribution1.sample(1740);
      DiscreteDistribution<Integer> discreteDistribution3 = new DiscreteDistribution<Integer>(well19937c0, list0);
      discreteDistribution3.sample(2575);
      discreteDistribution1.sample(1833);
      DiscreteDistribution<Integer> discreteDistribution4 = new DiscreteDistribution<Integer>(well19937c0, list0);
      // Undeclared exception!
      discreteDistribution2.sample(2575);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 6;
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      linkedList0.add(pair0);
      discreteDistribution0.reseedRandomGenerator(4294967295L);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution1.sample(1317);
      discreteDistribution0.sample();
      LinkedList<Pair<Pair<String, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, Float>, Double>>();
      Float float0 = new Float((float) 1317);
      Pair<String, Float> pair1 = (Pair<String, Float>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("").when(pair1).getKey();
      doReturn(float0).when(pair1).getValue();
      Pair<String, Float> pair2 = new Pair<String, Float>(pair1);
      Pair<String, Float> pair3 = new Pair<String, Float>(pair2);
      Pair<Pair<String, Float>, Double> pair4 = new Pair<Pair<String, Float>, Double>(pair3, double0);
      linkedList1.add(pair4);
      DiscreteDistribution<Pair<String, Float>> discreteDistribution2 = new DiscreteDistribution<Pair<String, Float>>(linkedList1);
      DiscreteDistribution<Integer> discreteDistribution3 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution3.sample();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair5 = new Pair<String, Double>("", double0);
      linkedList2.add(pair5);
      DiscreteDistribution<String> discreteDistribution4 = new DiscreteDistribution<String>(well19937c0, linkedList2);
      discreteDistribution4.probability("");
      discreteDistribution4.probability("zero not allowed here");
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937c0);
      LinkedList<Pair<Double, Double>> linkedList3 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution5 = null;
//      try {
        discreteDistribution5 = new DiscreteDistribution<Double>(randomAdaptor0, linkedList3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Integer integer0 = new Integer(2575);
      Double double0 = new Double(0.7471480685095098);
      Integer integer1 = new Integer(1304);
      Double double1 = new Double(1304);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
      
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Double double2 = new Double((-19.143331));
      Pair<String, Double> pair1 = new Pair<String, Double>("w@", double0);
      linkedList0.add(pair1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1304;
      intArray0[1] = 1304;
      intArray0[2] = 1304;
      Well512a well512a0 = new Well512a(intArray0);
      Well1024a well1024a0 = new Well1024a(2575);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well1024a0, linkedList0);
      double double3 = discreteDistribution1.probability("w@");
      assertEquals(1.0, double3, 0.01);
      
      double double4 = discreteDistribution1.probability("6ThJJQN(%rjX");
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(6);
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(547);
      well19937c0.nextInt(1951);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(synchronizedRandomGenerator0, linkedList0);
      discreteDistribution1.sample(1317);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(6);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList2.add(pair2);
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 547);
      Well44497b well44497b0 = new Well44497b();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well44497b0, linkedList2);
      discreteDistribution2.probability((String) null);
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution3 = null;
//      try {
        discreteDistribution3 = new DiscreteDistribution<Integer>(synchronizedRandomGenerator0, linkedList3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(2492.99596701);
      Pair<String, Double> pair0 = new Pair<String, Double>("[Q#T,\"qFp)E-f|}0Ir", double1);
      linkedList1.add(pair0);
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 6);
      mersenneTwister0.setSeed(2575);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList1);
      discreteDistribution0.probability((String) null);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(6);
      Double double0 = new Double(211.090522);
      Integer integer1 = new Integer(219);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      linkedList0.add(pair0);
      discreteDistribution0.reseedRandomGenerator(219);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      Integer[] integerArray0 = discreteDistribution0.sample(1506);
      assertEquals(1506, integerArray0.length);
      
      discreteDistribution0.sample();
      LinkedList<Pair<Pair<String, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, Float>, Double>>();
      Float float0 = new Float((float) 4294967295L);
      Pair<String, Float> pair2 = new Pair<String, Float>("", float0);
      Pair<String, Float> pair3 = new Pair<String, Float>(pair2);
      Pair<String, Float> pair4 = new Pair<String, Float>(pair3);
      Pair<Pair<String, Float>, Double> pair5 = new Pair<Pair<String, Float>, Double>(pair3, double0);
      linkedList1.add(pair5);
      DiscreteDistribution<Pair<String, Float>> discreteDistribution2 = new DiscreteDistribution<Pair<String, Float>>(linkedList1);
      DiscreteDistribution<Integer> discreteDistribution3 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair6 = new Pair<String, Double>("", double0);
      linkedList2.add(pair6);
      DiscreteDistribution<String> discreteDistribution4 = new DiscreteDistribution<String>(well19937c0, linkedList2);
      double double1 = discreteDistribution4.probability("h58/U3,vw=STwp{");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      linkedList0.add(pair0);
      discreteDistribution0.reseedRandomGenerator(4294967295L);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      Integer[] integerArray0 = discreteDistribution1.sample(1317);
      assertEquals(1317, integerArray0.length);
      
      discreteDistribution0.sample();
      LinkedList<Pair<Pair<String, Float>, Double>> linkedList1 = new LinkedList<Pair<Pair<String, Float>, Double>>();
      Pair<String, Float> pair1 = (Pair<String, Float>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair1).getKey();
      doReturn((Object) null).when(pair1).getValue();
      Pair<String, Float> pair2 = new Pair<String, Float>(pair1);
      Pair<Pair<String, Float>, Double> pair3 = new Pair<Pair<String, Float>, Double>(pair2, double0);
      linkedList1.add(pair3);
      DiscreteDistribution<Pair<String, Float>> discreteDistribution2 = new DiscreteDistribution<Pair<String, Float>>(linkedList1);
      DiscreteDistribution<Integer> discreteDistribution3 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution3.sample();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair4 = new Pair<String, Double>("", double0);
      linkedList2.add(pair4);
      DiscreteDistribution<String> discreteDistribution4 = new DiscreteDistribution<String>(well19937c0, linkedList2);
      double double1 = discreteDistribution4.probability("J");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(22);
      Integer integer1 = new Integer(22);
      Double double0 = new Double(22);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Well44497b well44497b0 = new Well44497b((long) 22);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
//      try { 
        discreteDistribution1.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 6;
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      discreteDistribution0.getSamples();
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(6);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(6.942757623821567E-208);
      int int0 = 0;
      Integer integer0 = Integer.getInteger("org.apache.commons.math3.distribution.DiscreteDistribution", 0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer1 = Integer.valueOf(0);
      Double double1 = new Double(1755.56842);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer1, double1);
      linkedList1.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
//      try { 
        discreteDistribution1.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 6;
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 6;
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample(1317);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      discreteDistribution1.sample();
      Well19937c well19937c1 = new Well19937c();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(well19937c1, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      linkedList0.listIterator();
      intArray0[5] = 6;
      intArray0[6] = 6;
      discreteDistribution0.getSamples();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 6;
      Integer integer0 = new Integer(6);
      Double double0 = new Double(6);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
//      try { 
        discreteDistribution0.sample((-911));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-911)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Integer integer0 = new Integer((-795));
      Double double0 = new Double((-515.39));
      Integer integer1 = new Integer((-1231));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -515.39 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1389L));
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      String string0 = "l'H)#@y9@wBpB";
      well44497b0.clear();
      Double double0 = new Double((-1389L));
      Pair<String, Double> pair0 = new Pair<String, Double>("l'H)#@y9@wBpB", double0);
      linkedList0.add(pair0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well44497b0, linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,389 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 218;
      intArray0[1] = 86;
      intArray0[2] = 0;
      Well19937a well19937a0 = new Well19937a(intArray0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-2758L));
      Double double0 = new Double(0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1.1920929E-7F);
      Double double0 = new Double(1.1920929E-7F);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 2127;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 74;
      intArray0[7] = (-1995);
      intArray0[8] = 3520;
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2488);
      intArray0[1] = 1257;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-354);
      intArray0[5] = 128;
      intArray0[6] = 249;
      intArray0[7] = (-1066);
      intArray0[8] = 0;
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((double) 128);
      Double double0 = new Double(2.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well44497b0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(0);
      Float float1 = discreteDistribution0.sample();
      assertEquals(128.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-185);
      Well1024a well1024a0 = new Well1024a(intArray0);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well1024a0);
      well1024a0.nextGaussian();
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(synchronizedRandomGenerator0, (List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      byte[] byteArray0 = new byte[0];
      well512a0.nextBytes(byteArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well512a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
