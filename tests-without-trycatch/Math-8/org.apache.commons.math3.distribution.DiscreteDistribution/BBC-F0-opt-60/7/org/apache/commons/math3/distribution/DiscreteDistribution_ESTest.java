/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:16:54 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = new Byte((byte)4);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.spliterator();
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      Pair<Double, String> pair4 = new Pair<Double, String>(double0, (String) null);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution2.sample(1005);
      discreteDistribution1.sample((int) (byte)4);
      Byte byte2 = new Byte((byte) (-37));
      Byte byte3 = new Byte((byte) (-24));
      discreteDistribution0.probability(byte3);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Integer.getInteger((String) null);
      Pair<Object, Double> pair5 = new Pair<Object, Double>((Object) null, double0);
      linkedList1.add(pair5);
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution3.probability((Object) null);
      discreteDistribution3.sample();
      discreteDistribution1.probability(byte3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      linkedList0.spliterator();
      Byte byte0 = new Byte((byte)17);
      Double double0 = new Double((byte)17);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.sample();
      List<Pair<Byte, Double>> list0 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Double double1 = new Double((byte)4);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample(388062337);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample((int) (byte)4);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
      discreteDistribution1.getSamples();
      // Undeclared exception!
//      try { 
        discreteDistribution1.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(1.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("6HD_r~<~Dk#n[D^Xn_N", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample(800);
      String string0 = discreteDistribution0.sample();
      assertEquals("6HD_r~<~Dk#n[D^Xn_N", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)4;
      Byte byte1 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte2 = new Byte((byte)4);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte2, double0);
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      Double double1 = new Double((byte)4);
      Double double2 = new Double(1.1817450523376465);
      Pair<Double, String> pair4 = new Pair<Double, String>(double2, (String) null);
      discreteDistribution1.sample((int) (byte)4);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution2.reseedRandomGenerator((byte)4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = new Byte((byte)4);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.spliterator();
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.reseedRandomGenerator((byte)4);
      Well19937a well19937a0 = new Well19937a(185L);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      Well512a well512a0 = new Well512a(185L);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Float float0 = new Float((double) (byte)4);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(float0, double0);
      Pair<Object, Double> pair5 = new Pair<Object, Double>(pair4);
      linkedList1.add(pair5);
      DiscreteDistribution<Object> discreteDistribution3 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      discreteDistribution3.reseedRandomGenerator(185L);
      DiscreteDistribution<Byte> discreteDistribution4 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution2.sample();
      DiscreteDistribution<Object> discreteDistribution5 = new DiscreteDistribution<Object>(well19937a0, linkedList1);
      discreteDistribution5.getSamples();
      discreteDistribution1.sample();
      Pair<Object, Double> pair6 = new Pair<Object, Double>(pair3);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well512a well512a0 = new Well512a(1288);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1288);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well512a0, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(867);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = new Byte((byte)4);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      Double double1 = new Double((byte)4);
      Pair<Double, String> pair4 = new Pair<Double, String>(double0, (String) null);
      discreteDistribution0.sample(812);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
      discreteDistribution2.probability((Byte) null);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      Byte byte0 = new Byte((byte) (-1));
      Double double0 = new Double((byte) (-1));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Byte byte1 = new Byte((byte)4);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      Double double1 = new Double((byte)4);
      Pair<Double, String> pair4 = new Pair<Double, String>(double0, (String) null);
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution2.sample(1005);
      discreteDistribution1.sample((int) (byte)4);
      Byte byte2 = new Byte((byte) (-37));
      Byte byte3 = new Byte((byte) (-24));
      discreteDistribution0.probability(byte3);
      Well19937a well19937a0 = new Well19937a((long) (byte) (-24));
      well19937a0.nextLong();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution3 = null;
//      try {
        discreteDistribution3 = new DiscreteDistribution<Float>(well19937a0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      Well1024a well1024a0 = new Well1024a((long) (byte)4);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(well1024a0, linkedList0);
      List<Pair<Byte, Double>> list0 = discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator((-1L));
      discreteDistribution0.sample();
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      discreteDistribution0.sample(1259);
      Byte byte1 = new Byte((byte) (-16));
      Well44497a well44497a0 = new Well44497a((-933L));
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(well44497a0, list0);
      Byte byte2 = new Byte((byte)60);
      discreteDistribution1.probability(byte2);
      Well19937a well19937a0 = new Well19937a((long) (byte)46);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Float>(well1024a0, linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)4;
      Byte byte1 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      Double double1 = new Double((-4.391824838015402E-9));
      Pair<Double, String> pair2 = new Pair<Double, String>((Double) null, "");
      DiscreteDistribution<Byte> discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList0);
      int int0 = (-4334);
//      try { 
        discreteDistribution2.sample((-4334));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-4,334)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      Double double1 = new Double((byte)4);
      Pair<Double, String> pair2 = new Pair<Double, String>(double1, "");
      DiscreteDistribution<Byte> discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution1.sample((int) (byte)4);
      discreteDistribution0.sample(1259);
      Byte byte1 = new Byte((byte)46);
      discreteDistribution0.probability(byte0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Object>(mersenneTwister0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiscreteDistribution<Pair<Double, Integer>> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Double, Integer>>((List<Pair<Pair<Double, Integer>, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)4);
      Double double0 = new Double((byte)4);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator((-1L));
      discreteDistribution0.sample();
      long long0 = (-1L);
      Well512a well512a0 = new Well512a((-1L));
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      discreteDistribution1.reseedRandomGenerator(1245L);
      discreteDistribution0.sample();
      discreteDistribution1.getSamples();
//      try { 
        discreteDistribution1.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte) (-13);
      Byte byte1 = new Byte((byte) (-13));
      Double double0 = new Double((byte) (-13));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -13 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(iSAACRandom0, (List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte) (-22);
      Byte byte1 = new Byte((byte) (-22));
      Double double0 = new Double(0.0);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.stream();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      jDKRandomGenerator0.nextFloat();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(jDKRandomGenerator0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
