/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:00:02 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      discreteDistribution0.reseedRandomGenerator(4499201580859392L);
      discreteDistribution0.sample(4179);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double0);
      linkedList2.push(pair1);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList2);
      List<Pair<String, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(well19937c0, list0);
      discreteDistribution2.sample();
      discreteDistribution2.getSamples();
      discreteDistribution1.probability((String) null);
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution3 = null;
//      try {
        discreteDistribution3 = new DiscreteDistribution<Object>(linkedList3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(4169);
      Double double0 = new Double(4168);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList1.add(pair0);
      linkedList1.add(pair1);
      int[] intArray0 = new int[1];
      intArray0[0] = 4168;
      Well19937a well19937a0 = new Well19937a(intArray0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList1);
      discreteDistribution0.reseedRandomGenerator(1336L);
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.sample(4179);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(4168);
      Pair<String, Double> pair2 = new Pair<String, Double>("", double1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair3);
      LinkedList<Pair<String, Double>> linkedList3 = new LinkedList<Pair<String, Double>>();
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(jDKRandomGenerator0, linkedList1);
      discreteDistribution1.reseedRandomGenerator(0L);
      discreteDistribution1.sample(962);
      Integer integer1 = new Integer(962);
      discreteDistribution0.sample();
      Random.setNextRandom(4168);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Spliterator<Pair<Object, Double>> spliterator0 = linkedList0.spliterator();
      Double double0 = new Double(1203.06297227);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(spliterator0, double0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList0.removeAll(linkedList1);
      linkedList0.add(pair0);
      Double double1 = new Double(1075.343750347186);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(linkedList0, double1);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      int int0 = 1149;
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(1149);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2333L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(4503599627370495L);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      discreteDistribution0.reseedRandomGenerator(4499201580859392L);
      Integer[] integerArray0 = discreteDistribution0.sample(4179);
      assertEquals(4179, integerArray0.length);
      
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(1.5844520500391037);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.push(pair2);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList2);
      List<Pair<String, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(list0);
      double double2 = discreteDistribution2.probability((String) null);
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      discreteDistribution0.reseedRandomGenerator(4499201580859392L);
      discreteDistribution0.sample(4179);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(0.3428164444403128);
      Pair<String, Double> pair1 = new Pair<String, Double>((String) null, double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair2);
      Pair<String, Double> pair4 = new Pair<String, Double>(pair2);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      linkedList2.add(pair1);
      linkedList2.push(pair4);
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(well19937c0, linkedList2);
      List<Pair<String, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(list0);
      // Undeclared exception!
//      try { 
        discreteDistribution2.sample(2157);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2157);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList1.push(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(list0);
      DiscreteDistribution<String> discreteDistribution2 = new DiscreteDistribution<String>(list0);
      discreteDistribution2.probability("");
      String string0 = discreteDistribution1.sample();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double((-1.0));
      Integer integer1 = new Integer(4169);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer1, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-1L));
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.sample();
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(278);
      Double double0 = new Double(2629.417295);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList2.add(pair1);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList2);
      // Undeclared exception!
//      try { 
        discreteDistribution0.reseedRandomGenerator(786L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      discreteDistribution0.sample(4179);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.getSamples();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      long long0 = (-1L);
      discreteDistribution1.reseedRandomGenerator((-1L));
      discreteDistribution0.sample(2157);
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution2.sample();
      discreteDistribution2.sample(2157);
      Double double1 = new Double(768.23);
      Double double2 = new Double((-2317L));
      Pair<String, Double> pair1 = new Pair<String, Double>(";o$", double0);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      Pair<String, Double> pair3 = new Pair<String, Double>(pair1);
      DiscreteDistribution<Double> discreteDistribution3 = null;
//      try {
        discreteDistribution3 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      discreteDistribution0.reseedRandomGenerator(4499201580859392L);
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      discreteDistribution0.sample(2157);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double((-3582.67369));
      Double double2 = new Double((-2317L));
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double2);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well19937c0, linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,317 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = (-2317L);
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      discreteDistribution0.sample(4179);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      discreteDistribution0.getSamples();
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution1.reseedRandomGenerator((-1L));
      discreteDistribution0.sample(2157);
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      // Undeclared exception!
      discreteDistribution0.sample(4179);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(33.633);
      Pair<String, Double> pair0 = new Pair<String, Double>("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Double double1 = new Double(2157);
      Pair<String, Double> pair1 = new Pair<String, Double>("", double1);
      Pair<String, Double> pair2 = new Pair<String, Double>(pair1);
      linkedList1.push(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList1);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      DiscreteDistribution<String> discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
      double double2 = discreteDistribution1.probability((String) null);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 2157;
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      int int1 = 2;
      discreteDistribution0.sample(2);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      int int2 = 0;
      int int3 = (-988293352);
//      try { 
        discreteDistribution0.sample((-988293352));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-988,293,352)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2629.417295);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList2.push(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((RandomGenerator) null, linkedList2);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
      
      double double1 = discreteDistribution0.probability("N9XY(6*5");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Float float0 = new Float(1096.1285252);
      linkedList1.remove((Object) float0);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      linkedList2.retainAll(linkedList0);
      Double double0 = new Double(1096.1285252);
      Double double1 = new Double(1096.1285252);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double0);
      linkedList2.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList2);
      LinkedList<Pair<Integer, Double>> linkedList3 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-2317L);
      Well19937c well19937c0 = new Well19937c((-2317L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(2157);
      Double double0 = new Double(2144.86016);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator((-2317L));
      int int0 = 2;
      discreteDistribution0.sample(2);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.offer((Pair<Double, Double>) null);
      Double double1 = new Double((-3582.67369));
      Double double2 = new Double((-2317L));
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double1, double2);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(well19937c0, linkedList1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.remove((Object) null);
      Double double0 = new Double((-1507.5));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,507.5 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      Well1024a well1024a0 = new Well1024a(189);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(2629.417295);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList2.push(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList2);
      List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
      assertFalse(list0.isEmpty());
      
      double double1 = discreteDistribution0.probability("");
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      String string0 = "067d\"UOf)oZDTnC";
      Long.getLong("067d\"UOf)oZDTnC");
      Double double0 = new Double(0.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair2);
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1116;
      intArray0[1] = 253;
      intArray0[2] = (-2348);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2086;
      intArray0[6] = (-474);
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double(1096.1285252);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.offerFirst(pair1);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(mersenneTwister0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(0.0);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, (Double) null);
      linkedList0.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.add((Pair<Object, Double>) null);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1L));
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, (List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well512a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
