/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 18:05:57 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      Integer integer0 = new Integer(1894);
      Pair<Integer, Integer> pair0 = (Pair<Integer, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Double double0 = new Double(1372.144185256);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      linkedList0.parallelStream();
      discreteDistribution0.sample(1894);
      discreteDistribution0.sample(1894);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(integer2, double0);
      linkedList1.add(pair3);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList1);
      Integer integer3 = new Integer((-489383981));
      discreteDistribution1.probability(integer1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(361);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(double1, double1);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution2 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      discreteDistribution2.sample();
      List<Pair<Pair<Integer, Integer>, Double>> list0 = discreteDistribution2.getSamples();
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution3 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution4 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution5 = new DiscreteDistribution<Pair<Integer, Integer>>((RandomGenerator) null, list0);
      // Undeclared exception!
//      try { 
        discreteDistribution5.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(271.8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      System.setCurrentTimeMillis(426L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      Integer integer0 = new Integer(1894);
      Pair<Integer, Integer> pair0 = (Pair<Integer, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Double double0 = new Double(1372.144185256);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      Double double0 = new Double(1.0);
      Integer integer0 = new Integer(1);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Double double1 = new Double(963.44100175786);
      Double double2 = new Double(963.44100175786);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double2);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair2);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      linkedList0.add(pair3);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Integer integer1 = new Integer(1996);
      discreteDistribution0.probability(integer0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Well19937a well19937a1 = new Well19937a(1);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      assertFalse(discreteDistribution1.equals((Object)discreteDistribution0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      Integer integer0 = new Integer(1894);
      Pair<Integer, Integer> pair0 = (Pair<Integer, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Double double0 = new Double(1372.144185256);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair3);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution1.sample(366);
      List<Pair<Double, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution2 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 366);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution3 = new DiscreteDistribution<Pair<Integer, Integer>>(mersenneTwister0, linkedList0);
      discreteDistribution3.getSamples();
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(366);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(double0, double1);
      DiscreteDistribution<Double> discreteDistribution4 = new DiscreteDistribution<Double>(linkedList1);
      DiscreteDistribution<Double> discreteDistribution5 = new DiscreteDistribution<Double>(list0);
      discreteDistribution4.reseedRandomGenerator((-2825L));
      assertNotSame(discreteDistribution4, discreteDistribution1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      int int0 = 1894;
      Integer integer0 = new Integer(1894);
      Pair<Integer, Integer> pair0 = (Pair<Integer, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Double double0 = new Double(1372.144185256);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair3);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution1.sample(366);
      discreteDistribution1.getSamples();
      int[] intArray0 = new int[9];
      intArray0[0] = 1894;
      intArray0[1] = 366;
      intArray0[2] = 1894;
      intArray0[3] = 366;
      intArray0[4] = 1894;
      intArray0[5] = 1894;
      intArray0[6] = 1894;
      intArray0[7] = 265;
      intArray0[8] = 366;
      Well1024a well1024a0 = new Well1024a(intArray0);
      DiscreteDistribution<Long> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(well1024a0, (List<Pair<Long, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(271.8);
      Integer integer0 = new Integer(194);
      Double double1 = new Double(271.8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.offer(pair1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int0 = 2098;
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      Double double0 = new Double(1.0);
      Integer integer0 = new Integer(1);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      linkedList0.add(pair2);
      Pair<Pair<Integer, Integer>, Double> pair3 = new Pair<Pair<Integer, Integer>, Double>(pair0, double0);
      linkedList0.add(pair3);
      linkedList0.add(pair3);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      discreteDistribution0.sample(1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(0.0);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(double1, double1);
      linkedList1.add(pair4);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-1681);
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      Integer integer0 = new Integer((-1681));
      Pair<Integer, Integer> pair0 = (Pair<Integer, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Double double0 = new Double(1372.144185256);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(271.8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(0L);
      int int0 = 2098;
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      Integer integer0 = new Integer((-1681));
      Pair<Integer, Integer> pair0 = (Pair<Integer, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(pair0).getKey();
      doReturn(integer0).when(pair0).getValue();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      Double double0 = new Double(1372.144185256);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double0);
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double0, double0);
      linkedList1.add(pair3);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//      try { 
        discreteDistribution1.sample((-1681));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1,681)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(271.8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Double double1 = new Double(271.8);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      linkedList1.add(pair2);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      int int0 = 366;
      int int1 = (-623451953);
//      try { 
        discreteDistribution0.sample((-623451953));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-623,451,953)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(271.8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(2139611640);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(271.8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int0 = 2098;
      discreteDistribution0.probability((Integer) null);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = Integer.valueOf((-1));
      Double double0 = Double.valueOf((double) (-1));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(2887.62);
      Pair<Pair<Integer, Integer>, Double> pair0 = new Pair<Pair<Integer, Integer>, Double>((Pair<Integer, Integer>) null, double0);
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList1 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      linkedList1.add(pair0);
      Double double1 = new Double(2887.62);
      Pair<Pair<Integer, Integer>, Double> pair1 = new Pair<Pair<Integer, Integer>, Double>((Pair<Integer, Integer>) null, double1);
      linkedList1.add(pair1);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList1);
      LinkedList<Pair<Double, Double>> linkedList2 = new LinkedList<Pair<Double, Double>>();
      Double double2 = new Double((-451.620752926072));
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double2, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution1.sample(366);
      discreteDistribution1.getSamples();
      int[] intArray0 = new int[7];
      intArray0[0] = 366;
      intArray0[1] = 366;
      intArray0[2] = 118;
      intArray0[3] = 265;
      intArray0[4] = 265;
      intArray0[5] = 265;
      intArray0[6] = 1;
      Well1024a well1024a0 = new Well1024a(intArray0);
      DiscreteDistribution<Long> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(well1024a0, (List<Pair<Long, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1681);
      LinkedList<Pair<Pair<Integer, Integer>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Integer>, Double>>();
      Pair<Integer, Integer> pair0 = (Pair<Integer, Integer>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      double double0 = 1372.144185256;
      Double double1 = new Double(1372.144185256);
      Pair<Pair<Integer, Integer>, Double> pair2 = new Pair<Pair<Integer, Integer>, Double>(pair1, double1);
      linkedList0.add(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Integer, Integer>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Integer>>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer.getInteger("");
      Double double0 = new Double(271.8);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      int int0 = 2098;
      Integer integer0 = new Integer(2098);
      discreteDistribution0.probability(integer0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Pair<String, Double> pair0 = null;
      linkedList0.add((Pair<String, Double>) null);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      well44497a0.setSeed(0L);
      Float float0 = new Float((-242.02823F));
      Double double0 = new Double((-242.02823F));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      long long0 = 319L;
      well44497a0.setSeed(319L);
      linkedList0.removeFirst();
      linkedList0.add((Pair<Float, Double>) null);
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well44497a0, linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-140.98405070867918));
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -140.984 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1319);
      intArray0[2] = (-775);
      intArray0[3] = 3210;
      intArray0[4] = (-3021);
      intArray0[5] = 982;
      intArray0[6] = 290;
      intArray0[7] = 0;
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(well512a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
