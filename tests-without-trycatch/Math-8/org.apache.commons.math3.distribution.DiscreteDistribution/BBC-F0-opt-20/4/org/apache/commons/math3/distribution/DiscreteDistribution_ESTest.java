/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:07:24 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1199.548197809);
      Double double0 = new Double(1199.548197809);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList0.push(pair0);
      linkedList0.push(pair0);
      linkedList0.parallelStream();
      Float float1 = new Float(0.0F);
      linkedList0.add(pair0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(jDKRandomGenerator0, linkedList0);
      discreteDistribution0.getSamples();
      linkedList0.remove((Object) float0);
      discreteDistribution0.reseedRandomGenerator(0L);
      // Undeclared exception!
      discreteDistribution0.sample(186480348);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Integer integer0 = new Integer(2);
      int[] intArray0 = new int[18];
      intArray0[2] = 2;
      intArray0[4] = 1366;
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((double) 0);
      Double double0 = new Double(5.8376834484391746E-8);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      linkedList1.push(pair0);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)87);
      Double double1 = new Double(Float.POSITIVE_INFINITY);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(byte0, double1);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(pair1);
      linkedList2.add(pair2);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(1764.68581);
      Double double0 = new Double(5.8376834484391746E-8);
      Double double1 = new Double(5.8376834484391746E-8);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double1);
      linkedList1.push(pair0);
      Double.valueOf(1.2408792972564697);
      Float float1 = new Float((-959.9392F));
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well44497b0, linkedList1);
      Well19937c well19937c0 = new Well19937c(259984201);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(well19937c0, linkedList1);
      discreteDistribution1.reseedRandomGenerator(0L);
      discreteDistribution0.sample(259984201);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Object object0 = new Object();
      Double double0 = new Double(0.668249929474551);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      int int0 = 2145912701;
      Well19937a well19937a0 = new Well19937a(2145912701);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<String>(well19937a0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Double double0 = new Double(88.51535106309);
      Double double1 = new Double(157.446);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double1);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      double double2 = discreteDistribution0.probability((Integer) null);
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      Double double0 = new Double((byte)32);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, double0);
      linkedList0.add(pair0);
      Double double1 = new Double((byte)32);
      Pair<Float, Double> pair1 = new Pair<Float, Double>((Float) null, double1);
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float1 = new Float(Float.POSITIVE_INFINITY);
      Double double2 = new Double(Float.POSITIVE_INFINITY);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float1, double2);
      linkedList1.add(pair2);
      Pair<Float, Double> pair3 = new Pair<Float, Double>((Float) null, double1);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair1);
      Pair<Float, Double> pair5 = new Pair<Float, Double>(pair4);
      linkedList1.add(pair1);
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(iSAACRandom0, linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array contains an infinite element, \u221E at index 0
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Integer integer0 = new Integer(3844);
      Double double0 = new Double(3844);
      Integer integer1 = new Integer(3844);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      LinkedList<Pair<Integer, Double>> linkedList2 = new LinkedList<Pair<Integer, Double>>();
      linkedList2.add(pair0);
      Integer integer2 = new Integer((byte)32);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList2);
      discreteDistribution0.probability((Integer) null);
      System.setCurrentTimeMillis(342L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Integer integer0 = new Integer(2);
      Double double0 = new Double(2);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair1);
      Integer integer1 = new Integer(690);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      discreteDistribution0.probability(integer1);
      Float float0 = new Float(31.83821815);
      Double double1 = new Double(0.15356677523040974);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double0);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      linkedList2.offerLast(pair2);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
      discreteDistribution1.sample();
      linkedList2.clone();
      discreteDistribution1.sample(690);
      List<Pair<Float, Double>> list0 = discreteDistribution1.getSamples();
      DiscreteDistribution<Float> discreteDistribution2 = new DiscreteDistribution<Float>(list0);
      discreteDistribution2.sample();
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Integer integer0 = new Integer(2);
      Double double0 = new Double(2);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair1);
      Integer integer1 = new Integer(2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      discreteDistribution0.probability(integer1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      Well19937a well19937a0 = new Well19937a((-1437));
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, (List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)67);
      Double double0 = new Double((byte)67);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      Float float0 = new Float(3130.1556391);
      Double double1 = new Double(3130.1556391);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.offerLast(pair2);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList1);
      discreteDistribution0.sample();
      Float float1 = new Float(3130.1556391);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float1, double1);
      Pair<Float, Double> pair4 = new Pair<Float, Double>(pair3);
      Pair<Float, Double> pair5 = new Pair<Float, Double>(pair2);
      linkedList1.add(pair5);
      DiscreteDistribution<Float> discreteDistribution1 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
//      try { 
        discreteDistribution1.reseedRandomGenerator(1L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float(816.5366141);
      Double double0 = new Double(0.9027832946821761);
      Float float1 = new Float((-1374.5427601942513));
      Float float2 = new Float(816.5366141);
      Double double1 = new Double((-850.011709916));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float2, double1);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float1, double1);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(well44497b0, linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -850.012 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(1568.0878730191444);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      Float float0 = discreteDistribution0.sample();
      assertNull(float0);
      
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(6.390098458668406E-8);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.add(pair0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
      discreteDistribution0.sample();
      Well44497a well44497a0 = new Well44497a(807);
      LinkedList<Pair<Pair<Float, String>, Double>> linkedList1 = new LinkedList<Pair<Pair<Float, String>, Double>>();
      DiscreteDistribution<Pair<Float, String>> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Pair<Float, String>>(well44497a0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      int[] intArray0 = new int[5];
      intArray0[0] = (-438);
      intArray0[1] = 704;
      intArray0[2] = 1366;
      intArray0[3] = 988;
      intArray0[4] = (-438);
      int[] intArray1 = new int[5];
      Well44497b well44497b0 = new Well44497b(intArray1);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(1665.785671874603);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList1.add(pair0);
      Float float0 = new Float((double) (-438));
      Double double1 = new Double(1495.84192178);
      Float float1 = new Float((-1374.5427601942513));
      Pair<Float, Double> pair1 = new Pair<Float, Double>(float1, double1);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair1);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(pair2);
      linkedList1.add(pair3);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well44497b0, linkedList1);
      discreteDistribution0.reseedRandomGenerator(704);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(704);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Integer integer0 = new Integer(2);
      Double double0 = new Double(2);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair1);
      Integer integer1 = new Integer(690);
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList1);
      discreteDistribution0.probability(integer1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      Well19937a well19937a0 = new Well19937a(1960);
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(well19937a0, (List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(1568.0878730191444);
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
//      try { 
        discreteDistribution0.sample((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      int[] intArray0 = new int[5];
      intArray0[0] = (-438);
      intArray0[1] = 704;
      intArray0[2] = 1366;
      intArray0[3] = 988;
      intArray0[4] = (-438);
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((double) (-438));
      Double double0 = new Double(1495.84192178);
      Float float1 = new Float((-1374.5427601942513));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float1, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair0);
      linkedList1.add(pair2);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(well44497b0, linkedList1);
      discreteDistribution0.reseedRandomGenerator(704);
      Float[] floatArray0 = discreteDistribution0.sample(704);
      assertEquals(704, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      byte byte0 = (byte)32;
      byte byte1 = (byte)67;
      Byte byte2 = new Byte((byte)67);
      Double double0 = new Double((byte)67);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte2, double0);
      Pair<Byte, Double> pair1 = new Pair<Byte, Double>(pair0);
      linkedList0.add(pair1);
      Byte byte3 = new Byte((byte)32);
      Double double1 = new Double((byte)32);
      Pair<Byte, Double> pair2 = new Pair<Byte, Double>(byte3, double1);
      Pair<Byte, Double> pair3 = new Pair<Byte, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 33;
      Integer integer0 = new Integer(33);
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      linkedList0.addLast((Pair<Float, Double>) null);
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      Well44497b well44497b0 = new Well44497b(0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, (List<Pair<Integer, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-1374.5427601942513));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,374.543 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 219;
      intArray0[1] = 1788;
      intArray0[2] = 50;
      intArray0[3] = 4035;
      intArray0[4] = 1380;
      intArray0[5] = (-2723);
      intArray0[6] = 0;
      intArray0[7] = 0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well44497a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
