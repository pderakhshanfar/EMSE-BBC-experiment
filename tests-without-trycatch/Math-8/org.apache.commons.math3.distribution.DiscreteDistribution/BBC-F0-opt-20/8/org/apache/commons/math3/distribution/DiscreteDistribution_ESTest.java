/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:18:59 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(721.4446720984);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair1);
      Long long0 = new Long(0L);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair2);
      Pair<Long, Double> pair3 = new Pair<Long, Double>(pair2);
      linkedList0.add(pair2);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>(linkedList0);
      linkedList2.add(pair2);
      linkedList2.add(pair2);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      linkedList2.pollLast();
      Float float0 = new Float(0.6754127740859985);
      Double double1 = new Double(893.9551702);
      Pair<Object, Double> pair4 = new Pair<Object, Double>(float0, double1);
      linkedList1.add(pair4);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution1.sample(2716);
      discreteDistribution1.getSamples();
      Long long1 = Long.valueOf(0L);
      discreteDistribution1.probability(long1);
      DiscreteDistribution<Object> discreteDistribution2 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution2.sample();
      discreteDistribution2.probability((Object) null);
      // Undeclared exception!
//      try { 
        discreteDistribution2.sample(2716);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(3270L);
      Double double0 = new Double(1L);
      Long long1 = Long.getLong("", 3270L);
      Double double1 = new Double(0.5822374820709229);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution1.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(1.0);
      Long long0 = new Long(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((-5034868814120038111L));
      List<Pair<Long, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(list0.contains(pair0));
      
      double double1 = discreteDistribution0.probability((Long) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      Double double0 = new Double(1.0);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList1);
      discreteDistribution0.reseedRandomGenerator((-4102L));
      List<Pair<Long, Double>> list0 = discreteDistribution0.getSamples();
      assertTrue(list0.contains(pair1));
      
      double double1 = discreteDistribution0.probability((Long) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664512L);
      Double double0 = new Double(1664512L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList2.add(pair0);
      linkedList2.add(pair0);
      int[] intArray0 = new int[6];
      intArray0[1] = 129;
      Long long1 = new Long(129);
      Double double1 = new Double(0.38441169261932373);
      LinkedList<Pair<Long, Double>> linkedList3 = new LinkedList<Pair<Long, Double>>();
      linkedList3.add(pair0);
      linkedList3.add(pair0);
      linkedList3.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList2);
      linkedList2.pollLast();
      discreteDistribution0.sample(5340);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability(long1);
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Long long0 = new Long(1664554L);
      Double double0 = new Double(1664554L);
      Long long1 = new Long(1664554L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList1);
      discreteDistribution0.reseedRandomGenerator(1664554L);
      discreteDistribution0.getSamples();
      discreteDistribution0.probability(long0);
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.7324341765790943);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      linkedList0.iterator();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well44497b0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      linkedList0.addFirst(pair0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-499);
      intArray0[1] = (-253885580);
      intArray0[2] = (-253885580);
      intArray0[3] = (-253885580);
      intArray0[4] = (-253885580);
      Long long1 = new Long((-5442L));
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long1, double0);
      linkedList0.add(pair1);
      intArray0[5] = (-253885580);
      Well44497b well44497b0 = new Well44497b(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(well44497b0, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.reseedRandomGenerator(2935890503282001226L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      mersenneTwister0.nextInt(823);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(803);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      Double double1 = new Double(0L);
      Pair<String, Double> pair2 = new Pair<String, Double>("js%zC", double1);
      linkedList0.add(pair2);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Double double0 = new Double((short)0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList1.add(pair1);
      Short short1 = new Short((short)0);
      Double double1 = new Double(0.6951525620456733);
      Pair<Short, Double> pair2 = new Pair<Short, Double>(short1, double1);
      Pair<Short, Double> pair3 = new Pair<Short, Double>(pair2);
      linkedList1.add(pair3);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(jDKRandomGenerator0, linkedList1);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      linkedList2.add(pair3);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(jDKRandomGenerator0, linkedList2);
      Short short2 = discreteDistribution0.sample();
      assertEquals((short)0, (short)short2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Double double0 = new Double(0.6951525620456733);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Long long0 = Long.getLong((String) null, (long) (short)0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long0, double0);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      linkedList2.add(pair1);
      Well1024a well1024a0 = new Well1024a((long) (short)0);
      linkedList2.iterator();
      Well44497b well44497b0 = new Well44497b((long) (short)0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well44497b0, linkedList2);
//      try { 
        discreteDistribution0.sample((int) (short)0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664512L);
      Double double0 = new Double(1664512L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList2.add(pair0);
      linkedList2.add(pair0);
      int[] intArray0 = new int[6];
      intArray0[1] = 129;
      Long long1 = new Long(2891L);
      Double double1 = new Double((-1.0));
      Pair<Long, Double> pair1 = new Pair<Long, Double>(long0, double0);
      LinkedList<Pair<Long, Double>> linkedList3 = new LinkedList<Pair<Long, Double>>();
      Long long2 = Long.getLong("t^yN_79-MLM?u~hX", (long) 129);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(long2, double0);
      linkedList3.add(pair2);
      Well1024a well1024a0 = new Well1024a((long) 129);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well1024a0, linkedList3);
      discreteDistribution0.sample(400858353);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Double double0 = new Double(0.6951525620456733);
      Double double1 = new Double(1.0);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double1);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(jDKRandomGenerator0, linkedList1);
      discreteDistribution0.reseedRandomGenerator((short)0);
      Short short1 = discreteDistribution0.sample();
      assertEquals((short)0, (short)short1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1818.5);
      Double double1 = new Double(0.34990660205404533);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double1);
      linkedList0.offerLast(pair0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      Double double2 = new Double(2415.024957771591);
      Short short0 = new Short((short) (-569));
//      try { 
        Double.valueOf("a8?");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.removeAll(linkedList1);
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      int int0 = 154;
      discreteDistribution0.sample(154);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(well19937a0, linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      linkedList2.removeAll(linkedList1);
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      linkedList2.add(pair0);
      Well19937c well19937c0 = new Well19937c(9223372036854775807L);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937c0, linkedList2);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(261);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.removeAll(linkedList1);
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
//      try { 
        discreteDistribution0.sample((-2214));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-2,214)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList1.removeAll(linkedList2);
      Long long0 = new Long(1664525L);
      Double double0 = new Double((-51.83908890110016));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList1.add(pair0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1171;
      int int0 = (-1032);
      intArray0[2] = 152;
      intArray0[2] = 140;
      intArray0[4] = 347;
      intArray0[5] = (-643);
      intArray0[6] = (-3203);
      intArray0[7] = (-476);
      Well19937c well19937c0 = new Well19937c(intArray0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well19937c0, linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -51.839 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-1.0));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Pair<Double, Long>, Double>> linkedList0 = new LinkedList<Pair<Pair<Double, Long>, Double>>();
      Float float0 = new Float(0.0F);
      linkedList0.removeLastOccurrence(float0);
      linkedList0.poll();
      linkedList0.add((Pair<Pair<Double, Long>, Double>) null);
      DiscreteDistribution<Pair<Double, Long>> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Pair<Double, Long>>((RandomGenerator) null, linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.removeAll(linkedList1);
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(well19937a0, linkedList0);
      discreteDistribution0.sample(154);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Short>(well19937a0, linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.addFirst(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((List<Pair<Float, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      double double0 = 1818.5;
      Double double1 = new Double(1818.5);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      mersenneTwister0.nextDouble();
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      UnaryOperator<Pair<String, Double>> unaryOperator0 = UnaryOperator.identity();
      Double double0 = new Double(2388.853558264);
      Pair<String, Double> pair0 = new Pair<String, Double>("INFINITE_VALUE_CONVERSION", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      linkedList0.replaceAll(unaryOperator0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(mersenneTwister0, linkedList0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.nextLong();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well512a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
