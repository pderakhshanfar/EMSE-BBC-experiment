/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 18:04:34 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(916);
      Double double0 = new Double(916);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double0);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair2);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      List<Pair<Double, Double>> list0 = discreteDistribution1.getSamples();
      linkedList0.offerLast(pair1);
      discreteDistribution0.getSamples();
      linkedList0.offerLast(pair2);
      linkedList0.add(pair2);
      DiscreteDistribution<Double> discreteDistribution2 = new DiscreteDistribution<Double>(list0);
      // Undeclared exception!
//      try { 
        discreteDistribution1.reseedRandomGenerator(916);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      int int0 = (-1198);
      Integer integer0 = new Integer((-1198));
      Double double0 = new Double(407.452152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(10.42065130924902);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.probability((Double) null);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(999L);
      ISAACRandom iSAACRandom0 = new ISAACRandom(999L);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(999L);
      Pair<String, Double> pair0 = new Pair<String, Double>("row index ({0})", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(iSAACRandom0, linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(916);
      Double double0 = new Double(916);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(916);
      Double double2 = new Double(916);
      Double double3 = new Double(1.6584100723266602);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
//      try { 
        discreteDistribution0.sample((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(3584.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Double double1 = new Double(3584.0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.offerFirst(pair1);
      linkedList1.add(pair1);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(1424);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      // Undeclared exception!
      discreteDistribution0.sample(366589253);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
//      try { 
        discreteDistribution0.sample((-2));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-2)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double[] doubleArray0 = discreteDistribution0.sample(1320);
      assertEquals(1320, doubleArray0.length);
      
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(916);
      Double double0 = new Double(916);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(3411.94869982);
      Double double2 = new Double(1.4061005115509033);
      Double double3 = Double.valueOf(0.4406630794568889);
      Double double4 = new Double((-819.253186001));
      Double double5 = Double.valueOf(0.4406630794568889);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double4, double5);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      Double[] doubleArray0 = discreteDistribution0.sample(916);
      assertEquals(916, doubleArray0.length);
      
      double double6 = discreteDistribution0.probability(double3);
      assertEquals(0.0, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(916);
      Double double0 = new Double(916);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(916);
      Double double2 = new Double(916);
      Double double3 = Double.valueOf(0.4406630794568889);
      Double double4 = new Double(1.6584100723266602);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double4);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution1.sample(3583);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<String>(synchronizedRandomGenerator0, linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(916);
      Double double0 = new Double(916);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(916);
      Double double2 = new Double(916);
      Double double3 = Double.valueOf(0.4406630794568889);
      Double double4 = new Double(1.6584100723266602);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double3, double4);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      Double[] doubleArray0 = discreteDistribution0.sample(1);
      assertEquals(1, doubleArray0.length);
      
      double double5 = discreteDistribution0.probability((Double) null);
      assertEquals(0.0, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-2690.14074179));
      Double double1 = new Double((-2690.14074179));
      Double double2 = new Double(0.6204972385848975);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double2);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(916);
      Double double0 = new Double(916);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.addLast(pair1);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      Well19937a well19937a0 = new Well19937a(916);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(well19937a0, linkedList0);
      discreteDistribution1.getSamples();
      Well44497a well44497a0 = new Well44497a((-1L));
      well44497a0.nextInt(1916);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497a0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Double>(well44497a0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.sample(842);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      discreteDistribution0.getSamples();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      Double[] doubleArray0 = discreteDistribution0.sample(1396);
      assertEquals(1396, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 916;
      Integer integer0 = new Integer(916);
      Double double0 = new Double((-1577.829423499899));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.addLast(pair0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      linkedList1.add(pair0);
      linkedList1.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,577.829 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      double double0 = 1.0;
      Double double1 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(1566083941L);
      LinkedList<Pair<Pair<Byte, Object>, Double>> linkedList1 = new LinkedList<Pair<Pair<Byte, Object>, Double>>();
//      try { 
        discreteDistribution0.sample((-1630));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1,630)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.0);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      LinkedList<Pair<Pair<Byte, Object>, Double>> linkedList1 = new LinkedList<Pair<Pair<Byte, Object>, Double>>();
      int int0 = (-1630);
//      try { 
        discreteDistribution0.sample((-1630));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-1,630)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(916);
      Double double0 = new Double(916);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.addLast(pair0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      Well44497a well44497a0 = new Well44497a(0L);
      well44497a0.nextInt(916);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497a0);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(randomAdaptor0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Long long0 = new Long(1L);
      Double double0 = new Double(2614.053999238698);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      Float float0 = new Float(1.1920929E-7F);
      Double double1 = new Double(1.1920929E-7F);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(float0, double1);
      Pair<Object, Double> pair3 = new Pair<Object, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      Byte byte0 = new Byte((byte)116);
      Double double0 = new Double((byte)116);
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.offer(pair0);
      linkedList0.add((Pair<Byte, Double>) null);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 515;
      Integer integer0 = new Integer(515);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, (Double) null);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt();
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      well44497b0.nextDouble();
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double((-2.0));
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well44497b0, linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      Well512a well512a0 = new Well512a(0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.add((Pair<Object, Double>) null);
      linkedList0.add((Pair<Object, Double>) null);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      long long0 = (-1474L);
      well512a0.setSeed((-1474L));
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0.0);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well512a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
