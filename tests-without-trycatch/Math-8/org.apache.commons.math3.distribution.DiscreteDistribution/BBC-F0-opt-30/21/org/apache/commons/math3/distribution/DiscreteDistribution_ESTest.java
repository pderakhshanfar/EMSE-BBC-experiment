/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 17:56:05 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(152);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(integer0, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      long long0 = 735L;
      discreteDistribution0.reseedRandomGenerator((-1L));
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution1.reseedRandomGenerator(539L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(244.31374652282364);
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability((Object) null);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 404L;
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(221.8152214511094);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability((Object) null);
      int int0 = 345389534;
      // Undeclared exception!
      discreteDistribution0.sample(345389534);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      int int0 = 135;
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Integer integer1 = new Integer(827);
      Double double0 = new Double(4576.07794555);
      Double double1 = new Double(0.1715763653536435);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Byte byte0 = new Byte((byte) (-127));
      Pair<Object, Double> pair2 = new Pair<Object, Double>(byte0, double1);
      linkedList1.add(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.probability(integer0);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 404L;
      System.setCurrentTimeMillis(404L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.1921056801463227E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.probability(linkedList0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 152;
      Integer integer0 = new Integer(152);
      Integer integer1 = new Integer(827);
      Double double0 = new Double(4576.07794555);
      double double1 = 1695.10911;
      Double double2 = new Double(1695.10911);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double2);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList0.add(pair2);
      Integer integer2 = new Integer((-514));
      Double double3 = new Double(3406.648524058118);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(integer2, double3);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution1.sample(135);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 404L;
      System.setCurrentTimeMillis(404L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.1921056801463227E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      int int0 = 345389534;
      // Undeclared exception!
      discreteDistribution0.sample(345389534);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 404L;
      System.setCurrentTimeMillis(404L);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(1.1921056801463227E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.probability(linkedList0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 152;
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution1.sample(152);
      long long0 = (-2155L);
      discreteDistribution1.reseedRandomGenerator((-2155L));
      discreteDistribution0.sample();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<String>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 152;
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      int int1 = (-792);
//      try { 
        discreteDistribution0.sample((-792));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-792)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      int int0 = 152;
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      DiscreteDistribution<Integer> discreteDistribution2 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution2.sample(152);
      discreteDistribution2.reseedRandomGenerator((-2155L));
      discreteDistribution1.sample();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution3 = null;
//      try {
        discreteDistribution3 = new DiscreteDistribution<String>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>((Integer) null, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-1575L));
      discreteDistribution0.reseedRandomGenerator(1529L);
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.sample();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      LinkedList<Pair<String, Double>> linkedList2 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<String>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Double double1 = new Double(152);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(pair1);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair3 = new Pair<Integer, Double>(integer0, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      long long0 = 735L;
      discreteDistribution0.reseedRandomGenerator((-1L));
      DiscreteDistribution<Integer> discreteDistribution1 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution1.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("NOT_SYMMETRIC_MATRIX", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-1736.77746702255));
      Double double1 = new Double((-1736.77746702255));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      Double double2 = new Double((-1823.003));
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double2);
      linkedList0.addLast(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,736.777 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer(152);
      Double double0 = new Double(152);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Pair<Integer, Double> pair2 = new Pair<Integer, Double>(integer0, double0);
      linkedList0.add(pair2);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(linkedList0);
      discreteDistribution0.reseedRandomGenerator(735L);
      discreteDistribution0.sample();
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<String>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = (-862);
      intArray0[1] = (-862);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      iSAACRandom0.setSeed(0);
      iSAACRandom0.nextFloat();
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Integer integer0 = new Integer((-862));
      Double double0 = new Double((-862));
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(iSAACRandom0, linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -862 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      DiscreteDistribution<Short> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) null, (List<Pair<Short, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }
}
