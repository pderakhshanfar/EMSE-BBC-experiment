/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 20:57:15 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      Double double0 = new Double((-1156.34592537587));
      Float float0 = new Float((-1440.0934F));
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Double double1 = new Double(1.0);
      Pair<Pair<Object, Double>, Double> pair2 = new Pair<Pair<Object, Double>, Double>(pair1, double1);
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
//      try { 
        discreteDistribution0.sample((-2146134665));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-2,146,134,665)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(9.452180117175641E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Pair<Pair<Object, Double>, Double> pair1 = new Pair<Pair<Object, Double>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList1.add(pair1);
      linkedList1.add(pair1);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(jDKRandomGenerator0, linkedList1);
      discreteDistribution0.sample(522);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(90.69766827862867);
      Pair<Pair<Object, Double>, Double> pair0 = new Pair<Pair<Object, Double>, Double>((Pair<Object, Double>) null, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      discreteDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(0.49982786178588867);
      Pair<Pair<Object, Double>, Double> pair0 = new Pair<Pair<Object, Double>, Double>((Pair<Object, Double>) null, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(1605);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(90.69766827862867);
      Pair<Pair<Object, Double>, Double> pair0 = new Pair<Pair<Object, Double>, Double>((Pair<Object, Double>) null, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(90.69766827862867);
      Pair<Pair<Object, Double>, Double> pair0 = new Pair<Pair<Object, Double>, Double>((Pair<Object, Double>) null, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.reseedRandomGenerator((-1L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int) (byte)91);
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497b0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well512a well512a0 = new Well512a(intArray0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long((-5494L));
      Double double0 = new Double((-5494L));
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(well512a0, linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -5,494 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well44497a0, (List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.2662091216908222);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Pair<Pair<Object, Double>, Double> pair2 = new Pair<Pair<Object, Double>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double(3222936.695160983);
      Integer integer0 = new Integer(1169);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      Pair<Pair<Object, Double>, Double> pair3 = new Pair<Pair<Object, Double>, Double>(pair2, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      Pair<Pair<Object, Double>, Double> pair4 = new Pair<Pair<Object, Double>, Double>(pair2, double0);
      linkedList0.add(pair4);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      linkedList0.add(pair3);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution1 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution2 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      Pair<Object, Double> pair5 = discreteDistribution2.sample();
      assertSame(pair5, pair2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(3222936.695160983);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Pair<Pair<Object, Double>, Double> pair2 = new Pair<Pair<Object, Double>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      List<Pair<Pair<Object, Double>, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      Double double0 = new Double((byte)91);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Integer integer0 = new Integer((byte)91);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      Pair<Pair<Object, Double>, Double> pair3 = new Pair<Pair<Object, Double>, Double>(pair2, double0);
      linkedList0.add(pair3);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      Pair<Object, Double> pair4 = new Pair<Object, Double>(pair0);
      double double1 = discreteDistribution0.probability(pair4);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(3222936.695160983);
      Integer integer0 = new Integer(1169);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Pair<Pair<Object, Double>, Double> pair2 = new Pair<Pair<Object, Double>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      double double1 = discreteDistribution0.probability((Pair<Object, Double>) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(3222936.695160983);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      Pair<Pair<Object, Double>, Double> pair2 = new Pair<Pair<Object, Double>, Double>(pair1, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair2);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      double double1 = discreteDistribution0.probability(pair1);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(90.69766827862867);
      Pair<Pair<Object, Double>, Double> pair0 = new Pair<Pair<Object, Double>, Double>((Pair<Object, Double>) null, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList0);
      double double1 = discreteDistribution0.probability((Pair<Object, Double>) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double((-6.663542893624021E-14));
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -0 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(9.452180117175641E-8);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      Pair<Pair<Object, Double>, Double> pair1 = new Pair<Pair<Object, Double>, Double>(pair0, double0);
      LinkedList<Pair<Pair<Object, Double>, Double>> linkedList1 = new LinkedList<Pair<Pair<Object, Double>, Double>>();
      linkedList1.add(pair1);
      DiscreteDistribution<Pair<Object, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<Object, Double>>(linkedList1);
      discreteDistribution0.reseedRandomGenerator(1L);
  }
}
