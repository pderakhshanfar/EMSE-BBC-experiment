/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:13:45 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.1712579802975851E287);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.reseedRandomGenerator(1982L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Integer integer0 = new Integer(2035);
      Double double0 = new Double(0.014467044696700793);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well19937c0, double0);
      linkedList0.add(pair0);
      Double double1 = new Double(2243.271261626504);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(integer0, double1);
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList0.add(pair2);
      well19937c0.setSeed(2035);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(2952L);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(227650935);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.1712579802975851E287);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Double double1 = new Double(0.07073719799518585);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      discreteDistribution0.probability(long0);
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(9.223372036854776E18);
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) null, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      linkedList1.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList1);
      Pair<Long, Double> pair2 = new Pair<Long, Double>(pair1);
      linkedList1.add(pair0);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
      linkedList1.addFirst(pair0);
      DiscreteDistribution<Long> discreteDistribution2 = new DiscreteDistribution<Long>(linkedList1);
      // Undeclared exception!
//      try { 
        discreteDistribution2.sample(2961);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.probability(long0);
      // Undeclared exception!
      discreteDistribution0.sample(46983980);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      Double double1 = new Double(1664525L);
      Pair<Long, Double> pair2 = new Pair<Long, Double>((Long) null, double1);
      Pair<Long, Double> pair3 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair2);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.probability((Long) null);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.sample(2858);
      Long long1 = new Long((-2299L));
      discreteDistribution0.probability(long1);
      linkedList0.add(pair0);
      long long2 = 2147483647L;
      Long long3 = new Long(2858);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      discreteDistribution0.reseedRandomGenerator((-2299L));
      DiscreteDistribution<Byte> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(105L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(105L);
      Double double1 = new Double(105L);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>((Double) null, double1);
      linkedList0.add(pair1);
      Double double2 = new Double(105L);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(105L);
      Long long0 = new Long(0L);
      Double double0 = new Double(105L);
      Double double1 = new Double(0.5);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double1);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.probability(long0);
      int int0 = 1;
      discreteDistribution0.sample(1);
      discreteDistribution0.sample(1);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Double double1 = new Double(6.283185307179586);
      Double double2 = Double.valueOf((-350.7375006138844));
      Double double3 = new Double((-350.7375006138844));
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double2, double3);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      linkedList1.add(pair1);
      Double double4 = new Double(3937.581);
      Double double5 = new Double((-350.7375006138844));
      Pair<Double, Double> pair3 = new Pair<Double, Double>(double5, double0);
      Pair<Double, Double> pair4 = new Pair<Double, Double>(pair3);
      linkedList1.add(pair1);
      linkedList1.parallelStream();
      Double double6 = new Double((-2391.3772730474716));
      Pair<Double, Double> pair5 = new Pair<Double, Double>(double0, double6);
      Pair<Double, Double> pair6 = new Pair<Double, Double>(pair5);
      Pair<Double, Double> pair7 = new Pair<Double, Double>(pair6);
      linkedList1.add(pair5);
      Well1024a well1024a0 = new Well1024a();
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(well1024a0, linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -350.738 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(105L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(105L);
      Double double1 = new Double(105L);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      Double double2 = new Double(105L);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      linkedList0.parallelStream();
      Pair<Double, Double> pair4 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair5 = new Pair<Double, Double>(pair4);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
      discreteDistribution0.sample();
      discreteDistribution0.getSamples();
      discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(9.223372036854776E18);
      Pair<String, Double> pair0 = new Pair<String, Double>("nEc%Z5^/C*tq9\"", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      String string0 = discreteDistribution0.sample();
      assertEquals("nEc%Z5^/C*tq9\"", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      discreteDistribution0.probability((Long) null);
      linkedList0.add(pair1);
      Long long1 = new Long((-1780L));
      DiscreteDistribution<Byte> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      DiscreteDistribution<Long> discreteDistribution1 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = 2858;
      discreteDistribution1.sample(2858);
      Long long1 = new Long(2858);
      discreteDistribution0.probability(long1);
      linkedList0.add(pair1);
      Long long2 = new Long(2147483647L);
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Byte>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(105L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(105L);
      Double double1 = new Double(105L);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      Double double2 = new Double(105L);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      linkedList0.parallelStream();
      Pair<Double, Double> pair4 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair5 = new Pair<Double, Double>(pair4);
      linkedList0.add(pair5);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
      discreteDistribution0.getSamples();
      DiscreteDistribution<Object> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(105L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(105L);
      Double double1 = new Double(105L);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      Double double2 = new Double(105L);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double2);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair2);
      linkedList0.add(pair3);
      linkedList0.parallelStream();
      Pair<Double, Double> pair4 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair5 = new Pair<Double, Double>(pair4);
      linkedList0.add(pair5);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(well19937a0, linkedList0);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(well19937a0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      Long long0 = new Long(1664525L);
      Double double0 = new Double(1664525L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Long, Double> pair1 = new Pair<Long, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>(linkedList0);
      int int0 = (-4052);
//      try { 
        discreteDistribution0.sample((-4052));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-4,052)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double((-1183.88518));
      Pair<String, Double> pair0 = new Pair<String, Double>("|pEBC1}L+yvZr", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -1,183.885 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-647);
      Well19937c well19937c0 = new Well19937c((-647));
      well19937c0.setSeed((long) (-647));
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, (List<Pair<String, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)0);
      Double double0 = new Double(617.1793471896135);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      LinkedList<Pair<Integer, Double>> linkedList1 = new LinkedList<Pair<Integer, Double>>();
      DiscreteDistribution<Integer> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well19937c0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      Well19937a well19937a0 = new Well19937a(0);
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      linkedList0.toArray();
      DiscreteDistribution<Byte> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Byte>(well19937a0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
