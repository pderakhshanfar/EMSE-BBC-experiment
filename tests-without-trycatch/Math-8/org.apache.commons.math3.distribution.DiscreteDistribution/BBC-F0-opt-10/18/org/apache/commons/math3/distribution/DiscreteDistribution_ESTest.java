/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:54:21 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(777595425);
      Integer integer1 = Integer.getInteger("", integer0);
      Double double0 = new Double(0.45168190909160755);
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer1, double0);
      Pair<Integer, Double> pair1 = new Pair<Integer, Double>(pair0);
      linkedList0.add(pair1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)2141);
      Double double0 = new Double((short)2141);
      Double double1 = new Double(0.7162014314736671);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double1);
      linkedList0.offerLast(pair0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      Pair<Short, Double> pair2 = new Pair<Short, Double>((Short) null, double0);
      linkedList0.add(pair0);
      linkedList0.offerLast(pair2);
      Pair<Short, Double> pair3 = new Pair<Short, Double>(pair0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      Well1024a well1024a0 = new Well1024a((int) (short)2141);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)2141;
      intArray0[1] = (int) (short)2141;
      well1024a0.setSeed(intArray0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well1024a0, linkedList0);
      discreteDistribution1.sample((int) (short)2141);
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      Short short1 = discreteDistribution1.sample();
      assertNull(short1);
      
      Long long0 = new Long((-392L));
      float float0 = well1024a0.nextFloat();
      assertEquals(0.14348245F, float0, 0.01F);
      
      Pair<Long, Double> pair4 = new Pair<Long, Double>(long0, double1);
      linkedList2.add(pair4);
      DiscreteDistribution<Long> discreteDistribution2 = new DiscreteDistribution<Long>(linkedList2);
      discreteDistribution2.sample();
      double double2 = discreteDistribution1.probability((Short) null);
      assertEquals(0.9989974543575209, double2, 0.01);
      
      Short[] shortArray0 = discreteDistribution0.sample(483);
      assertEquals(483, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)2141);
      Double double0 = new Double((short)2141);
      Double double1 = new Double(0.7162014314736671);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double1);
      linkedList0.offerLast(pair0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      Pair<Short, Double> pair2 = new Pair<Short, Double>((Short) null, double0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.add(pair1);
      linkedList1.offerLast(pair2);
      Pair<Short, Double> pair3 = new Pair<Short, Double>(pair2);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      Well1024a well1024a0 = new Well1024a(2309);
      int[] intArray0 = new int[8];
      intArray0[0] = 2309;
      intArray0[1] = (int) (short)2141;
      intArray0[2] = (int) (short)2141;
      intArray0[3] = (int) (short)2141;
      intArray0[4] = (int) (short)2141;
      intArray0[5] = (int) (short)2141;
      intArray0[6] = 2309;
      intArray0[7] = (int) (short)2141;
      well1024a0.setSeed(intArray0);
      LinkedList<Pair<Short, Double>> linkedList2 = new LinkedList<Pair<Short, Double>>();
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(well1024a0, linkedList1);
      // Undeclared exception!
      discreteDistribution0.sample(162911527);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3112.8932250757);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.sample();
//      try { 
        discreteDistribution0.sample((-2008));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-2,008)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)2141);
      Double double0 = new Double((short)2141);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, (Double) null);
      linkedList0.offerLast(pair0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      Pair<Short, Double> pair2 = new Pair<Short, Double>((Short) null, double0);
      linkedList0.offerLast(pair0);
      Pair<Short, Double> pair3 = new Pair<Short, Double>(pair1);
      Pair<Short, Double> pair4 = new Pair<Short, Double>(pair3);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      Pair<Short, Double> pair5 = new Pair<Short, Double>(pair2);
      linkedList1.offerLast(pair5);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample((int) (short)2141);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      Short short0 = new Short((short)2141);
      Double double0 = new Double(3708.621);
      Double double1 = new Double((short)2141);
      Pair<String, Double> pair0 = new Pair<String, Double>("sk7LMTw9#kV)&Bd[.", double1);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.addFirst(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList1);
      discreteDistribution0.probability((String) null);
      Long long0 = new Long(0L);
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3.6769498759522324E-8);
      Pair<String, Double> pair0 = new Pair<String, Double>("+]ZLooCR/O", double0);
      linkedList0.add(pair0);
      Double double1 = new Double(3112.8932250757);
      Pair<String, Double> pair1 = new Pair<String, Double>("?MmBFb0|CH-R[e*g", double1);
      linkedList0.addFirst(pair1);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("?MmBFb0|CH-R[e*g");
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double((-9.879317845E-315));
      Pair<String, Double> pair0 = new Pair<String, Double>("(#1W'0BY|+y*gw.", double0);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      LinkedList<Pair<String, Double>> linkedList1 = new LinkedList<Pair<String, Double>>();
      linkedList1.addFirst(pair1);
      String string0 = "bPz:q";
      Well19937c well19937c0 = new Well19937c(0L);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(well19937c0, linkedList1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -0 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)2141;
      Short short1 = new Short((short)2141);
      Double double0 = new Double((short)2141);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.sample((int) (short)2141);
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      System.setCurrentTimeMillis((short)2141);
      DiscreteDistribution<Long> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Short short0 = new Short((short)1);
      Double double0 = new Double(3112.8932250757);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      LinkedList<Pair<Short, Double>> linkedList1 = new LinkedList<Pair<Short, Double>>();
      linkedList1.offerLast(pair1);
      linkedList1.add(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList1);
      DiscreteDistribution<Short> discreteDistribution1 = new DiscreteDistribution<Short>(linkedList1);
      discreteDistribution1.sample();
      LinkedList<Pair<Long, Double>> linkedList2 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Long>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3112.8932250757);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//      try { 
        discreteDistribution0.sample((-2008));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-2,008)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      short short0 = (short)2141;
      Short short1 = new Short((short)2141);
      Double double0 = new Double((short)2141);
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      Pair<Short, Double> pair1 = new Pair<Short, Double>(pair0);
      linkedList0.offerLast(pair1);
      DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
      discreteDistribution0.getSamples();
      discreteDistribution0.sample();
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Long>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(0.0);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      linkedList0.addFirst(pair0);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double(3235.288);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair2 = new Pair<Object, Double>(pair1);
      linkedList1.offerFirst(pair2);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      discreteDistribution0.sample();
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      SynchronizedRandomGenerator synchronizedRandomGenerator1 = new SynchronizedRandomGenerator(synchronizedRandomGenerator0);
      LinkedList<Pair<Float, Double>> linkedList2 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(synchronizedRandomGenerator0, linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3112.8932250757);
      Double double1 = new Double(114.27368839);
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(byte1, double0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      linkedList1.add(pair0);
      Well512a well512a0 = new Well512a();
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList1);
      discreteDistribution0.reseedRandomGenerator((byte)1);
      DiscreteDistribution<Integer> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Integer>(well512a0, (List<Pair<Integer, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      String string0 = "?MmBFb0|CH-R[e*g";
      Double double0 = new Double(3112.8932250757);
      Pair<String, Double> pair0 = new Pair<String, Double>("?MmBFb0|CH-R[e*g", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList1.add(pair1);
      int int0 = (-1);
      Well44497b well44497b0 = new Well44497b((-1));
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(well44497b0, linkedList1);
      DiscreteDistribution<Pair<Long, Float>> discreteDistribution2 = null;
//      try {
        discreteDistribution2 = new DiscreteDistribution<Pair<Long, Float>>(well44497b0, (List<Pair<Pair<Long, Float>, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3112.8932250757);
      Pair<String, Double> pair0 = new Pair<String, Double>("?MmBFb0|CH-R[e*g", double0);
      linkedList0.addFirst(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
      discreteDistribution0.probability("?MmBFb0|CH-R[e*g");
      Long long0 = new Long(2541L);
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Long, Double>> linkedList1 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Long>((RandomGenerator) null, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-741.5));
      Double double1 = new Double((-741.5));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -741.5 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = new Double(3112.8932250757);
      Pair<String, Double> pair0 = new Pair<String, Double>("?MmBFb0|CH-R[e*g", double0);
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(2975.2);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.offerFirst(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1859);
      intArray0[1] = 0;
      Well19937c well19937c0 = new Well19937c(intArray0);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(synchronizedRandomGenerator0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(250);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(250);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, (Double) null);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(well1024a0, linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = (-3458L);
      ISAACRandom iSAACRandom0 = new ISAACRandom((-3458L));
      iSAACRandom0.nextInt(381);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.removeAll(linkedList1);
      iSAACRandom0.nextGaussian();
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(iSAACRandom0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
