/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:52:05 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(101.19766124006648);
      Double double1 = new Double(101.19766124006648);
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution0.reseedRandomGenerator((-1845L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double((-2074.022530359));
      Double double1 = new Double(110.64211);
      Float float0 = new Float((-247.705F));
      Double double2 = new Double(110.64211);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double2);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      Pair<Float, Double> pair2 = new Pair<Float, Double>(pair0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.add(pair2);
      Float float1 = new Float((-247.705F));
      Double double3 = new Double(0.8286301929228643);
      Double double4 = new Double(110.64211);
      Pair<Float, Double> pair3 = new Pair<Float, Double>(float1, double1);
      linkedList1.offerFirst(pair2);
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>(jDKRandomGenerator0, linkedList1);
      discreteDistribution0.getSamples();
      int int0 = 3950;
      discreteDistribution0.sample(3950);
      LinkedList<Pair<Byte, Double>> linkedList2 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(linkedList2);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(1.71390848833098E-15);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Float float0 = new Float((float) 0L);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(3960.8083879876);
      Pair<Double, Double> pair0 = new Pair<Double, Double>((Double) null, double0);
      linkedList1.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
      Double double1 = new Double(590.1705);
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 91.749712;
      Well44497b well44497b0 = new Well44497b();
      well44497b0.setSeed(4398046511103L);
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(4398046511103L);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double1);
      LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0, double1);
      linkedList1.offerFirst(pair1);
      linkedList1.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList1);
      int int0 = 3201;
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample(3201);
//        fail("Expecting exception: ArrayStoreException");
      
//      } catch(ArrayStoreException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      Double double0 = new Double((-1676.08854437));
      Float float0 = new Float(0.0F);
      Double double1 = new Double(0.14807457585374473);
      Pair<Float, Double> pair0 = new Pair<Float, Double>(float0, double1);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      LinkedList<Pair<Float, Double>> linkedList1 = new LinkedList<Pair<Float, Double>>();
      linkedList1.offerFirst(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList1);
      // Undeclared exception!
//      try { 
        discreteDistribution0.sample();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double0);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      linkedList2.offerFirst(pair0);
      linkedList2.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList2);
      discreteDistribution0.getSamples();
      discreteDistribution0.reseedRandomGenerator((-4064L));
      discreteDistribution0.sample();
      discreteDistribution0.sample(1221);
      discreteDistribution0.sample(3201);
      DiscreteDistribution<Double> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(3337.778226376238);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      linkedList2.offerFirst(pair0);
      linkedList2.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList2);
      discreteDistribution0.sample(3201);
      Double double2 = new Double(4137.02);
      Double double3 = new Double(3201);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(double2, double3);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(linkedList1);
      // Undeclared exception!
      discreteDistribution1.sample(276087563);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      List<Pair<Double, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
      
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair3 = new Pair<Double, Double>(pair1);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution1 = new DiscreteDistribution<Double>(list0);
      double double1 = discreteDistribution0.probability((Double) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList1.add(pair1);
      Double double1 = new Double(3337.778226376238);
      Double double2 = new Double(3337.778226376238);
      Pair<Double, Double> pair2 = new Pair<Double, Double>(double1, double2);
      linkedList1.add(pair2);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.getSamples();
      Byte byte0 = new Byte((byte)58);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator(4294967295L);
      Double double3 = new Double(0.9408145169797839);
      Double double4 = new Double((-1.0));
      discreteDistribution0.probability(double4);
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(3337.778226376238);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      LinkedList<Pair<Object, Double>> linkedList3 = new LinkedList<Pair<Object, Double>>();
      linkedList2.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList2);
      int int0 = 0;
//      try { 
        discreteDistribution0.sample(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-388);
      intArray0[1] = (-1409);
      Double double0 = new Double(2.0023789405822754);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      discreteDistribution0.sample(3192);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
      // Undeclared exception!
//      try { 
        discreteDistribution1.sample(3224);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      discreteDistribution0.sample();
      discreteDistribution0.reseedRandomGenerator((-1583L));
      Double double1 = new Double(3337.778226376238);
      discreteDistribution0.probability(double0);
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Double double1 = new Double(3337.778226376238);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well44497b0, double1);
      LinkedList<Pair<Object, Double>> linkedList2 = new LinkedList<Pair<Object, Double>>();
      linkedList2.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList2);
      int int0 = 3201;
      discreteDistribution0.sample(3201);
      linkedList2.add(pair0);
      discreteDistribution0.sample(3201);
      LinkedList<Pair<Float, Double>> linkedList3 = new LinkedList<Pair<Float, Double>>();
      DiscreteDistribution<Float> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Float>(linkedList3);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      Double double1 = new Double(3337.778226376238);
      double double2 = discreteDistribution0.probability(double0);
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-383);
      intArray0[1] = (-1409);
      Double double0 = new Double(2.0023789405822754);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      linkedList0.add(pair0);
//      try { 
        discreteDistribution0.sample((-383));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of samples (-383)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = new Double(3337.778226376238);
      LinkedList<Pair<Double, Double>> linkedList1 = new LinkedList<Pair<Double, Double>>();
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      Pair<Double, Double> pair1 = new Pair<Double, Double>(pair0);
      linkedList1.add(pair1);
      DiscreteDistribution<Double> discreteDistribution0 = new DiscreteDistribution<Double>(linkedList1);
      Double double1 = new Double((-3856.5304108090118));
      double double2 = discreteDistribution0.probability(double1);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-410L));
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Long long0 = new Long(1L);
      Double double0 = new Double(2948.30582847251);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)0;
      well44497b0.nextBytes(byteArray0);
      well44497b0.setSeed(1419L);
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long0, double0);
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well44497b0, linkedList0);
      System.setCurrentTimeMillis(4577762542105553359L);
      long long1 = 118L;
      discreteDistribution0.reseedRandomGenerator(118L);
      long long2 = 0L;
      discreteDistribution0.reseedRandomGenerator(0L);
      discreteDistribution0.getSamples();
      LinkedList<Pair<Byte, Double>> linkedList1 = new LinkedList<Pair<Byte, Double>>();
      DiscreteDistribution<Byte> discreteDistribution1 = null;
//      try {
        discreteDistribution1 = new DiscreteDistribution<Byte>(well44497b0, linkedList1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double((-2048.483544038436));
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.add(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -2,048.484 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      DiscreteDistribution<Integer> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>(well44497a0, (List<Pair<Integer, Double>>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.0);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(double0, double0);
      linkedList0.offerFirst(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      LinkedList<Pair<Float, Double>> linkedList0 = new LinkedList<Pair<Float, Double>>();
      Double double0 = Double.valueOf((-3855.983225025));
      Pair<Float, Double> pair0 = new Pair<Float, Double>((Float) null, double0);
      Pair<Float, Double> pair1 = new Pair<Float, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<Float> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Float>((RandomGenerator) null, linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -3,855.983 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      Double double0 = null;
      Pair<String, Double> pair0 = new Pair<String, Double>((String) null, (Double) null);
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      linkedList0.add(pair1);
      DiscreteDistribution<String> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<String>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      DiscreteDistribution<Long> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Long>(mersenneTwister0, linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      linkedList0.add((Pair<Double, Double>) null);
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      DiscreteDistribution<Double> discreteDistribution0 = null;
//      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // array sums to zero
//         //
//         verifyException("org.apache.commons.math3.util.MathArrays", e);
//      }
  }
}
