/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:50:28 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.months(19);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.years(12);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = new Period(1033L, (PeriodType) null);
      Period period1 = period0.withWeeks(86399999);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(52254719395201033L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period(1370, 1951, 1370, 70);
      Period period1 = period0.minusDays(29);
      Period period2 = period0.plus(period1);
      Seconds seconds0 = period2.toStandardSeconds();
      assertEquals(7595260, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period(292271022, 292271022, (-1470), (-1470));
      Period period1 = period0.plusDays((-2));
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 17828529438
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.days((-976));
      Period period1 = period0.normalizedStandard();
      Hours hours0 = period1.toStandardHours();
      assertEquals((-23424), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.minutes(1658);
      Hours hours0 = period0.toStandardHours();
      assertEquals(27, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.seconds((-227));
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = new Period(2, 0, (-1708), 0);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.millis(0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 3437);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 547, (Chronology) buddhistChronology0);
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(monthDay0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Instant instant0 = new Instant((long) 86400);
      Duration duration0 = Duration.ZERO;
      Period period0 = Period.minutes(86400);
      Days days0 = period0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = new Period(instant0, duration0, periodType0);
      assertEquals(60, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.years((-865));
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, (-634));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period((-436), (-436), (-436), 3706, (-436), 3706, 12, Integer.MAX_VALUE);
      Period period1 = period0.withHours(12);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.minutes(1658);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.days(835);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(119, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.minutes((-818));
      Period period1 = period0.plusWeeks((-1932));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-1932), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.weeks((-2647));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1600905600), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = new Period(2, 0, (-1708), 0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(92, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.seconds((-227));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-3), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.millis((-634));
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period(2, 0, (-1708), 0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period(292271022, 292271022, (-1470), (-1470));
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1069711939048530L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.millis(0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.hours(4);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(14400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.days((-2473));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-213667200L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(7L, 7L, copticChronology0);
      Days days0 = period0.ZERO.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.years((-4547));
      Period period1 = period0.minusMonths((-4547));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.months((-2679));
      Period period1 = period0.minusMillis((-2305));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.days((-976));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.years(939);
      int int0 = period0.getYears();
      assertEquals(939, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.weeks(292271022);
      int int0 = period0.getWeeks();
      assertEquals(292271022, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period((-7593750), 1478, 0, 64);
      Period period1 = period0.normalizedStandard();
      int int0 = period1.getWeeks();
      assertEquals((-45200), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.weeks((-2915));
      Period period1 = period0.minusSeconds((-3137));
      int int0 = period1.getSeconds();
      assertEquals(3137, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.seconds((-227));
      int int0 = period0.getSeconds();
      assertEquals((-227), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(3003, 1192, 1192, 1192, 1192, 1192, 0, 6);
      int int0 = period0.getMonths();
      assertEquals(1192, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period(292271022, 292271022, (-1470), (-1470));
      Months months0 = Months.ONE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      Period period1 = period0.withField(durationFieldType0, (-1470));
      int int0 = period1.getMonths();
      assertEquals((-1470), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.seconds((-227));
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.minutes(1658);
      Period period1 = period0.negated();
      int int0 = period1.getMinutes();
      assertEquals((-1658), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(292271022, 292271022, (-1470), (-1470));
      Period period1 = period0.plusMillis(1599);
      int int0 = period1.getMillis();
      assertEquals(129, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period(292271022, 292271022, (-1470), (-1470));
      int int0 = period0.getMillis();
      assertEquals((-1470), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period(292271022, 292271022, (-1470), (-1470));
      int int0 = period0.getHours();
      assertEquals(292271022, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period((-2881), 2, (-2881), 0, (-2881), (-2881), (-2881), (-2881));
      int int0 = period0.getHours();
      assertEquals((-2881), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.days(4);
      Period period1 = period0.minusDays(4);
      int int0 = period1.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period((-7593750), 1478, 0, 64);
      Period period1 = period0.normalizedStandard();
      int int0 = period1.getDays();
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1375L);
      Months months0 = Months.ONE;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.withYears(1528);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[13];
      PeriodType periodType0 = new PeriodType("J3!", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1612L), (-1612L), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withYears(2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      int[] intArray0 = new int[4];
      intArray0[0] = 1319;
      PeriodType periodType0 = new PeriodType("|@u7s|L0R5k", durationFieldTypeArray0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(4L, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.withYears(1319);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1319
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Days days0 = Days.THREE;
      Duration duration0 = days0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.withWeeks((-1217));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.days((-66));
      PeriodType.WEEK_INDEX = (-66);
      // Undeclared exception!
//      try { 
        period0.withWeeks(3672);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -66
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = Period.years(3);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withSeconds((-60));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Duration duration0 = minutes0.toStandardDuration();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0, (Chronology) strictChronology0);
      Period period0 = new Period(duration0, mutableDateTime0);
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("-KS", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.years(3437);
      PeriodType periodType0 = PeriodType.days();
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Duration duration0 = new Duration((-102L), (-1543));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.withMonths((-1543));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("J3!", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1612L), (-1612L), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withMonths((-22));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.millis((-9));
      PeriodType.MONTH_INDEX = (-9);
      // Undeclared exception!
//      try { 
        period0.withMonths((-3871));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -9
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.withMinutes((-2247));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[13];
      PeriodType periodType0 = new PeriodType("J3!", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1612L), (-1612L), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withMinutes(690562340);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      PeriodType.MINUTE_INDEX = (-1825);
      // Undeclared exception!
//      try { 
        period0.withMinutes((-1825));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1825
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period(3003, 1192, 1192, 1192, 1192, 1192, 0, 6);
      Period period1 = period0.ZERO.minusSeconds(6);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period2 = period1.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period2.withMillis(6);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period((-832), 7, (-1060), 3030, (-2934), 7, 1474, (-2934));
      PeriodType.MILLI_INDEX = 83;
      // Undeclared exception!
//      try { 
        period0.withMillis(3030);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 83
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(yearMonth0, yearMonth0, periodType0);
      // Undeclared exception!
//      try { 
        period0.withHours(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period(3003, 1192, 1192, 1192, 1192, 1192, 0, (-21));
      PeriodType.HOUR_INDEX = (-21);
      // Undeclared exception!
//      try { 
        period0.withHours((-21));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -21
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.weeks((-2915));
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = new Period((long) (-2915), periodType0);
      // Undeclared exception!
//      try { 
        period1.withFields(period0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'weeks'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Months months0 = Months.THREE;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays(15);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 18;
      // Undeclared exception!
//      try { 
        period0.withDays(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 18
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusMonths((-2643));
      // Undeclared exception!
//      try { 
        period1.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.seconds((-5309));
      PeriodType.MILLI_INDEX = 823;
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.weeks(1177);
      PeriodType.DAY_INDEX = 1177;
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.weeks(3600000);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2177280000000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.MONTH_INDEX = 317351877;
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period((-15271875), (-15271875), (-256), 741);
      Period period1 = period0.minusWeeks((-15271875));
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 153008915621
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period(63158400000L, (-702L));
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("d", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.hours((-993));
      PeriodType.DAY_INDEX = (-993);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period(3003, 1192, 1192, 1192, 1192, 1192, 0, 6);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.hours(4);
      PeriodType.HOUR_INDEX = (-911);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.DateConverter", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1720L), periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.millis((-9));
      PeriodType.MONTH_INDEX = (-9);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withWeeks(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -15032385536
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Months months0 = Months.ZERO;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.plusYears(7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-3149);
      // Undeclared exception!
//      try { 
        period0.plusYears(229);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3149
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((-865), (-865), (-865), (-865));
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusWeeks((-944));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.DateConverter", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1720L), periodType0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-157));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 1417;
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-1229));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1417
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1058L));
      PeriodType periodType0 = PeriodType.years();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-2247));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      PeriodType.SECOND_INDEX = (-299);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -299
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMonths((-418));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.DateConverter", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1720L), periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMonths((-157));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[7];
      intArray0[1] = 3600000;
      PeriodType periodType0 = new PeriodType("crIyvV5#nK4", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(2675);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3600000
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(4, 4, (-2329), (-2329));
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMinutes(1378);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMinutes((-1875));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1128);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(753);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1128
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(2159L, 0L);
      Period period1 = period0.withMinutes(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period1.plusMinutes(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(instant0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMillis((-577));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(4294967295L, (Chronology) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("ko1_7.*{f[5m0Yj[tCu", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMillis(3030);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType(" S>> f%M'PwqU%W<6", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMillis((-2565));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.HOUR_INDEX = (-138);
      // Undeclared exception!
//      try { 
        period0.plusHours(50);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -138
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = Period.hours(1073741824);
      // Undeclared exception!
//      try { 
        period0.plusHours(1073741824);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 1073741824 + 1073741824
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = Period.millis(999);
      Period period1 = period0.minus(period0);
      Period period2 = period1.withPeriodType(periodType0);
      Period period3 = period2.plus(period1);
      // Undeclared exception!
//      try { 
        period3.plusDays((-1196));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.months((-2679));
      PeriodType.DAY_INDEX = (-292278993);
      // Undeclared exception!
//      try { 
        period0.plusDays((-182));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -292278993
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Period period1 = Period.minutes(11);
      // Undeclared exception!
//      try { 
        period0.plus(period1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.millis(731);
      PeriodType.MILLI_INDEX = 2272;
      // Undeclared exception!
//      try { 
        period0.plus(period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2272
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Duration duration0 = Duration.standardHours(604800L);
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
//      try { 
        period0.plus(months0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 11 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("Days", (PeriodFormatter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
//      try { 
        Period.parse("NKF", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"NKF\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = Period.days(65535);
      PeriodType periodType0 = PeriodType.millis();
      PeriodType.DAY_INDEX = 65535;
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.weeks((-292275054));
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -49102209072
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = new Period((-239L), 0L);
      // Undeclared exception!
//      try { 
        period0.multipliedBy((-86399999));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: 239 * -86399999
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusYears((-2087));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.days((-1107));
      PeriodType.YEAR_INDEX = (-1285);
      // Undeclared exception!
//      try { 
        period0.minusYears(503);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1285
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period((-533L), periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.minusWeeks(7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.months(37);
      PeriodType.WEEK_INDEX = 37;
      // Undeclared exception!
//      try { 
        period0.minusWeeks(1107);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 37
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(7);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7);
      DateTime dateTime0 = new DateTime((-499L), dateTimeZone0);
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(48L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("@}~avOY", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.minusSeconds((-1792));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.months(0);
      PeriodType.SECOND_INDEX = (-209);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(1825);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -209
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(2346L, (Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds((-2147483647));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((-865), (-865), (-865), (-865));
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusMonths((-865));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("J3!", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1612L), (-1612L), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.minusMonths(690562340);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Partial partial0 = new Partial(localDate0);
      Period period0 = Period.fieldDifference(partial0, partial0);
      PeriodType.MONTH_INDEX = 9;
      // Undeclared exception!
//      try { 
        period0.minusMonths((-3641));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.minutes(1658);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusMinutes((-75));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.years(19);
      PeriodType.MINUTE_INDEX = (-3479);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3479
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = Period.millis(999);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusMillis((-133));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(923L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusHours(1933);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.DateConverter", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1720L), periodType0);
      // Undeclared exception!
//      try { 
        period0.minusHours((-157));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.months((-1003));
      PeriodType.HOUR_INDEX = (-396);
      // Undeclared exception!
//      try { 
        period0.minusHours(12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -396
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.hours((-2512));
      // Undeclared exception!
//      try { 
        period0.minusHours(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2512 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalTime localTime0 = new LocalTime();
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      Months months0 = Months.ZERO;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusDays(8);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-563);
      // Undeclared exception!
//      try { 
        period0.minusDays((-1873));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -563
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.millis(10);
      Period period1 = period0.withDays(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period1.minusDays((-1581));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 1581
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Weeks weeks0 = Weeks.TWO;
      Minutes minutes0 = weeks0.toStandardMinutes();
      // Undeclared exception!
//      try { 
        period0.minus(minutes0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = new Period((-1825), 149, 149, 149, 636, 149, 149, 10080);
      PeriodType.YEAR_INDEX = 1073741824;
      // Undeclared exception!
//      try { 
        period0.minus(period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1073741824
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Period period1 = period0.minusDays(65535);
      Period period2 = period1.plusHours(65535);
      // Undeclared exception!
//      try { 
        period2.minus(days0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -65534 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = Period.seconds(343);
      PeriodType.YEAR_INDEX = 343;
      // Undeclared exception!
//      try { 
        period0.ZERO.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 1073741824;
      // Undeclared exception!
//      try { 
        period0.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.SECOND_INDEX = 1100;
      // Undeclared exception!
//      try { 
        period0.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.hours((-2971));
      PeriodType.MONTH_INDEX = (-2971);
      // Undeclared exception!
//      try { 
        period0.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      PeriodType.MINUTE_INDEX = (-2666);
      // Undeclared exception!
//      try { 
        period0.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period(1798L, 1798L);
      PeriodType.MILLI_INDEX = 2386;
      // Undeclared exception!
//      try { 
        period0.ZERO.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period(292271022, 292271022, (-1470), (-1470));
      PeriodType.HOUR_INDEX = 11;
      // Undeclared exception!
//      try { 
        period0.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-679);
      // Undeclared exception!
//      try { 
        period0.ZERO.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(918518400000L, (Chronology) copticChronology0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime1, localDateTime1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial((Chronology) null, (DateTimeFieldType[]) null, intArray0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, localDateTime0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      int[] intArray0 = new int[0];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(monthDay1, monthDay0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((long) 92, (Chronology) julianChronology0);
      int[] intArray0 = new int[1];
      intArray0[0] = 92;
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(yearMonth1, yearMonth0, periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTime dateTime0 = new DateTime(9223372036854775807L);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Duration duration1 = duration0.withMillis((-152L));
      Period period0 = null;
//      try {
        period0 = new Period(duration1, dateTime0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 9223372036854775807 - -152
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
//      try {
        period0 = new Period(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("crIyvV5#nK4", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(604800000L, periodType0, (Chronology) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period((-9223372036854775808L), 0L, periodType0, gJChronology0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 0 - -9223372036854775808
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period(9223372036854775807L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2562047788015
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = new Period((long) 3398);
      Hours hours0 = Hours.standardHoursIn(period0);
      PeriodType periodType0 = hours0.getPeriodType();
      Period period1 = null;
//      try {
        period1 = new Period(0, 0, (-1543), 1252, 0, 0, 0, 3398, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'weeks'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      Period period1 = period0.plusSeconds(7);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Days days0 = hours0.toStandardDays();
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes(753);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.plusHours(50);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(229);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = new Period(63L, 63L, strictChronology0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      Period period0 = Period.years((-865));
      // Undeclared exception!
//      try { 
        period0.withFieldAdded(durationFieldType0, (-634));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'halfdays'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.millis(0);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, (PeriodType) null, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = new Period((Object) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.years((-865));
      int int0 = period0.getYears();
      assertEquals((-865), int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.months(19);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Duration duration0 = Duration.standardDays(3600L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Period period0 = new Period(duration0, mutableDateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.days(4);
      int int0 = period0.getDays();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.minutes(1658);
      int int0 = period0.getMinutes();
      assertEquals(1658, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.minutes((-818));
      Period period1 = period0.withYears((-1945));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.years(3);
      Period period1 = period0.withSeconds((-60));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.millis(0);
      int int0 = period0.ZERO.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.years((-865));
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LimitChronology limitChronology0 = LimitChronology.getInstance(julianChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      Period period1 = new Period(period0, limitChronology0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.seconds(7);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.years(19);
      Period period1 = period0.withMonths(19);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      Period period0 = new Period(localTime0, localTime0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = Period.years((-865));
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = Period.months((-1));
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.seconds(4);
      Period period1 = period0.minusYears(4);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.multipliedBy(1825);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.minutes(1658);
      Period period1 = period0.ZERO.multipliedBy(6);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(instant0, (ReadableInstant) null, periodType0);
      Period period1 = period0.ZERO.minus((ReadablePeriod) null);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(7L, 7L, copticChronology0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      Period period0 = days0.toPeriod();
      Period period1 = period0.ZERO.plusSeconds(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.minusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period(2, 0, (-1708), 0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period(2, 0, (-1708), 0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.years((-865));
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = new Period((-865), (-865), (-865), (-865));
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = new Period(2, 0, (-1708), 0);
      // Undeclared exception!
//      try { 
        period0.withFieldAdded((DurationFieldType) null, 1494);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(4294967295L, (Chronology) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("ko1_7.*{f[5m0Yj[tCu", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      Period period1 = period0.withFieldAdded(durationFieldTypeArray0[0], 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.years((-865));
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, (-865));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.days(65535);
      Period period1 = period0.ZERO.withFields((ReadablePeriod) null);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(365L, dateTimeZone0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.getWeeks();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-137));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(2496L, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDate0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("Seconds", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = Period.months(2268);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("crIyvV5#nK4", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType(" P<Tl}Rib8:", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(777L, 0, periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = Period.years((-2441));
      MutableDateTime mutableDateTime0 = new MutableDateTime((-984L));
      Duration duration0 = period0.toDurationFrom(mutableDateTime0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = null;
//      try {
        period1 = new Period(duration0, mutableDateTime0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -77030524800
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer integer0 = new Integer((-293));
      PeriodType periodType0 = PeriodType.seconds();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period((Object) integer0, periodType0, (Chronology) buddhistChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Integer
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Duration duration0 = new Duration((-102L), (-1543));
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-1543), (DateTimeZone) null);
      Period period0 = new Period(mutableDateTime0, duration0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(4294967295L, (Chronology) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("ko1_7.*{f[5m0Yj[tCu", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = new Period((-2147483647), (-2147483647), 50, 634);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(634);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483647 + -634
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = Period.seconds(6);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      durationFieldTypeArray0[0] = durationFieldType0;
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = new PeriodType("(^k", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plus(minutes0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.minusHours(4);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Period period0 = Period.days((-1107));
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(7L, 7L, copticChronology0);
      Period period1 = period0.ZERO.plusWeeks(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.withMillis(7678125);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = new Period((-436), (-436), (-436), 3706, (-436), 3706, 12, Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusMonths(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -436 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Period period0 = Period.hours((-2512));
      Days days0 = period0.toStandardDays();
      assertEquals((-104), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0, periodType0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      Period period0 = null;
//      try {
        period0 = new Period(periodType0, strictChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: org.joda.time.PeriodType
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse("%XtC^P,", periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = null;
//      try {
        period0 = new Period(object0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(1825);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(48L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("@}~avOY", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withHours((-1792));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Period period0 = Period.millis((-2881));
      // Undeclared exception!
//      try { 
        period0.minusMillis(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2881 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }
}
