/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:58:32 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.years(1023);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.hours(974);
      Period period1 = period0.plusDays(4);
      Period period2 = period1.normalizedStandard();
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = new Period(2, 1509, 51, (-2105));
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days((-47));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-4060800000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.minutes((-2148));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-128880000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds((-3336));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-3336000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.hours(974);
      Period period1 = period0.withWeeks(974);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(592581600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.hours(974);
      Period period1 = period0.plusDays(4);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(3852000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.seconds(6);
      Period period1 = period0.plusWeeks(6);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(60480, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.hours(1455);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(87300, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.minusMinutes((-65533));
      Hours hours0 = period1.toStandardHours();
      assertEquals(1092, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.seconds((-1771));
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.minutes(116);
      Period period1 = period0.minusSeconds((-569));
      Days days0 = period1.toStandardDays();
      assertEquals(0, days0.getDays());
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.hours(10);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.minutes((-2148));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.seconds(44);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.months((-15));
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-2822));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDate0, localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.days(1023);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(146, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.days((-47));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-6), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.years(0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusMillis((-5298));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-5), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.minutes((-4417));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-4417), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = new Period((long) (-2228), periodType0, (Chronology) null);
      Hours hours1 = period0.toStandardHours();
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.days(7);
      Hours hours0 = period0.toStandardHours();
      assertEquals(168, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.hours(974);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(3506400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.hours(974);
      Days days0 = period0.toStandardDays();
      assertEquals(40, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.hours((-1241));
      Days days0 = period0.toStandardDays();
      assertEquals((-51), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.hours(974);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.years((-5298));
      int int0 = period0.getYears();
      assertEquals((-5298), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(24L, (-1097L));
      Period period1 = period0.withWeeks(974);
      int int0 = period1.getWeeks();
      assertEquals(974, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.hours(1000);
      Period period1 = period0.minusWeeks(255);
      int int0 = period1.getWeeks();
      assertEquals((-255), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.seconds(4);
      int int0 = period0.getSeconds();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.years((-1647));
      Period period1 = period0.plusSeconds((-1244));
      int int0 = period1.getSeconds();
      assertEquals((-1244), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.months(7);
      int int0 = period0.getMonths();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period((-896), (-896), (-896), 8, 6, 6, 4, (-313));
      int int0 = period0.getMonths();
      assertEquals((-896), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.months(0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.minusMinutes((-65533));
      int int0 = period1.getMinutes();
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.millis(2615625);
      int int0 = period0.getMillis();
      assertEquals(2615625, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period(22, 22, 22, 22);
      int int0 = period0.getHours();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.days(1023);
      int int0 = period0.getDays();
      assertEquals(1023, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.weeks((-581));
      Period period1 = period0.minusDays(4);
      int int0 = period1.getDays();
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Duration duration0 = hours0.toStandardDuration();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.withYears(2);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.withYears(1065);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.hours(1517);
      PeriodType.YEAR_INDEX = 1517;
      // Undeclared exception!
//      try { 
        period0.withYears(1517);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1517
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.hours(2265);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withWeeks(2570);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period((long) (-2237), periodType0, (Chronology) null);
      PeriodType.WEEK_INDEX = (-2237);
      // Undeclared exception!
//      try { 
        period0.withWeeks(2000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2237
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((long) (-47), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withSeconds(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.SECOND_INDEX = 1470;
      // Undeclared exception!
//      try { 
        period0.withSeconds(1470);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1470
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = new PeriodType("%&|P,wK|r9", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period((-34), (-34), (-34), (-2228), (-2228), 1509, 1, 1509);
      PeriodType periodType0 = PeriodType.dayTime();
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(1889L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withMonths(8);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.weeks(684);
      PeriodType.MONTH_INDEX = 782;
      // Undeclared exception!
//      try { 
        period0.withMonths((-1968));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 782
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = new Period(10080L, 10080L, islamicChronology0);
      PeriodType.MINUTE_INDEX = 721;
      // Undeclared exception!
//      try { 
        period0.withMinutes(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 721
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        period0.withMillis((-1462));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = Period.hours(0);
      PeriodType.MILLI_INDEX = 962;
      // Undeclared exception!
//      try { 
        period0.withMillis(3340);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 962
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(1889L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withHours(4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-292269337);
      // Undeclared exception!
//      try { 
        period0.withHours((-1896));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -292269337
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.ZERO.plusYears(4);
      // Undeclared exception!
//      try { 
        period0.withFields(period1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(1889L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays(614);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Duration duration0 = new Duration(1989L, 1989L);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime(1989L, (Chronology) copticChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[9];
      intArray0[3] = 1;
      PeriodType periodType0 = new PeriodType("L@w)Wsfg-)Ta(", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.years((-5298));
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-292269337);
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.withYears((-3872));
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period(22, 22, 22, 22);
      PeriodType.MILLI_INDEX = 22;
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.hours(1733);
      Period period1 = period0.multipliedBy(1733);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 10811840400
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.months(0);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, 2);
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.seconds(286);
      PeriodType.MILLI_INDEX = 286;
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.days(2615625);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 3766500000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period((long) (-2228), periodType0, (Chronology) null);
      PeriodType.WEEK_INDEX = (-2228);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.days(1073741824);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 25769803776
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.months((-15));
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.hours(3155);
      PeriodType.YEAR_INDEX = 3155;
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.hours(3156);
      PeriodType.WEEK_INDEX = 1922;
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.days((-47));
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusYears((-47));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.plusYears(158);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1000
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      Period period1 = period0.plusYears(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period1.plusYears(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = new Period((long) (-2228), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(1446);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType(":V|>T$]1", durationFieldTypeArray0, (int[]) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-364));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-221));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 3401;
      // Undeclared exception!
//      try { 
        period0.plusWeeks(441);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3401
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-86400));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -86400
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(1889L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-3010));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(3191L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-1653));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 9;
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-2373));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(21);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[8];
      intArray0[1] = 8;
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMonths(2972);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = new Period(18, Integer.MIN_VALUE, (-59), 18, Integer.MIN_VALUE, 18, (-59), (-3105));
      // Undeclared exception!
//      try { 
        period0.plusMonths((-1));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period((long) (-5298), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(1104);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 17971875;
      // Undeclared exception!
//      try { 
        period0.plusMinutes(974);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 17971875
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      PeriodType periodType0 = PeriodType.time();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      Period period0 = new Period(duration0, mutableDateTime0, periodType1);
      // Undeclared exception!
//      try { 
        period0.plusMillis(3);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMillis(20503125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[8];
      intArray0[7] = 1090;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(15308640144L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMillis(1256);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1090
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period(18, Integer.MIN_VALUE, (-59), 18, Integer.MIN_VALUE, 18, (-59), (-3105));
      // Undeclared exception!
//      try { 
        period0.plusMillis(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -3105 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period((long) (-2228), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.plusHours((-1711));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plusHours(23);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = Period.months((-1070));
      PeriodType.HOUR_INDEX = 839;
      // Undeclared exception!
//      try { 
        period0.plusHours((-1070));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 839
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period(18, Integer.MIN_VALUE, (-59), 18, Integer.MIN_VALUE, 18, (-59), (-3105));
      // Undeclared exception!
//      try { 
        period0.plusHours((-59));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -59
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusDays((-2409));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plusDays(20503125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.hours(974);
      PeriodType.DAY_INDEX = 974;
      // Undeclared exception!
//      try { 
        period0.plusDays(984);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 974
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-4060L));
      Period period0 = duration0.toPeriod((Chronology) null);
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.withFields(days0);
      // Undeclared exception!
//      try { 
        period1.plusDays((-4858));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -4858
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.days((-56));
      PeriodType periodType0 = PeriodType.seconds();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period1 = new Period((long) (-56), periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period1.plus(period0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMinutes((-992));
      PeriodType.MINUTE_INDEX = (-4637);
      // Undeclared exception!
//      try { 
        period0.plus(period1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4637
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse(" ns", periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("8O$3Hr4rH+9e^O", (PeriodFormatter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.ZERO;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      PeriodType periodType0 = seconds0.getPeriodType();
      PeriodType.MONTH_INDEX = (-3276);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = Period.hours(1144);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 4118400000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.months(0);
      PeriodType.YEAR_INDEX = (-65533);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.years(1023);
      // Undeclared exception!
//      try { 
        period0.multipliedBy(17971875);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: 1023 * 17971875
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.minusYears(20503125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.seconds((-1546));
      PeriodType.YEAR_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.ZERO.minusYears((-1546));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1000
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(63L);
      Minutes minutes0 = Minutes.MIN_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.minusWeeks((-1998));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-1619);
      // Undeclared exception!
//      try { 
        period0.ZERO.minusWeeks((-1619));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1619
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Duration duration0 = new Duration(688L);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(89);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1687;
      // Undeclared exception!
//      try { 
        period0.minusSeconds(1687);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1687
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(4022L, (-1938L), gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -5 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period((long) (-2228), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.minusMonths(1903);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.minusMonths((-86400));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.hours(974);
      PeriodType.MONTH_INDEX = 1211;
      // Undeclared exception!
//      try { 
        period0.ZERO.minusMonths(974);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1211
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = new Period(21, Integer.MIN_VALUE, (-59), 21, Integer.MIN_VALUE, 21, (-59), 1000);
      // Undeclared exception!
//      try { 
        period0.minusMonths(21);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -21
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-550L), (Chronology) null);
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-488));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Duration duration0 = Duration.millis(21600000L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-57));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Days days0 = Days.ZERO;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(4772);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Duration duration0 = new Duration(1989L, 1989L);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime(1989L, (Chronology) copticChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[9];
      intArray0[7] = 10125000;
      PeriodType periodType0 = new PeriodType("L@w)Wsfg-)Ta(", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(1488);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 10125000
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusHours((-5298));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.hours(12);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("@HTz4", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusHours(12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.years(1023);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.minusHours(776);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period(18, Integer.MIN_VALUE, (-59), 18, Integer.MIN_VALUE, 18, (-59), (-3105));
      // Undeclared exception!
//      try { 
        period0.minusHours(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = Period.hours(2265);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusDays(7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.DAY_INDEX = (-1299);
      // Undeclared exception!
//      try { 
        period0.minusDays(1682);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1299
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.minusDays((-1884));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 1884
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(9, 9, 4);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Period period1 = Period.seconds(116);
      // Undeclared exception!
//      try { 
        period0.minus(period1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.hours((-3415));
      PeriodType.HOUR_INDEX = (-2175);
      // Undeclared exception!
//      try { 
        period0.minus(period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2175
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      Period period0 = new Period(hours0);
      // Undeclared exception!
//      try { 
        period0.minus(hours0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[8];
      intArray0[0] = (-3291);
      PeriodType periodType0 = new PeriodType("4;/\"iS8SC?iUU", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 10000;
      // Undeclared exception!
//      try { 
        period0.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[8];
      intArray0[6] = (-590);
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(15308640144L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        period0.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 59;
      // Undeclared exception!
//      try { 
        period0.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.getMillis();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.hours(0);
      PeriodType.MILLI_INDEX = 962;
      // Undeclared exception!
//      try { 
        period0.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.getHours();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      Period period0 = interval0.toPeriod();
      PeriodType.HOUR_INDEX = 938;
      // Undeclared exception!
//      try { 
        period0.ZERO.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      PeriodType.DAY_INDEX = (-2228);
      Period period0 = new Period((long) (-2228), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(gregorianChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.withSeconds(292272984);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Duration duration0 = period1.toDurationFrom(mutableDateTime0);
      PeriodType periodType0 = PeriodType.millis();
      Period period2 = null;
//      try {
        period2 = new Period(duration0, mutableDateTime0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 292272984000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = null;
//      try {
        period0 = new Period(object0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[5] = durationFieldType1;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(1485L, periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = null;
//      try {
        period0 = new Period(1000000000000000000L, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 11574074074
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now();
      Weeks weeks0 = Weeks.ONE;
      DateTime dateTime1 = dateTime0.withPeriodAdded(weeks0, (-966));
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, dateTime1, dateTime0);
      Period period0 = null;
//      try {
        period0 = new Period(1735L, (-3L), limitChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The minuend instant is below the supported minimum of 1995-08-11T20:21:21.320Z (GJChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period(10000000000000000L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2777777777
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
//      try {
        period0 = new Period((-992), 7, (-3995), 3501, 3, (-1099), 3501, (-3995), periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(24L, (-1097L));
      Period period1 = period0.minusMonths(2268);
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotSame(period2, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.years((-97));
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.ZERO.minusHours(0);
      Period period2 = period1.multipliedBy(0);
      assertTrue(period1.equals((Object)period0));
      assertSame(period2, period1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-4414L));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      Period period1 = period0.plusMillis((-2557));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period(2924, 2924, (-687), 2924, (-687), (-687), 1567, 50);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -687 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      Period period1 = period0.plusHours(Integer.MIN_VALUE);
      Period period2 = period1.plusYears(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period2.normalizedStandard();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2160266288
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.ZERO.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((Object) null, periodType0, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.plus(weeks0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.hours(1000);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(422, 1834, 1834, 1049, 51, 422, 6, 3);
      int int0 = period0.getYears();
      assertEquals(422, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.hours(974);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period((-1583L), (-2741L), periodType0, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((long) (-47), periodType0, (Chronology) null);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) julianChronology0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.withMinutes((-953));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-4414L));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      int int0 = period0.getMinutes();
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = new Period((Object) null, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.hours(0);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1464L));
      Period period0 = new Period(localDate0, localDate0);
      Period period1 = period0.minusMillis(Integer.MAX_VALUE);
      int int0 = period1.getMillis();
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = Period.months(0);
      PeriodType periodType0 = PeriodType.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, 2);
      // Undeclared exception!
//      try { 
        period1.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.months((-1070));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.hours(1);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.months((-1070));
      Period period1 = period0.ZERO.negated();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.months(7);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.minus(minutes0);
      // Undeclared exception!
//      try { 
        period1.minusMinutes(236548278);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483647 + -236548278
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-550L), (Chronology) null);
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.weeks(85);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[2] = durationFieldType2;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DurationFieldType durationFieldType3 = dateTimeFieldType0.getRangeDurationType();
      durationFieldTypeArray0[3] = durationFieldType3;
      Years years0 = Years.years((-286));
      DurationFieldType durationFieldType4 = years0.getFieldType();
      durationFieldTypeArray0[4] = durationFieldType4;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(0L, periodType0, (Chronology) ethiopicChronology0);
      Period period1 = period0.plus(weeks0);
      // Undeclared exception!
//      try { 
        period1.negated();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483648 * -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.months(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = Period.years(1023);
      // Undeclared exception!
//      try { 
        period0.withFieldAdded((DurationFieldType) null, 1023);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.years(1023);
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, 1023);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = new Period(10080L, 10080L, islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      Period period1 = period0.withField(durationFieldType0, 15);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DateTime dateTime0 = new DateTime(60000L);
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = dateTime0.toCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 3156);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      java.time.Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusYears(1317);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      Duration duration0 = period0.ZERO.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = Period.years((-1647));
      Period period1 = period0.ZERO.withMonths((-1647));
      // Undeclared exception!
//      try { 
        period1.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.minusWeeks(690562340);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -4833936380
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = new Period(22, 22, 22, 22);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(80542, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.minusDays(20503125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = new Period((-778), (-975), (-778), (-778));
      int int0 = period0.getHours();
      assertEquals((-778), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = new Period(425L, (Chronology) null);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(30962844000000L);
      Period period0 = Period.millis(6);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period1 = null;
//      try {
        period1 = new Period((ReadableInstant) null, duration0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 30962844000000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period((-747L), (-9223372036854775808L), periodType0, copticChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = Period.weeks((-47));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-28425600000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period((-2238), 3600L, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Period period0 = null;
//      try {
        period0 = new Period(object0, (PeriodType) null, islamicChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardSeconds(223L);
      Period period0 = new Period(dateTime0, duration0);
      Period period1 = period0.withYears(292272992);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.withMonths(20503125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalTime localTime0 = new LocalTime();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = null;
//      try {
        period0 = new Period(monthDay0, localTime0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Period period0 = null;
//      try {
        period0 = new Period(locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.util.Locale
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Period period0 = new Period(4288L, 1575L);
      PeriodType.MINUTE_INDEX = 12;
      // Undeclared exception!
//      try { 
        period0.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = Period.seconds((-1546));
      Minutes minutes0 = period0.ZERO.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Period period0 = Period.weeks((-2153));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-361704), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Period period0 = new Period(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("2_Wt^^R[._9Fw-4v");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"2_Wt^^R[._9Fw-4v\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = new Period(2924, 2924, (-687), 2924, (-687), (-687), 1567, 50);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.withMillis(3340);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(1485L, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-4826), 0, (-292275054), (-379), (-292275054), 2526, (-379), (-3572), periodType0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Period period0 = Period.weeks(684);
      Period period1 = period0.minusYears((-1968));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period("yUw>Lf{|b[;JC", gJChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"yUw>Lf{|b[;JC\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = null;
//      try {
        period0 = new Period(localTime0, yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
//      try { 
        Period.parse("", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.withWeeks((-86400));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withHours((-1896));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("]7PJoi\"v$p}w", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(20503125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Period period0 = Period.weeks(684);
      Period period1 = period0.withMinutes(684);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Period period0 = new Period(425L, (Chronology) null);
      Period period1 = period0.withDays(1);
      assertFalse(period1.equals((Object)period0));
  }
}
