/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 23:48:51 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.years(236548278);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 1000L);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.withWeeks(1);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      period1.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.days(3020);
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period(7, 7, 7, 7);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.years(1);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.seconds(3020);
      Period period1 = period0.withDays(10);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(867020000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((long) 397, periodType0);
      Period period1 = period0.minusMinutes(27);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-1619603L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.days(65533);
      Period period1 = period0.minusWeeks(687);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 5246553600
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.hours(1);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(3600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((long) 1, periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.days((-1));
      Period period1 = period0.withWeeks((-1));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-11520), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = new Period(21600000L);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(360, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.weeks(4495);
      Hours hours0 = period0.toStandardHours();
      assertEquals(755160, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      LocalTime localTime1 = localTime0.plusSeconds(1398);
      Period period0 = Period.fieldDifference(localTime1, localTime0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = new Period((-365), 1968, 408, 408);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-1), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((long) 1, periodType0);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-3244));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDate0, localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = new Period(duration0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.withWeeks(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = new Period(0, 0, 1620, 0, 0, (-1155), 1620, 1620);
      Period period1 = period0.withMillis(0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.days(3020);
      Weeks weeks0 = period0.ZERO.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.hours(365);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.minutes(485);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(29100, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.days((-2151));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-185846400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusSeconds(1915);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(31, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.days(3020);
      Hours hours0 = period0.toStandardHours();
      assertEquals(72480, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.minusDays(1398);
      Hours hours0 = period1.toStandardHours();
      assertEquals((-33552), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((long) 1, periodType0);
      Period period1 = period0.minusWeeks(1);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-604799999L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      Days days1 = period0.toStandardDays();
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.days((-2151));
      Days days0 = period0.toStandardDays();
      assertEquals((-2151), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(0L, periodType0);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period((-2881), 893, 893, (-1987), (-342), 2540, 2540, 3462);
      int int0 = period0.getYears();
      assertEquals((-2881), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.weeks(4495);
      int int0 = period0.getWeeks();
      assertEquals(4495, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.ZERO.plusWeeks((-90));
      int int0 = period1.getWeeks();
      assertEquals((-90), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-3395), (-3395), (-3514), 1961, (-8), 1961, 3863, 1949, periodType0);
      int int0 = period0.getSeconds();
      assertEquals(3863, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.minutes(10209375);
      Period period1 = period0.minusSeconds(3);
      int int0 = period1.getSeconds();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.days(3020);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMonths(8);
      int int0 = period1.getMonths();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.millis(0);
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(365, (-1), 365, 7, (-1), (-1), 7, (-1), (PeriodType) null);
      int int0 = period0.getMinutes();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.millis(9);
      int int0 = period0.getMillis();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      Period period0 = new Period((-786L), chronology0);
      int int0 = period0.getMillis();
      assertEquals((-786), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((long) 1, periodType0);
      Period period1 = period0.withHours(1);
      int int0 = period1.getHours();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period((long) 1, periodType0);
      Period period1 = period0.withHours(1);
      Period period2 = period0.minus(period1);
      Period period3 = period2.minusYears(1);
      int int0 = period3.getHours();
      assertEquals((-1), int0);
      assertNotSame(period3, period2);
      assertFalse(period3.equals((Object)period2));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.days(65533);
      int int0 = period0.getDays();
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusDays((-687));
      int int0 = period1.getDays();
      assertEquals((-687), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
//      try { 
        period0.withYears(418);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Duration duration0 = minutes0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      LimitChronology limitChronology0 = LimitChronology.getInstance(islamicChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) limitChronology0);
      // Undeclared exception!
//      try { 
        period0.withYears(690562340);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withWeeks((-3570));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.WEEK_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.withWeeks(2295);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withSeconds(1066);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period((-1342L));
      PeriodType.SECOND_INDEX = 519;
      // Undeclared exception!
//      try { 
        period0.withSeconds(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 519
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.days(65533);
      PeriodType periodType0 = PeriodType.weeks();
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'days'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withMonths(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Duration duration0 = seconds0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[1];
      int[] intArray0 = new int[2];
      intArray0[1] = 2538;
      PeriodType periodType0 = new PeriodType("R(8x($S8", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.withMonths(2000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2538
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1518));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.withMinutes(4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Duration duration0 = Duration.millis(2937L);
      Period period0 = duration0.toPeriod();
      PeriodType.MINUTE_INDEX = (-1674);
      // Undeclared exception!
//      try { 
        period0.withMinutes(1872);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1674
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4195L);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.withMillis((-292275054));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.minutes(485);
      PeriodType.MILLI_INDEX = (-4247);
      // Undeclared exception!
//      try { 
        period0.withMillis(679);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4247
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(1164L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withHours(365);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.millis(516);
      PeriodType.HOUR_INDEX = 516;
      // Undeclared exception!
//      try { 
        period0.withHours((-1803));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 516
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 519;
      Period period0 = Period.days(519);
      Period period1 = period0.plusHours(519);
      Period period2 = period1.plusDays(519);
      int int1 = (-2660);
      period2.ZERO.withFields(period0);
      Period period3 = period2.plusMonths(int1);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      period3.ZERO.isSupported(durationFieldType0);
      int int2 = period3.getWeeks();
      assertEquals(0, int2);
      
      period3.withYears(int0);
      period2.withDays(int1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period3);
      
      int int3 = (-880);
      Period period4 = period0.minusHours(int3);
      assertNotSame(period4, period1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays((-2377));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Chronology must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1990L, 1990L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays(29);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.weeks(1439);
      PeriodType.DAY_INDEX = 1439;
      // Undeclared exception!
//      try { 
        period0.withDays((-2066));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1439
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.months(888);
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period(21599991L);
      PeriodType.MILLI_INDEX = (-353);
      // Undeclared exception!
//      try { 
        period0.ZERO.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      Period period1 = period0.ZERO.plusWeeks(Integer.MIN_VALUE);
      Period period2 = period1.withSeconds(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period2.toStandardWeeks();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2147487198
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.seconds(3020);
      Period period1 = period0.withYears((-2482));
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.days(260);
      PeriodType.MONTH_INDEX = (-317351875);
      // Undeclared exception!
//      try { 
        period0.ZERO.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.years((-90));
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.days(1619);
      PeriodType.HOUR_INDEX = (-2498);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.days(28265625);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 40702500000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period(3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.DAY_INDEX = 23118750;
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("Dp1mz[:*1oj:OC,", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1023);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(0L, 0L, periodType0, buddhistChronology0);
      PeriodType.DAY_INDEX = (-373);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period(21600000L);
      Period period1 = period0.minusYears(2391);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      PeriodType.WEEK_INDEX = 12;
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.weeks(1073741824);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 7516192768
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusYears(939);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Duration duration0 = Duration.standardMinutes((-1343));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("m`cUbx", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusYears(1236);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.days(221);
      PeriodType.YEAR_INDEX = (-412);
      // Undeclared exception!
//      try { 
        period0.plusYears((-412));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = Period.hours(365);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusWeeks(122);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType.WEEK_INDEX = 1091;
      // Undeclared exception!
//      try { 
        period0.plusWeeks(1091);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.millis(0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusSeconds(2219);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("BO{~hIM~WA!x~'1", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((-240L), (-240L), periodType0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(947);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(672L, periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.plusMonths((-400));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType(")Y", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.millis(2373);
      PeriodType.MONTH_INDEX = 2057;
      // Undeclared exception!
//      try { 
        period0.ZERO.plusMonths(2373);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(1662);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType(")Y", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period((long) 519, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMillis(5507);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Chronology must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1990L, 1990L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMillis((-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = Period.hours((-1627));
      PeriodType.MILLI_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.plusMillis((-1112));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Chronology must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1990L, 1990L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusHours((-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      PeriodType.HOUR_INDEX = 80;
      // Undeclared exception!
//      try { 
        period0.plusHours((-135));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(8, 8, 8, 8);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusDays(8);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 1659;
      // Undeclared exception!
//      try { 
        period0.plusDays(29);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Days days0 = Days.SIX;
      Seconds seconds0 = Seconds.standardSecondsIn(days0);
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.negated();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = duration1.toPeriod(periodType0);
      Period period1 = period0.negated();
      // Undeclared exception!
//      try { 
        period1.plusDays(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 6 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(4134L, 2900L, periodType0);
      Duration duration0 = Duration.millis(4134L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3070));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) julianChronology0);
      Period period1 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      // Undeclared exception!
//      try { 
        period0.plus(period1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = new Period(7, 254, (-923), (-2918), (-2918), 254, 12, (-226), (PeriodType) null);
      PeriodType.MILLI_INDEX = (-3497);
      // Undeclared exception!
//      try { 
        period0.plus(period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse((String) null, periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("Hours", (PeriodFormatter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("gOhp0]A6(<Idi:");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"gOhp0]A6(<Idi:\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("2v!6t<E2s2kATkj", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType.WEEK_INDEX = 1078;
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = Period.hours((-1627));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -5857200000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Duration duration0 = new Duration(1, 43200000L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("naJI-'NE%H`d+eb", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) lenientChronology0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.DAY_INDEX = (-686);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.negated();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483648 * -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.hours(365);
      // Undeclared exception!
//      try { 
        period0.multipliedBy(12740625);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: 365 * 12740625
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period((long) 1, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusYears(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.years((-2422));
      PeriodType.YEAR_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.ZERO.minusYears(478);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(63L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusWeeks((-3409));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 40;
      // Undeclared exception!
//      try { 
        period0.minusWeeks(51);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(910L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(duration0, mutableDateTime0, periodType0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Period period1 = period0.plus(weeks0);
      // Undeclared exception!
//      try { 
        period1.minusWeeks(4);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -4
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Duration duration0 = new Duration((long) 1712);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1712, (Chronology) islamicChronology0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.days(896);
      Seconds seconds0 = Seconds.MAX_VALUE;
      Period period1 = period0.plus(seconds0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds((-1597));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 1597
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusMonths(273);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Chronology must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1990L, 1990L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMonths(86400);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.years(86400);
      PeriodType.MONTH_INDEX = 86400;
      // Undeclared exception!
//      try { 
        period0.minusMonths(940);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((-396L), periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-3355));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-8));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.hours((byte) (-62));
      PeriodType.MINUTE_INDEX = 1225;
      // Undeclared exception!
//      try { 
        period0.minusMinutes(1225);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = Period.minutes(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(116);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -116
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(302L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("U8mMc(%IK", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(10000000000000000L, 10000000000000000L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis((-1386));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Years years0 = Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      PeriodType periodType0 = years0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period((-195L), periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        period0.minusHours((-20));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.minusHours((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((long) 1, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusDays((-1));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.DAY_INDEX = 89;
      // Undeclared exception!
//      try { 
        period0.minusDays(8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.days(3020);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = new Period((long) 3020, periodType0);
      // Undeclared exception!
//      try { 
        period1.minus(period0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.hours(4137);
      Duration duration0 = period0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      Hours hours0 = Hours.FOUR;
      // Undeclared exception!
//      try { 
        period1.minus(hours0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.years(6);
      Period period1 = Period.hours((-1906));
      PeriodType.HOUR_INDEX = 3094;
      // Undeclared exception!
//      try { 
        period0.minus(period1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.hours(365);
      Seconds seconds0 = Seconds.MIN_VALUE;
      Period period1 = period0.plus(seconds0);
      // Undeclared exception!
//      try { 
        period1.minus(seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Duration duration0 = seconds0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[3];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("R(8x($S8", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("F7wy8I", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
//      try { 
        period0.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      PeriodType.MONTH_INDEX = 90;
      // Undeclared exception!
//      try { 
        period0.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.hours((byte) (-62));
      PeriodType.MINUTE_INDEX = 1225;
      // Undeclared exception!
//      try { 
        period0.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Duration duration0 = new Duration(316L);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = duration0.toPeriod(periodType0);
      PeriodType.MILLI_INDEX = 108;
      // Undeclared exception!
//      try { 
        period0.ZERO.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = Period.days(1687);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.ZERO.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[0];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(monthDay1, monthDay1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardSeconds(1384L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[3] = durationFieldType1;
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(duration0, dateTime0, periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.weeks(7);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      Duration duration0 = period0.toDurationTo(dateTime0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = null;
//      try {
        period1 = new Period(duration0, dateTime0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 4233600000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = null;
//      try {
        period0 = new Period(object0, periodType0, (Chronology) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period("LY';R~d4c!h=`baj0");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"LY';R~d4c!h=`baj0\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("HMfa7", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period((-1349L), periodType0, (Chronology) buddhistChronology0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = null;
//      try {
        period0 = new Period(31083663600000L, periodType0, (Chronology) islamicChronology0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 31083663600000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = null;
//      try {
        period0 = new Period(1, (-3244), (-3244), (-3244), 87, (-3244), 86400, 1, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'weeks'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.years((-12));
      PeriodType periodType0 = PeriodType.dayTime();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = new Period(60000L, 1000L);
      Period period1 = period0.ZERO.multipliedBy((-2616));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.multipliedBy(196);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = Period.hours(365);
      Period period1 = period0.plusMillis(365);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusMinutes(1915);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2445), (-2445), 623158436, 623158436, (-2445));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(monthDay0, monthDay0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusHours(4067);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = Period.days(221);
      Period period1 = period0.plusYears((-412));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.millis(0);
      int int0 = period0.ZERO.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.years(53);
      int int0 = period0.getYears();
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.days(3020);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = new Period(60000L, 1000L);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(localDate0, localDate0, periodType0);
      PeriodType.YEAR_INDEX = (-55);
      // Undeclared exception!
//      try { 
        period0.withYears(418);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -55
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period((-65535), (-65535), (-65535), (-65535), (-65535), 3613, 302, (-65535), (PeriodType) null);
      int int0 = period0.getMinutes();
      assertEquals(3613, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.months((-868));
      int int0 = period0.getMonths();
      assertEquals((-868), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((Object) null, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.years(86400);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = new Period(21600000L);
      Months months0 = Months.SIX;
      Period period1 = period0.withFields(months0);
      PeriodType periodType0 = PeriodType.dayTime();
      // Undeclared exception!
//      try { 
        period1.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period(21600000L);
      Period period1 = period0.plusMonths((byte) (-107));
      Period period2 = period1.normalizedStandard((PeriodType) null);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-3395), (-3395), (-3514), 1961, (-8), 1961, 3863, 1949, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Days days0 = Days.FOUR;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(141L, periodType0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 1000L);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 1000L);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = new Period(21600000L);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.plus(period0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(0L, periodType0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = Period.minutes(51);
      // Undeclared exception!
//      try { 
        period0.withFieldAdded((DurationFieldType) null, 568);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.withFieldAdded(durationFieldType0, 562);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.hours(408);
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, 8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.days(1687);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period1 = period0.withField(durationFieldType0, 8);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("|?J#;Kb0cXW", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalTime localTime0 = new LocalTime((-2736L));
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(localDate0, julianChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDate0, yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 365);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDate0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusDays(3263);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -3263
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = new Period((-3645), (-3645), 2, (-3645));
      PeriodType.SECOND_INDEX = (-317351877);
      // Undeclared exception!
//      try { 
        period0.minusSeconds((-3645));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardHours(0L);
      Minutes minutes0 = Minutes.THREE;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = new Period(dateTime0, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1023);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(0L, 0L, periodType0, buddhistChronology0);
      PeriodType.DAY_INDEX = (-373);
      // Undeclared exception!
//      try { 
        period0.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Chronology must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1990L, 1990L, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.months(1587);
      PeriodType.YEAR_INDEX = 48;
      // Undeclared exception!
//      try { 
        period0.ZERO.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardSeconds(1384L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(duration0, dateTime0, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardSeconds(1384L);
      Period period0 = new Period(dateTime0, duration0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = Period.minutes(Integer.MIN_VALUE);
      Period period1 = period0.withMonths((-960));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDateTime localDateTime0 = new LocalDateTime(1037L);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
//      try {
        period0 = new Period(localDate0, localDateTime0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = new Period((-1581L), (-634L));
      Period period1 = period0.withMonths((-4764));
      PeriodType periodType0 = PeriodType.yearDay();
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotSame(period2, period1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-306783378), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 51539607528
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = new Period((-2881), 893, 893, (-1987), (-342), 2540, 2540, 3462);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = Period.days(65533);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = Period.weeks(1073741824);
      PeriodType.MINUTE_INDEX = 3153;
      // Undeclared exception!
//      try { 
        period0.plusMinutes(1073741824);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      Period period0 = new Period(1073741823L, 1073741823L, lenientChronology0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Duration duration0 = new Duration(1, 43200000L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("naJI-'NE%H`d+eb", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) lenientChronology0);
      // Undeclared exception!
//      try { 
        period0.withMillis(0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(403, 4998, 1, 1);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.minusMonths(403);
      // Undeclared exception!
//      try { 
        period1.minusMonths(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -403 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(403, 4998, 1, 1);
      Period period0 = mutablePeriod0.toPeriod();
      Days days0 = period0.toStandardDays();
      assertEquals(20, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("c4", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(189, 189, (-726), (-726), 189, 605, 605, 189, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Object object0 = new Object();
      Period period0 = null;
//      try {
        period0 = new Period(object0, islamicChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      Period period0 = new Period(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
//      try { 
        Period.parse("[Ua0AMG*M ,cHRQ", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"[Ua0AMG*M ,cHRQ\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
//      try {
        period0 = new Period(dateTimeZone0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: org.joda.time.tz.FixedDateTimeZone
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.withSeconds(12);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Duration duration0 = new Duration(1, 43200000L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("naJI-'NE%H`d+eb", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) lenientChronology0);
      // Undeclared exception!
//      try { 
        period0.withWeeks((-901));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType(")Y", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.withHours(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      Period period1 = period0.minusMillis((-2717));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      Period period1 = period0.withMinutes(Integer.MIN_VALUE);
      assertNotSame(period0, period1);
  }
}
