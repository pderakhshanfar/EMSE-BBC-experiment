/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:57:26 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMonths(307);
      Period period2 = period1.normalizedStandard();
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.weeks((-431));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-260668800L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.minutes((-885));
      Period period1 = period0.withDays((-996));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-86107500000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period((-885), (-885), (-885), (-885));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-3239985885L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = Period.hours(3);
      Period period1 = period0.withFields(days0);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(442800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2187L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(2187, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.seconds((-1));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Days days0 = seconds0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      Chronology chronology0 = instant0.getChronology();
      Period period0 = duration0.toPeriod(chronology0);
      Hours hours0 = period0.toStandardHours();
      assertEquals((-596520), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.seconds(265);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period((-885), (-885), (-885), (-885));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-5), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDate0, localTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Duration duration0 = Duration.standardHours((-1571L));
      DateTime dateTime0 = DateTime.now();
      Period period0 = new Period(duration0, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period((ReadableDuration) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(15778476000L, (Chronology) gJChronology0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.days((-1641));
      Period period1 = period0.withWeeks(11);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.years(1146);
      Period period1 = period0.withDays(1146);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusDays(316);
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(45, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.millis(0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = new Period((-885), (-885), (-885), (-885));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-3239985), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.minutes((-885));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-885), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.seconds(2);
      Period period1 = period0.ZERO.minusMinutes((-1639));
      Hours hours0 = period1.toStandardHours();
      assertEquals(27, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.hours(31);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(111600000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3415L));
      MutableDateTime mutableDateTime0 = new MutableDateTime(10800000L);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      Duration duration1 = period0.toStandardDuration();
      assertEquals((-204900000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.hours(3);
      Period period1 = period0.multipliedBy(880);
      Days days0 = period1.toStandardDays();
      assertEquals(110, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.millis(265);
      Period period1 = period0.withMinutes((-1891));
      Days days0 = period1.toStandardDays();
      assertEquals((-1), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(1076).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.seconds(76);
      Period period1 = period0.minusMillis(57);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.minutes((-885));
      Period period1 = period0.minusDays(1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.years(1146);
      int int0 = period0.getYears();
      assertEquals(1146, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period(988L);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, (-4142));
      int int0 = period1.getYears();
      assertEquals((-4142), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-18), 3371, 9);
      int int0 = period0.getWeeks();
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 53, 53);
      Period period1 = period0.multipliedBy((-3905));
      int int0 = period1.getWeeks();
      assertEquals((-206965), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Interval interval0 = new Interval((-1310L), 86400000L, (DateTimeZone) null);
      Period period0 = interval0.toPeriod();
      int int0 = period0.getSeconds();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(988L);
      Period period1 = period0.plusSeconds((-4142));
      int int0 = period1.getSeconds();
      assertEquals((-4142), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.seconds(76);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 1641, 9);
      int int0 = period0.getMonths();
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.years((-3868));
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 53, 9);
      int int0 = period0.getMinutes();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period((-3281L), periodType0, (Chronology) islamicChronology0);
      Period period1 = period0.multipliedBy((-1223));
      int int0 = period1.getMillis();
      assertEquals(343663, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.millis((-1508));
      int int0 = period0.getMillis();
      assertEquals((-1508), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.hours(4);
      int int0 = period0.getHours();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 53, 9);
      int int0 = period0.getHours();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2187L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      int int0 = period0.getDays();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.days((-2243));
      int int0 = period0.getDays();
      assertEquals((-2243), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 2211;
      // Undeclared exception!
//      try { 
        period0.withYears(11);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2211
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.weeks(8);
      PeriodType.WEEK_INDEX = (-2483);
      // Undeclared exception!
//      try { 
        period0.withWeeks((-2483));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2483
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Duration duration0 = new Duration(86400L);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withSeconds(2729);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = periodFormatter1.parsePeriod("");
      // Undeclared exception!
//      try { 
        period0.withSeconds(0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-230);
      // Undeclared exception!
//      try { 
        period0.withSeconds(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -230
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusMinutes(307);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
//      try { 
        period1.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'minutes'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.days(1000);
      Weeks weeks0 = Weeks.MIN_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withMonths(2980);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType("`JG", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withMonths((-1790));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.minutes(1000);
      PeriodType.MONTH_INDEX = 12;
      // Undeclared exception!
//      try { 
        period0.withMonths(12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 12
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.minutes((-885));
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withMinutes((-4));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1937);
      // Undeclared exception!
//      try { 
        period0.withMinutes(1705);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1937
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.hours((-31));
      PeriodType.MILLI_INDEX = 1058;
      // Undeclared exception!
//      try { 
        period0.withMillis((-687));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1058
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.withHours(9);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 307;
      // Undeclared exception!
//      try { 
        period0.withHours(1129);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 307
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-885));
      Minutes minutes0 = Minutes.THREE;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays(3);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-1380);
      // Undeclared exception!
//      try { 
        period0.withDays(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1380
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.years((-693));
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("]pY tWh", durationFieldTypeArray0, (int[]) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Duration duration0 = weeks0.toStandardDuration();
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      PeriodType.HOUR_INDEX = (-1776);
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period((-1636), (-3532), (-1636), (-3532), (-3532), 0, (-3532), 0);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.millis(1000);
      PeriodType.WEEK_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.seconds((-1));
      Period period1 = period0.minusWeeks(604800);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -365783040001
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(456).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = periodFormatter1.parsePeriod("");
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.hours(4);
      PeriodType.YEAR_INDEX = (-970);
      // Undeclared exception!
//      try { 
        period0.ZERO.toStandardMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.weeks(20587500);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 207522000000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 3371, 9);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(918518400000L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.seconds(1000);
      Period period1 = period0.plusDays(292272992);
      // Undeclared exception!
//      try { 
        period1.toStandardHours();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 7014551808
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = periodFormatter1.parsePeriod("");
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-2020);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 3371, 9);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.seconds(1161);
      PeriodType.YEAR_INDEX = (-2427);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      Period period1 = period0.withFields(weeks0);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -15032385536
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusYears(8);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(790L, 790L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusYears((-285));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-1);
      // Undeclared exception!
//      try { 
        period0.plusYears(65);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-1095));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(918518400000L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      int[] intArray0 = new int[5];
      intArray0[2] = 455;
      PeriodType periodType0 = new PeriodType("A", durationFieldTypeArray0, intArray0);
      TimeZone timeZone0 = TimeZone.getTimeZone(" as this period contains years and years vary in length");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(3600000L, periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-2094));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 455
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = Period.days((-1641));
      Weeks weeks0 = Weeks.MIN_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusSeconds(256);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Days days0 = Days.FIVE;
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval0 = new Interval(days0, mutableDateTime0);
      Hours hours0 = Hours.SEVEN;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = interval0.toPeriod(periodType0);
      PeriodType.SECOND_INDEX = (-17);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(1057);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -17
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(681);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.ReadableIntervalConverter", durationFieldTypeArray0, (int[]) null);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period((-1L), 0L, periodType0, copticChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(1169);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.hours(710);
      PeriodType.MINUTE_INDEX = (-674);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(681);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -674
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.minutes(2147483646);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(868);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483646 + 868
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period((-885), (-885), (-885), (-885));
      Weeks weeks0 = Weeks.MIN_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMillis((-314));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 3419;
      // Undeclared exception!
//      try { 
        period0.plusMillis((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3419
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = Period.seconds((-1));
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusHours(2669);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("dgFXwhN OU5EL'|*", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.plusHours(359);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("F`n:->", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(0L, 0L, periodType0, ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.plusHours(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = Period.ZERO;
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.withFields(hours0);
      // Undeclared exception!
//      try { 
        period1.plusHours((-419));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -419
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.seconds(2);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusDays(2);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.DAY_INDEX = 2000;
      // Undeclared exception!
//      try { 
        period0.plusDays((-201));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2000
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.plusDays((-1004));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -1004
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Interval interval0 = new Interval((ReadableInstant) null, days0);
      Duration duration0 = interval0.toDuration();
      PeriodType periodType0 = PeriodType.weeks();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.plus(days0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(918518400000L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.plus(weeks0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plusSeconds(4);
      PeriodType.SECOND_INDEX = (-2940);
      // Undeclared exception!
//      try { 
        period1.plus(period1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2940
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = new Period(604800L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plus(minutes0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 10 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      // Undeclared exception!
//      try { 
        Period.parse("", periodFormatter0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
//      try { 
        Period.parse((String) null, periodFormatter0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      // Undeclared exception!
//      try { 
        Period.parse("6haicJ", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"6haicJ\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("Minutes", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = Period.millis(65);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType.MINUTE_INDEX = 65;
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period((-1124), 99, (-1442), 2, 99, 65535, 9, 1000);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -867660290000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("g_s^Vl;0p", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, (-423L), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.months(1);
      PeriodType.MINUTE_INDEX = (-4833);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.millis(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.negated();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483648 * -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period((-2177), (-2177), 2047, (-1218), 2615625, 7, 2047, 1082);
      // Undeclared exception!
//      try { 
        period0.multipliedBy((-1542));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: 2615625 * -1542
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3415L));
      MutableDateTime mutableDateTime0 = new MutableDateTime(10800000L);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.minusYears((-46));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = duration0.toPeriod((Chronology) islamicChronology0);
      PeriodType.YEAR_INDEX = 999;
      // Undeclared exception!
//      try { 
        period0.minusYears(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 999
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.years(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusYears(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusWeeks(7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-61);
      // Undeclared exception!
//      try { 
        period0.minusWeeks((-61));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -61
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusWeeks(2230);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2230
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3415L));
      MutableDateTime mutableDateTime0 = new MutableDateTime(10800000L);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(1038);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType("`JG", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds((-2315));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      PeriodType.SECOND_INDEX = (-2200);
      // Undeclared exception!
//      try { 
        period0.ZERO.minusSeconds((-1963));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2200
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Months months0 = Months.ZERO;
      PeriodType periodType0 = months0.getPeriodType();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      Period period0 = new Period(1298L, periodType1);
      // Undeclared exception!
//      try { 
        period0.minusMonths(4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("wP#=[", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMonths(168);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period((-1231), 4, (-1231), 4, (-1231), 9, 28, 2);
      PeriodType.MONTH_INDEX = 260;
      // Undeclared exception!
//      try { 
        period0.minusMonths(292278993);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 260
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = Period.months(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusMonths(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(1031).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = periodFormatter1.parsePeriod("");
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-154));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = Period.hours((-12));
      PeriodType.MINUTE_INDEX = (-1125);
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-12));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1125
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = duration0.toPeriod((Chronology) ethiopicChronology0);
      Period period1 = period0.minusMinutes(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period1.minusMinutes(15271875);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -15271875
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.days(1000);
      Weeks weeks0 = Weeks.MIN_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusMillis(52);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Instant instant0 = new Instant(490L);
      Period period0 = new Period(instant0, (ReadableDuration) null);
      PeriodType.MILLI_INDEX = 1643;
      // Undeclared exception!
//      try { 
        period0.minusMillis((-2628));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1643
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.minusHours(2985);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1000
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, 85, 2182, 1000, Integer.MAX_VALUE, 117, 1000, 2182);
      // Undeclared exception!
//      try { 
        period0.minusHours((-179));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 179
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusDays((-1));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(2629746000L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusDays(57);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
//      try { 
        period0.minus(weeks0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      Seconds seconds0 = Seconds.MIN_VALUE;
      int[] intArray0 = new int[7];
      intArray0[6] = 213;
      PeriodType periodType0 = new PeriodType(" cannot be compared to ", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.minus(seconds0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 213
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withSeconds((-630));
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
//      try { 
        period1.minus(seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -630 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeriodType.YEAR_INDEX = (-970);
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-970));
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.ZERO.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      PeriodType.WEEK_INDEX = 1641;
      // Undeclared exception!
//      try { 
        period0.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.millis((-1693));
      PeriodType.SECOND_INDEX = (-1693);
      // Undeclared exception!
//      try { 
        period0.ZERO.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      Period period0 = periodFormatter0.parsePeriod("");
      PeriodType.MONTH_INDEX = (-3135);
      // Undeclared exception!
//      try { 
        period0.ZERO.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period((-1525), (-1525), (-97), (-97), 1405, (-1525), 1405, (-2366));
      PeriodType.MINUTE_INDEX = (-2366);
      // Undeclared exception!
//      try { 
        period0.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = new Period((-1525), (-1525), (-1525), (-1525), 1405, (-1525), 1405, (-2366));
      PeriodType.MILLI_INDEX = (-2366);
      // Undeclared exception!
//      try { 
        period0.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.HOUR_INDEX = 238;
      // Undeclared exception!
//      try { 
        period0.ZERO.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.days(654);
      PeriodType.DAY_INDEX = 603;
      // Undeclared exception!
//      try { 
        period0.ZERO.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((-9223372036854775808L), (Chronology) copticChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      DateTime dateTime0 = new DateTime();
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = null;
//      try {
        period0 = new Period(dateTime0, duration0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -15032385536
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = null;
//      try {
        period0 = new Period(localDate0, periodType0, ethiopicChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: org.joda.time.LocalDate
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
//      try {
        period0 = new Period(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[3] = durationFieldType1;
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("B", durationFieldTypeArray0, intArray0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period((long) 14, periodType0, (Chronology) copticChronology0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("B", durationFieldTypeArray0, intArray0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period((long) 14, periodType0, (Chronology) copticChronology0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
//      try {
        period0 = new Period(26607895200000L, periodType0, (Chronology) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 26607895200
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.ConverterSet$Entry", (DurationFieldType[]) null, (int[]) null);
      Period period0 = null;
//      try {
        period0 = new Period((-77L), periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = period0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period1 = null;
//      try {
        period1 = new Period(428L, 10000000000000000L, periodType0, buddhistChronology0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2777777777
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.millis(1000);
      Weeks weeks0 = Weeks.MIN_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withFields(period0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'millis'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.millis(256);
      Period period1 = period0.ZERO.multipliedBy((-1332));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis((-1));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period((-3231), (-3231), 487, 487, 2147483646, (-3231), (-3231), (-3231));
      Period period1 = period0.plusMinutes(868);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period(1666, 1857, 1829, 0, (-1440), 37, (-1440), 0);
      Period period1 = period0.plusHours((-1440));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.minutes((-885));
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusWeeks((-140));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.ZERO.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.millis(Integer.MIN_VALUE);
      int int0 = period0.ZERO.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.millis(234);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Days days0 = Days.ZERO;
      Duration duration0 = days0.toStandardDuration();
      DateTime dateTime0 = new DateTime();
      Period period0 = new Period(dateTime0, duration0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.withYears((-1901));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.hours(31);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1310L), (DateTimeZone) null);
      Months months0 = Months.TWELVE;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period(1666, 1857, 1829, 0, (-1440), 37, (-1440), 0);
      int int0 = period0.getMinutes();
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse("", periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withYears(11);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.months((-767));
      int int0 = period0.getMonths();
      assertEquals((-767), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period(604800L, 604800L, periodType0, buddhistChronology0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = Period.days(1000);
      Period period1 = period0.withMonths(2980);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(1146, 3247, (-287), (-506), (-1), (-1641), 9, 1146, periodType0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 53, 53);
      Period period1 = period0.ZERO.plusYears((-1));
      PeriodType periodType0 = PeriodType.standard();
      Period period2 = period1.normalizedStandard(periodType0);
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(31449600000L, 53, periodType0, julianChronology0);
      Period period1 = period0.normalizedStandard(periodType0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.days((-1641));
      Period period1 = period0.minusYears((-1641));
      // Undeclared exception!
//      try { 
        period1.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMonths(307);
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 3371, 9);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.negated();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = Seconds.MIN_VALUE;
      Period period1 = period0.minus(seconds0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.ZERO.plusMillis(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("g_s^Vl;0p", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, (-423L), periodType0, (Chronology) null);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.seconds(76);
      Period period1 = period0.minusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      Period period0 = periodFormatter0.parsePeriod("");
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.years(1146);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.seconds(76);
      Period period1 = period0.ZERO.plusMonths(0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = Period.seconds(2);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = new Period((-2243), (-2243), (-2243), 886, 886, (-2243), 886, 886);
      Period period1 = period0.ZERO.plus(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.hours(3);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.minutes((-885));
      // Undeclared exception!
//      try { 
        period0.withFieldAdded((DurationFieldType) null, (-885));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Period period1 = period0.withFieldAdded(durationFieldType0, 666);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.millis(265);
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, (-33));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.days((-1641));
      Days days0 = Days.FIVE;
      Duration duration0 = days0.toStandardDuration();
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      Period period1 = period0.withField(durationFieldType0, 28265625);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.ZERO.withFields((ReadablePeriod) null);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = Period.weeks(8);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("oTTxf'T:qy^&u(g%Bv", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime(140L, (Chronology) strictChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, yearMonth0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.withMillis(2);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusSeconds(2985);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("]pY tWh", durationFieldTypeArray0, (int[]) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.minusDays(292271022);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -292271022
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = new Period((-2923L));
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-2147483647));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = new Period(30, 10080, 30, 3);
      // Undeclared exception!
//      try { 
        period0.plusMillis(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 3 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(instant0, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = periodFormatter0.parsePeriod("");
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("wP#=[", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusHours((-2005));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1955L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(2);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, (PeriodType) null, julianChronology0);
      Period period1 = period0.plusYears(7593750);
      // Undeclared exception!
//      try { 
        period1.plusYears(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 7593750 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Period period0 = new Period(1666, 1857, 1829, 0, (-1440), 37, (-1440), 0);
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) copticChronology0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
//      try {
        period0 = new Period(monthDay0, localDate0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = new Period(0L, (-1786L));
      PeriodType.SECOND_INDEX = (-2215);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(83);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.minusHours(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Period period0 = Period.hours(4);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-1000L), (-1000L), buddhistChronology0);
      PeriodType.MONTH_INDEX = (-1417);
      // Undeclared exception!
//      try { 
        period0.plusMonths(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1417
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      Period period0 = periodFormatter0.parsePeriod("");
      Period period1 = period0.withMillis((-356));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Period period0 = Period.minutes(1000);
      Period period1 = period0.minusMonths(1000);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("dgFXwhN OU5EL'|*", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis((-4017));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Period period0 = new Period(53, 53, 53, 53, (-1), (-1), 53, 53);
      Period period1 = period0.ZERO.plusYears((-1));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
//      try { 
        period1.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      Period period0 = periodFormatter0.parsePeriod("");
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = null;
//      try {
        period0 = new Period(3371, 255, (-3743), 6, 3371, 567, (-1), 4, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Integer integer0 = new Integer(3371);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period((Object) integer0, (Chronology) buddhistChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Integer
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Period period0 = Period.parse("P4D");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Integer integer0 = Integer.getInteger((String) null, (-1326));
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = null;
//      try {
        period0 = new Period((Object) integer0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Integer
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      Period period0 = periodFormatter0.parsePeriod("");
      Period period1 = period0.ZERO.withHours(6);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Period period0 = new Period((-3231), (-3231), 487, 487, Integer.MIN_VALUE, (-3231), (-3231), (-3231));
      // Undeclared exception!
//      try { 
        period0.minusMillis(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -3231 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.ReadableIntervalConverter", durationFieldTypeArray0, (int[]) null);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period((-1L), 0L, periodType0, copticChronology0);
      // Undeclared exception!
//      try { 
        period0.withDays(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }
}
