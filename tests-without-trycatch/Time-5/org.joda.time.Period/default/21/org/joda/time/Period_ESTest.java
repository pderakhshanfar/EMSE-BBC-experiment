/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:12:42 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.months((-386));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.months((-386));
      Period period1 = period0.minusYears(999);
      Period period2 = period1.normalizedStandard();
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = Period.weeks((-1847));
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusSeconds((-1013));
      Period period2 = period1.normalizedStandard();
      Period period3 = period2.normalizedStandard();
      assertFalse(period3.equals((Object)period0));
      assertTrue(period3.equals((Object)period2));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.months((-1712));
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period(2688, (-3217), 121, 1961);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(9483902961L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.weeks((-2675));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1617840000), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period((-1000L));
      Period period1 = period0.plusDays(1171);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(101174399, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period(0L, (Chronology) copticChronology0);
      Period period1 = period0.minusMinutes(1);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-60), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMillis(9);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusWeeks(5);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-50400), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.ZERO;
      Minutes minutes0 = Minutes.TWO;
      Period period1 = period0.plus(minutes0);
      Hours hours0 = period1.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(9);
      Days days0 = period1.toStandardDays();
      assertEquals(0, days0.getDays());
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.minutes(3);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusDays((-125));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(17, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.minutes((-166));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusSeconds((-1013));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(12);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period(0L, (Chronology) copticChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      Period period1 = period0.withFieldAdded(durationFieldType0, 7);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period((long) (-166));
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Days days0 = Days.FOUR;
      Hours hours0 = days0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = new Period(duration0, (ReadableInstant) null);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(2356L, periodType0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withWeeks(40);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMonths(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withHours(275);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withField(durationFieldType0, 4513);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.seconds((-1733));
      Period period1 = period0.withDays((-1733));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.hours(337);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusWeeks(5);
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-5), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period(1591L, 86400000L, (PeriodType) null);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1439, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusDays(5);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-7200), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.seconds(789);
      Period period1 = period0.plusWeeks(365);
      Hours hours0 = period1.toStandardHours();
      assertEquals(61320, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1000L));
      DateTime dateTime0 = new DateTime();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      Hours hours0 = period0.toStandardHours();
      assertEquals((-984), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period((-1000L));
      Period period1 = period0.minusWeeks(65535);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-39635568001000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = new Period((-1000L));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-1000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.seconds(789);
      Period period1 = period0.plusWeeks(365);
      Days days0 = period1.toStandardDays();
      assertEquals(2555, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.seconds((-3760));
      Period period1 = period0.plusWeeks((-2001));
      Days days0 = period1.toStandardDays();
      assertEquals((-14007), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMonths(275);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.years(5);
      int int0 = period0.getYears();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYear(2015);
      Period period0 = Period.fieldDifference(localDateTime1, localDateTime0);
      int int0 = period0.getYears();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.weeks(2674);
      int int0 = period0.getWeeks();
      assertEquals(2674, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.seconds(789);
      int int0 = period0.getSeconds();
      assertEquals(789, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.seconds((-3760));
      int int0 = period0.getSeconds();
      assertEquals((-3760), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.months(17971875);
      int int0 = period0.getMonths();
      assertEquals(17971875, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withDate(3, 3, 3);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime1);
      Period period1 = period0.negated();
      int int0 = period1.getMonths();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period((-1000L));
      Period period1 = period0.withMinutes(1067);
      int int0 = period1.getMinutes();
      assertEquals(1067, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.minutes((-1));
      int int0 = period0.getMinutes();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period((long) (-166));
      int int0 = period0.getMillis();
      assertEquals((-166), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = new Period((-2747), 12, (-2747), (-1436), 12, 12, (-2747), 1388);
      int int0 = period0.getHours();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      Period period0 = new Period(199L, chronology0);
      Period period1 = period0.minusHours(893);
      int int0 = period1.getHours();
      assertEquals((-893), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.minusDays((-1869));
      int int0 = period1.getDays();
      assertEquals(1869, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = new Period((-342), 9, (-4860), (-2027), 20503125, 1382, (-2027), (-4860));
      int int0 = period0.getDays();
      assertEquals((-2027), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must not have overlapping fields", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.withYears((-504));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = 4892;
      // Undeclared exception!
//      try { 
        period0.withYears(8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4892
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 68;
      // Undeclared exception!
//      try { 
        period0.withWeeks(8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 68
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.withSeconds((-355));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-839);
      // Undeclared exception!
//      try { 
        period0.withSeconds(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -839
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = new PeriodType("VUCs_V#E", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 1141;
      // Undeclared exception!
//      try { 
        period0.withMonths((-1119));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1141
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 166;
      // Undeclared exception!
//      try { 
        period0.withMinutes(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 166
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MILLI_INDEX = (-960);
      // Undeclared exception!
//      try { 
        period0.withMillis((-960));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -960
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-1108);
      // Undeclared exception!
//      try { 
        period0.withDays((-1108));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1108
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.years((-1971));
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 696;
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.years(2532);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.years(6);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 669;
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.months(623158436);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1042);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.months(1431);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must not have overlapping fields", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 1963;
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 457;
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.plusYears(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = 27;
      // Undeclared exception!
//      try { 
        period0.plusYears(1254);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 27
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-6);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -6
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1452;
      // Undeclared exception!
//      try { 
        period0.plusSeconds(1452);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1452
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(15271875);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-965);
      // Undeclared exception!
//      try { 
        period0.plusMonths((-1093));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -965
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(412);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1897;
      // Undeclared exception!
//      try { 
        period0.plusMinutes(3600);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1897
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.plusMillis(25734375);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-2445);
      // Undeclared exception!
//      try { 
        period0.plusMillis(26);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2445
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.plusHours((-1309));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.HOUR_INDEX = (-12);
      // Undeclared exception!
//      try { 
        period0.plusHours(125);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -12
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period(Integer.MIN_VALUE, (-176), 1000, (-176));
      // Undeclared exception!
//      try { 
        period0.plusHours((-176));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -176
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = Period.weeks(2258);
      PeriodType.DAY_INDEX = 2258;
      // Undeclared exception!
//      try { 
        period0.plusDays(2258);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2258
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.plusDays(9);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 9
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(Integer.MIN_VALUE, (-176), 1000, (-176));
      Period period1 = period0.plusYears((-3));
      PeriodType.YEAR_INDEX = 470;
      // Undeclared exception!
//      try { 
        period0.plus(period1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 470
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.years(6);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
//      try { 
        period0.plus(years0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 6 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse("", periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
//      try { 
        Period.parse("1f]dkgH<I#|QS]", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"1f]dkgH<I#|QS]\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse(";m'_U6");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \";m'_U6\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("B5;\"* 6x%\"Wz6,W2-", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-3019);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.hours(28265625);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 101756250000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.months((-386));
      PeriodType.MILLI_INDEX = (-386);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-834);
      // Undeclared exception!
//      try { 
        period0.minusYears((-834));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -834
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-1051);
      // Undeclared exception!
//      try { 
        period0.minusWeeks((-1051));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1051
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 227;
      // Undeclared exception!
//      try { 
        period0.minusSeconds(7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 227
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period(100000000L);
      Seconds seconds0 = Seconds.MAX_VALUE;
      Period period1 = period0.minus(seconds0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds(52);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483607 + -52
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-1995);
      // Undeclared exception!
//      try { 
        period0.minusMonths((-1995));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1995
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = new Period((-26), (-2895), (-26), (-2895), (-1913), 0, Integer.MAX_VALUE, (-2895), (PeriodType) null);
      // Undeclared exception!
//      try { 
        period0.minusMonths(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2895 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1029;
      // Undeclared exception!
//      try { 
        period0.minusMinutes(1029);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1029
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodType.MILLI_INDEX = (-386);
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      // Undeclared exception!
//      try { 
        period0.minusMillis((-2618));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -386
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.minusHours(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.hours(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusHours(2142);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2142
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-2590);
      Days days0 = Days.SEVEN;
      // Undeclared exception!
//      try { 
        period0.minus(days0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2590
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.minus(days0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.weeks(6);
      PeriodType.YEAR_INDEX = (-691);
      // Undeclared exception!
//      try { 
        period0.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-839);
      // Undeclared exception!
//      try { 
        period0.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.MONTH_INDEX = 1518;
      // Undeclared exception!
//      try { 
        period0.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 105;
      // Undeclared exception!
//      try { 
        period0.ZERO.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MILLI_INDEX = 3560;
      // Undeclared exception!
//      try { 
        period0.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.hours((-1651));
      PeriodType.HOUR_INDEX = (-1651);
      // Undeclared exception!
//      try { 
        period0.ZERO.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.DAY_INDEX = 2128;
      // Undeclared exception!
//      try { 
        period0.ZERO.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, (PeriodType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(0L, (Chronology) ethiopicChronology0);
      Period period0 = new Period(259, 1, 1, 1, (-679), 1, 1, 1151);
      DateTime dateTime1 = dateTime0.withPeriodAdded(period0, 6382);
      PeriodType periodType0 = PeriodType.hours();
      Period period1 = null;
//      try {
        period1 = new Period(dateTime1, dateTime0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -14490849964
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Instant instant0 = Instant.now();
      Period period0 = new Period(126L);
      Period period1 = period0.plusDays(2000);
      Duration duration0 = period1.toStandardDuration();
      PeriodType periodType0 = PeriodType.millis();
      Period period2 = null;
//      try {
        period2 = new Period(instant0, duration0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 172800000126
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime((-2412), 4, 1, 4, 4, 4, 1);
      DateTime dateTime1 = dateTime0.withChronology(copticChronology0);
      Duration duration0 = new Duration(dateTime1, dateTime1);
      Duration duration1 = duration0.minus((-3352L));
      Period period0 = null;
//      try {
        period0 = new Period(dateTime1, duration1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Period period0 = null;
//      try {
        period0 = new Period(linkedList0, (Chronology) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.util.LinkedList
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
//      try {
        period0 = new Period(0L, 9223372036854775807L, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
      durationFieldTypeArray0[2] = durationFieldType1;
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period((-1044L), 1325L, periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period((-1044L), 1325L, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = null;
//      try {
        period0 = new Period(9223372036854775801L, 0L, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -153722867280912
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withYears(5);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.years(5);
      PeriodType periodType0 = PeriodType.dayTime();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = new Period((-1000L));
      Period period1 = period0.multipliedBy(15);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(543);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes((-12825000));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusDays(341);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.plusYears(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Days days0 = hours0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = new Period((Object) null, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.weeks((-692));
      int int0 = period0.getWeeks();
      assertEquals((-692), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = new Period((-1000L));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-38));
      Hours hours0 = seconds0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(31557600000L, 31557600000L, periodType0, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("", (PeriodFormatter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.withYears(2315);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(1500L, periodType0, (Chronology) null);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period(854, 854, 854, 2);
      int int0 = period0.getMillis();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = period0.plusMonths(3);
      // Undeclared exception!
//      try { 
        period1.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(911);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Hours hours0 = Hours.TWO;
      // Undeclared exception!
//      try { 
        period0.minus(hours0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Seconds seconds0 = Seconds.TWO;
      // Undeclared exception!
//      try { 
        period0.plus(seconds0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-416));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
//      try { 
        period0.withFieldAdded((DurationFieldType) null, 405);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, 10125000);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.weeks(20587500);
      PeriodType periodType0 = PeriodType.yearDayTime();
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'weeks'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(strictChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1401), (-734), 4, 4, (-2839));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth0, localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.minusWeeks(1252);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.hours(7678125);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 27641250000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusDays(873);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period(6, 6, 6, 6);
      PeriodType.HOUR_INDEX = (-3205);
      // Undeclared exception!
//      try { 
        period0.minusHours(6);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3205
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Instant instant0 = Instant.now();
      Period period0 = new Period(126L);
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = new Period(instant0, duration0, periodType0);
      assertEquals(126L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = null;
//      try {
        period0 = new Period(4, 30617280288L, periodType0, buddhistChronology0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 30617280284
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      PeriodType periodType0 = PeriodType.minutes();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = null;
//      try {
        period0 = new Period(locale0, periodType0, islamicChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.util.Locale
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.negated();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483648 * -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.withMonths(4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
//      try {
        period0 = new Period(object0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period(8L, 8L);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = new Period((ReadableInstant) null, duration0);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-1263));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = Period.hours((-292275054));
      // Undeclared exception!
//      try { 
        period0.multipliedBy((-292275054));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -292275054 * -292275054
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.weeks(86399999);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 14515199832
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2629746000L);
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      PeriodType.WEEK_INDEX = (-731);
      // Undeclared exception!
//      try { 
        period0.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.minusHours(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -128849018820
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.millis((-386));
      PeriodType.HOUR_INDEX = (-386);
      // Undeclared exception!
//      try { 
        period0.withHours((-2717));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -386
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period((ReadableDuration) null, mutableDateTime0, periodType0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(3266L, 3266L, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.withMillis(4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusMonths(336);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod((PeriodType) null);
      PeriodType.DAY_INDEX = 47;
      // Undeclared exception!
//      try { 
        period0.minusDays(47);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 47
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = Period.weeks(317351877);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2221463139
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = new Period();
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
//      try {
        period0 = new Period((-588), (-588), (-588), 8, 8, 8, 8, (-588), periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusYears(99);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period((Object) null, ethiopicChronology0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = new Period(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Integer integer0 = new Integer(4);
      PeriodType periodType0 = PeriodType.years();
      Period period0 = null;
//      try {
        period0 = new Period((Object) integer0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Integer
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds(4);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.withWeeks((-77));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.withHours((-446));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.minusMillis((-112));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.withMinutes(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.withDays(1478);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }
}
