/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 22:15:41 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.months((-3388));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.millis((-1398));
      Period period1 = period0.minusMonths(6);
      // Undeclared exception!
//      try { 
        period1.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.minutes(723);
      Period period1 = period0.plusHours(1431);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(5194980000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days((-3));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-259200), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period((-46), (-46), (-46), (-46));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-168406), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period((-5), (-5), (-5), (-5));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-305), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period((-14), 7, 7, 7);
      Hours hours0 = period0.toStandardHours();
      assertEquals((-14), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period(46, 7, 7, 7);
      Days days0 = period0.toStandardDays();
      assertEquals(1, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.days(8);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period(56L);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-104));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((long) 7);
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, localDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.weeks(4978125);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(4978125, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      Period period1 = period0.plusHours((-1706));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-10), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = new Period((-3), (-2530L), (PeriodType) null);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-2), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period(4595L, (PeriodType) null);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(7, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(30585600000L, 65L, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-508320), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withDays(505);
      Hours hours0 = period1.toStandardHours();
      assertEquals(12120, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = new Period(1419L, 1419L);
      Period period1 = period0.minusMinutes(2633);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-157980000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.weeks(663);
      Seconds seconds0 = period0.toStandardSeconds();
      Period period1 = period0.minus(seconds0);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(400982400, seconds0.getSeconds());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period(4371L, 1419L);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.weeks(26);
      Days days0 = period0.toStandardDays();
      assertEquals(182, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.weeks((-2424));
      Days days0 = period0.toStandardDays();
      assertEquals((-16968), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = new Period((-3), (-3), (-3), (-3));
      Period period1 = period0.plusYears((-3));
      int int0 = period1.getYears();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.minutes(47);
      Period period1 = period0.withWeeks(1000);
      int int0 = period1.getWeeks();
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusWeeks((-359));
      Period period2 = period1.plus(period0);
      int int0 = period2.getWeeks();
      assertEquals((-359), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      int int0 = period0.getSeconds();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period((-5), (-5), (-5), (-5));
      int int0 = period0.getSeconds();
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.plusMonths(17);
      int int0 = period1.getMonths();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.months((-1));
      int int0 = period0.getMonths();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.minutes((-2161));
      Period period1 = period0.negated();
      int int0 = period1.getMinutes();
      assertEquals(2161, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period((-5), (-5), (-5), (-5));
      int int0 = period0.getMinutes();
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period((-901), 4161, (-901), (-4574), (-4574), (-4574), 6, (-643));
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = new Period((-663L));
      int int0 = period0.getMillis();
      assertEquals((-663), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period(2095, 2095, 7, 59, 7, (-2850), 2095, 2095, (PeriodType) null);
      int int0 = period0.getDays();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3600000L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(3600000L);
      Interval interval0 = duration0.toIntervalFrom(mutableDateTime0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = interval0.toPeriod(periodType0);
      Period period1 = period0.minusDays(4);
      int int0 = period1.getDays();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period((long) (-14), periodType0);
      // Undeclared exception!
//      try { 
        period0.withYears((-2945));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("csPV$e.{$[?T", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.withYears(1144);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1991);
      PeriodType periodType0 = new PeriodType("%7]|@en^|", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.withYears(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1991
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("3fXRu`{W\"1h", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(369L, 409L, periodType0, gJChronology0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(3353);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-4076);
      // Undeclared exception!
//      try { 
        period0.withWeeks(1000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4076
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) gJChronology0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.withSeconds(1410);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period((-4533), 1430, (-4533), (-2808), 730, 730, (-4533), 1900);
      PeriodType.SECOND_INDEX = 2594;
      // Undeclared exception!
//      try { 
        period0.withSeconds(2682);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2594
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.withSeconds(528);
      PeriodType periodType0 = PeriodType.days();
      // Undeclared exception!
//      try { 
        period1.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'seconds'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Duration duration0 = Duration.millis((-874L));
      Days days0 = Days.MIN_VALUE;
      PeriodType periodType0 = days0.getPeriodType();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.withMonths(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.withMonths((-484));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[3];
      intArray0[1] = (-5170);
      PeriodType periodType0 = new PeriodType(" e=F/2", durationFieldTypeArray0, intArray0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period(0L, 0L, periodType0, buddhistChronology0);
      // Undeclared exception!
//      try { 
        period0.withMonths((-1109));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -5170
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.months(698);
      Months months0 = Months.TWO;
      PeriodType periodType0 = months0.getPeriodType();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.withMinutes((-1837));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 452;
      // Undeclared exception!
//      try { 
        period0.withMinutes(917);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 452
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period(810L, periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        period0.withMillis(1207);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withHours(12);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 1022;
      // Undeclared exception!
//      try { 
        period0.withHours((-1388));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1022
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.minutes(8);
      Period period1 = period0.minusWeeks(8);
      Hours hours0 = period1.toStandardHours();
      period1.ZERO.withFields(hours0);
      assertEquals((-1344), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays(28);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = Period.months(9);
      PeriodType.DAY_INDEX = 14;
      // Undeclared exception!
//      try { 
        period0.withDays(3312);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.months(6);
      Period period1 = period0.ZERO.plusSeconds(6);
      PeriodType.SECOND_INDEX = 2863;
      // Undeclared exception!
//      try { 
        period1.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period((-5), (-5), (-5), (-5));
      Period period1 = period0.plusYears((-5));
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1923;
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period(56L);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.minus(weeks0);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -1298798109705600
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period((-663L));
      Period period1 = period0.plusYears(47);
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period((-663L));
      Period period1 = period0.plusYears(47);
      // Undeclared exception!
//      try { 
        period1.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period(0L, (PeriodType) null);
      PeriodType.DAY_INDEX = (-89);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.withYears(0);
      // Undeclared exception!
//      try { 
        period1.toStandardHours();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -51539607552
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period(2095, 2095, 7, 59, 7, (-2850), 2095, 2095, (PeriodType) null);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1517);
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period(2567, 2567, 899, 2567, 899, 2567, 4905, 4905, (PeriodType) null);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-8);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.minutes(879);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.plus(weeks0);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 15032385529
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Period period0 = new Period(280L, periodType0, (Chronology) strictChronology0);
      // Undeclared exception!
//      try { 
        period0.plusYears(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("Field must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-744L), (-744L), periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.plusYears(1073741824);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = (-3);
      // Undeclared exception!
//      try { 
        period0.plusYears((-3));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = new Period();
      Years years0 = Years.MAX_VALUE;
      Period period1 = period0.minus(years0);
      // Undeclared exception!
//      try { 
        period1.plusYears((-982));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483647 + -982
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((long) (-3388));
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(472);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("3fXRu`{W\"1h", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(369L, 409L, periodType0, gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-5));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 256;
      // Undeclared exception!
//      try { 
        period0.plusWeeks((-23));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Duration duration0 = new Duration(1193L);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(1433);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("csPV$e.{$[?T", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(1144);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.years(1);
      PeriodType.SECOND_INDEX = 1662;
      // Undeclared exception!
//      try { 
        period0.plusSeconds(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period((-901), 4161, (-901), (-4574), (-4574), (-4574), 6, (-643));
      // Undeclared exception!
//      try { 
        period0.plusSeconds(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 6 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period();
      YearMonth yearMonth0 = YearMonth.now();
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMonths(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("3fXRu`{W\"1h", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(369L, 409L, periodType0, gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(1542);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType.MONTH_INDEX = (-285);
      Period period0 = new Period((-650L), 100000000000000L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(2240);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(12);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes((-1131));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MINUTE_INDEX = 719527;
      // Undeclared exception!
//      try { 
        period0.plusMinutes((-50));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.minutes(1073741824);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(1073741824);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 1073741824 + 1073741824
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.seconds((-27));
      PeriodType.MILLI_INDEX = 23;
      // Undeclared exception!
//      try { 
        period0.plusMillis((-27));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.millis(1073741824);
      // Undeclared exception!
//      try { 
        period0.plusMillis(1073741824);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 1073741824 + 1073741824
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusHours(3087);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("csPV$e.{$[?T", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusHours(6873);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("3fXRu`{W\"1h", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(369L, 409L, periodType0, gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plusDays((-5));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusDays(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.plusDays(90);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 90
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(29, 192, (-1967), 1000, 6);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      // Undeclared exception!
//      try { 
        period0.plus(hours0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      Hours hours0 = Hours.THREE;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("g/`!al^Qx WUS:ghK", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(86400000L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plus(hours0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = Period.weeks((-407));
      PeriodType.WEEK_INDEX = (-407);
      // Undeclared exception!
//      try { 
        period0.plus(period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = Period.years(1);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
//      try { 
        period0.plus(years0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 1 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse("", periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("", (PeriodFormatter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
//      try { 
        Period.parse("6]%0#UWsEzyk;|a^t", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"6]%0#UWsEzyk;|a^t\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("T7/`5ogE93");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"T7/`5ogE93\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = Period.hours(23);
      PeriodType.MINUTE_INDEX = 2296;
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.years((-1811));
      Period period1 = period0.withHours((-1811));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
//      try { 
        period1.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -6519600000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("3fXRu`{W\"1h", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(369L, 409L, periodType0, gJChronology0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodType.DAY_INDEX = (-2273);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      PeriodType periodType0 = PeriodType.millis();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      Period period0 = new Period(0L, 1, periodType0, strictChronology0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period((-2147483647), (-2147483647), (-7), (-2147483647), (-2804), (-7), (-2147483647), (-2804));
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483647 + -178956970
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.minutes((-2201));
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.plus(hours0);
      // Undeclared exception!
//      try { 
        period1.negated();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483648 * -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = new Period(0L);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.minus(weeks0);
      // Undeclared exception!
//      try { 
        period1.multipliedBy((-622));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483647 * -622
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      DateTime dateTime0 = DateTime.now((Chronology) lenientChronology0);
      Hours hours0 = Hours.MAX_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("MAX_LENGTH", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusYears(12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.months(921);
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.withFields(years0);
      // Undeclared exception!
//      try { 
        period1.minusYears(921);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -921
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.minutes((-2161));
      PeriodType.WEEK_INDEX = (-459);
      // Undeclared exception!
//      try { 
        period0.minusWeeks(2161);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period(0L, (PeriodType) null);
      Period period1 = period0.plusWeeks(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period1.minusWeeks(22);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -22
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(2507);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds((-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[7];
      intArray0[6] = 1085;
      PeriodType periodType0 = new PeriodType("EET", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(480L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds(320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = new Period((-624L), 3L);
      Seconds seconds0 = Seconds.MAX_VALUE;
      Period period1 = period0.minus(seconds0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds(716);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483647 + -716
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(1674L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMonths((-525));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("millisOfDay", durationFieldTypeArray0, intArray0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(0, (-355L), periodType0, copticChronology0);
      // Undeclared exception!
//      try { 
        period0.minusMonths(59);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-1706));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-6);
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-2863));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.years(65535);
      PeriodType.MILLI_INDEX = 65535;
      // Undeclared exception!
//      try { 
        period0.minusMillis(65535);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3755L), (-2005L));
      Period period0 = mutablePeriod0.toPeriod();
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusHours(776);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 2786;
      // Undeclared exception!
//      try { 
        period0.minusHours(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
//      try { 
        period0.minusDays(1783);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(576);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusDays(2325);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.years(1);
      PeriodType.DAY_INDEX = 13;
      // Undeclared exception!
//      try { 
        period0.minusDays(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.minusDays(yearMonth0.MONTH_OF_YEAR);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period(46, 7, 7, 7);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period1 = period0.normalizedStandard(periodType0);
      Hours hours0 = Hours.FOUR;
      // Undeclared exception!
//      try { 
        period1.minus(hours0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.seconds(2819);
      PeriodType.SECOND_INDEX = 2819;
      // Undeclared exception!
//      try { 
        period0.minus(period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      Period period0 = duration0.toPeriod((Chronology) lenientChronology0);
      // Undeclared exception!
//      try { 
        period0.minus(weeks0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.weeks(355);
      PeriodType.YEAR_INDEX = 355;
      // Undeclared exception!
//      try { 
        period0.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.seconds(2819);
      PeriodType.WEEK_INDEX = 2819;
      // Undeclared exception!
//      try { 
        period0.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = Period.years(1);
      PeriodType.SECOND_INDEX = (-5);
      // Undeclared exception!
//      try { 
        period0.ZERO.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = new Period((-3470L), (-1376L));
      PeriodType.MONTH_INDEX = (-834);
      // Undeclared exception!
//      try { 
        period0.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1517);
      // Undeclared exception!
//      try { 
        period0.ZERO.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.years(1085);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-1630);
      // Undeclared exception!
//      try { 
        period0.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(ethiopicChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Chronology) islamicChronology0);
      int[] intArray0 = new int[1];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(monthDay1, monthDay0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = null;
//      try {
        period0 = new Period(partial0, partial0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must be contiguous
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
//      try {
        period0 = new Period(object0, (PeriodType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer(292272708);
      Period period0 = null;
//      try {
        period0 = new Period((Object) integer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Integer
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = null;
//      try {
        period0 = new Period(9223372036854775807L, periodType0, (Chronology) buddhistChronology0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 9223372036854775807
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = null;
//      try {
        period0 = new Period((-9223372036854775808L), (-290L), periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 153722867280912
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = null;
//      try {
        period0 = new Period(7, 1624, 7, 7, 1624, 1624, 7, 7, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'weeks'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusMillis(58);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period((-3), (-3), (-3), (-3));
      Period period1 = period0.multipliedBy((-3));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
//      try { 
        period0.plusMillis((-1));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMinutes((-50));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = Period.minutes((-2456));
      Period period1 = period0.plusHours(3263);
      int int0 = period1.getHours();
      assertEquals(3263, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
//      try { 
        period0.plusDays(19);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.months(1073741824);
      // Undeclared exception!
//      try { 
        period0.plusMonths(1073741824);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 1073741824 + 1073741824
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.seconds((-3));
      Period period1 = period0.plusYears((-3));
      Period period2 = period1.negated();
      int int0 = period2.getYears();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period((-4093), (-4093), (-4093), (-4093), (-4093), (-4093), (-4093), 2, (PeriodType) null);
      int int0 = period0.getHours();
      assertEquals((-4093), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period((Object) null, periodType0, julianChronology0);
      // Undeclared exception!
//      try { 
        period0.minusWeeks(9);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.seconds((-3));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(30585600000L, 65L, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Period period0 = new Period((ReadableInstant) null, duration0, (PeriodType) null);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.minutes(666);
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period1 = new Period(duration0, (ReadableInstant) null, periodType0);
      assertEquals(39960000L, duration0.getMillis());
      assertEquals(666L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(3599L, (Chronology) gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusYears((-1727));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(0L, 0L, periodType0, (Chronology) null);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = new Period((-5), (-5), (-5), (-5));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Period period1 = new Period(period0, lenientChronology0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      int int0 = period0.getMillis();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = new Period(yearMonth0, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -3092376453120
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = Period.months(1);
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = Period.months(921);
      Period period1 = period0.ZERO.multipliedBy((-799));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = new Period(56L);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("EET", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(480L, periodType0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("%7]|@en^|", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.seconds((-4559));
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period(0, 7, 7, 7);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.days(84);
      Period period1 = period0.minusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period(4371L, 1419L);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1274L));
      Period period0 = duration0.toPeriod((PeriodType) null);
      // Undeclared exception!
//      try { 
        period0.withFieldAdded((DurationFieldType) null, 64);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.days(3600000);
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.years(1);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      Period period1 = period0.withField(durationFieldType0, 1);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("3fXRu`{W\"1h", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(369L, 409L, periodType0, gJChronology0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("f^.ohQM\"}5=", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusHours(2253);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant((-3033L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Chronology) zonedChronology0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth0, monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.years(1);
      Period period1 = period0.minusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("QF]Azgc&n[jZo8J,3", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = new Period(56L);
      Days days0 = Days.MAX_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 65535);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = new Period((-3), (-3), (-3), (-3));
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Instant instant0 = new Instant();
      Period period0 = new Period(4, 1156, (-293), (-1), 0, 4, (-293), 1000);
      Duration duration0 = period0.toDurationFrom(instant0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = null;
//      try {
        period1 = new Period(instant0, duration0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2988748748000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = Period.days(116);
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = null;
//      try {
        period1 = new Period(duration0, (ReadableInstant) null, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 10022400000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null, 1);
      Period period0 = null;
//      try {
        period0 = new Period((-9223372036854775808L), (Chronology) julianChronology0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -15250284452
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Chronology chronology0 = instant0.getChronology();
      Period period0 = null;
//      try {
        period0 = new Period(object0, periodType0, chronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Duration duration0 = new Duration((-2725L), 1060L);
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = Period.months(921);
      Period period1 = period0.withMonths((-423));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = null;
//      try {
        period0 = new Period(partial0, partial0, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = new Period((-3470L), (-1376L));
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      Period period0 = new Period(dateTime0, instant0);
      PeriodType.MILLI_INDEX = 47;
      // Undeclared exception!
//      try { 
        period0.withMillis(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 47
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = Period.minutes(8);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-660L));
      Period period0 = new Period(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = Period.days(116);
      Period period1 = period0.minusHours(1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = Period.minutes(261);
      PeriodType.MILLI_INDEX = (-398);
      // Undeclared exception!
//      try { 
        period0.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(11);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 11
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(324, 324, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = Period.years(1);
      Period period1 = period0.withMillis(1);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("eW`o}3s+Nd6.d", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(512);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType("Czv@:-Ck~,H:C%", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1761L, 1761L, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Period period0 = Period.years(1);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = new Period((-936), (-936), (-936), (-48), (-48), (-48), (-48), 1040, (PeriodType) null);
      PeriodType.HOUR_INDEX = (-48);
      // Undeclared exception!
//      try { 
        period0.plusHours((-936));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = new Object();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = null;
//      try {
        period0 = new Period(object0, strictChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
//      try { 
        Period.parse("org.joda.time.chrono.GJChronology", periodFormatter0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusWeeks(3050);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, 0L, periodType0, iSOChronology0);
      // Undeclared exception!
//      try { 
        period0.withSeconds((-954));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(604800);
      // Undeclared exception!
//      try { 
        period1.minusMillis(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -604800 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMinutes(917);
      assertNotSame(period1, period0);
  }
}
