/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 23:50:52 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.ZERO.minusMonths(4613);
      Period period2 = period1.normalizedStandard();
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.minutes(12);
      Period period1 = period0.ZERO.minusYears(12);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.seconds(12);
      Period period1 = period0.plusWeeks(128);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 2);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      Duration duration0 = period1.toDurationFrom(mutableDateTime0);
      Period period2 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0);
      Period period3 = period2.plusMillis((-2009));
      PeriodType periodType0 = PeriodType.yearDay();
      // Undeclared exception!
//      try { 
        period3.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.minutes((-4));
      Period period1 = period0.plusMonths((-4));
      // Undeclared exception!
//      try { 
        period1.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.weeks(3625);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(2192400000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period(61, 61, 61, 61);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(223321, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.hours((-1713));
      Period period1 = period0.plusWeeks((-993));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-10112220), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period(61, 61, 61, 61);
      Days days0 = Days.THREE;
      Period period1 = period0.minus(days0);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-598), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.weeks(61);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withFieldAdded(durationFieldType0, 564);
      Hours hours0 = period1.toStandardHours();
      assertEquals(23784, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.seconds(12);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.minutes(12);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.withMinutes((-896));
      Period period2 = period1.plusMillis((-896));
      Weeks weeks0 = period2.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertNotSame(period2, period1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.seconds(61);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = new Period((-2565), (-2565), (-1), (-2565), (-1), (-1), (-1), 1);
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = new Period(duration0, (ReadableInstant) null, periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withDays(665);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.days(28265625);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(4037946, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours((-2193));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-13), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.millis((-61));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.weeks(61);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(36892800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period(1172, 1172, 923, 1172);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(71507, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.withMinutes((-896));
      Period period2 = period1.plusMillis((-896));
      Hours hours0 = period2.toStandardHours();
      assertEquals((-14), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.days(9);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(777600000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.seconds(923);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(923000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.seconds(1);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.weeks(3625);
      Days days0 = period0.toStandardDays();
      Period period1 = period0.withFields(days0);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 4384800000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.seconds(923);
      Period period1 = period0.minusHours(923);
      Days days0 = period1.toStandardDays();
      assertEquals((-38), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Period period1 = period0.minusMinutes(10125000);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.minusYears((-993));
      int int0 = period1.getYears();
      assertEquals(993, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.millis(157);
      Period period1 = period0.ZERO.minusYears(157);
      int int0 = period1.getYears();
      assertEquals((-157), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.seconds(12);
      Period period1 = period0.plusWeeks(128);
      int int0 = period1.getWeeks();
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.weeks((-1691));
      int int0 = period0.getWeeks();
      assertEquals((-1691), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.seconds(12);
      int int0 = period0.getSeconds();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.seconds(923);
      Period period1 = period0.ZERO.minus(period0);
      int int0 = period1.getSeconds();
      assertEquals((-923), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(1000L, 1053L);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = new Period(1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966);
      int int0 = period0.getMonths();
      assertEquals(1966, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(61, 61, 61, 61);
      int int0 = period0.getMinutes();
      assertEquals(61, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period((-3776), (-3776), (-3776), 1000);
      int int0 = period0.getMinutes();
      assertEquals((-3776), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.seconds(923);
      Period period1 = period0.plusMillis(1172);
      int int0 = period1.getMillis();
      assertEquals(1172, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusMillis((-896));
      int int0 = period1.getMillis();
      assertEquals((-896), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period((-741), (-923), 1968, (-1), 1023, (-923), 623158436, 14);
      int int0 = period0.getHours();
      assertEquals(1023, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.hours((-614));
      int int0 = period0.getHours();
      assertEquals((-614), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.minutes(12);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.days((-1412));
      int int0 = period0.getDays();
      assertEquals((-1412), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Days days0 = Days.FOUR;
      Minutes minutes0 = days0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period(676L, 0L, periodType0, ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.withYears(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(604800L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("5S`C;Tr:{eNOKw/F[", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        period0.withYears((-2116));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-3606);
      // Undeclared exception!
//      try { 
        period0.withYears(1198);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3606
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period((-913L), periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(1613);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType(";,2^~TB+X", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(487L, 487L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(816);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-963);
      // Undeclared exception!
//      try { 
        period0.withWeeks(1966);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -963
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.withSeconds((-4));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.seconds(85);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("|K'.}A:*'5", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withSeconds(2948);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period(0L, 100L);
      PeriodType.SECOND_INDEX = 1136;
      // Undeclared exception!
//      try { 
        period0.ZERO.withSeconds((-2110));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1136
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = new PeriodType("KW}V'pYE@ERkx", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMinutes((-896));
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
//      try { 
        period1.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'minutes'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.weeks(3625);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withMonths((-4613));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = Period.parse("", periodFormatter1);
      // Undeclared exception!
//      try { 
        period0.withMonths((-3603));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-4621));
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withMinutes(3326);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Duration duration0 = new Duration(1599L, 1599L);
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      PeriodType.MINUTE_INDEX = (-4704);
      // Undeclared exception!
//      try { 
        period0.withMinutes((-4704));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4704
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(21859200000L, (-2482L), periodType0, julianChronology0);
      // Undeclared exception!
//      try { 
        period0.withMillis(2566);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("eKW#AEEcGk Y$0#p<p", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(63L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withMillis(1073741824);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 2756;
      // Undeclared exception!
//      try { 
        period0.withMillis(28265625);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2756
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.withHours(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 34;
      // Undeclared exception!
//      try { 
        period0.withHours(34);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 34
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(2328L, (Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(86400000L, dateTimeZone0);
      Period period1 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period1.withFields(period0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'seconds'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period(61, 61, 61, 61);
      Days days0 = Days.MAX_VALUE;
      Period period1 = period0.withFields(days0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      // Undeclared exception!
//      try { 
        period1.withFieldAdded(durationFieldType0, 564);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 564
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.weeks((-359));
      PeriodType.DAY_INDEX = 2458;
      // Undeclared exception!
//      try { 
        period0.withDays((-359));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2458
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.ZERO.minusYears(157);
      // Undeclared exception!
//      try { 
        period1.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = new Period(86400000L, periodType0);
      PeriodType.MINUTE_INDEX = 1472;
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.minutes(12);
      Period period1 = period0.ZERO.minusYears(12);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType.HOUR_INDEX = 2323;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(1272L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.minutes(12);
      Period period1 = period0.ZERO.minusYears(12);
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.seconds(12);
      PeriodType.MONTH_INDEX = 12;
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.minutes(12);
      Period period1 = period0.minusHours(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period1.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -128849018868
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.minutes(12);
      PeriodType.MINUTE_INDEX = 500;
      // Undeclared exception!
//      try { 
        period0.ZERO.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = new Period((-3050L), (-3050L));
      Period period1 = period0.minusWeeks(17887500);
      // Undeclared exception!
//      try { 
        period1.toStandardHours();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -3005100000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(0L, 0L, ethiopicChronology0);
      Period period1 = period0.plusYears(1);
      Period period2 = period1.normalizedStandard();
      // Undeclared exception!
//      try { 
        period2.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.toStandardDuration();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Days days0 = Days.SIX;
      Period period0 = days0.toPeriod();
      PeriodType.DAY_INDEX = 1391;
      // Undeclared exception!
//      try { 
        period0.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      PeriodType.DAY_INDEX = 2704;
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Days days0 = Days.FIVE;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = new Period(923, 923, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusYears(1172);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, (ReadableDuration) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusYears(5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-292269337);
      // Undeclared exception!
//      try { 
        period0.plusYears(23118750);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period();
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.withFields(years0);
      // Undeclared exception!
//      try { 
        period1.plusYears((-2091));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2091
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(157);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(604800L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("5S`C;Tr:{eNOKw/F[", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        period0.plusWeeks(1956);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.days(126);
      PeriodType.WEEK_INDEX = 126;
      // Undeclared exception!
//      try { 
        period0.plusWeeks(126);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.days((-1412));
      Period period1 = period0.plusWeeks((-1412));
      // Undeclared exception!
//      try { 
        period1.plusWeeks(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -1412 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(1272L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(7);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType.SECOND_INDEX = (-2525);
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-2525));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.plusMonths((-1808));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.seconds(85);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("|K'.}A:*'5", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMonths(85);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-1923);
      // Undeclared exception!
//      try { 
        period0.plusMonths(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-157), dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes((-1595));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(1910L, dateTimeZone0);
      Duration duration0 = Duration.millis(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes((-3));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 661;
      // Undeclared exception!
//      try { 
        period0.plusMinutes(1966);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      Period period1 = period0.plusMinutes(Integer.MIN_VALUE);
      Period period2 = period1.plusMillis(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period2.plusMinutes((-1093));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -1093
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(0L, 0L, periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.plusMillis(3625);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = new Interval(1000000L, 1000000L, dateTimeZone0);
      Period period0 = interval0.toPeriod();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("N(-izl8[C4", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMillis(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = new Period(12L, periodType0, (Chronology) strictChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMillis(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 12 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((-1L), (Chronology) iSOChronology0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.plusHours(8);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(604800L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("5S`C;Tr:{eNOKw/F[", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        period0.plusHours(1956);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-614);
      // Undeclared exception!
//      try { 
        period0.ZERO.plusHours((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plusDays((-2216));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.months(969);
      PeriodType.DAY_INDEX = 969;
      // Undeclared exception!
//      try { 
        period0.plusDays(969);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = Period.days((-851));
      // Undeclared exception!
//      try { 
        period0.plus(period1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.seconds(85);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType("|K'.}A:*'5", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plus(period0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Days days0 = Days.SIX;
      Period period0 = days0.toPeriod();
      PeriodType.DAY_INDEX = 1391;
      // Undeclared exception!
//      try { 
        period0.plus(days0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(1120L, (-3L), periodType0);
      // Undeclared exception!
//      try { 
        period0.plus(seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -1 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse("*yeXscjOQO", periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
//      try { 
        Period.parse("", periodFormatter0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null, (PeriodFormatter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("org.joda.time.field.MillisDurationField");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"org.joda.time.field.MillisDurati...\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("``zN\"'", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.minutes(12);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType.MONTH_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.weeks((-2134));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -1290643200000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 365;
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = new Period(62, 62, 62, (-242), Integer.MIN_VALUE, 2295, (-242), 62);
      // Undeclared exception!
//      try { 
        period0.negated();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483648 * -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("qWMo", durationFieldTypeArray0, (int[]) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period((long) (byte)89, periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.minusYears(1300);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.months(4890);
      PeriodType.YEAR_INDEX = 4890;
      // Undeclared exception!
//      try { 
        period0.minusYears(1285);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.minutes(12);
      Period period1 = period0.ZERO.minusYears(12);
      // Undeclared exception!
//      try { 
        period1.minusYears(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -12 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period((-3776), (-3776), (-3776), 1000);
      Duration duration0 = period0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3776));
      DateTime dateTime0 = new DateTime((long) 1000, dateTimeZone0);
      Months months0 = Months.months(1000);
      PeriodType periodType0 = months0.getPeriodType();
      Period period1 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period1.minusWeeks((-3321));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusWeeks(2066);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.weeks(8);
      PeriodType.WEEK_INDEX = 3061;
      // Undeclared exception!
//      try { 
        period0.minusWeeks(999);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.plus(weeks0);
      // Undeclared exception!
//      try { 
        period1.minusWeeks((-2928));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 2928
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusSeconds((-1679));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 366;
      // Undeclared exception!
//      try { 
        period0.minusSeconds(1824);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = Period.ZERO;
      Seconds seconds0 = Seconds.MIN_VALUE;
      Period period1 = period0.minus(seconds0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds(352831696);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -352831696
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Interval interval0 = new Interval((Object) null, ethiopicChronology0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMonths((-1172));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 12;
      // Undeclared exception!
//      try { 
        period0.minusMonths(120);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period();
      Months months0 = Months.MIN_VALUE;
      Period period1 = period0.minus(months0);
      // Undeclared exception!
//      try { 
        period1.minusMonths(69);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -69
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(1910L, dateTimeZone0);
      Duration duration0 = Duration.millis(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = Period.days(10125000);
      PeriodType.MINUTE_INDEX = 10125000;
      // Undeclared exception!
//      try { 
        period0.minusMinutes(10125000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((long) 9, (Chronology) iSOChronology0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(9);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      DateTime dateTime0 = interval0.getEnd();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("{{-", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      Period period1 = period0.plusMillis(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period1.minusMillis(1);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((long) (-1));
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusDays((-1));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("6gr.)}w=5NTy", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(579L, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.minusDays((-677));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 1707;
      // Undeclared exception!
//      try { 
        period0.minusDays(2002);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Period period0 = days0.toPeriod();
      Locale locale0 = new Locale("", "g:-, ~");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      Period period1 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period1.minus(period0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.hours(1350);
      PeriodType.YEAR_INDEX = 83;
      Years years0 = Years.years(83);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-896));
      Period period2 = period1.minusMillis((-886));
      // Undeclared exception!
//      try { 
        period0.minus(period2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 1966;
      // Undeclared exception!
//      try { 
        period0.ZERO.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-574);
      // Undeclared exception!
//      try { 
        period0.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period(77, 77, 167, 1000, 1000, 167, 77, 77);
      PeriodType.SECOND_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.ZERO.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[7];
      intArray0[1] = (-2481);
      PeriodType periodType0 = new PeriodType("Weeks", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 365;
      // Undeclared exception!
//      try { 
        period0.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = new Period((-1179L), 1919L, (PeriodType) null);
      PeriodType.HOUR_INDEX = (-1);
      // Undeclared exception!
//      try { 
        period0.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(10000000000000L, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
//      try { 
        period0.getDays();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.minutes(10);
      PeriodType.DAY_INDEX = (-1181);
      // Undeclared exception!
//      try { 
        period0.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) ethiopicChronology0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime1, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
//         //
//         verifyException("org.joda.time.chrono.LimitChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[11];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(lenientChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.plusMonths(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(dateTime1, mutableDateTime0, periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withYearOfEra(10000);
      Minutes minutes0 = Minutes.minutes(1462);
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = null;
//      try {
        period0 = new Period(dateTime1, dateTime0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -4200229440
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.weeks(3625);
      PeriodType periodType0 = PeriodType.days();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period1 = null;
//      try {
        period1 = new Period(period0, periodType0, iSOChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'weeks'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      Years years0 = Years.MAX_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = null;
//      try {
        period0 = new Period(object0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = null;
//      try {
        period0 = new Period(object0, buddhistChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Period period0 = null;
//      try {
        period0 = new Period(timeZone0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: sun.util.calendar.ZoneInfo
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("S;lThZlA: Q>1", (DurationFieldType[]) null, intArray0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      Period period0 = null;
//      try {
        period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Period period0 = null;
//      try {
        period0 = new Period(9223372036854775807L, (Chronology) buddhistChronology0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 15250284452
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[2] = durationFieldType1;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("#.-2omVADdC8ui;4", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(1810L, 918, periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("#.-2omVADdC8ui;4", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(1810L, 918, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.chrono.BaseChronology", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = null;
//      try {
        period0 = new Period(9223372036854775807L, (-324L), periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -324 - 9223372036854775807
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = null;
//      try {
        period0 = new Period(157, (-896), (-1733), 2157, 0, 4613, 4613, (-896), periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.millis(157);
      Period period1 = period0.multipliedBy(2707);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.days(352831696);
      // Undeclared exception!
//      try { 
        period0.multipliedBy(3002);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: 352831696 * 3002
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusHours(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period1.plusHours(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.plusDays(4);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 4
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.millis(1968);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Period period0 = days0.toPeriod();
      int int0 = period0.ZERO.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.days(10125000);
      int int0 = period0.getDays();
      assertEquals(10125000, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.days(126);
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = new Period(623191204, (-3189), (-3189), (-3189), 6, 52, (-3189), 6);
      int int0 = period0.getMonths();
      assertEquals((-3189), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(604800000L, (DateTimeZone) null);
      Period period0 = new Period(localTime0, localTime0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.seconds(1);
      Period period1 = period0.plusMonths(1);
      PeriodType periodType0 = PeriodType.weeks();
      // Undeclared exception!
//      try { 
        period1.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period(1172, 1172, 923, 1172);
      Period period1 = period0.withYears(923);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = Period.seconds((-632));
      Period period1 = period0.plusMonths(46);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(1272L, periodType0, (Chronology) islamicChronology0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-4621));
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      Period period1 = period0.ZERO.multipliedBy(3326);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.months(1000);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period(1000L, 1053L);
      Period period1 = period0.ZERO.plusMinutes(0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(0L, 0L, ethiopicChronology0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period(3, 3, 3, (-1427), 3, 85, 85, (-1427));
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.plusYears(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = new Period((-287L), (-287L));
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.millis((-61));
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = Period.weeks(3625);
      // Undeclared exception!
//      try { 
        period0.ZERO.withFieldAdded((DurationFieldType) null, 8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, 3653);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.years((-406));
      Weeks weeks0 = Weeks.MAX_VALUE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      Period period1 = period0.withField(durationFieldType0, (-406));
      // Undeclared exception!
//      try { 
        period1.minus(weeks0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -406 + -2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(1910L, dateTimeZone0);
      Duration duration0 = Duration.millis(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, duration0, periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 8, (DateTimeZone) null);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localTime0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(604800L, (DateTimeZone) null);
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, dateTimeZone0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(86399994L, dateTimeZone0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusSeconds(352831696);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.weeks((-2134));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1290643200), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = Period.hours(1350);
      Period period1 = period0.minusDays(3191);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = new Period(145L);
      Period period1 = period0.withHours((-2147483647));
      // Undeclared exception!
//      try { 
        period1.minusHours(352831696);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483647 + -352831696
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("eKW#AEEcGk Y$0#p<p", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(63L, periodType0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(4294967295L);
      Period period0 = Period.ZERO;
      Minutes minutes0 = period0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period1 = null;
//      try {
        period1 = new Period((ReadableInstant) null, duration0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 4294967295
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Interval interval0 = new Interval(604800L, 604800L, (DateTimeZone) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("`LJuhSnbd", durationFieldTypeArray0, intArray0);
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.withMonths((-1986));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(604800L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("5S`C;Tr:{eNOKw/F[", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType("6M}SkXF(~m", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period((Object) null, periodType0, islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      Hours hours0 = Hours.SEVEN;
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = new Period(dateTime0, duration0);
      PeriodType.MINUTE_INDEX = 8;
      // Undeclared exception!
//      try { 
        period0.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      Period period1 = period0.withMonths((-3603));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(3487L, dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, localDateTime0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period(2372L, 9223372036854775807L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 292278994 for year must be in the range [-292275054,292278993]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1966, dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(15);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Days days0 = Days.ONE;
      Duration duration0 = days0.toStandardDuration();
      DateTime dateTime0 = new DateTime();
      Period period0 = new Period(duration0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1591L));
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
//      try { 
        period0.minusHours(380);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period(2, 5, (-2428), 1726, (-2428), 2488, 2282, Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2282 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(904L, 60000L, iSOChronology0);
      PeriodType.HOUR_INDEX = (-1767);
      // Undeclared exception!
//      try { 
        period0.minusHours(4336);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      Period period1 = period0.withMillis(Integer.MIN_VALUE);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2629746000L, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardDays();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1591L));
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusHours(380);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1966, dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = new Period(1, 2318, (-3285), 0, 0, 2, 6, 1, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.minusYears(11);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Days days0 = Days.THREE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period(days0, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
//      try { 
        Period.parse("Hours", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Hours\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.negated();
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(2328L, (Chronology) islamicChronology0);
      Period period1 = period0.withSeconds(744);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = Period.hours(1350);
      Period period1 = period0.ZERO.withWeeks(1350);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2022L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("Field must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
//      try { 
        period0.withMinutes((-604800));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
//      try { 
        period0.withDays((-318));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }
}
