/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 22:35:19 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period(1008, 1008, 1008, 2118);
      Period period1 = period0.withYears(733);
      // Undeclared exception!
//      try { 
        period1.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.weeks(3453);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(2088374400L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.hours((-166));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-597600), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.minutes((-20503125));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1230187500), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period(196L, (-151L), (PeriodType) null);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.weeks((-4322));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-43565760), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period(60000L, 0L);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusSeconds((-1));
      Hours hours0 = period1.toStandardHours();
      assertEquals(0, hours0.getHours());
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = new Period((-1292), (-1292), (-1292), (-1292));
      Days days0 = period0.toStandardDays();
      assertEquals((-54), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Days days0 = Days.TWO;
      Period period0 = days0.toPeriod();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.months((-2785));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-2785));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      LocalDate localDate0 = new LocalDate((long) 9, (Chronology) null);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(localDate0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = new Period((Object) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period((long) 50);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Period period0 = new Period((ReadableDuration) null, dateTime0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(0L, (Chronology) islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.days((-1112));
      Interval interval0 = new Interval((-1112), 1038L);
      Months months0 = Months.monthsIn(interval0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      Period period1 = period0.withField(durationFieldType0, (-2657));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = new Period(1110, (-1952), 1110, (-1952));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(6, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.days((-1096));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-94694400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Days days0 = Days.TWO;
      Period period0 = days0.toPeriod();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(2880, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period((-1139), (-1139), (-557), 16);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-69488), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.days(7);
      Hours hours0 = period0.toStandardHours();
      assertEquals(168, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.weeks((-12740625));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-2140425000), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.days(986);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(85190400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = new Period((-1344), (-1344), (-40), (-1760));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-4919081760L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Days days0 = Days.TWO;
      Period period0 = days0.toPeriod();
      Days days1 = period0.toStandardDays();
      assertEquals(2, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.weeks((-651));
      Days days0 = period0.toStandardDays();
      assertEquals((-4557), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusYears(25734375);
      int int0 = period1.getYears();
      assertEquals(25734375, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.hours(1);
      Period period1 = period0.minusYears(5);
      int int0 = period1.getYears();
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 1110);
      Period period1 = period0.withWeeks(1110);
      int int0 = period1.getWeeks();
      assertEquals(1110, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period(5, 1768, 93, 0);
      int int0 = period0.getSeconds();
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period((-63), (-63), (-63), (-63));
      int int0 = period0.getSeconds();
      assertEquals((-63), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.months(2);
      int int0 = period0.getMonths();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes(Integer.MIN_VALUE);
      int int0 = period0.getMinutes();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Instant instant0 = new Instant();
      Period period0 = new Period(instant0, instant0, (PeriodType) null);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 1110);
      int int0 = period0.getMillis();
      assertEquals(1110, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.months((-2785));
      Period period1 = period0.withHours((-2785));
      int int0 = period1.getHours();
      assertEquals((-2785), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.days(7);
      int int0 = period0.getDays();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.days((-1112));
      int int0 = period0.getDays();
      assertEquals((-1112), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.withYears(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.days(52);
      PeriodType.YEAR_INDEX = 52;
      // Undeclared exception!
//      try { 
        period0.withYears(1432);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 52
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(29);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.withWeeks((-554));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(1634);
      Hours hours0 = seconds0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[6];
      intArray0[2] = 1634;
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must not have overlapping fields", durationFieldTypeArray0, intArray0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
//      try { 
        period0.withWeeks(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1634
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Duration duration0 = minutes0.toStandardDuration();
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0, periodType0);
      // Undeclared exception!
//      try { 
        period0.withSeconds(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 275;
      // Undeclared exception!
//      try { 
        period0.withSeconds((-620));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 275
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.withPeriodType(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 370);
      Period period1 = period0.plusWeeks((-3086));
      PeriodType periodType0 = PeriodType.dayTime();
      // Undeclared exception!
//      try { 
        period1.withPeriodType(periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'weeks'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.withMonths(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("I96VB", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.withMonths(12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[6];
      intArray0[1] = 1070;
      PeriodType periodType0 = new PeriodType("W", durationFieldTypeArray0, intArray0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(strictChronology0);
      Period period0 = new Period(1260L, periodType0, (Chronology) lenientChronology0);
      // Undeclared exception!
//      try { 
        period0.withMonths(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1070
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.withMinutes(3006);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-332);
      // Undeclared exception!
//      try { 
        period0.withMinutes(1781);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -332
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.withMillis(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.seconds((-2039));
      PeriodType.MILLI_INDEX = 4442;
      // Undeclared exception!
//      try { 
        period0.withMillis(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4442
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.withHours(0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 4735;
      Period period0 = Period.months(4735);
      PeriodType.HOUR_INDEX = int0;
      // Undeclared exception!
//      try { 
        period0.withHours(int0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4735
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.years((-593));
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = new Period((ReadableInstant) null, duration0, periodType0);
      // Undeclared exception!
//      try { 
        period1.withFields(period0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(428L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withDays((-941));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period((-699L), 2935L, periodType0);
      PeriodType.DAY_INDEX = 2972;
      // Undeclared exception!
//      try { 
        period0.ZERO.withDays(2972);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2972
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.months((-1));
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Weeks as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.hours((-1022));
      PeriodType.SECOND_INDEX = (-1022);
      // Undeclared exception!
//      try { 
        period0.toStandardWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 856;
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withDays(Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 185542587100800
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.months((-1));
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Minutes as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.days(986);
      PeriodType.HOUR_INDEX = 986;
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.days((-1073741824));
      // Undeclared exception!
//      try { 
        period0.toStandardMinutes();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -1546188226560
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      PeriodType.MILLI_INDEX = (-199);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -51539607552
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.hours((-1022));
      Period period1 = period0.withYears((-1022));
      // Undeclared exception!
//      try { 
        period1.toStandardDuration();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Duration as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.seconds((-3820));
      Months months0 = Months.TWELVE;
      Period period1 = period0.minus(months0);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Days as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.ZERO;
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.minus(weeks0);
      // Undeclared exception!
//      try { 
        period1.toStandardDays();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -15032385529
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusYears((-554));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Duration duration0 = Duration.standardDays(10080L);
      Period period0 = duration0.toPeriod();
      PeriodType.YEAR_INDEX = 15271875;
      // Undeclared exception!
//      try { 
        period0.plusYears(115);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = Period.years(Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.plusYears(Integer.MIN_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusWeeks(1177);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 444;
      // Undeclared exception!
//      try { 
        period0.plusWeeks(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusSeconds(177);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-554));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = Period.minutes(Integer.MIN_VALUE);
      PeriodType.SECOND_INDEX = Integer.MIN_VALUE;
      // Undeclared exception!
//      try { 
        period0.plusSeconds((-117));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(365L, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusMonths(2075);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.years((-770));
      PeriodType.MONTH_INDEX = 2048;
      // Undeclared exception!
//      try { 
        period0.plusMonths((-290));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      Period period0 = new Period((long) 0, periodType0, (Chronology) strictChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(572);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-691L));
      Duration duration1 = duration0.multipliedBy(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = duration1.toPeriod(periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(824);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 4687;
      // Undeclared exception!
//      try { 
        period0.plusMinutes(1667);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period(365, 365, 365, 3336, 908, Integer.MAX_VALUE, (-23), Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period0.plusMinutes(365);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 365
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.hours();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusMillis((-1344));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-2814);
      // Undeclared exception!
//      try { 
        period0.plusMillis(1440);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = new Period((-779), 52, 52, Integer.MIN_VALUE);
      // Undeclared exception!
//      try { 
        period0.plusMillis((-1899));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -1899
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusHours(6);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plusHours((-1044));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.days(1593);
      PeriodType.HOUR_INDEX = (-806);
      // Undeclared exception!
//      try { 
        period0.plusHours(1593);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Duration duration0 = Duration.standardHours(116L);
      Minutes minutes0 = duration0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null, 4);
      Period period0 = new Period(116L, 116L, periodType0, gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.plusDays(4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("I96VB", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.plusDays(12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 370);
      PeriodType.DAY_INDEX = 199;
      // Undeclared exception!
//      try { 
        period0.plusDays((-258));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      PeriodType periodType0 = PeriodType.minutes();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period((-1537L), (-1941L), periodType0, gJChronology0);
      // Undeclared exception!
//      try { 
        period0.plus(days0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Duration duration0 = new Duration(0L, 1L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((long) (-584), (Chronology) gregorianChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[4];
      durationFieldTypeArray0[7] = durationFieldType0;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.plus(days0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.days(801);
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
//      try { 
        period0.plus(days0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 801 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
//      try { 
        Period.parse("minuteOfDay", periodFormatter0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Parsing not supported
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("(fOd<m.bxpWmlv*j;H", (PeriodFormatter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.parse("org.joda.time.field.DelegatedDurationField");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"org.joda.time.field.DelegatedDur...\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = (-6);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard((PeriodType) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = Period.weeks((-3931));
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
//      try { 
        period0.normalizedStandard(periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2377468800
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-579);
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.withFields(days0);
      // Undeclared exception!
//      try { 
        period1.negated();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: -2147483648 * -1
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period((-64L), (-748L));
      Period period1 = period0.multipliedBy((-3086));
      // Undeclared exception!
//      try { 
        period1.multipliedBy((-2508));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Multiplication overflows an int: 2110824 * -2508
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.days((-476));
      PeriodType.YEAR_INDEX = (-474);
      // Undeclared exception!
//      try { 
        period0.minusYears((-476));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period((-64L), (-748L));
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusWeeks((-684));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType.WEEK_INDEX = (-2839);
      // Undeclared exception!
//      try { 
        period0.minusWeeks((-2661));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period((-64L), (-748L));
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds((-5));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("I96VB", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds(12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType(">=B|", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusSeconds(3270);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = Period.weeks((-1943));
      PeriodType.MONTH_INDEX = 86399999;
      // Undeclared exception!
//      try { 
        period0.minusMonths(327);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.hours(5);
      Months months0 = Months.MIN_VALUE;
      Period period1 = period0.plus(months0);
      // Undeclared exception!
//      try { 
        period1.minusMonths(1023);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -1023
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.minusMinutes(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 9;
      // Undeclared exception!
//      try { 
        period0.minusMinutes((-644));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.seconds(87);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Period period1 = period0.withFields(minutes0);
      // Undeclared exception!
//      try { 
        period1.minusMinutes(87);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -87
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(1244);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis((-554));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period(365, 365, 365, 3336, 908, Integer.MAX_VALUE, (-23), Integer.MAX_VALUE);
      // Undeclared exception!
//      try { 
        period0.minusMillis((-23));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 2147483647 + 23
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.minusHours((-124));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusHours((-1044));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = Period.hours(81);
      PeriodType.HOUR_INDEX = 644;
      // Undeclared exception!
//      try { 
        period0.minusHours((-999));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.minutes((-1202));
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusDays((-1202));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusDays(4058);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType.DAY_INDEX = (-940);
      Period period0 = new Period(86399999L, 86399999L, periodType0, (Chronology) null);
      // Undeclared exception!
//      try { 
        period0.minusDays(6);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
//      try { 
        period0.minusDays(8);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483648 + -8
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((long) (-1292), periodType0);
      Period period1 = Period.hours(2991);
      // Undeclared exception!
//      try { 
        period0.minus(period1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.days((-1112));
      PeriodType.DAY_INDEX = 3046;
      // Undeclared exception!
//      try { 
        period0.minus(period0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-7753);
      // Undeclared exception!
//      try { 
        period0.getYears();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.seconds(283);
      PeriodType.WEEK_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.ZERO.getWeeks();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = Period.hours(Integer.MAX_VALUE);
      PeriodType.SECOND_INDEX = Integer.MAX_VALUE;
      // Undeclared exception!
//      try { 
        period0.getSeconds();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.years(0);
      PeriodType.MONTH_INDEX = 996;
      // Undeclared exception!
//      try { 
        period0.getMonths();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = Period.hours(2527);
      PeriodType.MINUTE_INDEX = 2527;
      // Undeclared exception!
//      try { 
        period0.ZERO.getMinutes();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.millis(1000);
      PeriodType.MILLI_INDEX = 1000;
      // Undeclared exception!
//      try { 
        period0.ZERO.getMillis();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period(859, (-612), 859, 497);
      PeriodType.HOUR_INDEX = 15;
      // Undeclared exception!
//      try { 
        period0.getHours();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 2000;
      // Undeclared exception!
//      try { 
        period0.getDays();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(gJChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      PeriodType periodType0 = weeks0.getPeriodType();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      int[] intArray0 = new int[18];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      Period period1 = null;
//      try {
        period1 = new Period(yearMonth1, yearMonth0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Value 0 for monthOfYear must be in the range [1,12]
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      Weeks weeks0 = Weeks.ZERO;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      Period period0 = null;
//      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      PeriodType periodType0 = weeks0.getPeriodType();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      Period period1 = null;
//      try {
        period1 = new Period(yearMonth1, yearMonth0, periodType0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = new Period();
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.plusMonths(1371);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = null;
//      try {
        period1 = new Period(localDate0, localDate1, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 3605212800
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(partial0, partial0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.Partial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      YearMonth yearMonth0 = new YearMonth((long) (byte)108);
      Period period0 = null;
//      try {
        period0 = new Period(yearMonth0, monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(116, 116, 3108);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(yearMonth1, yearMonth0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.joda.time.base.BasePartial", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, gregorianChronology0);
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = Duration.standardDays((-2588L));
      Duration duration2 = duration0.withDurationAdded((ReadableDuration) duration1, (-588));
      Period period1 = null;
//      try {
        period1 = new Period((ReadableInstant) null, duration2, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2191311360
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardDays(0);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.minusYears((-1));
      Duration duration1 = period1.toDurationFrom(dateTime0);
      PeriodType periodType0 = PeriodType.millis();
      Period period2 = null;
//      try {
        period2 = new Period(duration1, dateTime0, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 31536000000
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.months(0);
      Days days0 = period0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period1 = null;
//      try {
        period1 = new Period(monthDay0, periodType0, buddhistChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: org.joda.time.MonthDay
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = null;
//      try {
        period0 = new Period(object0, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No period converter found for type: java.lang.Object
//         //
//         verifyException("org.joda.time.convert.ConverterManager", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(64);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Period period0 = null;
//      try {
        period0 = new Period("", gregorianChronology0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period("Africa/Addis_Ababa");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"Africa/Addis_Ababa\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("s", durationFieldTypeArray0, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(888L, periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // eras field is unsupported
//         //
//         verifyException("org.joda.time.field.UnsupportedDurationField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      Period period0 = null;
//      try {
        period0 = new Period(0, 0, periodType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
//      try {
        period0 = new Period(9223372036854775807L, (-1851L), periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -1851 - 9223372036854775807
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = null;
//      try {
        period0 = new Period(9223372036854775807L);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2562047788015
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
//      try {
        period0 = new Period(317, 5, 5, (-640), 1113, 5, 4197, 317, periodType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Period does not support field 'years'
//         //
//         verifyException("org.joda.time.base.BasePeriod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Instant instant0 = new Instant();
      Period period0 = new Period(instant0, instant0, (PeriodType) null);
      Period period1 = period0.plusMonths((-1));
      PeriodType periodType0 = PeriodType.standard();
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Days days0 = Days.TWO;
      Period period0 = days0.toPeriod();
      Period period1 = period0.ZERO.withYears(7);
      Seconds seconds0 = Seconds.ZERO;
      PeriodType periodType0 = seconds0.getPeriodType();
      // Undeclared exception!
//      try { 
        period1.normalizedStandard(periodType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.months(48);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 370);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 370);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.seconds(87);
      // Undeclared exception!
//      try { 
        period0.plusSeconds(Integer.MAX_VALUE);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: 87 + 2147483647
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes(1667);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours((-53));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.weeks(3453);
      Period period1 = period0.plusDays(3453);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.plusYears(1008);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period(859, (-612), 859, 497);
      int int0 = period0.getHours();
      assertEquals(859, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-474L));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod((Chronology) ethiopicChronology0);
      int int0 = period0.getWeeks();
      assertEquals((-67), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = new Period((-64L), (-748L));
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = new Period((Object) null, periodType0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = new Period(1008, 1008, 1008, 2118);
      int int0 = period0.getMinutes();
      assertEquals(1008, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(168L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
//      try { 
        period0.withDays(2000);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period(196L, (-151L), (PeriodType) null);
      int int0 = period0.getMillis();
      assertEquals((-347), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.months(1);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusMonths((-622));
      Period period2 = period1.normalizedStandard();
      int int0 = period2.getMonths();
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.years((-1));
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.years((-1));
      // Undeclared exception!
//      try { 
        period0.toStandardSeconds();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Seconds as this period contains years and years vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.months(48);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Cannot convert to Hours as this period contains months and months vary in length
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.days((-1096));
      Period period1 = period0.ZERO.multipliedBy(746);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.days((-1095));
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = Hours.MAX_VALUE;
      Period period1 = period0.minus(hours0);
      // Undeclared exception!
//      try { 
        period1.plusHours((-53));
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -2147483647 + -53
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.weeks(8);
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.minusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 370);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = new Period(0, 0, 1110, 1110);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Interval interval0 = new Interval(0, 0, copticChronology0);
      Duration duration0 = interval0.toDuration();
      Period period0 = duration0.toPeriod((Chronology) copticChronology0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Interval interval0 = new Interval(0, 0, copticChronology0);
      Duration duration0 = interval0.toDuration();
      Period period0 = duration0.toPeriod((Chronology) copticChronology0);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period(1000, 1000, 1000, 3);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 1000);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Days days0 = Days.TWO;
      Period period0 = days0.toPeriod();
      Period period1 = period0.ZERO.withYears(7);
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.standardSeconds(7);
      Duration duration1 = duration0.dividedBy(7);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration1, 3);
      Instant instant2 = instant1.minus((ReadableDuration) duration0);
      period1.toDurationTo(instant2);
      period1.plusMillis(7);
      // Undeclared exception!
//      try { 
        period0.withFieldAdded((DurationFieldType) null, (-2039));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.minutes(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
//      try { 
        period0.withField((DurationFieldType) null, (-1563));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Field must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(partial0, partial0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not have overlapping fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2629799999L);
      MonthDay monthDay0 = new MonthDay(3332L);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(yearMonth0, monthDay0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      // Undeclared exception!
//      try { 
        Period.fieldDifference(monthDay0, localDateTime0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must have the same set of fields
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
//      try { 
        Period.fieldDifference(monthDay0, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ReadablePartial objects must not be null
//         //
//         verifyException("org.joda.time.Period", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DateTime dateTime0 = new DateTime(100000000000000000L);
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMonths(45);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.withYears((-302));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = new Period(196L, (-151L), (PeriodType) null);
      Period period1 = period0.minusWeeks((-347));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = Period.seconds(87);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(87, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Months months0 = Months.NINE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
      Interval interval0 = new Interval(months0, dateTime0);
      Interval interval1 = interval0.withStart(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType("[Ce>S", durationFieldTypeArray0, (int[]) null);
      Period period0 = interval1.toPeriod(periodType0);
      // Undeclared exception!
//      try { 
        period0.withHours(1480);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardDays(0);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(duration0, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      Period period0 = duration0.toPeriod((Chronology) gregorianChronology0);
      // Undeclared exception!
//      try { 
        period0.minus(seconds0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // The calculation caused an overflow: -8 + -2147483648
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(365L, periodType0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      Period period0 = new Period(dateTime0, (ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period(196L, (-151L), (PeriodType) null);
      Period period1 = period0.withMonths(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      PeriodType.MILLI_INDEX = (-199);
      // Undeclared exception!
//      try { 
        period0.ZERO.toStandardDuration();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Period period0 = Period.minutes((-20503125));
      Weeks weeks0 = period0.toStandardWeeks();
      Period period1 = period0.withFields(weeks0);
      // Undeclared exception!
//      try { 
        period1.toStandardSeconds();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2460350700
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Period period0 = Period.seconds(87);
      Period period1 = period0.minusMinutes(87);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("~,[j|(v7&Br#", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
//      try { 
        period0.toStandardHours();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Period period0 = Period.hours(81);
      Period period1 = period0.minusHours((-999));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Period period0 = new Period((-3), (-363), Integer.MIN_VALUE, (-3), Integer.MIN_VALUE, 1000, 9, (-3));
      // Undeclared exception!
//      try { 
        period0.normalizedStandard();
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: -2160266289
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period(0L, 0L, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.ZERO.withMillis(2640);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Period period0 = new Period((-779), 52, 52, Integer.MIN_VALUE);
      Period period1 = period0.minusMonths((-2147));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Period period0 = Period.days((-1637));
      Period period1 = period0.negated();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, period1);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      PeriodType periodType0 = hours0.getPeriodType();
      Period period2 = null;
//      try {
        period2 = new Period(9223372036854775807L, periodType0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // Value cannot fit in an int: 2562047788015
//         //
//         verifyException("org.joda.time.field.FieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(0, 1000, 1000, 1000, (-1635), 0, 336, 1, periodType0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
//      try { 
        period0.minusYears(1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Field is not supported
//         //
//         verifyException("org.joda.time.PeriodType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = new Period(1110, (-1952), 1110, (-1952));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Period period1 = new Period(period0, buddhistChronology0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(116, 116, 3108);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = new Period(yearMonth0, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
//      try { 
        Period.parse("/t^$(`", periodFormatter0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid format: \"/t^$(`\"
//         //
//         verifyException("org.joda.time.format.PeriodFormatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("<Z}CN-ZDJ/ht", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
//      try { 
        period1.minusYears((-1650));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds((-620));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("|8MEC8\"", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(3L, 3L, periodType0);
      // Undeclared exception!
//      try { 
        period0.minusMillis(2933);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Period period0 = Period.seconds(283);
      Period period1 = period0.withMinutes((-3863));
      assertNotSame(period1, period0);
  }
}
