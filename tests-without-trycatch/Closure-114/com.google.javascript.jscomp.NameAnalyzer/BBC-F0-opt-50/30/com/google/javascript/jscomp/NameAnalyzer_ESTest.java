/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:14:38 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newString(147, "</body></html>", 147, 147);
      Node node1 = new Node(15, node0, node0, node0, node0);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, true);
      Node node0 = new Node((-709), (-709), 0);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("4NYE9Da{hJv:fO{7`s");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = compiler0.parseTestCode("X+&97bt~-(UTIclY<");
      Node node2 = new Node(38, node0, node0, node0, 43, (-657));
      Node node3 = new Node((-796), node2, node1, 52, 16);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // -796
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("window");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isComma());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Referenced Classes: ");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = Node.newString((-209), "kr>:H9\"?VmV){", 3444, 30);
      Node node2 = new Node(114, node0, node1, 32, 1094);
      nameAnalyzer0.process(node1, node2);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("o.XlobR^");
      Node node1 = new Node(2, 40, (-1632687580));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      StatementFusion statementFusion0 = new StatementFusion(false);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(113, nodeArray0);
      Node node3 = statementFusion0.tryFuseStatementsAggressively(node2);
      nameAnalyzer0.process(node3, node3);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NameAnalyzer$ClassDefiningFunctionNode");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(111, node0, node0, 538, 31);
      nameAnalyzer0.process(node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NameAnalyzer$ClassDefiningFunctionNode");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(108, node0, node0, 538, 31);
      nameAnalyzer0.process(node0, node1);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-243787749), "xSrYqn", (-243787749), (-243787749));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(49, node0, node0, (-2672), 12);
      nameAnalyzer0.process(node0, node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("window");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(4, node0, node0, node0, 2, 52);
      nameAnalyzer0.process(node0, node1);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NameAnalyzer$ClassDefiningFunctionNode");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = Node.newString(115, "com.google.javascript.jscomp.NameAnalyzer$ClassDefiningFunctionNode", 2104, 2104);
      Node node2 = new Node((-540), node1, node0, (-1464582556), (-3584));
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node2, node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("call");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = Node.newString(57, "lef-Gb!]2&", 46, 49);
      Node node2 = new Node(118, node0, node1, 3, 43);
      Node node3 = new Node(8, node2, node2, (-917), (-2289));
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node2, node3);
//       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
//      } catch(RuntimeException e) {
//         //
//         // INTERNAL COMPILER ERROR.
//         // Please report this problem.
//         // INTERNAL COMPILER ERROR.
//         // Please report this problem.
//         // EXPR_RESULT nodes are not supported.
//         //   Node(EXPR_RESULT): [testcode]:1:0
//         // call
//         //   Parent(SCRIPT): [testcode]:1:0
//         // call
//         // 
//         //   Node(SCRIPT): [testcode]:1:0
//         // call
//         //   Parent(VAR): [source unknown]
//         //
//         verifyException("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("goog.global");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = Node.newString(42, "goog.global", 57, 30);
      Node node2 = new Node(37, node1, node0, 0, 53);
      nameAnalyzer0.process(node2, node2);
      assertTrue(node2.isCall());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("goog.global");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(37, node0, node0, 0, 53);
      nameAnalyzer0.process(node1, node1);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("I6");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "p=63");
      Node node2 = new Node(16, node1, node1, 52, 55);
      nameAnalyzer0.process(node0, node2);
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("goog.global");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "$=iG");
      nameAnalyzer0.process(node0, node0);
      assertEquals(37, Node.OPT_ARG_NAME);
  }
}
