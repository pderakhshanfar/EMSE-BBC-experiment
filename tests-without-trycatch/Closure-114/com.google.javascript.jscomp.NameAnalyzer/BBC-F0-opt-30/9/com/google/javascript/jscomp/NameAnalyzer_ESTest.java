/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 18:15:58 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.global", "goog.global");
      node0.putIntProp(51, 2097152);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(0.0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      SourceFile sourceFile0 = SourceFile.fromCode("tk9$vp", "tk9$vp", "tk9$vp");
      Node node1 = compiler0.parse(sourceFile0);
      Node node2 = new Node(1, node0, node0, node1, (-3242), (-4961));
      Node node3 = new Node(38);
      Node node4 = new Node(4095, node2, node3, node2, node3);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node1, node4);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 4095
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(3.881418686789065);
      node0.setType(64);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node(100, node1, node1, node1, node1, 303, 8);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(4.990514338036279);
      node0.setType(42);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node(88, node1, node1, node1, 4095, 50);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(4.990514338036279);
      node0.setType(42);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node((-941), node1, node1, node1, (-1439404657), 21);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node2, node2);
      assertTrue(node1.hasOneChild());
      
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 3</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 3</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"\"></a><ul></li></ul></li><li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.ExportTestFunctions", "com.google.javascript.jscomp.ExportTestFunctions");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-2854.0));
      Node node1 = new Node(113, node0, node0, node0, 32, 49);
      Node node2 = Node.newNumber((double) 46, 108, 39);
      node1.addChildAfter(node2, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isGetElem());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(3.881418686789065);
      Node node1 = new Node(110, node0, node0, node0, 47, 0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertTrue(node1.isSwitch());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-7.761789157187776));
      Node node1 = new Node(119, node0, node0, node0, 113, 15);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node1);
      assertTrue(node1.isWith());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(1.5);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(4, node0, node0, node0, 32, 57);
      nameAnalyzer0.process(node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(3.881418686789065);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node(100, node1, node1, node1, node1, 303, 8);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      node2.setType(49);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node0.isBreak());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(2.0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(118, node0, node0, node0, 8, 50);
      nameAnalyzer0.process(node0, node1);
      assertEquals(0, node0.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-17.065124685332805));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      SourceFile sourceFile0 = SourceFile.fromCode("tk9$vp", "tk9$vp", "tk9$vp");
      Node node1 = compiler0.parse(sourceFile0);
      Node node2 = new Node(114, node0, node0, node1, 2, 0);
      nameAnalyzer0.process(node0, node2);
      assertFalse(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(1.5);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node0);
      SourceFile sourceFile0 = SourceFile.fromCode("tk9$vp", "tk9$vp", "tk9$vp");
      Node node1 = compiler0.parse(sourceFile0);
      Node node2 = new Node(37, node0, node1, node1, 48, 2);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(1.5);
      Node node1 = new Node(147, node0, node0, node0, 0, 1431);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newNumber(3.881418686789065);
      node0.setType(46);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node(100, node1, node1, node1, node1, 46, 8);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node3 = new Node(53, node2);
      nameAnalyzer0.process(node2, node3);
      assertFalse(node2.isRegExp());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(3.881418686789065);
      node0.setType(64);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node(86, node1, node1, node1, 0, (-2597));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newNumber(3.881418686789065);
      node0.setType(36);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node(38, node1, node1, node1, node1, 323, 8);
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node1, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("oneObj", "function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.Compiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(4.990514338036279);
      node0.setType(42);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node((-941), node1, node1, node1, (-1439404657), 21);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node2, node2);
      nameAnalyzer0.removeUnreferenced();
      // Undeclared exception!
//      try { 
        nameAnalyzer0.removeUnreferenced();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(2.0);
      Node node1 = new Node(415);
      node0.addChildrenToBack(node1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node2 = new Node(118, node0, node0, node0, 8, 50);
      nameAnalyzer0.process(node0, node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(4.990514338036279);
      node0.setType(42);
      Node node1 = new Node(86, node0, node0, node0, 47, 0);
      Node node2 = new Node(98, node1, node1, node1, 118, 50);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node2, node1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NameAnalyzer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      SourceFile sourceFile0 = SourceFile.fromCode("_+(bK%3Ap,", "1~^X;55110YQ", "window");
      Node node0 = compiler0.parse(sourceFile0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isDec());
  }
}
