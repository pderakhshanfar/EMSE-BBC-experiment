/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:52:21 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-1672));
      // Undeclared exception!
//      try { 
        compiler0.parseSyntheticCode("TML", "oHci5ng");
//       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
//      } catch(IllegalArgumentException e) {
//         //
//         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
//         //
//         verifyException("com.google.common.collect.ImmutableMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-1616392753));
      Node node1 = new Node(86, node0, node0, node0, 30, 57);
      Node node2 = new Node(86, node1, 51, 8);
      Node node3 = new Node(85, node2, 971, (-3));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node3);
      assertEquals(30, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(35);
      Node node1 = new Node((-1574), node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node1, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("qUzyP@Jhu");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NameAnalyzer$ProcessExternals", "com.google.javascript.jscomp.NameAnalyzer$ProcessExternals");
      nameAnalyzer0.process(node0, node0);
      assertTrue(node0.mayMutateGlobalStateOrThrow());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(115, 115, (-1277));
      Node node1 = new Node(4, node0, node0, node0, 64, 86);
      Node node2 = new Node(114, node1, 2, 57);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(1147, 1147, 1147);
      Node node1 = new Node(110, node0, node0, node0, 47, 39);
      Node node2 = new Node(111, node1, 2, 42);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isNull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(119, 119, 119);
      Node node1 = new Node(119, node0, node0, node0, 4095, 1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isAnd());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(1147, 1147, 1147);
      Node node1 = new Node(113, node0, node0, node0, 39, 46);
      Node node2 = new Node(162, node1, 162, 39);
      nameAnalyzer0.process(node2, node2);
      assertEquals(39, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(115, 115, (-1277));
      Node node1 = new Node(68, node0, node0, 4095, 36);
      Node node2 = new Node(108, node1, 15, (-16));
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(1147, 1147, 1147);
      Node node1 = new Node(86, node0, node0, node0, 47, 39);
      Node node2 = new Node(4, node1, 3691, 46);
      nameAnalyzer0.process(node1, node2);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(1145, 1145, 1145);
      Node node1 = Node.newString("param", (-459), 32);
      node0.addChildrenToBack(node1);
      Node node2 = new Node(118, node0, 47, 8);
      nameAnalyzer0.process(node0, node2);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(1147, 1147, 1147);
      Node node1 = new Node(118, node0, node0, node0, 1406, (-52));
      nameAnalyzer0.process(node0, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(147, "INTERFACE");
      Node node1 = new Node(29, node0, node0, node0, (-207), 1138);
      Node node2 = new Node(30, node1, 85, 8);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node2, node0);
      assertFalse(node2.isOnlyModifiesArgumentsCall());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-3932));
      Node node1 = new Node(86, node0, node0, node0, 40, 48);
      Node node2 = new Node(101, node1, 1, 38);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isCast());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(4317);
      Node node1 = new Node(86, node0, node0, node0, (-1302), (-432));
      Node node2 = new Node(100, node1, (-2616), 92);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-1616392753));
      Node node1 = new Node(86, node0, node0, node0, 30, 57);
      Node node2 = new Node(86, node1, 51, 8);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node1, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(1147, 1147, 1147);
      Node node1 = new Node(86, node0, node0, node0, 47, 39);
      Node node2 = new Node(49, node1, 32, 12);
      nameAnalyzer0.process(node1, node2);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = new Node(1147, 1147, 1147);
      Node node1 = new Node(86, node0, node0, node0, 47, 39);
      Node node2 = new Node(38, node1, 2, 42);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node1, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("|S#`Cv=", "Hashing");
      Node node1 = new Node(40, node0, node0, 1, (-83));
      Node node2 = new Node(86, node1, 172, 2);
      nameAnalyzer0.process(node2, node2);
      assertEquals(56, Node.CHANGE_TIME);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}", "function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.Compiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = new Node(38);
      Node node1 = new Node(118, node0, node0, node0);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node1, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("window", "Hashing.md5()");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isComma());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("qUzyP@Jhu");
      Node node0 = new Node(64, (-9), 64);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("qUzyP@Jhu");
      Node node0 = new Node(58, (-9), 58);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      Node node1 = compiler0.parseSyntheticCode("|#{c:~'hM 0~lg+p+:-", "window");
      nameAnalyzer0.process(node0, node1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }
}
