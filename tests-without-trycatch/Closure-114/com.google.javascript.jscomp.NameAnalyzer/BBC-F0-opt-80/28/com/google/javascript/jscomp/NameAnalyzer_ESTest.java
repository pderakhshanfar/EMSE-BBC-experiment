/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:05:20 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.removeUnreferenced();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer((AbstractCompiler) null, false);
      Node node0 = Node.newString(0, "<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 0</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 0</li>\n<li>Referenced Names: 0</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 0</li>\n</ul>ALL NAMES<ul>\n</ul></body></html>");
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newString(147, "instrumentFunctions");
      Node node1 = new Node(138, node0, node0);
      MockFile mockFile0 = new MockFile("instrumentFunctions");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node2 = new Node(39, node1, (-123), 1);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(35);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(63, node0, 35, 47);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations");
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-2627), "J");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(114, node0, 55, 37);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isCase());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(110, "<lL>EMFERENCED BY:");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(110, node0, 50, 53);
      nameAnalyzer0.process(node1, node1);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(119, "wlLmEMFEREnCED BY:");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(119, node0, 50, 53);
      nameAnalyzer0.process(node1, node1);
      assertEquals(53, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(0, "com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(113, node0, 37, 57);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node0.isTry());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(108, "<li>REFERENCED BY: ");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node1 = new Node(108, node0, 0, (-1040));
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (CLASS)\n");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(4, node0, node0, 529, (-2357));
      nameAnalyzer0.process(node1, node1);
      assertFalse(node1.isWhile());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(1231, 1231, 1231);
      Node node1 = new Node(115, node0);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node2 = new Node(1, node1, 41, 2);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node1, node2);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("l\"jpa");
      Node node1 = new Node(86, node0, node0, node0, 57, 4095);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node2 = new Node(49, node1, 12, 40);
      nameAnalyzer0.process(node2, node2);
      assertFalse(node2.isLabelName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(108, "k2h");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(118, node0, 208, 4095);
      nameAnalyzer0.process(node0, node1);
      assertFalse(node1.isDelProp());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-2627), "J");
      compiler0.initCompilerOptionsIfTesting();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(37, node0, 48, 3421);
      nameAnalyzer0.process(node1, node1);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newString(147, "ct5umYdL6]B.k!Y");
      Node node1 = new Node(32, node0, node0, 53, 147);
      Compiler compiler0 = new Compiler();
      Node node2 = new Node(86, node1, 43, 36);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node1, node0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("l\"jpa");
      Node node1 = new Node(86, node0, node0, node0, 57, 4095);
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node2 = new Node(38, node1, 4, 86);
      // Undeclared exception!
//      try { 
        nameAnalyzer0.process(node0, node1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("<lL>EMFERENCED BY:");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
      Node node1 = new Node(86, node0, 50, 53);
      nameAnalyzer0.process(node1, node1);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Node.newNumber((double) 208);
      Node node1 = new Node((-1447661015), node0, node0, 1, 42);
      Node node2 = new Node(118, node1, 412, 52);
      nameAnalyzer0.process(node1, node2);
      assertFalse(node1.isExprResult());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("P.pIB");
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      nameAnalyzer0.process(node0, node0);
      String string0 = nameAnalyzer0.getHtmlReport();
      assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "window");
      nameAnalyzer0.process(node0, node0);
      nameAnalyzer0.process(node0, node0);
      assertFalse(node0.isRegExp());
  }
}
