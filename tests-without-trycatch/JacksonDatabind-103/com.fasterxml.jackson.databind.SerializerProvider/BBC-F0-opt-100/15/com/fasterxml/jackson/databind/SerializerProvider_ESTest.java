/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 19:07:58 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DatabindContext;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import com.fasterxml.jackson.databind.util.TypeKey;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerProvider_ESTest extends SerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Locale> class0 = Locale.class;
      objectMapper0.writerFor(class0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "}%EI.oP\"Rg:<pwV4wl ";
      // Undeclared exception!
//      try { 
        serializerProvider0.reportMappingProblem("}%EI.oP\"Rg:<pwV4wl ", objectArray0);
//        fail("Expecting exception: IllegalFormatConversionException");
      
//      } catch(IllegalFormatConversionException e) {
//         //
//         // e != java.lang.String
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      Class<Locale> class0 = Locale.class;
      objectMapper0.writerFor(class0);
      objectMapper0.getSerializerProviderInstance();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) null);
      serializerProvider0.getTypeFactory();
      serializerProvider0.getActiveView();
      // Undeclared exception!
//      try { 
        serializerProvider0.findKeySerializer((Class<?>) null, (BeanProperty) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      objectMapper0.addMixIn(class0, class0);
      Class<Locale> class1 = Locale.class;
      objectMapper0.writerFor(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.getConfig();
      defaultSerializerProvider_Impl0.canOverrideAccessModifiers();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory.unknownType();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartObject((Object) pipedInputStream0);
      SerializedString serializedString0 = new SerializedString("");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
//      try { 
        serializerProvider0.defaultSerializeNull(jsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name (context: Object)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      AnnotationIntrospectorPair annotationIntrospectorPair0 = (AnnotationIntrospectorPair)AnnotationIntrospector.pair(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = new PropertyName("J1B", "J1B");
      ObjectIdGenerator<ChronoLocalDate> objectIdGenerator0 = (ObjectIdGenerator<ChronoLocalDate>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectReader> jsonDeserializer0 = (JsonDeserializer<ObjectReader>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      PropertyName propertyName1 = objectIdReader0.propertyName;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, annotationIntrospectorPair0, false, propertyName1);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withSimpleName("Null passed for `valueType` of `findValueSerializer()`");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jacksonAnnotationIntrospector0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) "J1B";
      objectArray0[3] = (Object) objectIdReader0;
      objectArray0[4] = (Object) objectIdGenerator0;
      objectArray0[5] = (Object) objectIdGenerator0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) pOJOPropertyBuilder1, "Null passed for `valueType` of `findValueSerializer()`", objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectReader> class0 = ObjectReader.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, (JavaType) null, (JavaType) null);
      // Undeclared exception!
//      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) mapLikeType0, (BeanProperty) beanProperty_Bogus0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleModule simpleModule0 = new SimpleModule("47Ce$N`y1");
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      objectMapper0.registerModule(simpleModule1);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Se*f<4");
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      serializerProvider0.findValueSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<List> class0 = List.class;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      CollectionType collectionType2 = collectionType1.withTypeHandler(mockSimpleDateFormat0);
      objectMapper0.writerFor((JavaType) collectionType2);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class2 = String.class;
      serializerProvider0.findValueSerializer(class2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MapperFeature> class0 = MapperFeature.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) null);
      serializerProvider0.findTypedValueSerializer(javaType0, true, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      objectMapper0.setDateFormat(stdDateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.defaultSerializeDateValue(16L, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "4o[]t0#(59\"sm0%e$";
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "4o[]t0#(59\"sm0%e$", objectArray0);
//        fail("Expecting exception: IllegalFormatConversionException");
      
//      } catch(IllegalFormatConversionException e) {
//         //
//         // e != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/N86jT>GD>G% Z-", "/N86jT>GD>G% Z-");
      ((DatabindContext)defaultSerializerProvider_Impl0)._desc("/N86jT>GD>G% Z-");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) objectMapper0;
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLNonTransientConnectionException0, "Q)eGRHj5jLly%v@7", objectArray0);
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = 'v'
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-74);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, pipedOutputStream0, byteArray0, 1, false);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.getGenerator();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.createInstance((SerializationConfig) null, serializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        serializerProvider0.findValueSerializer(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", (String) null);
      unknownSerializer0.unwrappingSerializer(nameTransformer0);
      serializerProvider0.setDefaultKeySerializer(unknownSerializer0);
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findValueSerializer(javaType0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonSerializer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper0, byteArrayOutputStream0, byteArray0, 159, false);
      SerializedString serializedString0 = new SerializedString("");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeValue((Object) null, jsonGenerator0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(simpleType0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(class0);
      ReferenceType referenceType3 = referenceType2.withStaticTyping();
      // Undeclared exception!
//      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.type.SimpleType cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      JavaType[] javaTypeArray0 = null;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0);
      IntNode intNode0 = IntNode.valueOf(1);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(intNode0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      ReferenceType referenceType3 = referenceType2.withTypeHandler(object0);
      // Undeclared exception!
//      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) referenceType3, (BeanProperty) null);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.databind.node.IntNode cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) "#835]h%5";
      objectArray0[2] = (Object) "#835]h%5";
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) "#835]h%5";
      objectArray0[6] = (Object) objectMapper0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "#835]h%5", objectArray0);
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = '5'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      int int0 = 1;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
      coreXMLDeserializers_Std0.getValueType();
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl1)._reportIncompatibleRootType(jsonFactory0, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      byteArrayBuilder0.appendTwoBytes(2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      int int0 = 0;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      serializerProvider0.defaultSerializeValue(defaultSerializerProvider_Impl0, jsonGenerator0);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.hasSerializationFeatures(int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      jsonFactory0.setCodec(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.getAttribute(jsonFactory0);
      defaultSerializerProvider_Impl0.getSerializationView();
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((Class<?>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[0], typeBindings0, (Object) simpleObjectIdResolver0, (Object) resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) arrayType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(simpleObjectIdResolver0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(resolvedRecursiveType0);
      Class<Integer> class1 = Integer.class;
      ReferenceType referenceType3 = (ReferenceType)referenceType2.refine(class1, typeBindings0, referenceType1, javaTypeArray0);
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(referenceType3);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // com.fasterxml.jackson.annotation.SimpleObjectIdResolver cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.TYPE;
      TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      serializerProvider0.findPrimaryPropertySerializer((JavaType) arrayType0, (BeanProperty) null);
      arrayType0.isReferenceType();
      Class<Annotation> class1 = Annotation.class;
      serializerProvider0.findValueSerializer(class1);
      serializerProvider0.findPrimaryPropertySerializer((JavaType) arrayType0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute(objectMapper0, objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class0, class1);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(simpleModule1);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ((SerializerProvider)defaultSerializerProvider_Impl1)._createUntypedSerializer(arrayType2);
      defaultSerializerProvider_Impl0.hasSerializationFeatures(1536);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Class<Annotation> class0 = Annotation.class;
      serializerProvider0.getDefaultPropertyFormat(class0);
      Random.setNextRandom(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1205), objectMapper0, mockFileOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
//      try { 
        serializerProvider0.defaultSerializeValue(objectMapper0, jsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProvider();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("JSON");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      TypeBindings typeBindings2 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) resolvedRecursiveType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings2);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(typeBindings2);
      TypeBindings typeBindings3 = arrayType1.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      resolvedRecursiveType0.refine(class0, typeBindings3, arrayType0, javaTypeArray0);
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<Integer> class2 = Integer.class;
      Class<MockDateFormat> class3 = MockDateFormat.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      Integer integer0 = new Integer(13);
      MapType mapType1 = mapType0.withContentValueHandler(integer0);
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class1);
      MapType mapType2 = (MapType)mapType1.withContentValueHandler(unknownSerializer0);
      MapType mapType3 = (MapType)mapType2.withKeyValueHandler(class2);
      PropertyName propertyName0 = new PropertyName("START_ARRAY");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ObjectIdGenerators.StringIdGenerator> class4 = ObjectIdGenerators.StringIdGenerator.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class4, "START_ARRAY", mapType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType3, propertyName0, annotatedField0, propertyMetadata0);
      MapType mapType4 = (MapType)typeResolutionContext_Basic0.resolveType(mapType0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapType4);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) mapType3, (BeanProperty) beanProperty_Std1);
//      try { 
        defaultSerializerProvider_Impl0.serializerInstance(virtualAnnotatedMember0, mapType2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.databind.type.MapType; expected type JsonSerializer or Class<JsonSerializer> instead
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectMapper objectMapper1 = new ObjectMapper();
      TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      objectMapper1.setTypeFactory(typeFactory1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((DataOutput) objectOutputStream0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, false);
      serializerProvider0.defaultSerializeDateKey(1605L, (JsonGenerator) filteringGeneratorDelegate0);
      serializerProvider0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      String string0 = "Failed to narrow type %s with annotation (value %s), from '%s': %s";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Failed to narrow type %s with annotation (value %s), from '%s': %s";
      objectArray0[1] = (Object) null;
      // Undeclared exception!
//      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Failed to narrow type %s with annotation (value %s), from '%s': %s", objectArray0);
//        fail("Expecting exception: MissingFormatArgumentException");
      
//      } catch(MissingFormatArgumentException e) {
//         //
//         // Format specifier '%s'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      serializerProvider0.getTimeZone();
      serializerProvider0.findValueSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("Root name '%s' does not match expected ('%s') for type %s", objectArray0);
//        fail("Expecting exception: MissingFormatArgumentException");
      
//      } catch(MissingFormatArgumentException e) {
//         //
//         // Format specifier '%s'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      serializerProvider0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      Random.setNextRandom((-435));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = objectMapper0.constructType(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaType0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2242, objectMapper0, pipedOutputStream0, byteArray0, 1483, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
//      try { 
        serializerProvider0.defaultSerializeNull(jsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      typeFactory0.constructArrayType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("E\"5i|,pyA='");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-72);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, objectMapper0, mockPrintStream1, byteArray0, (byte)41, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateValue((-2971L), jsonGenerator0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      serializerProvider0.findPrimaryPropertySerializer((JavaType) arrayType0, (BeanProperty) null);
      serializerProvider0.findValueSerializer((JavaType) arrayType0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, objectMapper0, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      SerializedString serializedString0 = new SerializedString("");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeNull(jsonGeneratorDelegate0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      defaultSerializerProvider_Impl0.setNullKeySerializer(unknownSerializer0);
      defaultSerializerProvider_Impl0.findNullKeySerializer((JavaType) null, beanProperty_Bogus0);
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      SQLWarning sQLWarning0 = new SQLWarning("Y7D0@T O~J8Pi .(");
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "", (Throwable) sQLWarning0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer((JavaType) arrayType0);
      Random.setNextRandom(3015);
      JsonSerializer<?> jsonSerializer1 = serializerProvider0.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
      serializerProvider0.serializerInstance((Annotated) null, jsonSerializer1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockFileOutputStream0, byteArray0, 2, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter)SerializationConfig.DEFAULT_PRETTY_PRINTER;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((-9223372036854775808L), (JsonGenerator) uTF8JsonGenerator1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable((JsonSerializer<?>) null, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-74);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5107, objectMapper0, pipedOutputStream0, byteArray0, 1, false);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.getGenerator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory.defaultInstance();
      MockDate mockDate0 = new MockDate();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, byteArrayOutputStream0, byteArray0, 3177, true);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) objectMapper0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.mappingException("`[!Tg<%a~+@,NL=l#", objectArray0);
//        fail("Expecting exception: IllegalFormatConversionException");
      
//      } catch(IllegalFormatConversionException e) {
//         //
//         // a != com.fasterxml.jackson.databind.ObjectMapper
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) jsonSerializer0;
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[4] = (Object) jsonSerializer1;
      objectArray0[5] = (Object) "Cannot pass null modifier";
      objectArray0[6] = (Object) jsonSerializer1;
//      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("Cannot pass null modifier", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot pass null modifier
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      serializerProvider0.findNullKeySerializer((JavaType) null, beanProperty_Bogus0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      serializerProvider0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "p}bD=W";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "]j-%Ua<x4l6";
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "]j-%Ua<x4l6", objectArray0);
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = 'U'
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.findValueSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      serializerProvider0.getUnknownTypeSerializer(class1);
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      serializerProvider0.findTypedValueSerializer(class2, false, (BeanProperty) null);
      // Undeclared exception!
//      try { 
        serializerProvider0.reportMappingProblem("Null passed for `valueType` of `findValueSerializer()`", (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<PropertyName> class0 = PropertyName.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      serializerProvider0.getUnknownTypeSerializer(class0);
      Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      serializerProvider0.findTypedValueSerializer((JavaType) mapType0, true, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) batchUpdateException0, (String) null, (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(objectMapper0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType1;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      JavaType javaType0 = referenceType1.refine(class0, typeBindings0, javaTypeArray0[0], javaTypeArray0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, javaType0, (ClassIntrospector.MixInResolver) null);
//      try { 
        defaultSerializerProvider_Impl1.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "kGe'i@AqH(F-C+ip", (Object[]) javaTypeArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid definition for property N/A (of type `java.lang.String`): kGe'i@AqH(F-C+ip
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) "~x2uCj:\"fP]}Q(";
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) "~x2uCj:\"fP]}Q(";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
//      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "~x2uCj:\"fP]}Q(", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid definition for property N/A (of type N/A): ~x2uCj:\"fP]}Q(
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      basicBeanDescription0.findProperty((PropertyName) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "~x2uCj:\"fP]}Q(";
      objectArray0[2] = (Object) beanProperty_Bogus0;
      objectArray0[3] = (Object) "~x2uCj:\"fP]}Q(";
      objectArray0[4] = (Object) "~x2uCj:\"fP]}Q(";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) serializerProvider0;
      objectArray0[7] = (Object) beanProperty_Bogus0;
      // Undeclared exception!
//      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "~x2uCj:\"fP]}Q(", objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      serializerProvider0.findValueSerializer((JavaType) arrayType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      basicBeanDescription0.findProperty(propertyName0);
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer((JavaType) arrayType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      serializerProvider0.handlePrimaryContextualization(jsonSerializer0, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockFileOutputStream0, byteArray0, (-1417), true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter)SerializationConfig.DEFAULT_PRETTY_PRINTER;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((-9223372036854775808L), (JsonGenerator) uTF8JsonGenerator1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1417
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getGenerator();
      serializerProvider0.getGenerator();
      Class<Object> class0 = Object.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      serializerProvider0.findTypedValueSerializer((Class<?>) class0, true, (BeanProperty) beanProperty_Bogus0);
      MockDate mockDate0 = new MockDate((-133), (-1929), (-133), (-1929), (-1929));
      Instant instant0 = mockDate0.toInstant();
      Date date0 = Date.from(instant0);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateKey(date0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N/A");
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      serializerProvider0.getTimeZone();
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      serializerProvider0.findPrimaryPropertySerializer((Class<?>) class1, (BeanProperty) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute((Object) null, objectMapper0);
      defaultSerializerProvider_Impl1.canOverrideAccessModifiers();
      defaultSerializerProvider_Impl0.getLocale();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]...[", sQLRecoverableException0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) defaultSerializerProvider_Impl1;
      ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLFeatureNotSupportedException0, "ys~p aI#\"V7+", objectArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.parseDate("com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer(beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<PropertyName> class0 = PropertyName.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(3694, 90);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class0, class1, class1);
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(objectMapper1, mapLikeType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incompatible types: declared root type ([map-like type; class com.fasterxml.jackson.databind.ser.BeanSerializer, [simple type, class java.sql.ClientInfoStatus] -> [simple type, class java.sql.ClientInfoStatus]]) vs `com.fasterxml.jackson.databind.ObjectMapper`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "6@+yrM`", "Missing required creator property '%s' (index %d)");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) deserializerFactory0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "Missing required creator property '%s' (index %d)";
      objectArray0[3] = (Object) deserializerFactoryConfig0;
      objectArray0[4] = (Object) deserializerFactory0;
      objectArray0[5] = (Object) "6@+yrM`";
      objectArray0[6] = (Object) beanDeserializerFactory0;
      objectArray0[7] = (Object) deserializerFactory0;
      objectArray0[8] = (Object) deserializerFactoryConfig0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) jsonMappingException0, "Missing required creator property '%s' (index %d)", objectArray0);
//        fail("Expecting exception: IllegalFormatConversionException");
      
//      } catch(IllegalFormatConversionException e) {
//         //
//         // d != java.lang.Class
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
      serializerProvider0.canOverrideAccessModifiers();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      MockDate mockDate0 = new MockDate(57, 57, 57);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDate0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57, objectMapper0, byteArrayOutputStream0, byteArray0, 1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(614, 1);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      serializerProvider0.findValueSerializer((JavaType) arrayType0);
      Class<Integer> class1 = Integer.class;
      serializerProvider0.getDefaultPropertyFormat(class1);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      serializerProvider0.isEnabled(serializationFeature0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl1;
      objectArray0[1] = (Object) "&v`CCK@e}%r";
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) defaultSerializerProvider_Impl1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "&v`CCK@e}%r";
      objectArray0[6] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.reportMappingProblem("&v`CCK@e}%r", objectArray0);
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = 'r'
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jsonSerializer0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.mappingException("Invalid definition for property %s (of type %s): %s", objectArray0);
//        fail("Expecting exception: MissingFormatArgumentException");
      
//      } catch(MissingFormatArgumentException e) {
//         //
//         // Format specifier '%s'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      serializerProvider0.findValueSerializer(class0);
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      serializerProvider0.isEnabled(mapperFeature0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      objectMapper0.reader();
      defaultSerializerProvider_Impl0.getLocale();
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
      defaultSerializerProvider_Impl0.getConfig();
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.getLocale();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<HashMap> class1 = HashMap.class;
      Class<UnknownSerializer> class2 = UnknownSerializer.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class1, class2);
      MapType mapType1 = (MapType)mapType0.withStaticTyping();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      MapType mapType2 = (MapType)mapType1.withTypeHandler(simpleDateFormat0);
      MapType mapType3 = (MapType)mapType2.withTypeHandler(mapType0);
      defaultSerializerProvider_Impl0.findTypeSerializer(mapType2);
      mapType2.isThrowable();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(mapType2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      defaultSerializerProvider_Impl2.invalidTypeIdException(mapType3, "ET.D(fYQ^^]", "Could not resolve type id '%s' as a subtype of %s");
//      try { 
        defaultSerializerProvider_Impl1.reportBadDefinition((JavaType) mapType0, "ET.D(fYQ^^]");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // ET.D(fYQ^^]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((DatabindContext)defaultSerializerProvider_Impl0)._desc("com.fasterxml.jackson.databind.SerializerProvider");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) "C\"AqZ4r%";
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) objectMapper0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.mappingException("C\"AqZ4r%", objectArray0);
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = '%'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getLocale();
      Class<DateFormat> class0 = DateFormat.class;
      // Undeclared exception!
//      try { 
        serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.text.DateFormat, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      // Undeclared exception!
//      try { 
        serializerProvider0.serializerInstance((Annotated) null, objectMapper0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getGenerator();
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeValue((Object) null, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.getConfig();
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl1.getTypeFactory();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Class<MockDateFormat> class1 = MockDateFormat.class;
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      Class<MockDateFormat> class3 = MockDateFormat.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class3);
      typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) mapLikeType0, (JavaType) mapLikeType0);
      Class<HashMap> class4 = HashMap.class;
      typeFactory0.constructRawMapType(class4);
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
//      try { 
        typeFactory0.findClass("JSON");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(ClassNotFoundException e) {
//         //
//         // Class 'JSON.class' should be in target project, but could not be found!
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findNullKeySerializer((JavaType) null, beanProperty_Bogus0);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer((Class<?>) class0, true, (BeanProperty) beanProperty_Bogus0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getDefaultNullKeySerializer();
      serializerProvider0.hasSerializationFeatures(28);
      SerializationConfig serializationConfig0 = null;
//      try {
        serializationConfig0 = new SerializationConfig((SerializationConfig) null, (ContextAttributes) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object object0 = new Object();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      Class<Object> class1 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler(typeFactory0);
      collectionType0.findTypeParameters(class0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) collectionLikeType0, (BeanProperty) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.includeFilterInstance((BeanPropertyDefinition) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      objectMapper0.writerFor(class0);
      defaultSerializerProvider_Impl0.getGenerator();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature1);
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) objectOutputStream0);
      defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      propertyName0.internSimpleName();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class2 = Annotation.class;
      annotationMap0.get(class2);
      Class<String> class3 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class3);
      Integer integer0 = new Integer(1335);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      Object[] objectArray0 = new Object[3];
      Class<Object> class4 = Object.class;
      Object object0 = defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class4);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) arrayType0;
      objectArray0[2] = (Object) mapType0;
      defaultSerializerProvider_Impl0.mappingException("o}CrD", objectArray0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<JsonInclude.Include> class5 = JsonInclude.Include.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class5, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", arrayType1);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap1 = AnnotationMap.of(class0, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap1);
      defaultSerializerProvider_Impl0.serializerInstance(annotatedField0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      MapType mapType1 = (MapType)mapType0.withKeyType(simpleType1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType1, typeBindings0);
      arrayType0.withStaticTyping();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      propertyName0.internSimpleName();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      Class<List> class2 = List.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class3 = Annotation.class;
      annotationMap0.get(class3);
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class2, (Annotation) null, class4, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      Integer integer0 = new Integer(3);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) arrayType0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      serializerProvider0.findPrimaryPropertySerializer((JavaType) arrayType0, (BeanProperty) null);
      serializerProvider0.findTypedValueSerializer((JavaType) arrayType0, false, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      MapType mapType1 = (MapType)mapType0.withKeyType(simpleType1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType1, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType1, classNameIdResolver0, "M\"9B4W^`*\"5+AIMWB.z", true, mapType1);
      Class<List> class2 = List.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class3 = Annotation.class;
      annotationMap0.get(class3);
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class2, (Annotation) null, class4, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Boolean boolean0 = new Boolean(true);
      Integer integer0 = new Integer(327);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "P^L[", integer0, "P^L[");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 3, defaultSerializerProvider_Impl0, propertyMetadata1);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName1);
      defaultSerializerProvider_Impl0.findNullKeySerializer(arrayType1, creatorProperty1);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) arrayType0, (BeanProperty) creatorProperty1);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) arrayType0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      objectMapper0.writerFor(class0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      objectMapper0.writerFor(class0);
      MockDate mockDate0 = new MockDate(60, 60, 60, 60, 60, 60);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      objectMapper0.writerFor(class0);
      JsonGenerator jsonGenerator0 = null;
      MockDate mockDate0 = new MockDate(60, 60, 60, 60, 60, 60);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler((Object) null);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig0, collectionLikeType0, (ClassIntrospector.MixInResolver) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      basicBeanDescription0.findProperty(propertyName0);
      // Undeclared exception!
//      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "", (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<MockDateFormat> jsonSerializer0 = (JsonSerializer<MockDateFormat>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler((Object) null);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig0, collectionLikeType0, (ClassIntrospector.MixInResolver) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      basicBeanDescription0.findProperty(propertyName0);
      // Undeclared exception!
//      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "", (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      serializerProvider0.getAnnotationIntrospector();
      Class<Object> class1 = Object.class;
      serializerProvider0.findValueSerializer(class1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
//      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) null, (String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) defaultSerializerProvider_Impl1;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) objectMapper0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "Incompatible types: declared root type (%s) vs %s", objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      BaseSettings baseSettings1 = baseSettings0.withPropertyNamingStrategy(propertyNamingStrategy0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(basicClassIntrospector0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides1);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(serializers_Base0);
      defaultSerializerProvider_Impl0.createInstance(serializationConfig0, serializerFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(propertyNamingStrategy0);
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
      Class<NamedType> class0 = NamedType.class;
      BeanDescription beanDescription0 = serializationConfig1.introspectDirectClassAnnotations(class0);
      Object[] objectArray0 = new Object[0];
//      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition(beanDescription0, "!YU6q", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid type definition for type `com.fasterxml.jackson.databind.jsontype.NamedType`: !YU6q
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonGenerator jsonGenerator0 = null;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      Date date0 = null;
      double[] doubleArray0 = new double[0];
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      serializerProvider0.findTypeSerializer(resolvedRecursiveType0);
      // Undeclared exception!
//      try { 
        jsonGeneratorDelegate0.writeArray(doubleArray0, (-2072), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      ((SerializerProvider)defaultSerializerProvider_Impl1)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.canOverrideAccessModifiers();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      boolean boolean0 = true;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature1, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)objectMapper2.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      ((SerializerProvider)defaultSerializerProvider_Impl2)._findExplicitUntypedSerializer(class0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getLocale();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
//      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid type definition for type N/A: 
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl1.setDefaultKeySerializer(jsonSerializer0);
      defaultSerializerProvider0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider_Impl0.copy();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      defaultSerializerProvider_Impl0.setNullKeySerializer(unknownSerializer0);
      defaultSerializerProvider0.setNullKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider1.getActiveView();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider1.reportMappingProblem("<mk_cZOJY", (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findKeySerializer(class0, (BeanProperty) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 123, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(jsonGenerator0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonSerializer<MockDateFormat> jsonSerializer0 = (JsonSerializer<MockDateFormat>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<PropertyName> class0 = PropertyName.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
      defaultSerializerProvider_Impl0.getFilterProvider();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vv^vR\"*c_", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectMapper0);
      defaultSerializerProvider_Impl0.defaultSerializeDateValue((-5435L), (JsonGenerator) uTF8JsonGenerator1);
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      defaultSerializerProvider_Impl0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.isUnknownTypeSerializer((JsonSerializer<?>) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      serializerProvider0.findObjectId(jsonInclude_Include0, objectIdGenerator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      defaultSerializerProvider_Impl0.isUnknownTypeSerializer((JsonSerializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Annotation> class0 = Annotation.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", (-2760));
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransactionRollbackException0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockThrowable0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      defaultSerializerProvider_Impl0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0, (BeanProperty) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      HashMap<TypeKey, JsonSerializer<Object>> hashMap0 = new HashMap<TypeKey, JsonSerializer<Object>>();
      ReadOnlyClassToSerializerMap readOnlyClassToSerializerMap0 = ReadOnlyClassToSerializerMap.from(hashMap0);
      Class<String> class0 = String.class;
      readOnlyClassToSerializerMap0.untypedValueSerializer(class0);
      // Undeclared exception!
//      try { 
        serializerProvider0.setDefaultKeySerializer((JsonSerializer<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null JsonSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "a 4\"%");
      SQLTransientException sQLTransientException0 = new SQLTransientException("G|**NqH;6jWRyO$7", "G|**NqH;6jWRyO$7", sQLTransientConnectionException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "a 4\"%";
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) jsonSerializer0;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLTransientException0, "a 4\"%", objectArray0);
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = '%'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":XBF|F|");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeValue(objectMapper0, jsonGenerator0);
//        fail("Expecting exception: NoClassDefFoundError");
      
//      } catch(NoClassDefFoundError e) {
//         //
//         // com/fasterxml/jackson/databind/JsonMappingException$Reference
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      Locale locale0 = Locale.CHINA;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      // Undeclared exception!
//      try { 
        serializerProvider0.setNullKeySerializer((JsonSerializer<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null JsonSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      defaultSerializerProvider_Impl0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      defaultSerializerProvider_Impl0.findKeySerializer(class0, (BeanProperty) null);
      ((SerializerProvider)defaultSerializerProvider_Impl1)._handleContextualResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      Class<Object> class1 = Object.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDateFormat0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((-4124L), (JsonGenerator) uTF8JsonGenerator1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      Locale locale0 = Locale.CHINA;
      serializerProvider0.hasSerializationFeatures((-443));
      MockDateFormat.getTimeInstance(1, locale0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Class<Integer> class0 = Integer.class;
      objectIdGenerators_IntSequenceGenerator0.forScope(class0);
      serializerProvider0.findObjectId(objectIdGenerators_IntSequenceGenerator0, objectIdGenerators_IntSequenceGenerator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      defaultSerializerProvider_Impl0.getFilterProvider();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      MapType mapType1 = (MapType)mapType0.withKeyType(simpleType1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType1, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType1, classNameIdResolver0, "M\"9B4W^`*\"5+AIMWB.z", false, mapType1);
      Class<List> class2 = List.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class3 = Annotation.class;
      annotationMap0.get(class3);
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class2, (Annotation) null, class4, (Annotation) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(327);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "P^L[", integer0, "P^L[");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1491), defaultSerializerProvider_Impl0, propertyMetadata1);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName1);
      defaultSerializerProvider_Impl0.findNullKeySerializer(arrayType1, creatorProperty1);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) arrayType0, (BeanProperty) creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x9H~qfKcAx*zqTa", "");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("x9H~qfKcAx*zqTa", hashMap0, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.reportMappingProblem((Throwable) sQLTransactionRollbackException0, "u&", (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue(1L, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findNullValueSerializer(beanProperty_Bogus0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures(0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.handlePrimaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.getGenerator();
      HashMap<TypeKey, JsonSerializer<Object>> hashMap0 = new HashMap<TypeKey, JsonSerializer<Object>>();
      ReadOnlyClassToSerializerMap readOnlyClassToSerializerMap0 = new ReadOnlyClassToSerializerMap(hashMap0);
      Class<String> class0 = String.class;
      readOnlyClassToSerializerMap0.typedValueSerializer(class0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.setNullValueSerializer((JsonSerializer<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null JsonSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", simpleType0);
      virtualAnnotatedMember0.withAnnotations((AnnotationMap) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      // Undeclared exception!
//      try { 
        beanSerializerBuilder0.createDummy();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.StdSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable((JsonSerializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<IntNode> jsonSerializer0 = (JsonSerializer<IntNode>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.mappingException("", (Object[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Null passed for `valueType` of `findValueSerializer()`");
      TypeFactory typeFactory0 = serializationConfig1.getTypeFactory();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionLikeType0, true, (BeanProperty) beanProperty_Bogus0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.SettableAnyProperty");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl2.setAttribute(objectMapper1, beanDeserializerFactory0);
      defaultSerializerProvider_Impl3.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl3.getLocale();
      JsonFactory jsonFactory2 = new JsonFactory(objectMapper0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
//      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Already connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.getGenerator();
      serializerProvider0.handleSecondaryContextualization(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<List> class0 = List.class;
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl1)._findExplicitUntypedSerializer(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      UnaryOperator.identity();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      MockDate mockDate0 = new MockDate((-1408), (-1408), 0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yyyy-MM-dd'T'HH:mm:ss.SSSZ", false);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.setNullValueSerializer((JsonSerializer<Object>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null JsonSerializer
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      defaultSerializerProvider_Impl0.defaultSerializeNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeNull((JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull((JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.defaultSerializeNull((JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      TypeFactory.defaultInstance();
      TypeBindings.emptyBindings();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      objectMapper0.writer((DateFormat) stdDateFormat0);
      defaultSerializerProvider_Impl0.handleSecondaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.handlePrimaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      BeanProperty beanProperty0 = null;
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, beanProperty0);
      Class<Object> class1 = Object.class;
      defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Object object0 = new Object();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      Object object1 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ygs*F|vL6X", false);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = new UnknownSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      boolean boolean0 = false;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        beanDeserializerBuilder0.buildAbstract();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      int int0 = 588;
      int int1 = (-1328);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
//      try { 
        defaultSerializerProvider0.findValueSerializer((JavaType) null, (BeanProperty) beanProperty_Bogus0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Null passed for `valueType` of `findValueSerializer()`
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Object object0 = null;
      defaultSerializerProvider_Impl0.getAnnotationIntrospector();
      Class<String> class0 = String.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      // Undeclared exception!
//      try { 
        unknownSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.StdSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      defaultSerializerProvider_Impl0.getGenerator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.getSerializationView();
      Class<Integer> class0 = Integer.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.getLocale();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl2.isUnknownTypeSerializer(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonSerializer<BeanSerializer> jsonSerializer0 = (JsonSerializer<BeanSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable((String) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings1);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*");
//      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition(javaType0, "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)", (Throwable) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("Cannot deserialize Map key of type %s from String %s: %s", class0, "Invalid definition for property %s (of type %s): %s");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Invalid definition for property %s (of type %s): %s";
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) jsonMappingException0, "Cannot deserialize Map key of type %s from String %s: %s", objectArray0);
//        fail("Expecting exception: MissingFormatArgumentException");
      
//      } catch(MissingFormatArgumentException e) {
//         //
//         // Format specifier '%s'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator1 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
      defaultSerializerProvider_Impl0.findObjectId(stdDateFormat0, objectIdGenerator1);
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      defaultSerializerProvider_Impl0.getFilterProvider();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      defaultSerializerProvider_Impl0.setNullValueSerializer(unknownSerializer0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MockDateFormat> class2 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      MapType mapType1 = (MapType)mapType0.withKeyType(simpleType1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType1, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      PropertyName propertyName0 = PropertyName.construct("M\"9B4W^`*\"5+AIMWB.z", "} <CF8mTj+}v>G");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType1, classNameIdResolver0, "M\"9B4W^`*\"5+AIMWB.z", false, mapType1);
      Class<List> class3 = List.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class4 = Annotation.class;
      annotationMap0.get(class4);
      Class<ClientInfoStatus> class5 = ClientInfoStatus.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class3, (Annotation) null, class5, (Annotation) null);
      Class<String> class6 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class6);
      valueInstantiator_Base0.getIncompleteParameter();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(330);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "} <CF8mTj+}v>G", integer0, "} <CF8mTj+}v>G");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1491), defaultSerializerProvider_Impl0, propertyMetadata1);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName1);
      defaultSerializerProvider_Impl0.findNullKeySerializer(arrayType1, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      TypeFactory typeFactory2 = typeFactory1.withClassLoader((ClassLoader) null);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory2.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      Object object0 = new Object();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MapType mapType2 = mapType0.withKeyValueHandler(mockDateFormat0);
      mapType1.withKeyValueHandler(atomicReference0);
      defaultSerializerProvider_Impl0.findKeySerializer((JavaType) mapType2, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DateFormat dateFormat1 = MockDateFormat.getTimeInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateFormat1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.SerializerProvider", "com.fasterxml.jackson.core.JsonFactory$Feature");
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion", "JSON", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 746, objectReader0, mockPrintStream0);
      uTF8JsonGenerator0.getPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
//      try { 
        defaultSerializerProvider0.defaultSerializeField("N/A", dateFormat0, jsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) objectIdGenerator0;
      objectArray0[3] = (Object) objectIdGenerator0;
      objectArray0[5] = (Object) null;
      MockDate mockDate0 = new MockDate((-1408), (-1408), 1);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null passed for `valueType` of `findValueSerializer()`", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object object0 = new Object();
      serializerProvider0.getAttribute(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findObjectId(object0, (ObjectIdGenerator<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      defaultSerializerProvider_Impl0.findObjectId(stdDateFormat0, objectIdGenerator0);
      defaultSerializerProvider_Impl0.getTypeFactory();
      defaultSerializerProvider_Impl0.getFilterProvider();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      defaultSerializerProvider_Impl0.setNullValueSerializer(unknownSerializer0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stdDateFormat0;
      objectArray0[1] = (Object) stdDateFormat0;
      objectArray0[2] = (Object) objectIdGenerator0;
      objectArray0[3] = (Object) objectIdGenerator0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) defaultSerializerProvider_Impl0;
      MockDate mockDate0 = new MockDate((-1408), (-1408), 1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper0, (OutputStream) null);
      defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null passed for `valueType` of `findValueSerializer()`", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding1);
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) writerBasedJsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      String string0 = "com.fasterxml.jackson.databind.SerializerProvider";
      serializerProvider0.getAnnotationIntrospector();
      SQLTransientException sQLTransientException0 = new SQLTransientException("EN", (String) null);
//      try { 
        serializerProvider0.reportBadDefinition((Class<?>) class0, "com.fasterxml.jackson.databind.SerializerProvider", (Throwable) sQLTransientException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // com.fasterxml.jackson.databind.SerializerProvider
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException("Invalid type definition for type %s: %s", "?v0\\Yu{;DI;b% ", sQLException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      Class<String> class1 = String.class;
//      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class1, "yL]$J4VZ.", (Throwable) sQLException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // yL]$J4VZ.
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(3);
      objectMapper0.setDateFormat(dateFormat0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getGenerator();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) stdDateFormat0;
      objectArray0[2] = (Object) objectIdGenerator0;
      MockDate mockDate0 = new MockDate(60, 60, 60, (-1052), (-1052), 60);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      UnaryOperator.identity();
      MockDate mockDate0 = new MockDate(60, 60, 60, (-1052), (-1052), 60);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider0.handlePrimaryContextualization(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
      MockDate mockDate0 = new MockDate(0, 2033, 2705);
      Class<Object> class0 = Object.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.setNullValueSerializer(defaultSerializerProvider_Impl2.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl2.getGenerator();
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider_Impl2.copy();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider1.defaultSerializeField("l:4(Q;X6", unknownSerializer0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      jsonFactory0.disable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory1.setInputDecorator(inputDecorator0);
      boolean boolean0 = SerializerProvider.CACHE_UNKNOWN_MAPPINGS;
      Integer integer0 = new Integer((-443));
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<List> class1 = List.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.defaultSerializeField("`{o8UG$@j &", jsonFactory_Feature0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      defaultSerializerProvider_Impl1.includeFilterSuppressNulls(vector0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      UnaryOperator.identity();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      MockDate mockDate0 = new MockDate((-1), (-1408), (-1408), 1, (-1408));
      MockDate mockDate1 = new MockDate((-1), 0, 0);
      defaultSerializerProvider_Impl0.getGenerator();
      MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
      defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
      Class<Object> class1 = Object.class;
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class1, (BeanProperty) null);
      defaultSerializerProvider_Impl0.findValueSerializer(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stdDateFormat0;
      objectArray0[1] = (Object) stdDateFormat0;
      objectArray0[2] = (Object) objectIdGenerator0;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      objectArray0[3] = (Object) objectIdGenerator0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) defaultSerializerProvider_Impl0;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.getSerializationView();
      Class<Object> class1 = Object.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      Integer integer0 = new Integer((-443));
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      defaultSerializerProvider0.getDefaultNullValueSerializer();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory.defaultInstance();
      BeanProperty beanProperty0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<DateFormat> class1 = DateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[6];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      javaTypeArray0[0] = (JavaType) collectionType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[0]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      MapType mapType2 = mapType1.withValueHandler(javaTypeArray0[0]);
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(mapType2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, (DefaultDeserializationContext) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      // Undeclared exception!
//      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl1)._createUntypedSerializer((JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProvider();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2579);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}6.qgc");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) serializerProvider0;
      mockPrintStream0.format((Locale) null, "TIME", objectArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, byteArrayBuilder0);
      uTF8JsonGenerator0.setCodec(objectMapper0);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeDateKey(0L, (JsonGenerator) uTF8JsonGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl2.DEFAULT_NULL_KEY_SERIALIZER);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl2.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) beanProperty_Bogus0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      ((SerializerProvider)defaultSerializerProvider_Impl1)._handleContextualResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      jsonFactory0.disable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jsonSerializer0).toString();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(jsonSerializer0, (BeanProperty) null);
      long long0 = 454L;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      int int0 = 1122;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", generatorType=");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((-2273L), (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.copy();
      Integer integer0 = new Integer((-443));
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.getLocale();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      JavaType javaType0 = null;
      String string0 = "";
      defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "", "");
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.hasSerializationFeatures(55);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      JavaType javaType0 = null;
      Class<String> class1 = String.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.constructSpecializedType((JavaType) null, class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.copy();
      Integer integer0 = new Integer((-443));
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class1);
      defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.copy();
      Integer integer0 = new Integer((-443));
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures((-443));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("sTeqUK[S8EBq+V` d", (Throwable) null);
      hashMap0.remove((Object) null, (Object) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider_Impl0.copy();
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider1.getDefaultNullKeySerializer();
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      String string0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stdDateFormat0;
      objectArray0[1] = (Object) stdDateFormat0;
      objectArray0[2] = (Object) objectIdGenerator0;
      objectArray0[3] = (Object) objectIdGenerator0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) defaultSerializerProvider_Impl0;
      MockDate mockDate0 = new MockDate((-1409), (-1409), 1);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Null passed for `valueType` of `findValueSerializer()`", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) writerBasedJsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Object> class0 = Object.class;
      SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      Class<MockDateFormat> class1 = MockDateFormat.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 356);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.getSerializationView();
      serializerProvider0.mappingException("I_o5uU3b|e##", javaTypeArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      objectMapper0.convertValue((Object) null, class0);
      objectMapper0.getSerializerProvider();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.findTypeSerializer((JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.getSerializationView();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getInstance();
      defaultSerializerProvider_Impl1.setAttribute(defaultDeserializationContext_Impl0, mockDateFormat0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      Integer integer0 = new Integer((-443));
      defaultSerializerProvider0.getSerializationView();
      defaultSerializerProvider0.copy();
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.findValueSerializer(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      objectMapper0.configure(serializationFeature0, false);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.isUnknownTypeSerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      serializerProvider0.findValueSerializer(class0);
      objectMapper0.canSerialize(class0);
      // Undeclared exception!
//      try { 
        serializerProvider0.findKeySerializer((JavaType) null, (BeanProperty) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<String> class1 = String.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class1, atomicReference0);
      defaultSerializerProvider_Impl0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      UnaryOperator.identity();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      MockDate mockDate0 = new MockDate((-1408), (-1408), 0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yyyy-MM-dd'T'HH:mm:ss.SSSZ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) writerBasedJsonGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stdDateFormat0;
      objectArray0[1] = (Object) stdDateFormat0;
      objectArray0[2] = (Object) objectIdGenerator0;
      objectArray0[3] = (Object) objectIdGenerator0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
//      try { 
        ((DatabindContext)defaultSerializerProvider_Impl0)._format((String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      Object object0 = new Object();
      MapType mapType2 = mapType1.withKeyValueHandler(object0);
      MapType mapType3 = mapType2.withTypeHandler(object0);
      BeanProperty beanProperty0 = null;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.findKeySerializer((JavaType) mapType3, (BeanProperty) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.copy();
      Integer integer0 = new Integer((-443));
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.defaultSerializeValue(integer0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      TypeFactory.defaultInstance();
      defaultSerializerProvider_Impl0.getFilterProvider();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      mapType0.withKeyType(simpleType1);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getTimeInstance();
      Class<UnknownSerializer> class2 = UnknownSerializer.class;
      UnknownSerializer unknownSerializer0 = objectMapper0.convertValue((Object) simpleDateFormat0, class2);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      serializerProvider0._handleResolvable(unknownSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.getSerializerProvider();
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectMapper0.setDefaultMergeable((Boolean) null);
      SQLDataException sQLDataException0 = new SQLDataException("5ZFF/9?u4P", "A]uQ~lC9");
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, minimalPrettyPrinter0);
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, contextAttributes_Impl0);
      TypeFactory typeFactory0 = serializationConfig2.getTypeFactory();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
//      try { 
        objectMapper0._convert(sQLDataException0, collectionLikeType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot find a Value deserializer for abstract type [collection-like type; class com.fasterxml.jackson.databind.jsontype.TypeIdResolver, contains [simple type, class java.lang.Object]]
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      serializerProvider0.findValueSerializer(class0);
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      serializerProvider0.getUnknownTypeSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl1);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Integer integer0 = Integer.getInteger("", 2);
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeValue(integer0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      serializerProvider0.getSerializationView();
      Class<String> class0 = String.class;
      serializerProvider0.findValueSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      // Undeclared exception!
//      try { 
        objectMapper1.convertValue((Object) objectMapper0, class0);
//        fail("Expecting exception: NoClassDefFoundError");
      
//      } catch(NoClassDefFoundError e) {
//         //
//         // com/fasterxml/jackson/databind/JsonMappingException$Reference
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      // Undeclared exception!
//      try { 
        objectMapper1.convertValue((Object) objectMapper0, class0);
//        fail("Expecting exception: NoClassDefFoundError");
      
//      } catch(NoClassDefFoundError e) {
//         //
//         // com/fasterxml/jackson/databind/JsonMappingException$Reference
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      // Undeclared exception!
//      try { 
        serializerProvider0.defaultSerializeValue(defaultDeserializationContext_Impl0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("sTeqUK[S8EBq+V` d", (Throwable) null);
      hashMap0.remove((Object) null, (Object) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "", (Throwable) sQLClientInfoException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, (DefaultDeserializationContext) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      serializerProvider0.isEnabled(serializationFeature0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.getGenerator();
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.isEnabled(mapperFeature0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, objectReader0, pipedWriter0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) "JSON", javaType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.findObjectId(defaultSerializerProvider_Impl0, objectIdGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getAttribute((Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider0.handlePrimaryContextualization(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
      MockDate mockDate0 = new MockDate(0, 2033, 1733);
      MockDate mockDate1 = new MockDate(2, 0, (-1395));
      mockDate0.before(mockDate1);
      defaultSerializerProvider_Impl1.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      int int0 = (-826);
      MockDate mockDate0 = new MockDate(632, (-826), (-1328));
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl1.copy();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl2.setAttribute(defaultSerializerProvider_Impl0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((-25L), (JsonGenerator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stdDateFormat0;
      objectArray0[1] = (Object) stdDateFormat0;
      objectArray0[2] = (Object) objectIdGenerator0;
      objectArray0[3] = (Object) objectIdGenerator0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
//      try { 
        ((DatabindContext)defaultSerializerProvider_Impl0)._format((String) null, objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int int0 = 1606;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.disable(jsonGenerator_Feature0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonGenerator_Feature0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedWriter0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      Class<PropertyName> class0 = PropertyName.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) null, (JavaType) arrayType0);
      Object object1 = new Object();
      defaultSerializerProvider_Impl0.getActiveView();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(class0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      Object object2 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
//      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition(javaTypeArray0[1], "Cannot handle managed/back reference '%s': type: container deserializer of type %s returned null for 'getContentDeserializer()'");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot handle managed/back reference '%s': type: container deserializer of type %s returned null for 'getContentDeserializer()'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProviderInstance();
      JavaType javaType0 = null;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      objectMapper2.setInjectableValues(injectableValues_Std0);
//      try { 
        serializerProvider0.reportBadDefinition((JavaType) null, "JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
//      try { 
        serializerProvider0.defaultSerializeValue(deserializerFactoryConfig0, (JsonGenerator) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No serializer found for class com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.setAttribute(objectMapper0, objectMapper0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.canOverrideAccessModifiers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.getDefaultNullKeySerializer();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl1.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider_Impl0.copy();
      JsonSerializer<Object> jsonSerializer1 = new UnknownSerializer();
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer1);
      defaultSerializerProvider0.setNullKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider1.getActiveView();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      Class<JsonInclude.Include> class0 = JsonInclude.Include.class;
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider0.getActiveView();
      defaultSerializerProvider0.getDefaultNullKeySerializer();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.getDefaultPropertyInclusion((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Object> class0 = Object.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, unknownSerializer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2m.");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1500, objectReader0, mockFileOutputStream0);
      uTF8JsonGenerator0.getPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((-1L), jsonGenerator0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getConfig();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, collectionLikeType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, referenceType0, simpleType0);
      String string0 = "";
//      try { 
        defaultSerializerProvider_Impl0.resolveSubType(mapLikeType0, "");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '' as a subtype of [map-like type; class java.lang.Object, [reference type, class java.lang.Object<java.lang.Object<java.lang.Object>><[collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]>] -> [simple type, class java.lang.Object]]: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(defaultSerializerProvider_Impl0);
      
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(stdDateFormat0);
      
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(typeFactory0);
      
      FilterProvider filterProvider0 = defaultSerializerProvider_Impl0.getFilterProvider();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNull(filterProvider0);
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      assertFalse(unknownSerializer0.usesObjectId());
      assertFalse(unknownSerializer0.isUnwrappingSerializer());
      assertNotNull(unknownSerializer0);
      
      defaultSerializerProvider_Impl0.setNullValueSerializer(unknownSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(unknownSerializer0.usesObjectId());
      assertFalse(unknownSerializer0.isUnwrappingSerializer());
      
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      Class<MockDateFormat> class2 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertNotNull(simpleType0);
      
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertNotNull(mapType0);
      
      SimpleType simpleType1 = (SimpleType)TypeFactory.unknownType();
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertNotNull(simpleType1);
      assertNotSame(simpleType1, simpleType0);
      
      MapType mapType1 = (MapType)mapType0.withKeyType(simpleType1);
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertNotNull(mapType1);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(mapType1, mapType0);
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType1, typeBindings0);
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(arrayType0);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(mapType1, mapType0);
      
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.useStaticType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(arrayType0, arrayType1);
      
      PropertyName propertyName0 = PropertyName.construct("M\"9B4W^`*\"5+AIMWB.z", "} <CF8mTj+}v>G");
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName0.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNotNull(propertyName0);
      
      PropertyName propertyName1 = propertyName0.internSimpleName();
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName0.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName1.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertNotNull(propertyName1);
      assertSame(propertyName0, propertyName1);
      assertSame(propertyName1, propertyName0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(classNameIdResolver0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType1, classNameIdResolver0, "M\"9B4W^`*\"5+AIMWB.z", false, mapType1);
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(asPropertyTypeDeserializer0);
      
      Class<List> class3 = List.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertEquals(0, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = annotationMap0.get(class4);
      assertEquals(0, annotationMap0.size());
      assertNull(annotation0);
      
      Class<ClientInfoStatus> class5 = ClientInfoStatus.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class3, (Annotation) null, class5, (Annotation) null);
      assertEquals(2, annotationCollector_TwoAnnotations0.size());
      assertNotNull(annotationCollector_TwoAnnotations0);
      
      Class<String> class6 = String.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class6);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertNull(annotatedParameter0);
      assertSame(class6, class1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(330);
      assertNotNull(integer0);
      assertEquals(330, (int)integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "} <CF8mTj+}v>G", integer0, "} <CF8mTj+}v>G");
      assertEquals(330, (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertEquals(330, (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals(330, (int)propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.getRequired());
      assertNotNull(propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1491), defaultSerializerProvider_Impl0, propertyMetadata1);
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertEquals(330, (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals(330, (int)propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.getRequired());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1491), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName0.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName1.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(2, annotationCollector_TwoAnnotations0.size());
      assertNotNull(creatorProperty0);
      
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName1);
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertEquals(330, (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals(330, (int)propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.getRequired());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1491), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1491), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName0.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName1.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(2, annotationCollector_TwoAnnotations0.size());
      assertNotNull(creatorProperty1);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertSame(class1, class6);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(arrayType0, arrayType1);
      assertSame(propertyName0, propertyName1);
      assertSame(propertyName1, propertyName0);
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullKeySerializer(arrayType1, creatorProperty1);
      assertFalse(simpleType0.equals((Object)simpleType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertEquals(330, (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals("} <CF8mTj+}v>G", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertEquals(330, (int)propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.getRequired());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1491), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1491), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", creatorProperty1.getName());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isEnumType());
      assertTrue(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.useStaticType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName0.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", propertyName1.getSimpleName());
      assertEquals("} <CF8mTj+}v>G", propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("M\"9B4W^`*\"5+AIMWB.z", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(2, annotationCollector_TwoAnnotations0.size());
      assertNotNull(jsonSerializer0);
      assertSame(class1, class6);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(propertyName0, propertyName1);
      assertSame(propertyName1, propertyName0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)20;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-72), (byte)20}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNotNull(uTF8StreamJsonParser0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) jsonFactory0;
      objectArray0[4] = (Object) objectMapper1;
      objectArray0[5] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[6] = (Object) objectMapper1;
//      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(defaultSerializerProvider_Impl0);
      
      System.setCurrentTimeMillis(2098L);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLException sQLException0 = new SQLException("", "N/A", sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("N/A", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", sQLException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("N/A", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertNotNull(sQLRecoverableException1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLRecoverableException0;
      sQLRecoverableException1.addSuppressed(sQLException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("N/A", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      
      objectArray0[1] = (Object) "";
//      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLRecoverableException1, "N/A", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      assertNotNull(defaultSerializerProvider_Impl1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      // Undeclared exception!
//      try { 
        MapType.construct(class0, typeBindings0, (JavaType) null, (JavaType[]) null, (JavaType) null, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "", (-1530));
      SQLException sQLException0 = new SQLException("JSON", "JSON", 0, sQLTransientException0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "E`QV";
      objectArray0[1] = (Object) sQLTransientException0;
      objectArray0[2] = (Object) jsonFactory0;
      objectArray0[3] = (Object) deserializerFactoryConfig0;
      objectArray0[4] = (Object) sQLException0;
      objectArray0[5] = (Object) beanDeserializerFactory0;
      objectArray0[6] = (Object) jsonFactory2;
//      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLException0, "E`QV", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // E`QV
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }
}
