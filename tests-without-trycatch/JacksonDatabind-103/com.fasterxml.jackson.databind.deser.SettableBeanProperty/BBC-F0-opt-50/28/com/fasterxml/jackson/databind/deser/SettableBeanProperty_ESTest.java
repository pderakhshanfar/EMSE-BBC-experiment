/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:50:14 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.TemporalField;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NamedType> class0 = NamedType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructSimpleType(class0, javaTypeArray0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "Non-standard token '", true, javaType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(byte[].class) , anyInt() , anyInt());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-120);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeDeserializer.deserializeIfNatural(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 5560, javaType0, propertyMetadata0);
      JsonDeserializer<TemporalField> jsonDeserializer0 = (JsonDeserializer<TemporalField>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3113), propertyName0, propertyMetadata0);
      creatorProperty0.hasValueDeserializer();
      PropertyName propertyName1 = new PropertyName(",2^{gj0^sX2Y|4{kCU9", "F(");
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty1);
      // Undeclared exception!
//      try { 
        objectIdReferenceProperty0.set(",2^{gj0^sX2Y|4{kCU9", annotationMap0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-211), class0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      simpleType0.isThrowable();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty2.getWrapperName();
      creatorProperty2.getNullValueProvider();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 32, (Object) null, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1);
      List<JsonNode> list0 = arrayNode0.findParents("Deserialization of %s by passing existing Builder (%s) instance not supported");
      List<JsonNode> list1 = objectNode0.findParents("Deserialization of %s by passing existing Builder (%s) instance not supported", list0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list1);
      JsonParser jsonParser0 = arrayNode1.traverse((ObjectCodec) null);
      Long long0 = Long.getLong("Deserialization of %s by passing existing Builder (%s) instance not supported", (long) 32);
      jsonNodeFactory1.numberNode(long0);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/!|Q;b!&?", "Deserialization of %s by passing existing Builder (%s) instance not supported");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Deserialization of %s by passing existing Builder (%s) instance not supported", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(linkedHashMap0, sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLClientInfoException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(jsonParser0, sQLNonTransientException0, sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      creatorProperty1.setViews(classArray0);
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty0.withValueDeserializer(jsonDeserializer0);
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty3.getObjectIdInfo();
      creatorProperty2.withNullProvider((NullValueProvider) null);
      creatorProperty2.setFallbackSetter(creatorProperty3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3216), (Object) null, propertyMetadata0);
      creatorProperty0.hasValueDeserializer();
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "' already had index (");
//      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty0.withValueDeserializer(jsonDeserializer0);
      CreatorProperty creatorProperty3 = (CreatorProperty)creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty3.getObjectIdInfo();
      creatorProperty2.withNullProvider((NullValueProvider) null);
      creatorProperty2.setFallbackSetter(creatorProperty3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1640, (Object) null, propertyMetadata0);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.assignIndex(0);
      creatorProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-184), (Object) null, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("");
      creatorProperty0.getManagedReferenceName();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
//      try { 
        creatorProperty0._throwAsIOE(sQLTimeoutException0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1233, class0, propertyMetadata0);
      JsonDeserializer<NamedType> jsonDeserializer0 = (JsonDeserializer<NamedType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "vYMA");
//      try { 
        creatorProperty2._throwAsIOE((JsonParser) null, unresolvedForwardReference0, "vYMA");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1523, propertyName0, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "@owoA;@lL_", "$rqD^m&#FW@p[");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) annotationMap0, (-912));
      Object object0 = new Object();
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, jsonMappingException1, object0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '@owoA;@lL_' as a subtype of null: $rqD^m&#FW@p[ (through reference chain: com.fasterxml.jackson.databind.introspect.AnnotationMap[?])
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, propertyName0, propertyMetadata0);
      creatorProperty0.hasValueDeserializer();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 737, (Object) null, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata0);
      JsonDeserializer<ChronoLocalDate> jsonDeserializer0 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setManagedReferenceName("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer");
      creatorProperty1.getValueDeserializer();
      creatorProperty1.getManagedReferenceName();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      PropertyName.construct("<zMf@", "<zMf@");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonLocation jsonLocation0 = jsonParserDelegate0.getCurrentLocation();
      ReadableObjectId readableObjectId0 = new ReadableObjectId((ObjectIdGenerator.IdKey) null);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "GETTER", jsonLocation0, readableObjectId0);
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, unresolvedForwardReference0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1940, (Object) null, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, arrayNode0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(255);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1931, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-1), 136, false);
      String string0 = "L-D)";
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIllegalArgumentException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyName.construct("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      objectIdInfo0.toString();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<SettableBeanProperty.Delegating> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty.Delegating>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<JsonParserDelegate>[] classArray0 = (Class<JsonParserDelegate>[]) Array.newInstance(Class.class, 6);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      classArray0[0] = class0;
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      classArray0[1] = class1;
      Class<JsonParserDelegate> class2 = JsonParserDelegate.class;
      classArray0[2] = class2;
      Class<JsonParserDelegate> class3 = JsonParserDelegate.class;
      classArray0[3] = class3;
      Class<JsonParserDelegate> class4 = JsonParserDelegate.class;
      classArray0[4] = class4;
      Class<JsonParserDelegate> class5 = JsonParserDelegate.class;
      classArray0[5] = class5;
      creatorProperty1.setViews(classArray0);
      Class<InputStream> class6 = InputStream.class;
      creatorProperty1.visibleInView(class6);
      objectIdReferenceProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<SettableBeanProperty.Delegating> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty.Delegating>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<JsonParserDelegate>[] classArray0 = (Class<JsonParserDelegate>[]) Array.newInstance(Class.class, 6);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      classArray0[0] = class0;
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      classArray0[1] = class1;
      Class<JsonParserDelegate> class2 = JsonParserDelegate.class;
      classArray0[2] = class2;
      Class<JsonParserDelegate> class3 = JsonParserDelegate.class;
      classArray0[3] = class3;
      Class<JsonParserDelegate> class4 = JsonParserDelegate.class;
      classArray0[4] = class4;
      Class<JsonParserDelegate> class5 = JsonParserDelegate.class;
      classArray0[5] = class5;
      creatorProperty1.setViews(classArray0);
      Class<InputStream> class6 = InputStream.class;
      creatorProperty1.visibleInView(class6);
      objectIdReferenceProperty0.isIgnorable();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 137, (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1._fallbackSetter;
      creatorProperty0.getObjectIdInfo();
      creatorProperty0.withName((PropertyName) null);
      creatorProperty1.getWrapperName();
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "ALWAYS_NULL");
      PropertyName propertyName0 = new PropertyName("ALWAYS_NULL");
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionLikeType0, (TypeIdResolver) null, "%%ohGdUrAh&n", false, collectionLikeType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, simpleType0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, (TypeResolutionContext) null, annotationMap0, (byte)79);
      simpleType0.getInterfaces();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-662), simpleType0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.getType();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      creatorProperty2.findInjectableValue(defaultDeserializationContext_Impl0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-43);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIOException0, jsonFactory2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      creatorProperty0.toString();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty0.getCreatorIndex();
//      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      boolean boolean0 = true;
      String string0 = "Internal error: no creator index for property '%s' (of type %s)";
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, string0, boolean0, javaType0);
      Annotations annotations0 = null;
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      int int0 = (-1024);
      propertyName0.internSimpleName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asPropertyTypeDeserializer0, annotations0, annotatedParameter0, int0, propertyMetadata0, propertyMetadata0);
      Class<PropertyName>[] classArray0 = (Class<PropertyName>[]) Array.newInstance(Class.class, 9);
      Class<PropertyName> class0 = PropertyName.class;
      classArray0[0] = class0;
      Class<PropertyName> class1 = PropertyName.class;
      classArray0[1] = class1;
      Class<PropertyName> class2 = PropertyName.class;
      classArray0[2] = class2;
      Class<PropertyName> class3 = PropertyName.class;
      classArray0[3] = class3;
      Class<PropertyName> class4 = PropertyName.class;
      classArray0[4] = class4;
      Class<PropertyName> class5 = PropertyName.class;
      classArray0[5] = class5;
      Class<PropertyName> class6 = PropertyName.class;
      classArray0[6] = class6;
      Class<PropertyName> class7 = PropertyName.class;
      classArray0[4] = class7;
      Class<PropertyName> class8 = PropertyName.class;
      classArray0[8] = class8;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.hasViews();
      creatorProperty0.withName(propertyName0);
      String string1 = "";
      int int1 = 435;
//      try { 
        MockURL.URL(string0, string1, int1, string1);
//        fail("Expecting exception: MalformedURLException");
      
//      } catch(MalformedURLException e) {
//         //
//         // unknown protocol: internal error: no creator index for property '%s' (of type %s)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-909), (Object) null, propertyMetadata0);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.getObjectIdInfo();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getContextAnnotation(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName.construct("", "");
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyName propertyName1 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), "3X-{#Oy-3,8MX/6L[P", propertyMetadata2);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      propertyName1.toString();
      objectIdInfo0.withAlwaysAsId(false);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      creatorProperty0.withSimpleName("TOn[Lm681J`X(");
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      objectIdReferenceProperty1.toString();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1014, (Object) null, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.markAsIgnorable();
      creatorProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), annotationMap0, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader(50);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'R';
      booleanNode0.findValues("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 62, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("f$@%oKM");
      sQLTransactionRollbackException0.printStackTrace();
      MockIOException mockIOException0 = new MockIOException("[Source: ", sQLTransactionRollbackException0);
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIOException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, "(%oNodcp+qy+4oy ", propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(mockIllegalArgumentException0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.IllegalArgumentException.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty3.deserializeWith(jsonParser0, deserializationContext0, (Object) null);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, "(%oNodcp+qy+4oy ", propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("(%oNodcp+qy+4oy ");
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(mockIllegalArgumentException0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.IllegalArgumentException.class));
      doReturn(mockIllegalArgumentException0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1014, jsonGenerator_Feature0, propertyMetadata0);
      creatorProperty2.deserializeWith(jsonParser0, deserializationContext0, creatorProperty3);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(jsonDeserializer1).toString();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, jsonDeserializer1, jsonDeserializer1);
      creatorProperty4.getValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, "(%oNodcp+qy+4oy ", propertyMetadata0);
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.IllegalArgumentException.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      CreatorProperty creatorProperty3 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1014, jsonGenerator_Feature0, propertyMetadata0);
      creatorProperty2.deserializeWith(jsonParser0, deserializationContext0, creatorProperty3);
      JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer1).toString();
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, jsonDeserializer1, jsonDeserializer1);
      creatorProperty4.getValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName.construct("", "");
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "TOn[Lm681J`X(", integer0, "ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyName propertyName1 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), "3X-{#Oy-3,8MX/6L[P", propertyMetadata2);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      Class<UTF8DataInputJsonParser>[] classArray0 = (Class<UTF8DataInputJsonParser>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class0;
      creatorProperty0.setViews(classArray0);
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      creatorProperty0.withSimpleName("TOn[Lm681J`X(");
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      objectIdReferenceProperty0.hasValueDeserializer();
      settableBeanProperty0.hasViews();
//      try { 
        settableBeanProperty0.set(class1, objectIdReferenceProperty1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '3X-{#Oy-3,8MX/6L[P'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      propertyName0.withSimpleName("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex((-3093));
      // Undeclared exception!
//      try { 
        creatorProperty0.assignIndex((-3093));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Property '' already had index (-3093), trying to assign -3093
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), beanDeserializerFactory0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Class<SettableBeanProperty.Delegating> class0 = SettableBeanProperty.Delegating.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
//      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating` from String \"\": 
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      int int0 = (-3093);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex((-3093));
      NullValueProvider nullValueProvider0 = null;
      creatorProperty0.withNullProvider((NullValueProvider) null);
      BufferRecycler bufferRecycler0 = null;
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.core.json.UTF8DataInputJsonParser with 2 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 59, object0, propertyMetadata0);
      JsonDeserializer<BooleanNode> jsonDeserializer0 = (JsonDeserializer<BooleanNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.getValueDeserializer();
      creatorProperty1.withSimpleName("|O@Zm}%w<O>*9G6,8l");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName1 = propertyName0.withSimpleName("");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      classNameIdResolver0.idFromValueAndType(propertyName1, class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 679, typeFactory0, propertyMetadata0);
      creatorProperty0.assignIndex(679);
      MockIOException mockIOException0 = new MockIOException((String) null);
//      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 7, (Object) null, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.traverse((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.invalidTypeIdException((JavaType) null, "", "");
      Integer integer0 = new Integer(2192);
//      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, integer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '' as a subtype of null: 
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), beanDeserializerFactory0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-3093));
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerators_IntSequenceGenerator0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Integer integer0 = new Integer(0);
      arrayNode0.insert((-3093), integer0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl1);
      creatorProperty1.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "hjD", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 33, classNameIdResolver0, propertyMetadata0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) sequenceInputStream0);
      JsonFactory jsonFactory1 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      creatorProperty1.deserialize(jsonParser0, deserializationContext0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), beanDeserializerFactory0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Integer integer0 = new Integer(0);
      arrayNode0.insert((-3093), integer0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl1);
      creatorProperty0.isIgnorable();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), beanDeserializerFactory0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayNode0.spliterator();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      creatorProperty0.assignIndex(0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.wrongTokenException(jsonParser0, class0, jsonToken0, "94]lJy58m;MgP-g");
//      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, jsonToken0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_TRUE: 94]lJy58m;MgP-g
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3072), defaultDeserializationContext_Impl0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "3j\"D", false, (JavaType) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, typeFactory0, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1034, iOContext0, (PropertyMetadata) null);
      JsonDeserializer<FilterInputStream> jsonDeserializer0 = (JsonDeserializer<FilterInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "3j\"D", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("3j\"D");
      sQLTransactionRollbackException0.spliterator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 446, classNameIdResolver0, propertyMetadata0);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, typeFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), beanDeserializerFactory0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '-';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
//      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-829), (Object) null, propertyMetadata0);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      ClassNameIdResolver classNameIdResolver1 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver1, "Cannot merge polymorphic property '%s'", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = new PropertyName("3j\"D");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, (JavaType) null, propertyName1, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, (JavaType) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Std1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-558), asPropertyTypeDeserializer0, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-558), pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, "", propertyMetadata0);
      JsonDeserializer<List<PropertyName>> jsonDeserializer0 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      creatorProperty1.withNullProvider(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "3j\"D", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-558), (Object) null, propertyMetadata0);
      creatorProperty0.hasValueDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "3j\"D", true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      HashSet<Module> hashSet0 = new HashSet<Module>(2);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) hashSet0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(679);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper2, charsToNameCanonicalizer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      creatorProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext_Impl1);
      creatorProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      int int0 = (-3093);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), beanDeserializerFactory0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      SerializedString serializedString0 = new SerializedString("");
      RawValue rawValue0 = new RawValue(serializedString0);
      jsonNodeFactory0.rawValueNode(rawValue0);
      creatorProperty0.withName(propertyName0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 331, propertyName0, propertyMetadata0);
      creatorProperty0.hasViews();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLException sQLException0 = new SQLException("", "", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE(jsonParserDelegate0, sQLException0, classNameIdResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "}a0\"gD", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2818, propertyMetadata0, propertyMetadata0);
      asPropertyTypeDeserializer0.forProperty(creatorProperty0);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      propertyName0.withSimpleName("!ckEa]T}Q];I");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2805, asPropertyTypeDeserializer0, propertyMetadata0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("-e", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLTransactionRollbackException0, typeFactory0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 679, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(679);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.withNullProvider((NullValueProvider) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.getValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 679, propertyMetadata0, propertyMetadata0);
      creatorProperty0.assignIndex(679);
      creatorProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "W", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findWrapperName((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.getValueDeserializer();
      creatorProperty1.hasValueDeserializer();
      creatorProperty2.withSimpleName("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("");
      Integer integer1 = new Integer((-2127));
      propertyMetadata1.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      creatorProperty0.getObjectIdInfo();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3, "", propertyMetadata0);
      creatorProperty0.assignIndex(845);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      settableBeanProperty0.withValueDeserializer(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      propertyName0.withSimpleName("?ZP+hTo.W6`V!");
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("?ZP+hTo.W6`V!").when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      creatorProperty1.hasValueDeserializer();
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("Internal error: no creator index for property '%s' (of type %s)");
      settableBeanProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1, deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "JSON", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, "", propertyMetadata1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata1);
      creatorProperty0.assignIndex(1034);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      typeFactory0.constructMapLikeType(class0, (JavaType) null, (JavaType) null);
      creatorProperty1.markAsIgnorable();
      creatorProperty0.hasViews();
      // Undeclared exception!
//      try { 
        creatorProperty0.assignIndex(1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Property '' already had index (1034), trying to assign 1
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(1034);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.hasViews();
      // Undeclared exception!
//      try { 
        creatorProperty0.assignIndex(1034);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Property '' already had index (1034), trying to assign 1034
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, asPropertyTypeDeserializer0, propertyMetadata0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      MockIOException mockIOException0 = new MockIOException("", sQLTransactionRollbackException0);
//      try { 
        creatorProperty0._throwAsIOE(mockIOException0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.getValueTypeDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      creatorProperty0.withName((PropertyName) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory3.createParser("?/");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = null;
//      try {
        defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, (DeserializationConfig) null, jsonParser0, (InjectableValues) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "EUP}", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, deserializerFactory0, propertyMetadata0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeWith((JsonParser) null, defaultDeserializationContext_Impl2, typeFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1001, "", propertyMetadata0);
      creatorProperty0.assignIndex(224);
      creatorProperty0.getPropertyIndex();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      propertyName0.withSimpleName("?ZP+hTo.W6`V!");
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      creatorProperty1.hasValueDeserializer();
      creatorProperty1.withSimpleName("Internal error: no creator index for property '%s' (of type %s)");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, object0, propertyMetadata1);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.getObjectIdInfo();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "H", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo.empty();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 65599, object0, propertyMetadata0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1039, propertyName0, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("");
//      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing property '' (expected type: null; actual type: [null]), problem: 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "i", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-4364), classNameIdResolver0, propertyMetadata0);
      creatorProperty0.hasViews();
      JsonDeserializer<JsonToken> jsonDeserializer0 = (JsonDeserializer<JsonToken>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      objectIdReferenceProperty0.setManagedReferenceName("i");
      objectIdReferenceProperty0.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, "", propertyMetadata0);
      ObjectIdInfo.empty();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
//      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing property '' (expected type: null; actual type: [null]) (no error message provided)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), propertyName0, propertyMetadata0);
      creatorProperty0.assignIndex((-1));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      JsonParser jsonParser0 = jsonFactory1.createParser("' (expected type: ");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory0.enable(jsonGenerator_Feature0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "' (expected type: ", hashMap0);
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, sQLClientInfoException0, "JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 
//         //  at [Source: (String)\"' (expected type: \"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1001, propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, (ObjectIdInfo) null);
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, propertyName0);
      objectIdReferenceProperty2.hasValueTypeDeserializer();
      creatorProperty1.setFallbackSetter(objectIdReferenceProperty2);
      creatorProperty1.getMember();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      int int0 = 1034;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = propertyName0.withSimpleName("kFB!");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-609), (Object) null, propertyMetadata0);
      creatorProperty0.getWrapperName();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "ov}tH6m;mQ\"", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 83, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getWrapperName();
//      try { 
        creatorProperty0.set((Object) null, typeFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), propertyName0, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      settableBeanProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-3093), beanDeserializerFactory0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3578, classNameIdResolver0, propertyMetadata0);
      creatorProperty1.hasViews();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonParser_Feature0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = '$';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = 'd';
      charArray0[5] = 'j';
      charArray0[6] = '{';
      charArray0[7] = '|';
      charArray0[8] = 'M';
      JsonParser jsonParser0 = jsonFactory4.createParser(charArray0, 1034, Integer.MIN_VALUE);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl2.with(beanDeserializerFactory0);
//      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext0, asPropertyTypeDeserializer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot merge polymorphic property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature1);
      JsonParser jsonParser0 = jsonFactory3.createParser((char[]) null, 1034, 0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
//      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot merge polymorphic property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      creatorProperty0.getWrapperName();
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      creatorProperty0.getWrapperName();
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-20));
      Integer integer1 = new Integer((-20));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "WVVNHa 6v", integer1, "");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-20), propertyMetadata0, propertyMetadata1);
      propertyMetadata0.withIndex(integer1);
      creatorProperty0.hasViews();
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.withValueDeserializer((JsonDeserializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), propertyName0, propertyMetadata0);
      creatorProperty0.withSimpleName("");
      creatorProperty0.getValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      ClassNameIdResolver classNameIdResolver1 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<HashMap> class0 = HashMap.class;
      Class<FilterInputStream> class1 = FilterInputStream.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withTypeHandler(classNameIdResolver0);
      MapType mapType2 = mapType1.withStaticTyping();
      MapType mapType3 = mapType2.withValueHandler(class1);
      JavaType javaType0 = typeFactory0.constructSpecializedType(mapType1, class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType3, classNameIdResolver0, "", false, javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType2, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), mapType2, propertyMetadata1);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata1 = beanProperty_Bogus0.getMetadata();
      propertyMetadata1.withDefaultValue("E!=6^v4$\"o.=]Ri9tn/");
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-615), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<Module> class0 = Module.class;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.setViews((Class<?>[]) null);
      creatorProperty1.visibleInView(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "Cannot merge polymorphic property '%s'", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, "Cannot merge polymorphic property '%s'", propertyMetadata0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, typeFactory0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 16384, (InputStream) null, objectReader0, byteQuadsCanonicalizer1, (byte[]) null, 1423, 1114111, true);
      creatorProperty0._throwAsIOE(sQLClientInfoException0, uTF8StreamJsonParser0);
      creatorProperty0.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 679, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(679);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean.valueOf("");
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      Integer integer3 = new Integer((-2127));
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata1.withDefaultValue("");
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), classNameIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 1);
      Class<Module> class0 = Module.class;
      creatorProperty1.setViews(classArray0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      // Undeclared exception!
//      try { 
        creatorProperty1.visibleInView(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ViewMatcher$Single", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      Boolean boolean0 = new Boolean(true);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "WVVNHa@6v", integer1, "");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata1);
      creatorProperty0.assignIndex(4);
      creatorProperty0.hasViews();
      creatorProperty0.withSimpleName("|XUuKGY");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      Boolean boolean0 = new Boolean(true);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "WVVNHa 6v", integer1, "");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata1);
      creatorProperty0.assignIndex((-1));
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((Exception) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean.valueOf("");
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      Integer integer3 = new Integer((-2127));
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata1.withDefaultValue("");
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), classNameIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 1);
      Class<Module> class0 = Module.class;
      classArray0[0] = class0;
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.visibleInView(class0);
      JsonDeserializer<InputStream> jsonDeserializer1 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-1));
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      configOverrides0.getDefaultMergeable();
      PropertyMetadata.construct((Boolean) null, ", problem: ", integer1, ")");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), mockIllegalArgumentException0, propertyMetadata1);
      propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.assignIndex((-1));
      creatorProperty0.getName();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "Internal error: no creator index for property '%s' (of type %s)", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyName0.internSimpleName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1024), propertyMetadata0, propertyMetadata0);
      Class<PropertyName>[] classArray0 = (Class<PropertyName>[]) Array.newInstance(Class.class, 9);
      Class<PropertyName> class0 = PropertyName.class;
      classArray0[0] = class0;
      Class<PropertyName> class1 = PropertyName.class;
      classArray0[1] = class1;
      Class<PropertyName> class2 = PropertyName.class;
      classArray0[2] = class2;
      Class<PropertyName> class3 = PropertyName.class;
      classArray0[3] = class3;
      Class<PropertyName> class4 = PropertyName.class;
      classArray0[4] = class4;
      Class<PropertyName> class5 = PropertyName.class;
      classArray0[5] = class5;
      Class<PropertyName> class6 = PropertyName.class;
      classArray0[6] = class6;
      Class<PropertyName> class7 = PropertyName.class;
      classArray0[7] = class7;
      Class<PropertyName> class8 = PropertyName.class;
      classArray0[8] = class8;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.hasViews();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName.construct("", "");
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "TOn[Lm681J`X(", integer0, "ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyName propertyName1 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), "3X-{#Oy-3,8MX/6L[P", propertyMetadata2);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      creatorProperty0.withSimpleName("TOn[Lm681J`X(");
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      objectIdReferenceProperty0.hasValueDeserializer();
      settableBeanProperty0.hasViews();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      classNameIdResolver0.idFromValueAndType(typeFactory0, class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "WVVNHa 6v", integer1, "");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, propertyMetadata0, propertyMetadata1);
      creatorProperty0.hasViews();
      creatorProperty0.withSimpleName("\"U");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "TOn[Lm681J`X(", integer0, "");
      propertyMetadata0.withDefaultValue("TOn[Lm681J`X(");
      Integer integer1 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      PropertyName.construct("TOn[Lm681J`X(", ", problem: ");
      creatorProperty0.getCreatorIndex();
      creatorProperty0.hasValueDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext0, integer0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata1.withDefaultValue("");
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), classNameIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 1);
      Class<Module> class0 = Module.class;
      classArray0[0] = class0;
      creatorProperty0.setViews(classArray0);
      creatorProperty0.visibleInView(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1));
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.hasAsValue((Annotated) null);
      Integer integer1 = new Integer(1362);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "']", integer1, "FEd'^!Uz5O^");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("TOn[Lm681J`X(");
      Integer integer2 = new Integer(1835);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-43), (Object) null, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.hasValueDeserializer();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class0, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      objectIdReferenceProperty1.hasValueTypeDeserializer();
      settableBeanProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      ClassNameIdResolver classNameIdResolver1 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver1, "com.fasterxml.jackson.databind.deser.BeanDeserializer", true, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-1678));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) null);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), jsonParserSequence0, propertyMetadata0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      creatorProperty0.withSimpleName("Fhxvxp");
      objectIdReferenceProperty1.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty1.setObjectIdInfo(objectIdInfo0);
      creatorProperty0.setManagedReferenceName("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName propertyName1 = PropertyName.construct("", "");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      classNameIdResolver0.idFromValueAndType((Object) null, class0);
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "TOn[Lm681J`X(", integer0, "ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", integer0, "l#)o:&;^ycqI@Z6E");
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withIndex(integer0);
      PropertyMetadata propertyMetadata4 = propertyMetadata3.withDefaultValue("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      propertyMetadata4.withDefaultValue("\"y5?;Em5b?O,_U");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2789, propertyMetadata1, propertyMetadata3);
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2118));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      Integer integer1 = new Integer((-2118));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.hasValueDeserializer();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      jsonObjectFormatVisitor_Base0.setProvider((SerializerProvider) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl1);
      creatorProperty0.getNullValueProvider();
      creatorProperty0.setManagedReferenceName((String) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.assignIndex(0);
      creatorProperty0.getPropertyIndex();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      Integer integer1 = new Integer((-2127));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.hasValueDeserializer();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      Boolean boolean1 = Boolean.TRUE;
      PropertyMetadata.construct(boolean1, "com.fasterxml.jackson.databind.deser.SettableBeanProperty", integer0, "TOn[Lm681J`X(");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      propertyMetadata0.withDefaultValue("com.fasterxml.jackson.databind.deser.SettableBeanProperty");
      Integer integer1 = new Integer((-2421));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2421), integer1, propertyMetadata0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "hU+[i9jRi+bT#DE", integer0, "com.fasterxml.jackson.core.util.RequestPayload");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), integer0, propertyMetadata1);
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      propertyName1.withSimpleName("");
      creatorProperty1.setObjectIdInfo(objectIdInfo0);
//      try { 
        creatorProperty0.set(asPropertyTypeDeserializer0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName.construct("", "");
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "TOn[Lm681J`X(", integer0, "ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyName propertyName1 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), "3X-{#Oy-3,8MX/6L[P", propertyMetadata2);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      creatorProperty0.withSimpleName("TOn[Lm681J`X(");
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      creatorProperty0.getName();
      creatorProperty0.getPropertyIndex();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "9f", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName propertyName1 = PropertyName.construct("9f", "9f");
      Integer integer0 = new Integer(1692);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "ALLOW_FINAL_FIELDS_AS_MUTATORS", integer0, "[property '");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata0.withDescription("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      PropertyName propertyName2 = propertyName1.withSimpleName("9f");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), (Object) null, propertyMetadata1);
      Class<String> class0 = String.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName2, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, propertyName2);
      creatorProperty0.withSimpleName("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      propertyName0.internSimpleName();
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      objectIdReferenceProperty1.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = new PropertyName("", "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      creatorProperty1.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      MockFile.createTempFile("Cannot merge polymorphic property '%s'", "", (File) null);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, (ObjectIdInfo) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.setFallbackSetter(objectIdReferenceProperty0);
      objectIdReferenceProperty0.getMember();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      Class<Integer> class0 = Integer.class;
      boolean boolean1 = creatorProperty0.visibleInView(class0);
      assertTrue(boolean1);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      
      Class<Module> class1 = Module.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class2, class3);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.markAsIgnorable();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty1);
      creatorProperty0.isIgnorable();
      creatorProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName propertyName1 = PropertyName.construct("", "");
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyName propertyName2 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName2, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), "3X-{#Oy-3,8MX/6L[P", propertyMetadata2);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName2, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      propertyName2.toString();
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      objectIdReferenceProperty0.hasValueTypeDeserializer();
//      try { 
        objectIdReferenceProperty1.set("5Hs#ZTu4%~KHf@", propertyName1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '3X-{#Oy-3,8MX/6L[P'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName.construct("", "");
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyName propertyName1 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), "3X-{#Oy-3,8MX/6L[P", propertyMetadata2);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      propertyName1.toString();
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      creatorProperty0.withSimpleName("TOn[Lm681J`X(");
      objectIdReferenceProperty0.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata0.withDescription("");
      propertyMetadata0.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      Class<Integer> class0 = Integer.class;
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getManagedReferenceName();
      creatorProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      creatorProperty1.getAnnotation(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLTransactionRollbackException0);
      File file0 = MockFile.createTempFile("Cannot merge polymorphic property '%s'", "", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
//      try { 
        creatorProperty1._throwAsIOE(sQLFeatureNotSupportedException0, mockFileInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata1.withRequired((Boolean) null);
      Integer integer1 = new Integer((-2127));
      propertyMetadata1.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.isIgnorable();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      PropertyName.construct("", "");
      Integer integer0 = new Integer((-2976));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "TOn[Lm681J`X(", integer0, "ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      PropertyName propertyName1 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), (Object) null, propertyMetadata2);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      creatorProperty0.visibleInView(class0);
      creatorProperty0.assignIndex(0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
//      try { 
        creatorProperty0.setAndReturn(propertyMetadata1, booleanNode0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '3X-{#Oy-3,8MX/6L[P'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      Class<Integer> class0 = Integer.class;
      creatorProperty0.visibleInView(class0);
      creatorProperty0.withName(propertyName0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
//      try { 
        creatorProperty0.inject(defaultDeserializationContext0, "TOn[Lm681J`X(");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty1.setObjectIdInfo(objectIdInfo0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2127);
      intArray0[1] = (-2127);
      intArray0[2] = (-2127);
      intArray0[3] = (-2127);
      intArray0[4] = (-2127);
      intArray0[5] = (-2127);
      intArray0[6] = (-2127);
      intArray0[7] = (-2127);
      SQLException sQLException0 = new SQLException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLException0);
//      try { 
        creatorProperty1._throwAsIOE((JsonParser) null, batchUpdateException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("TOn[Lm681J`X(");
      Integer integer1 = new Integer((-2127));
      propertyMetadata1.withIndex(integer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3034, propertyMetadata1, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.setFallbackSetter(creatorProperty0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      creatorProperty0.visibleInView(class0);
      // Undeclared exception!
//      try { 
        creatorProperty0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      Class<Integer> class0 = Integer.class;
      creatorProperty0.visibleInView(class0);
      Class<Module> class1 = Module.class;
      Integer integer1 = new Integer((-591));
      propertyMetadata1.withIndex(integer1);
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class2, class3);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("TOn[Lm681J`X(");
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(byte[].class) , anyInt() , anyInt());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-1);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext0, "");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2981));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2981), asPropertyTypeDeserializer0, propertyMetadata0);
      Class<Integer> class0 = Integer.TYPE;
      creatorProperty0.visibleInView(class0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-1);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext0, "");
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2976));
      Boolean boolean1 = new Boolean("TOn[Lm681J`X(");
      Integer integer1 = new Integer(36);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean1, "@>*>HQqok*h1~", integer1, "");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      Integer integer2 = new Integer(36);
      propertyMetadata0.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 56, integer2, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      creatorProperty0.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata1.withDefaultValue("");
      propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      Class<Integer> class0 = Integer.class;
      creatorProperty0.visibleInView(class0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
//      try { 
        creatorProperty0.getContextAnnotation(class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      propertyMetadata0.withDescription("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      Class<Integer> class0 = Integer.class;
      creatorProperty0.visibleInView(class0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      Integer integer1 = new Integer((-2127));
      propertyMetadata1.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.getCreatorIndex();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      Class<SettableBeanProperty.Delegating> class0 = SettableBeanProperty.Delegating.class;
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1034, propertyName0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class0, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      settableBeanProperty0._managedReferenceName = "";
      objectIdReferenceProperty1.hasValueTypeDeserializer();
      settableBeanProperty0.toString();
      creatorProperty0.getValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      PropertyMetadata propertyMetadata2 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.getValueTypeDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      JsonParser jsonParser0 = jsonFactory2.createParser((InputStream) sequenceInputStream1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", (Throwable) null);
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyName.construct("", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("");
      Integer integer1 = new Integer((-2127));
      Integer integer2 = new Integer((-2127));
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), typeFactory0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty1.setObjectIdInfo(objectIdInfo0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      creatorProperty1.withNullProvider(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertNotNull(propertyName0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertNotNull(classNameIdResolver0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      PropertyName propertyName1 = PropertyName.construct("", "");
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertNotSame(propertyName1, propertyName0);
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("", propertyName1.getSimpleName());
      assertEquals("", propertyName1.getNamespace());
      assertNotNull(propertyName1);
      
      Integer integer0 = new Integer((-2976));
      assertEquals((-2976), (int)integer0);
      assertNotNull(integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "TOn[Lm681J`X(", integer0, "ALLOW_FINAL_FIELDS_AS_MUTATORS");
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("TOn[Lm681J`X(", propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNotNull(propertyMetadata1);
      
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription("ALLOW_FINAL_FIELDS_AS_MUTATORS");
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("TOn[Lm681J`X(", propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.getRequired());
      assertEquals((-2976), (int)propertyMetadata2.getIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata2.getDescription());
      assertNotNull(propertyMetadata2);
      
      PropertyName propertyName2 = propertyName0.withSimpleName("3X-{#Oy-3,8MX/6L[P");
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName0));
      assertNotSame(propertyName0, propertyName2);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName2, propertyName1);
      assertNotSame(propertyName2, propertyName0);
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName2.hasNamespace());
      assertEquals("3X-{#Oy-3,8MX/6L[P", propertyName2.getSimpleName());
      assertNull(propertyName2.getNamespace());
      assertTrue(propertyName2.hasSimpleName());
      assertFalse(propertyName2.isEmpty());
      assertNotNull(propertyName2);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName2, (JavaType) null, propertyName2, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2127), (Object) null, propertyMetadata2);
      assertFalse(propertyName0.equals((Object)propertyName2));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyName2.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName0));
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("TOn[Lm681J`X(", propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.getRequired());
      assertEquals((-2976), (int)propertyMetadata2.getIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata2.getDescription());
      assertFalse(propertyName2.hasNamespace());
      assertEquals("3X-{#Oy-3,8MX/6L[P", propertyName2.getSimpleName());
      assertNull(propertyName2.getNamespace());
      assertTrue(propertyName2.hasSimpleName());
      assertFalse(propertyName2.isEmpty());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("3X-{#Oy-3,8MX/6L[P", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2127), creatorProperty0.getCreatorIndex());
      assertNotNull(creatorProperty0);
      
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName2, class0, class1, class2);
      assertFalse(propertyName0.equals((Object)propertyName2));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName0));
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName2.hasNamespace());
      assertEquals("3X-{#Oy-3,8MX/6L[P", propertyName2.getSimpleName());
      assertNull(propertyName2.getNamespace());
      assertTrue(propertyName2.hasSimpleName());
      assertFalse(propertyName2.isEmpty());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(objectIdInfo0);
      
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      assertFalse(propertyName0.equals((Object)propertyName2));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyName2.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName0));
      assertTrue(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertEquals("3X-{#Oy-3,8MX/6L[P", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("TOn[Lm681J`X(", propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.getRequired());
      assertEquals((-2976), (int)propertyMetadata2.getIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata2.getDescription());
      assertFalse(propertyName2.hasNamespace());
      assertEquals("3X-{#Oy-3,8MX/6L[P", propertyName2.getSimpleName());
      assertNull(propertyName2.getNamespace());
      assertTrue(propertyName2.hasSimpleName());
      assertFalse(propertyName2.isEmpty());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("3X-{#Oy-3,8MX/6L[P", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2127), creatorProperty0.getCreatorIndex());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(objectIdReferenceProperty0);
      
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, propertyName0);
      assertFalse(propertyName0.equals((Object)propertyName2));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyName2.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName0));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      assertTrue(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertEquals("3X-{#Oy-3,8MX/6L[P", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(objectIdReferenceProperty1.isRequired());
      assertEquals("", objectIdReferenceProperty1.getName());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertFalse(objectIdReferenceProperty1.hasValueDeserializer());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("TOn[Lm681J`X(", propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.getRequired());
      assertEquals((-2976), (int)propertyMetadata2.getIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata2.getDescription());
      assertFalse(propertyName2.hasNamespace());
      assertEquals("3X-{#Oy-3,8MX/6L[P", propertyName2.getSimpleName());
      assertNull(propertyName2.getNamespace());
      assertTrue(propertyName2.hasSimpleName());
      assertFalse(propertyName2.isEmpty());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("3X-{#Oy-3,8MX/6L[P", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2127), creatorProperty0.getCreatorIndex());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(objectIdReferenceProperty1);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("TOn[Lm681J`X(");
      assertFalse(propertyName0.equals((Object)propertyName2));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyName2.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName0));
      assertNotSame(propertyName0, propertyName2);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertNotSame(propertyName2, propertyName1);
      assertNotSame(propertyName2, propertyName0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-2127), settableBeanProperty0.getCreatorIndex());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("TOn[Lm681J`X(", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.hasViews());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("TOn[Lm681J`X(", propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.getRequired());
      assertEquals((-2976), (int)propertyMetadata2.getIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata2.getDescription());
      assertFalse(propertyName2.hasNamespace());
      assertEquals("3X-{#Oy-3,8MX/6L[P", propertyName2.getSimpleName());
      assertNull(propertyName2.getNamespace());
      assertTrue(propertyName2.hasSimpleName());
      assertFalse(propertyName2.isEmpty());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("3X-{#Oy-3,8MX/6L[P", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2127), creatorProperty0.getCreatorIndex());
      assertNotNull(settableBeanProperty0);
      
      boolean boolean1 = objectIdReferenceProperty0.hasValueTypeDeserializer();
      assertFalse(propertyName0.equals((Object)propertyName2));
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyName2.equals((Object)propertyName1));
      assertFalse(propertyName2.equals((Object)propertyName0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(objectIdReferenceProperty0.equals((Object)objectIdReferenceProperty1));
      assertNotSame(propertyName0, propertyName2);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertNotSame(propertyName2, propertyName1);
      assertNotSame(propertyName2, propertyName0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(objectIdReferenceProperty0, objectIdReferenceProperty1);
      assertTrue(boolean1);
      assertTrue(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertEquals("3X-{#Oy-3,8MX/6L[P", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata0.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertEquals((-2976), (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("TOn[Lm681J`X(", propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.getRequired());
      assertEquals((-2976), (int)propertyMetadata2.getIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertEquals("ALLOW_FINAL_FIELDS_AS_MUTATORS", propertyMetadata2.getDescription());
      assertFalse(propertyName2.hasNamespace());
      assertEquals("3X-{#Oy-3,8MX/6L[P", propertyName2.getSimpleName());
      assertNull(propertyName2.getNamespace());
      assertTrue(propertyName2.hasSimpleName());
      assertFalse(propertyName2.isEmpty());
      assertFalse(creatorProperty0.hasViews());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("3X-{#Oy-3,8MX/6L[P", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2127), creatorProperty0.getCreatorIndex());
      assertFalse(objectIdInfo0.getAlwaysAsId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertNotNull(propertyName0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      AnnotatedParameter annotatedParameter0 = null;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "WVVNHa 6v", integer1, "");
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(2, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals("WVVNHa 6v", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("$C");
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(2, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals("WVVNHa 6v", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertEquals("$C", propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals(2, (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("WVVNHa 6v", propertyMetadata1.getDescription());
      assertNotNull(propertyMetadata1);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(2, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals("WVVNHa 6v", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertEquals("$C", propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals(2, (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("WVVNHa 6v", propertyMetadata1.getDescription());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(2, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNotNull(creatorProperty0);
      
      creatorProperty0.assignIndex((-2138));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(2, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals("WVVNHa 6v", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertEquals("$C", propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals(2, (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("WVVNHa 6v", propertyMetadata1.getDescription());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-2138), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(2, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals(2, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals("WVVNHa 6v", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertEquals("$C", propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals(2, (int)propertyMetadata1.getIndex());
      assertTrue(propertyMetadata1.hasIndex());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertEquals("WVVNHa 6v", propertyMetadata1.getDescription());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-2138), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(2, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertTrue(creatorProperty1.isRequired());
      assertEquals(2, creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-2138), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertNotNull(creatorProperty1);
      
      // Undeclared exception!
//      try { 
        creatorProperty1._throwAsIOE((Exception) null, "$C");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertNotNull(propertyName0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer((-2127));
      assertEquals((-2127), (int)integer0);
      assertNotNull(integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertNotNull(propertyMetadata1);
      
      PropertyMetadata propertyMetadata2 = propertyMetadata0.withDescription("");
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata2.getRequired());
      assertTrue(propertyMetadata2.hasIndex());
      assertEquals("", propertyMetadata2.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata2.getDefaultValue());
      assertNull(propertyMetadata2.getContentNulls());
      assertTrue(propertyMetadata2.isRequired());
      assertTrue(propertyMetadata2.hasDefaultValue());
      assertNull(propertyMetadata2.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata2.getIndex());
      assertNotNull(propertyMetadata2);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNotNull(creatorProperty0);
      
      Class<Integer> class0 = Integer.class;
      boolean boolean1 = creatorProperty0.visibleInView(class0);
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertTrue(boolean1);
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      
      Class<Module> class1 = Module.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class2, class3);
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(objectIdInfo0);
      
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertTrue(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals("", objectIdReferenceProperty0.getName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(objectIdReferenceProperty0);
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertTrue(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals("", objectIdReferenceProperty0.getName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertTrue(objectIdReferenceProperty1.hasValueDeserializer());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertEquals("", objectIdReferenceProperty1.getName());
      assertTrue(objectIdReferenceProperty1.isRequired());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(objectIdReferenceProperty1);
      
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty1);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(objectIdReferenceProperty0.equals((Object)objectIdReferenceProperty1));
      assertFalse(objectIdReferenceProperty1.equals((Object)objectIdReferenceProperty0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(objectIdReferenceProperty0, objectIdReferenceProperty1);
      assertNotSame(objectIdReferenceProperty1, objectIdReferenceProperty0);
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertFalse(objectIdReferenceProperty0.hasValueDeserializer());
      assertFalse(objectIdReferenceProperty0.hasViews());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertTrue(objectIdReferenceProperty0.isRequired());
      assertFalse(objectIdReferenceProperty0.isVirtual());
      assertNull(objectIdReferenceProperty0.getManagedReferenceName());
      assertEquals("", objectIdReferenceProperty0.getName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(objectIdReferenceProperty1.hasViews());
      assertNull(objectIdReferenceProperty1.getManagedReferenceName());
      assertFalse(objectIdReferenceProperty1.isIgnorable());
      assertTrue(objectIdReferenceProperty1.hasValueDeserializer());
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertTrue(objectIdReferenceProperty1.hasValueTypeDeserializer());
      assertEquals("", objectIdReferenceProperty1.getName());
      assertTrue(objectIdReferenceProperty1.isRequired());
      assertFalse(objectIdReferenceProperty1.isVirtual());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(objectIdInfo0.getAlwaysAsId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNotNull(propertyName0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer((-2127));
      assertEquals((-2127), (int)integer0);
      assertNotNull(integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNotNull(propertyMetadata1);
      
      Integer integer1 = new Integer((-2127));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2127), (int)integer1);
      assertNotNull(integer1);
      
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertNull(propertyMetadata2.getValueNulls());
      assertTrue(propertyMetadata2.hasIndex());
      assertEquals((-2127), (int)propertyMetadata2.getIndex());
      assertTrue(propertyMetadata2.getRequired());
      assertNull(propertyMetadata2.getDescription());
      assertNull(propertyMetadata2.getDefaultValue());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertNotNull(propertyMetadata2);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertNotNull(creatorProperty0);
      
      int int0 = creatorProperty0.getCreatorIndex();
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertEquals((-2976), int0);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
      
      boolean boolean1 = creatorProperty0.hasValueDeserializer();
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertFalse(boolean1);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.isVirtual());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertNotNull(propertyName0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertNotNull(classNameIdResolver0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer((-2127));
      assertEquals((-2127), (int)integer0);
      assertNotNull(integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNotNull(propertyMetadata1);
      
      Integer integer1 = new Integer((-2127));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2127), (int)integer1);
      assertNotNull(integer1);
      
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata2.getDescription());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertTrue(propertyMetadata2.hasIndex());
      assertTrue(propertyMetadata2.getRequired());
      assertNull(propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.isRequired());
      assertNull(propertyMetadata2.getContentNulls());
      assertNull(propertyMetadata2.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata2.getIndex());
      assertNotNull(propertyMetadata2);
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertNotNull(creatorProperty0);
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.isRequired());
      assertEquals((-2976), creatorProperty1.getCreatorIndex());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertNotNull(creatorProperty1);
      
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.isRequired());
      assertEquals((-2976), creatorProperty1.getCreatorIndex());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasViews());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      assertFalse(objectIdInfo0.getAlwaysAsId());
      assertNotNull(objectIdInfo0);
      
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals((-2127), (int)propertyMetadata0.getIndex());
      assertEquals("TOn[Lm681J`X(", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertEquals((-2127), (int)propertyMetadata1.getIndex());
      assertTrue(creatorProperty0.isRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-2976), creatorProperty0.getCreatorIndex());
      assertFalse(objectIdInfo0.getAlwaysAsId());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2127);
      intArray0[1] = (-2127);
      intArray0[2] = (-2976);
      intArray0[3] = (-2976);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("F9", "k@\"ceHbww", (-2976), intArray0);
      assertArrayEquals(new int[] {(-2127), (-2127), (-2976), (-2976)}, intArray0);
      assertEquals("F9", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: F9", batchUpdateException0.toString());
      assertEquals((-2976), batchUpdateException0.getErrorCode());
      assertEquals("k@\"ceHbww", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertEquals(4, intArray0.length);
      
//      try { 
        creatorProperty1._throwAsIOE(batchUpdateException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // F9
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Lm681J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      Integer integer1 = new Integer((-2127));
      propertyMetadata1.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.setFallbackSetter(creatorProperty1);
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2127));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "TOn[Im6k1J`X(");
      propertyMetadata0.withDefaultValue("TOn[Im6k1J`X(");
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2976), asPropertyTypeDeserializer0, propertyMetadata1);
      creatorProperty0.getPropertyIndex();
  }
}
