/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 05:54:40 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "Cy~?>az?s#!", false, simpleType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 155, (-1));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (byte) (-64), annotationMap0, (PropertyMetadata) null);
      JsonDeserializer<JsonTypeInfo.As> jsonDeserializer0 = (JsonDeserializer<JsonTypeInfo.As>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName1 = PropertyName.NO_NAME;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 101, mockIllegalArgumentException0, (PropertyMetadata) null);
      PropertyName propertyName2 = creatorProperty0.getFullName();
      assertSame(propertyName2, propertyName0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-6), (Object) null, (PropertyMetadata) null);
      Integer integer0 = new Integer((-6));
      creatorProperty0.assignIndex((int) integer0);
      // Undeclared exception!
//      try { 
        creatorProperty0.assignIndex((-698));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Property '' already had index (-6), trying to assign -698
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(19);
      // Undeclared exception!
//      try { 
        creatorProperty0.assignIndex(19);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Property '' already had index (19), trying to assign 19
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = PropertyName.construct(", problem: ");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), class0, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("Problem deserializing property '");
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("Problem deserializing property '", settableBeanProperty0.getName());
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, class0, (PropertyMetadata) null);
      Class<TextNode>[] classArray0 = (Class<TextNode>[]) Array.newInstance(Class.class, 2);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "BIRM[52Ef2=6,PKC_", false, simpleType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1562), simpleType0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-56));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 697, integer0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName((String) null);
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, class0, (PropertyMetadata) null);
      Class<TextNode>[] classArray0 = (Class<TextNode>[]) Array.newInstance(Class.class, 2);
      creatorProperty0.setViews(classArray0);
      creatorProperty0.withSimpleName("");
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "BIRM[52Ef2=6,PKC_", false, simpleType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1562), simpleType0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("|h");
      assertEquals("|h", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, (PropertyMetadata) null);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withSimpleName((String) null);
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertSame(settableBeanProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-1307));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, integer0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(19);
      creatorProperty0.withSimpleName((String) null);
      assertEquals(19, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-1307));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, integer0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(19);
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      creatorProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      assertEquals(19, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, (PropertyMetadata) null);
      Class<UTF8DataInputJsonParser>[] classArray0 = (Class<UTF8DataInputJsonParser>[]) Array.newInstance(Class.class, 8);
      creatorProperty0.setViews(classArray0);
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "_;C:!?IalIs#^", false, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3, annotationMap0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer((-1307));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, integer0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(19);
      creatorProperty0.withName(propertyName0);
      assertEquals(19, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-385), propertyName0, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-10), (Object) null, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasViews();
      assertFalse(boolean0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, (Object) null, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertFalse(boolean0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasValueDeserializer();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(boolean0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 471, mockIllegalArgumentException0, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNotNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      creatorProperty0.getValueTypeDeserializer();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getType();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "", (Integer) null, "END_OBJECT");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-971), class0, propertyMetadata0);
      JavaType javaType0 = creatorProperty0.getType();
      assertNotNull(javaType0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, class0, (PropertyMetadata) null);
      JavaType javaType0 = creatorProperty0.getType();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-686), (Object) null, (PropertyMetadata) null);
      JavaType javaType0 = creatorProperty0.getType();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      StringReader stringReader0 = new StringReader("+AJOaW9.Tjs)B*");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, 33, true);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(readerBasedJsonParser0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1241), collectionLikeType0, (PropertyMetadata) null);
      JavaType javaType0 = creatorProperty0.getType();
      assertNotNull(javaType0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, (Object) null, (PropertyMetadata) null);
      JavaType javaType0 = creatorProperty0.getType();
      assertNotNull(javaType0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      creatorProperty0.getObjectIdInfo();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-850), (Object) null, (PropertyMetadata) null);
      creatorProperty0.getNullValueProvider();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      String string0 = creatorProperty0.getName();
      assertEquals("@JsonUnwrapped", string0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      creatorProperty0.getName();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      creatorProperty0.getMember();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      creatorProperty0.getManagedReferenceName();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      creatorProperty0._managedReferenceName = ":@ ";
      creatorProperty0.getManagedReferenceName();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 91, propertyName0, (PropertyMetadata) null);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1._managedReferenceName = "";
      creatorProperty1.getManagedReferenceName();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty1.getName());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, (Object) null, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, annotationMap0, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, propertyName0, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2894), (Object) null, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)67, (int) (byte) (-41));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte) (-41), propertyName0, (PropertyMetadata) null);
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
//      try { 
        creatorProperty0.setAndReturn(propertyName0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = annotationIntrospector0.findRootName((AnnotatedClass) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) collectionLikeType0, (JavaType) simpleType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2473), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      NamedType namedType0 = new NamedType(class0, "~v`Q\"&Hhes");
      Object object0 = new Object();
      // Undeclared exception!
//      try { 
        creatorProperty1.set(namedType0, object0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
//      try { 
        creatorProperty0.set((Object) null, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '@JsonUnwrapped'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 825, jsonParserSequence0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
//      try { 
        creatorProperty1.getName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-17), propertyMetadata0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
//      try { 
        creatorProperty0.getContextAnnotation(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, ";;C:~?pal?s#!", false, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2, annotationMap0, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
//      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot merge polymorphic property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
//      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, (DeserializationContext) null, annotationMap0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property ''
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2513, propertyMetadata0, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, deserializerFactoryConfig0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No fallback setter/field defined for creator property '#temporary-name'
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "), trying to assign ", true, simpleType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1822), "), trying to assign ", (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-1822), (-2141));
      // Undeclared exception!
//      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No _valueDeserializer assigned
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLDataException0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 6313, annotationMap0, (PropertyMetadata) null);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLTransactionRollbackException0, class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, annotationMap0, (PropertyMetadata) null);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((Exception) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, annotationMap0, (PropertyMetadata) null);
      MockIOException mockIOException0 = new MockIOException();
      Object object0 = new Object();
//      try { 
        creatorProperty0._throwAsIOE(mockIOException0, object0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-15), (Object) null, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleAbstractTypeResolver0, class0);
//      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, class0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.annotation.JsonTypeInfo$As` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3151), (Object) null, (PropertyMetadata) null);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "; actual type: ");
//      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-269), (Object) null, (PropertyMetadata) null);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3, (Object) null, (PropertyMetadata) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector", "com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector", sQLNonTransientException0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), propertyName0, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-8), (Object) null, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType0, "(.FkjYz.ylmguUMU");
//      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: (.FkjYz.ylmguUMU
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 3600, (Object) null, (PropertyMetadata) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 19, 2);
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) simpleType0, jsonToken0, "JSON");
//      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected NOT_AVAILABLE: JSON
//         //  at [Source: (ByteArrayInputStream); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, annotationMap0, (PropertyMetadata) null);
      Vector<PropertyName> vector0 = new Vector<PropertyName>(0);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, (Exception) null, vector0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 0, 0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType0, "JSON");
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Missing type id when trying to resolve subtype of [simple type, class com.fasterxml.jackson.core.json.UTF8StreamJsonParser]: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, simpleType0, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 1, (int) (byte)1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser1 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser1, (JavaType) simpleType0, jsonToken0, "");
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, collectionType0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected START_OBJECT: 
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, (Object) null, (PropertyMetadata) null);
      SQLDataException sQLDataException0 = new SQLDataException();
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, sQLDataException0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), propertyName0, propertyMetadata0);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 91, (Object) null, (PropertyMetadata) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("PROTECTED_AND_PUBLIC", "PROTECTED_AND_PUBLIC", (-1315));
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, mockIllegalArgumentException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, (Object) null, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("lpNq", (String) null);
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      DataTruncation dataTruncation0 = new DataTruncation(19, false, false, 19, (-43));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(dataTruncation0);
      SQLDataException sQLDataException0 = new SQLDataException("R*CO(|J", "lpNq", sQLTimeoutException0);
      MockIOException mockIOException0 = new MockIOException(sQLDataException0);
//      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 19, (Object) null, (PropertyMetadata) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "'null', 'true', 'false' or NaN");
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Object` from number 10: 'null', 'true', 'false' or NaN
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 15, propertyName0, (PropertyMetadata) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!");
//      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, sQLTimeoutException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // !
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 795, mockIllegalArgumentException0, propertyMetadata0);
//      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing property '' (expected type: [simple type, class int]; actual type: [null]), problem: com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 91, (Object) null, (PropertyMetadata) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
//      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, simpleObjectIdResolver0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Problem deserializing property '@JsonUnwrapped' (expected type: null; actual type: `com.fasterxml.jackson.annotation.SimpleObjectIdResolver`) (no error message provided)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3151), annotationMap0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.filter.FilteringParserDelegate.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 8, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(creatorProperty0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.deser.SettableBeanProperty.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertNotNull(creatorProperty2);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty2.getName());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "+Hj]#}M_", true, (JavaType) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 335, arrayNode0, (PropertyMetadata) null);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn(creatorProperty0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNotNull(creatorProperty2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(creatorProperty0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertTrue(creatorProperty1.hasValueDeserializer());
      
      CreatorProperty creatorProperty2 = (CreatorProperty)creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertNotNull(creatorProperty2);
      assertEquals("@JsonUnwrapped", creatorProperty2.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "Cy~?>az?s#!", false, simpleType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 155, (-1));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (byte) (-64), annotationMap0, (PropertyMetadata) null);
      // Undeclared exception!
//      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-10), (Object) null, (PropertyMetadata) null);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 6);
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(classArray0[2]);
      assertTrue(creatorProperty0.hasViews());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, class0, (PropertyMetadata) null);
      Class<TextNode>[] classArray0 = (Class<TextNode>[]) Array.newInstance(Class.class, 2);
      Class<TextNode> class1 = TextNode.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertTrue(creatorProperty0.hasViews());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "BIRM[52Ef2=6,PKC_", false, simpleType0, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1562), simpleType0, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertTrue(boolean0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 115, annotationMap0, (PropertyMetadata) null);
      JsonDeserializer<JsonDeserializer<Integer>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<Integer>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      boolean boolean0 = creatorProperty1.hasValueDeserializer();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), jsonObjectFormatVisitor_Base0, propertyMetadata0);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = new PropertyName("#=eH\"c}v5us z-E}'");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-388), "#=eH\"c}v5us z-E}'", (PropertyMetadata) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, class0, (PropertyMetadata) null);
      Class<TextNode>[] classArray0 = (Class<TextNode>[]) Array.newInstance(Class.class, 2);
      creatorProperty0.setViews(classArray0);
      // Undeclared exception!
//      try { 
        creatorProperty0.visibleInView(class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ViewMatcher$Multi", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-388), (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName(", problem: ");
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals(", problem: ", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1248), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
//      try { 
        objectMapper0.updateValue(jsonDeserializer0, (Object) creatorProperty0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unrecognized field \"com.fasterxml.jackson.core.io.SerializedString@0000000601\" (class com.fasterxml.jackson.databind.JsonDeserializer$MockitoMock$370584261), not marked as ignorable (2 known properties: \"knownPropertyNames\", \"mockitoInterceptor\"])
//         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.databind.JsonDeserializer$MockitoMock$370584261[\"com.fasterxml.jackson.core.io.SerializedString@0000000601\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(propertyName1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertNotNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 20, annotationMap0, (PropertyMetadata) null);
      creatorProperty0.setManagedReferenceName("{756hRFMLhN6$xA");
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, (PropertyMetadata) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
//      try { 
        creatorProperty0._throwAsIOE(sQLNonTransientConnectionException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "Cy~?>az?s#!", false, simpleType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (byte) (-64), annotationMap0, (PropertyMetadata) null);
      // Undeclared exception!
//      try { 
        creatorProperty0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null);
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.markAsIgnorable();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "\n", true, (JavaType) null, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNotNull(typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-7), (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getContextAnnotation(class0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      String string0 = objectIdReferenceProperty0.toString();
      assertEquals("[property '']", string0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-874), (Object) null, (PropertyMetadata) null);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals((-1), int0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("[");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        creatorProperty0._throwAsIOE(jsonParserDelegate0, mockIOException0, jsonFactory0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }
}
