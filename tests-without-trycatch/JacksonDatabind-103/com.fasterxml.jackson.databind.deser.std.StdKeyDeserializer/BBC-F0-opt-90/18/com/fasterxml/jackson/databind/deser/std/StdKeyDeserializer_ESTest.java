/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 22:23:31 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.sql.ClientInfoStatus;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("0", (DeserializationContext) null);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertNotNull(object0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertNotNull(stdKeyDeserializer0);
      
//      try { 
        stdKeyDeserializer0._parse(": (", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      assertFalse(fromStringDeserializer_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, fromStringDeserializer_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, fromStringDeserializer_Std0.getEmptyAccessPattern());
      assertEquals(7, FromStringDeserializer.Std.STD_PATTERN);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
      assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
      assertEquals(2, FromStringDeserializer.Std.STD_URL);
      assertEquals(3, FromStringDeserializer.Std.STD_URI);
      assertEquals(4, FromStringDeserializer.Std.STD_CLASS);
      assertEquals(11, FromStringDeserializer.Std.STD_INET_ADDRESS);
      assertEquals(8, FromStringDeserializer.Std.STD_LOCALE);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
      assertEquals(9, FromStringDeserializer.Std.STD_CHARSET);
      assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
      assertEquals(13, FromStringDeserializer.Std.STD_STRING_BUILDER);
      assertEquals(1, FromStringDeserializer.Std.STD_FILE);
      assertNotNull(fromStringDeserializer_Std0);
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer_Std0);
      assertFalse(fromStringDeserializer_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, fromStringDeserializer_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, fromStringDeserializer_Std0.getEmptyAccessPattern());
      assertEquals(7, FromStringDeserializer.Std.STD_PATTERN);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
      assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
      assertEquals(2, FromStringDeserializer.Std.STD_URL);
      assertEquals(3, FromStringDeserializer.Std.STD_URI);
      assertEquals(4, FromStringDeserializer.Std.STD_CLASS);
      assertEquals(11, FromStringDeserializer.Std.STD_INET_ADDRESS);
      assertEquals(8, FromStringDeserializer.Std.STD_LOCALE);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
      assertEquals(9, FromStringDeserializer.Std.STD_CHARSET);
      assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
      assertEquals(13, FromStringDeserializer.Std.STD_STRING_BUILDER);
      assertEquals(1, FromStringDeserializer.Std.STD_FILE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("' found (for property '", (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType((Class<?>) null);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNotNull(stdKeyDeserializer_StringKD0);
      
      Class<?> class0 = stdKeyDeserializer_StringKD0.getKeyClass();
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      FromStringDeserializer<URI> fromStringDeserializer0 = (FromStringDeserializer<URI>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("long", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(3727, class0, (FromStringDeserializer<?>) null);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertNotNull(stdKeyDeserializer0);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertFalse(class1.isAnnotation());
      assertEquals("interface java.time.chrono.ChronoLocalDate", class1.toString());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer_StringKD0);
      
      Class<?> class1 = stdKeyDeserializer_StringKD0.getKeyClass();
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16401, class1.getModifiers());
      assertEquals("class java.time.chrono.HijrahEra", class1.toString());
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      long long0 = stdKeyDeserializer0._parseLong("0");
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
      long long0 = stdKeyDeserializer0._parseLong("3");
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
      int int0 = stdKeyDeserializer0._parseInt("0");
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
      double double0 = stdKeyDeserializer0._parseDouble("0");
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      FromStringDeserializer<URL> fromStringDeserializer0 = (FromStringDeserializer<URL>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
      double double0 = stdKeyDeserializer0._parseDouble("-5");
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals((-5.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Currency> class0 = Currency.class;
      FromStringDeserializer<MockCalendar> fromStringDeserializer0 = (FromStringDeserializer<MockCalendar>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer0);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNotNull(deserializationConfig0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode0 = objectNode0.withArray("");
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNotNull(jsonParser0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
//      try { 
        stdKeyDeserializer0.deserializeKey("d<:6{=}eKY.", defaultDeserializationContext0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `java.lang.Boolean` from String \"d<:6{=}eKY.\": not a valid representation, problem: (com.fasterxml.jackson.databind.exc.InvalidFormatException) Cannot deserialize Map key of type `java.lang.Boolean` from String \"d<:6{=}eKY.\": value not 'true' or 'false'
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertNotNull(stdKeyDeserializer0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNotNull(deserializationConfig0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser0, injectableValues_Std0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("<C*IppObq(I]I:");
      assertEquals("java.sql.SQLNonTransientConnectionException: <C*IppObq(I]I:", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("<C*IppObq(I]I:", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: <C*IppObq(I]I:", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("<C*IppObq(I]I:", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLNonTransientConnectionException: <C*IppObq(I]I:", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: <C*IppObq(I]I:", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
//      try { 
        stdKeyDeserializer0._weirdKey(defaultDeserializationContext_Impl1, "j(cWX`JSUyG6PHeZOw", sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `java.lang.Boolean` from String \"j(cWX`JSUyG6PHeZOw\": problem: java.sql.SQLNonTransientConnectionException: <C*IppObq(I]I:
//         //  at [Source: (PipedReader); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FromStringDeserializer<TypeIdResolver> fromStringDeserializer0 = (FromStringDeserializer<TypeIdResolver>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
//      try { 
        stdKeyDeserializer0._parseDouble(".xD!r0");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Short> class0 = Short.class;
      FromStringDeserializer<Double> fromStringDeserializer0 = (FromStringDeserializer<Double>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-4692), class0, fromStringDeserializer0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0._parseDouble((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<InputStream> class1 = InputStream.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class1, 212);
      assertEquals(AccessPattern.ALWAYS_NULL, fromStringDeserializer_Std0.getNullAccessPattern());
      assertFalse(fromStringDeserializer_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, fromStringDeserializer_Std0.getEmptyAccessPattern());
      assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
      assertEquals(4, FromStringDeserializer.Std.STD_CLASS);
      assertEquals(9, FromStringDeserializer.Std.STD_CHARSET);
      assertEquals(13, FromStringDeserializer.Std.STD_STRING_BUILDER);
      assertEquals(8, FromStringDeserializer.Std.STD_LOCALE);
      assertEquals(2, FromStringDeserializer.Std.STD_URL);
      assertEquals(3, FromStringDeserializer.Std.STD_URI);
      assertEquals(11, FromStringDeserializer.Std.STD_INET_ADDRESS);
      assertEquals(1, FromStringDeserializer.Std.STD_FILE);
      assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
      assertEquals(7, FromStringDeserializer.Std.STD_PATTERN);
      assertNotNull(fromStringDeserializer_Std0);
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer_Std0);
      assertEquals(AccessPattern.ALWAYS_NULL, fromStringDeserializer_Std0.getNullAccessPattern());
      assertFalse(fromStringDeserializer_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, fromStringDeserializer_Std0.getEmptyAccessPattern());
      assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
      assertEquals(4, FromStringDeserializer.Std.STD_CLASS);
      assertEquals(9, FromStringDeserializer.Std.STD_CHARSET);
      assertEquals(13, FromStringDeserializer.Std.STD_STRING_BUILDER);
      assertEquals(8, FromStringDeserializer.Std.STD_LOCALE);
      assertEquals(2, FromStringDeserializer.Std.STD_URL);
      assertEquals(3, FromStringDeserializer.Std.STD_URI);
      assertEquals(11, FromStringDeserializer.Std.STD_INET_ADDRESS);
      assertEquals(1, FromStringDeserializer.Std.STD_FILE);
      assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
      assertEquals(7, FromStringDeserializer.Std.STD_PATTERN);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
//      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertNotNull(stdKeyDeserializer_StringKD0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNotNull(deserializationConfig0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertNotNull(jsonParser0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(10, (-2004640405), 12);
      assertNotNull(mockGregorianCalendar0);
      
      JsonDeserializer<Calendar> jsonDeserializer0 = (JsonDeserializer<Calendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(mockGregorianCalendar0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=10,MONTH=-2004640405,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)stdKeyDeserializer_DelegatingKD0.deserializeKey("QGRIW.=#iwd7a`Wy%5", defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=10,MONTH=-2004640405,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=10,MONTH=-2004640405,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertNotNull(deserializationConfig0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isClosed());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
//      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("`syuE0fDg/^)_Gg`.~", defaultDeserializationContext0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `java.util.Calendar` from String \"`syuE0fDg/^)_Gg`.~\": not a valid representation: Cannot deserialize Map key of type `java.util.Calendar` from String \"`syuE0fDg/^)_Gg`.~\": not a valid representation
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("overflow, value cannot be represented as 8-bit value", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0._parse("0", (DeserializationContext) null);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertNotNull(object0);
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("PARENT_PROPERTY", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
//      try { 
        stdKeyDeserializer0._parse("UIh=hEn3E*?I+", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertNotNull(stdKeyDeserializer0);
      
      UUID uUID0 = (UUID)stdKeyDeserializer0._parse("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializeH$StringFactoryKeyDeserializer", defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertNotNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(10, class0, (FromStringDeserializer<?>) null);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
//      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      FromStringDeserializer<Float> fromStringDeserializer0 = (FromStringDeserializer<Float>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0, fromStringDeserializer0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertNotNull(stdKeyDeserializer0);
      
//      try { 
        stdKeyDeserializer0._parse("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FromStringDeserializer<IntNode> fromStringDeserializer0 = (FromStringDeserializer<IntNode>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0, fromStringDeserializer0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("false", (DeserializationContext) null);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FromStringDeserializer<Float> fromStringDeserializer0 = (FromStringDeserializer<Float>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("value not 'true' or 'false'", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Currency> class0 = Currency.class;
      FromStringDeserializer<MockCalendar> fromStringDeserializer0 = (FromStringDeserializer<MockCalendar>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertNotNull(stdKeyDeserializer0);
      
      Locale locale0 = (Locale)stdKeyDeserializer0.deserializeKey(")", (DeserializationContext) null);
      assertEquals("", locale0.getVariant());
      assertEquals(")", locale0.getLanguage());
      assertEquals(")", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertNotNull(stdKeyDeserializer0);
      
//      try { 
        stdKeyDeserializer0._parse((String) null, (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
//      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNull(stdKeyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Float> class0 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertNotNull(stdKeyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey(")", (DeserializationContext) null);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(object0);
      assertEquals(')', object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = stdKeyDeserializer0._parse("true", defaultDeserializationContext_Impl0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        stdKeyDeserializer0._parse("6?k[=lE-zp(0+=7+5|", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("overflow, value cannot be represented as 8-bit value", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      double double0 = stdKeyDeserializer0._parseDouble("3");
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = (StdKeyDeserializer.StringKD)StdKeyDeserializer.forType(class0);
      int int0 = stdKeyDeserializer_StringKD0._parseInt("3");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
//      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
//      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      EnumResolver enumResolver0 = EnumResolver.constructUnsafe(class0, annotationIntrospector0);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        stdKeyDeserializer_EnumKD0._parse("*5", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = stdKeyDeserializer_StringKD0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      Class<?> class1 = stdKeyDeserializer_StringKD0.getKeyClass();
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
//      try { 
        stdKeyDeserializer0.deserializeKey("", (DeserializationContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(2029, class0);
//      try { 
        stdKeyDeserializer0._parseLong("|X:NIeQH vH");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"|X:NIeQH vH\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
//      try { 
        stdKeyDeserializer_StringKD0._parseInt((String) null);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // null
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer", "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer");
      // Undeclared exception!
//      try { 
        stdKeyDeserializer_StringKD0._weirdKey(defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer", sQLFeatureNotSupportedException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        stdKeyDeserializer_StringKD0._parse("VQj9=", defaultDeserializationContext_Impl0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Internal error: unknown key type class java.lang.Integer
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      Class<?> class1 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      assertNull(object0);
  }
}
