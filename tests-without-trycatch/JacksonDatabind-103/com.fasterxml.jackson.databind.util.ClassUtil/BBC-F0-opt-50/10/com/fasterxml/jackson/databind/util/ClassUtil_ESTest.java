/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:48:01 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(typeFactory0);
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructRawCollectionType(class1);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ClassUtil.rawClass(arrayType2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      String string0 = "com.fasterxml.jackson.databind.deser.AbstractDeserializer";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.AbstractDeserializer");
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.AbstractDeserializer");
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.primitiveType(class1);
      ClassUtil.isProxyType(class1);
      constructor0.getParameterTypes();
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot pass null KeyDeserializers");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((-4122.0));
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)77;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, pipedOutputStream0, byteArray0, (byte) (-11), false);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      MockIOException mockIOException0 = new MockIOException("java.lang.reflect.Ac");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, ";");
      enumMap0.put(accessPattern0, jsonMappingException0);
      enumMap0.clone();
      ClassUtil.findEnumType(enumMap0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.RuntimeException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.allOf(class0);
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      EnumMap<AccessPattern, JsonMappingException> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, JsonMappingException> enumMap2 = enumMap1.clone();
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot find a deserializer for non-concrete Collection type ");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Double> class1 = Double.class;
      simpleType0.isTypeOrSuperTypeOf(class1);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.jsontype.NamedType");
      sQLTransactionRollbackException0.getLocalizedMessage();
      sQLTransactionRollbackException0.getLocalizedMessage();
      sQLTransactionRollbackException0.getSuppressed();
      sQLTransactionRollbackException0.spliterator();
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet.noneOf(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      SerializationFeature serializationFeature1 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      SerializationFeature serializationFeature2 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      serializationFeatureArray0[0] = serializationFeature2;
      serializationFeatureArray0[1] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature1, serializationFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      coreXMLDeserializers_Std0.getEmptyValue(deserializationContext0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ACCEPT_EMPTY_STRING_AS_NULL_OBJECT", "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT");
      long[] longArray0 = new long[6];
      sQLRecoverableException0.spliterator();
      longArray0[0] = (long) (-1405);
      longArray0[1] = (long) (-1405);
      longArray0[2] = (long) (-1405);
      longArray0[3] = (long) (-1405);
      longArray0[4] = 1915L;
      longArray0[5] = (long) (-1405);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot access ", "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT", (-1405), longArray0, sQLRecoverableException0);
      sQLRecoverableException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getClassMethods(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(list0, class2);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.RuntimeException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.util.ArrayList`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(placeholderForType0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<String>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("N", "N", 8, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLTransactionRollbackException1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.com.fasterxml.jackson.core.io.OutputDecorator", "^ana?6hI@^2!FHI[", (-239), (Map<String, ClientInfoStatus>) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("^ana?6hI@^2!FHI[", "^ana?6hI@^2!FHI[", sQLClientInfoException0);
      sQLSyntaxErrorException0.setNextException(sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLSyntaxErrorException0);
      sQLClientInfoException0.getStackTrace();
      sQLSyntaxErrorException0.setNextException(sQLClientInfoException0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.CHINA;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      deserializationFeatureArray0[3] = deserializationFeature1;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Failed to find default constructor of class ");
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'O';
      charArray0[2] = 'N';
      charArray0[3] = 'e';
      charArray0[4] = 'q';
      charArray0[5] = '(';
      charArray0[6] = 'A';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected NOT_AVAILABLE: JSON
//         //  at [Source: (char[])\"9ONeq(A\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.toString();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dn#n&+f", mockRuntimeException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("dn#n&+f", "S:)yM^Xs{T27wg", sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "dn#n&+f");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      objectMapper1.readerForUpdating(jsonAutoDetect_Visibility0);
      ClassUtil.nonNullString("JSON");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isBogusClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "1)7h U'f");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 1)7h U'f
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockError mockError0 = new MockError("org.hibernate.proxy.", (Throwable) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.hibernate.proxy.");
      mockPrintWriter0.println(391.4482F);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.hibernate.proxy.");
      mockError0.printStackTrace(printWriter0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "org.hibernate.proxy.");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "-fPf";
      ClassUtil.verifyMustOverride(class0, "-fPf", "-fPf");
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("2E/2SP%mXA.oMqF#C");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      // Undeclared exception!
//      try { 
        mockPrintStream0.printf(locale0, "2E/2SP%mXA.oMqF#C", objectArray0);
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = 'm'
//         //
//         verifyException("java.util.Formatter$FormatSpecifier", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getConstructors(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<Boolean> class1 = Boolean.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      ClassUtil.rawClass(mapLikeType1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class1 = Void.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-96);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1851), objectMapper1, (OutputStream) null, byteArray0, 65, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      Exception exception0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      Exception exception0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      Long long0 = new Long(2173L);
      ClassUtil.isJacksonStdImpl((Object) long0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", sQLSyntaxErrorException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Boolean boolean0 = new Boolean("JSON");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper2, bufferedOutputStream0, byteArray0, 2370, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, 2);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLSyntaxErrorException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLSyntaxErrorException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getClassMethods(class0);
      Class<InputStream> class1 = InputStream.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.io.InputStream, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
      Class<IOException> class1 = IOException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.io.IOException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.ObjectMapper");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long(2386L);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(long0, class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.TYPE;
      List<Class<?>> list0 = new Stack<Class<Object>>();
      boolean boolean0 = new Boolean(true);
      ClassUtil.classNameOf(class1);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassUtil.backticked("9[g\"h(");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Error> class1 = Error.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.backticked("net.sf.cglib.proxy.com.fasterxml.jackson.core.ObjectCodec");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Failed to find default constructor of class ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionLikeType collectionLikeType0 = collectionType0.withContentValueHandler("+&PmT<vL<]C(");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, collectionLikeType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      // Undeclared exception!
//      try { 
        ClassUtil.nameOf((Named) beanProperty_Std0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long.getLong("was expecting double-quote to start field name");
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      String string0 = "Failedqto find default constructor of class ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Failedqto find default constructor of class ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.print(false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockPrintWriter0);
      Exception exception0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern1);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockError mockError0 = new MockError("4Bf$k[Z9vN@G4$+bA");
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zfR|0mcv");
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findClassAnnotations(class0);
      Iterator<CollectionType> iterator0 = ClassUtil.emptyIterator();
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, (Class<?>) null, true);
      ClassUtil.classOf(iterator0);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "Default constructor for ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      jsonFactory3.setInputDecorator((InputDecorator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(36);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("}<+L>");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) jsonFactory3;
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.defaultValue(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.nonNull((String) null, "net.sf.cglib.proxy.com.fasterxml.jackson.core.io.CharacterEscapes");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType1, (JavaType[]) null, (JavaType) collectionType0, (JavaType) collectionType1);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, true);
      Class<ArrayType> class3 = ArrayType.class;
      Class<InputStream> class4 = InputStream.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
      Class<Void> class5 = Void.class;
      ClassUtil.nameOf(class5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      objectMapper1.readerForUpdating(objectMapper0);
      ClassUtil.nonNullString("JSON");
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLWarning sQLWarning0 = new SQLWarning("annotation", "annotation");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getRootCause(mockRuntimeException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator("annotation");
      MockPrintStream mockPrintStream0 = new MockPrintStream("'^LQSis[3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.print(false);
      jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jsonFormat_Features0.get(jsonFormat_Feature0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<Error> class1 = Error.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Error is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLWarning sQLWarning0 = new SQLWarning("annotation", "annotation");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getRootCause(mockRuntimeException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("annotation");
      MockPrintStream mockPrintStream0 = new MockPrintStream("'^LQSis[3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.print(false);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) jsonFactory1;
      objectArray0[3] = (Object) jsonFactory1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "'^LQSis[3", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) printStream0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", mockThrowable0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.hasClass(class0, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.backticked("Numeric value (%s) out of range of int (%d - %s)");
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getOuterClass(class2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Numeric value (%s) out of range of int (%d - %s)", "=n");
      ClassUtil.throwIfError(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackso");
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackso");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) mockFileWriter0, (Exception) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackso
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<Float> class1 = Float.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDefaultCreator();
      annotationIntrospector0.findPropertyDefaultValue((Annotated) null);
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      objectMapper1.readerForUpdating(objectMapper0);
      ClassUtil.nonNullString("JSON");
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      jsonFactory3.setInputDecorator((InputDecorator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.KOREA;
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      objectMapper0.disable(serializationFeature0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON", (Throwable) sQLTransientConnectionException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) byteArrayOutputStream0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.nonNull((CollectionLikeType) null, (CollectionLikeType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nonNullString((String) null);
      ClassUtil.defaultValue(class0);
      System.setCurrentTimeMillis((-1305L));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Short short0 = new Short((short) (-5216));
      Class<CollectionType> class1 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(short0, class1, "Failed to instantiate class ");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from number -5216: Failed to instantiate class 
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Tco.fasterx8ml.jckso", "Tco.fasterx8ml.jckso");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getRootCause(mockRuntimeException0);
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      Class<NoClass> class2 = NoClass.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class3 = LinkedList.class;
      // Undeclared exception!
//      try { 
        typeFactory0.constructCollectionType(class3, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<MapType> class1 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findEnumType(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Long long0 = new Long((-17L));
      Class<Byte> class0 = Byte.class;
      ClassUtil.findClassAnnotations(class0);
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackso", "annotation");
      ClassUtil.getRootCause(sQLWarning0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(".|`7}4>,=.StxPx)=D2");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonFactory1.enable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonFactory1.configure(jsonParser_Feature1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("'s}RHk");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      ClassUtil.primitiveType(class0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockPrintWriter0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning: com.fasterxml.jackso
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.nonNull((CollectionLikeType) null, (CollectionLikeType) null);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.backticked("java.io");
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.rawClass((JavaType) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "8@P<f$v(KGN";
      ClassUtil.quotedOr((Object) null, "8@P<f$v(KGN");
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.core.JsonFactory", "net.sf.cglib.proxy.com.fasterxml.jackson.core.JsonFactory", 4463);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
//      try { 
        ClassUtil.throwIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig4 = deserializerFactoryConfig3.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig4);
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(annotationIntrospector1);
      objectReader0.getTypeFactory();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.primitiveType(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      MockIOException mockIOException0 = new MockIOException("JSON", sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "local/anonymous");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("enum", "3PD?c|vG:rB)vzpXU_4", (-1), jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "JSON");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.hasClass(class0, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ClassUtil.isConcrete(class1);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Character> class1 = Character.TYPE;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classNameOf(list0);
      ClassUtil.isJacksonStdImpl(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.backticked("^C+^bl");
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getConstructors(class2);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "*<tb@q#GVo-ei,%", (JsonLocation) null);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector1);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonFactory0);
      objectReader0.getTypeFactory();
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.hasClass(class0, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long(0L);
      ClassUtil.nullOrToString(long0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Long@0000000001", "java.lang.Long@0000000001", 513);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.lang.Long@0000000001", true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      sQLTransactionRollbackException0.printStackTrace(printWriter0);
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.nameOf(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.isBogusClass(class3);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.getDeclaredFields(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      ObjectMapper objectMapper3 = objectMapper2.configure(mapperFeature0, true);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPrettyPrinter((PrettyPrinter) null);
      ObjectMapper objectMapper5 = objectMapper4.copy();
      Class<Short> class1 = Short.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ArrayType arrayType1 = arrayType0.withValueHandler(objectMapper4);
      objectMapper5.readerForUpdating(arrayType1);
      ClassUtil.nonNullString("*Yite^pfhTx03.");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      Class<Character> class3 = Character.TYPE;
      ClassUtil.findRawSuperTypes(class3, class2, false);
      Class<Float> class4 = Float.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jacks");
      Byte byte0 = new Byte((byte) (-104));
      ClassUtil.classOf(byte0);
      Class<ObjectNode> class0 = ObjectNode.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Float> class2 = Float.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getConstructors(class3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jacks");
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class0 = CollectionType.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getConstructors(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findSuperTypes((JavaType) null, class3, false);
      ClassUtil.findClassAnnotations(class2);
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.classNameOf(boolean0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`java.lang.Boolean`", "2[5", (-2013852015));
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.classNameOf((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getRootCause(mockRuntimeException0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotations();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.emptyIterator();
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getPackageName(class2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\\/;dx!-]5>vVA&C)~");
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      Class<Integer> class3 = Integer.class;
      ClassUtil.findClassAnnotations(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.isJacksonStdImpl(class4);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      MockIOException mockIOException0 = new MockIOException("n0 }");
      mockIOException0.toString();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", (Throwable) mockIOException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType`", "java.lang", 849, jsonMappingException0);
      ClassUtil.throwIfIOE(sQLSyntaxErrorException0);
//      try { 
        ClassUtil.createInstance(class3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotations();
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.isProxyType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Double double0 = new Double(0.0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Character> class0 = Character.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isProxyType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      Class<Float> class0 = Float.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Vector<Class<JsonMappingException>> vector0 = new Vector<Class<JsonMappingException>>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotations();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.emptyIterator();
      constructor0.getParameterTypes();
      SQLException sQLException0 = new SQLException("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY", 0);
      ClassUtil.getEnclosingClass(class0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.backticked("~sGPdOsAZ\"^^(h<");
      ClassUtil.classOf("`~sGPdOsAZ\"^^(h<`");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector1);
      Double double0 = new Double(2.147483647E9);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(double0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class0 = LinkedList.class;
      typeFactory0.constructRawCollectionType(class0);
      ClassUtil.quotedOr("qW5;IlH ", "qW5;IlH ");
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.fillInStackTrace();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Character> class1 = Character.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, true);
      Double double0 = new Double(0.0);
      ClassUtil.getClassDescription(class1);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`java.lang.Character`", "keyType");
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findEnumType(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.emptyIterator();
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.classNameOf(class1);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getPackageName(class1);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jacks");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class1 = CollectionType.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.isJacksonStdImpl((Object) "`com.fasterxml.jacks`");
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getClassMethods(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.primitiveType(class4);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jacks");
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class0 = CollectionType.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Float> class2 = Float.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jacks");
      ClassUtil.classOf((Object) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(annotationIntrospector0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassUtil.quotedOr(collectionType0, "`com.fasterxml.jacks`");
      Class<Object> class1 = Object.class;
      ClassUtil.primitiveType(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Throwable throwable0 = batchUpdateException0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "com.fasterxml.jacks";
      ClassUtil.backticked("com.fasterxml.jacks");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class1 = CollectionType.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<Float> class3 = Float.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.findSuperClasses(class4, class0, true);
      ClassUtil.isJacksonStdImpl((Object) "`com.fasterxml.jacks`");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "com.fasterxml.jacks");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): com.fasterxml.jacks
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.backticked("[null]");
      Double double0 = new Double(3067.59408905814);
      ClassUtil.getClassDescription("[null]");
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) null);
      ClassUtil.backticked("[null]");
      SQLException sQLException0 = new SQLException("Po|D8qlSFw1*.d");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLException0);
      Throwable throwable1 = ClassUtil.throwIfError(throwable0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2021644896));
      // Undeclared exception!
//      try { 
        placeholderForType0.withValueHandler(throwable1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockError mockError0 = new MockError("ZERO_LENGTH_ENUM_ARRAY");
      Throwable throwable0 = ClassUtil.getRootCause(mockError0);
      mockError0.toString();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.SerializerProvider", "Failed to construct BeanSerializer for %s: (%s) %s", 19, throwable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.SerializerProvider", "Failed to construct BeanSerializer for %s: (%s) %s", 19);
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      MockError mockError1 = new MockError("com.fasterxml.jackson.databind.SerializerProvider");
      SQLDataException sQLDataException0 = new SQLDataException(mockError0);
      ClassUtil.throwIfRTE(mockError1);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3);
      AccessPattern accessPattern2 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.getClassDescription(accessPattern2);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("jaObKu2", "\"%s\"");
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.backticked("``");
      SQLException sQLException0 = new SQLException("Kc1 RS_)W5`");
      SQLException sQLException1 = (SQLException)ClassUtil.throwRootCauseIfIOE(sQLException0);
      ClassUtil.throwIfError(sQLException0);
      sQLException1.spliterator();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2021644896));
      placeholderForType0.isReferenceType();
      ClassUtil.rawClass(placeholderForType0);
      // Undeclared exception!
//      try { 
        placeholderForType0.withValueHandler(sQLException1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isConcrete(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
//      try { 
        ClassUtil.createInstance(class2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr(class0, "1EEbu;B2>5(1`T");
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.primitiveType(class1);
      MockError mockError0 = new MockError("wwS'2zclE&N,]ig{'");
      SQLDataException sQLDataException0 = new SQLDataException(mockError0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLDataException0);
      ClassUtil.throwIfIOE(throwable0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<MapType> class2 = MapType.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.backticked((String) null);
      ClassUtil.getConstructors(class0);
      Class<Byte> class3 = Byte.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<Error> class4 = Error.class;
      ClassUtil.findEnumType(class4);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil");
      ClassUtil.getClassDescription((Object) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class0);
      int int0 = 7;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(mxit#'Z", "(mxit#'Z", 7);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("unknown", sQLTransientConnectionException0);
      sQLTransientConnectionException1.fillInStackTrace();
      sQLTransientConnectionException1.getStackTrace();
      sQLTransientConnectionException0.fillInStackTrace();
      sQLTransientConnectionException1.printStackTrace();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // (mxit#'Z
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.emptyIterator();
      SQLException sQLException0 = new SQLException("57{P@*e/q3:l", "ZERO_LENGTH_ENUM_ARRAY", (-617));
      MockFile mockFile0 = new MockFile("ZERO_LENGTH_ENUM_ARRAY");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      sQLException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.throwIfIOE(sQLException0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.backticked("``");
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.java.lang.Long");
      ClassUtil.throwRootCauseIfIOE(sQLException0);
      ClassUtil.throwIfError(sQLException0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isBogusClass((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockError mockError0 = new MockError("ZERO_LENGTH_ENUM_ARRAY");
      Throwable throwable0 = ClassUtil.getRootCause(mockError0);
      mockError0.toString();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.SerializerProvider", "Failed to construct BeanSerializer for %s: (%s) %s", 19, throwable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.SerializerProvider", "Failed to construct BeanSerializer for %s: (%s) %s", 19);
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException1);
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern2);
      EvoSuiteFile evoSuiteFile0 = null;
      AccessPattern accessPattern3 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern3);
      boolean boolean0 = true;
      AccessPattern[] accessPatternArray0 = new AccessPattern[2];
      accessPatternArray0[0] = accessPattern1;
      accessPatternArray0[1] = accessPattern1;
      EnumSet.of(accessPattern1, accessPatternArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AccessPattern accessPattern4 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.emptyIterator();
      Class<Integer> class1 = Integer.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Character> class0 = Character.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findConstructor(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Double double0 = new Double((-2535.66806064519));
      ClassUtil.getClassDescription(double0);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("`java.lang.Double`");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("``java.lang.Double``", "``java.lang.Double``");
      sQLRecoverableException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "Failed to find default constructor of class ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to find default constructor of class 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Boolean boolean0 = new Boolean("");
      ClassUtil.backticked("");
      ClassUtil.isProxyType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "``");
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.nonNullString("``");
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.backticked("[null]");
      SQLException sQLException0 = new SQLException("6h8");
      ClassUtil.throwRootCauseIfIOE(sQLException0);
      ClassUtil.throwIfError(sQLException0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.throwIfError(sQLException0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findConstructor(class0, false);
      MockError mockError0 = new MockError("tvl5n(._j5eR6S_0`");
      ClassUtil.nullOrToString(mockError0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?B!vu(S[7l", "g0", 2250);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("?B!vu(S[7l", "tvl5n(._j5eR6S_0`", 4);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "com.fasterxml.jacks");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jacks
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<CollectionType> class1 = CollectionType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class1, valueInstantiator_Base0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Double> class2 = Double.class;
      defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class2);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<String> class3 = String.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jacks");
      Class<NoClass> class0 = NoClass.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class2 = CollectionType.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<Float> class4 = Float.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class3, (Class<?>) null);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type [null] from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Class`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockError mockError0 = new MockError("ZERO_LENGTH_ENUM_ARRAY");
      Throwable throwable0 = ClassUtil.getRootCause(mockError0);
      mockError0.toString();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.SerializerProvider", "Failed to construct BeanSerializer for %s: (%s) %s", 19, throwable0);
      Throwable throwable1 = ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      ClassUtil.throwIfRTE(throwable1);
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Cannot figure out type for EnumMap (odd JDK platform?)");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.emptyIterator();
      SQLException sQLException0 = new SQLException("57{P@*e/q3:l", "ZERO_LENGTH_ENUM_ARRAY", (-617));
      ClassUtil.throwIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Boolean boolean0 = new Boolean("");
      ClassUtil.nullOrToString(boolean0);
      ClassUtil.isProxyType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "java.lang.Boolean@0000000001");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.backticked("");
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.java.lang.Long");
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      ClassUtil.throwIfError(throwable0);
      ClassUtil.rawClass((JavaType) null);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isLocalType(class2, true);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classNameOf(class1);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      Class<MapType> class2 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-393805500));
      Class<CollectionType> class3 = CollectionType.class;
      Class<AccessPattern> class4 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class4, javaTypeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.util.AccessPattern with 6 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Long long0 = new Long(0L);
      Class<Byte> class0 = Byte.class;
      ClassUtil.findClassAnnotations(class0);
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackso", "annotation");
      ClassUtil.getRootCause(sQLWarning0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(".|`7}4>,=.StxPx)=D2");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonFactory1.enable(jsonParser_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("'s}RHk");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockPrintWriter0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning: com.fasterxml.jackso
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Long long0 = new Long(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassDescription(long0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
//      try { 
        sQLTransientConnectionException0.forEach((Consumer<? super Throwable>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<ArrayType> class0 = ArrayType.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.weirdNativeValueException(stdKeyDeserializers0, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      ClassUtil.getDeclaringClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getPackageName(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(256);
      ClassUtil.nullOrToString(placeholderForType0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getDeclaredAnnotations();
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, true);
      Class<ReferenceType> class4 = ReferenceType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class4);
      SimpleType simpleType1 = simpleType0.withValueHandler(class2);
      ClassUtil.hasClass(simpleType1, class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class5);
      Class<Object> class6 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class6, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.primitiveType(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class7 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class7);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.RuntimeException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassUtil.backticked("primitive");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class2 = CollectionType.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<Float> class4 = Float.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.findSuperClasses(class5, class0, true);
      Class<Short> class6 = Short.class;
      ClassUtil.isCollectionMapOrArray(class6);
      ClassUtil.isJacksonStdImpl((Object) "`primitive`");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("?#Bwg/U[jd%VW)?*");
      Class<ArrayType> class0 = ArrayType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockRuntimeException0, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `org.evosuite.runtime.mock.java.lang.MockRuntimeException`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Boolean boolean0 = new Boolean("");
      ClassUtil.nullOrToString(boolean0);
      ClassUtil.isProxyType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "java.lang.Boolean@0000000001");
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.primitiveType(class0);
      Class<String> class2 = String.class;
      ClassUtil.isProxyType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      jsonFactory3.setInputDecorator((InputDecorator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("}2<+L>");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1114111;
      intArray0[2] = 0;
      mockIOException0.printStackTrace();
      intArray0[3] = 2149;
      intArray0[4] = (-347);
      intArray0[5] = (-1233);
      intArray0[6] = 302;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("entrySet", intArray0, mockIOException0);
      Class<Character> class1 = Character.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.backticked("primitive");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.classOf((Object) null);
      Class<IOException> class1 = IOException.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.hasClass(class1, class3);
      Class<Short> class4 = Short.class;
      ClassUtil.getDeclaredMethods(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1114111;
      intArray0[2] = (-1723);
      Class<Double> class1 = Double.class;
      ClassUtil.findClassAnnotations(class1);
      SQLWarning sQLWarning0 = new SQLWarning("[2SpY+%(j6U#;", "annotation");
      ClassUtil.getRootCause(sQLWarning0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator(".|`7}4>,=.StxPx)=D2");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory0.enable(jsonParser_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      jsonFactory0.createGenerator((Writer) mockPrintWriter0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) mockPrintWriter0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Boolean boolean0 = new Boolean("");
      ClassUtil.nullOrToString(boolean0);
      ClassUtil.isProxyType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "java.lang.Boolean@0000000001");
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.backticked("");
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockError mockError0 = new MockError("ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.getRootCause(mockError0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.SerializerProvider");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<NoClass> class1 = NoClass.class;
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Integer integer1 = Integer.getInteger("vals", integer0);
      ClassUtil.isJacksonStdImpl((Object) integer1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class0 = Float.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler("vals");
      javaTypeArray0[0] = (JavaType) collectionType1;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.constructType(class2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "'^2~";
      String string1 = "]\\aF4U6UX5Fo#~^";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'^2~", "com.fasterxml.jackson.databind.module.SimpleModule");
      sQLTransientConnectionException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.spliterator();
      sQLTransientConnectionException0.forEach(consumer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'^2~", "]aF4U6UX5Fo#~^", sQLTransientConnectionException0);
      sQLTransactionRollbackException0.addSuppressed(sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // '^2~
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1114111;
      intArray0[2] = (-1723);
      Class<Double> class1 = Double.class;
      ClassUtil.findClassAnnotations(class1);
      SQLWarning sQLWarning0 = new SQLWarning("[2SpY+%(j6U#;", "annotation");
      sQLWarning0.initCause(mockIOException0);
      ClassUtil.getRootCause(sQLWarning0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator(".|`7}4>,=.StxPx)=D2");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory0.enable(jsonParser_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      jsonFactory0.createGenerator((Writer) mockPrintWriter0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) mockPrintWriter0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(838);
      // Undeclared exception!
//      try { 
        placeholderForType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = "m)QDS";
      ClassUtil.backticked("m)QDS");
      boolean boolean0 = true;
      byte byte0 = (byte)7;
      Byte byte1 = new Byte((byte)7);
      ClassUtil.classOf(byte1);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<Float> class2 = Float.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class3, class0, true);
      byte byte2 = (byte) (-86);
      Byte byte3 = new Byte((byte) (-86));
      ClassUtil.isJacksonStdImpl((Object) byte3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory1.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassUtil.nonNullString("vals");
      ClassUtil.nonNullString("Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      ClassUtil.nullOrToString("]hCa`oOx");
      ClassUtil.classOf("Non-generic Collection class %s did not resolve to something with element type %s but %s ");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Double> class1 = Double.class;
      Class<Annotation> class2 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      simpleType0.refine(class1, typeBindings0, javaTypeArray0[2], javaTypeArray0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "Non-generic Collection class %s did not resolve to something with element type %s but %s ", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.setInputDecorator((InputDecorator) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("}2<+L>");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) jsonFactory3;
      objectArray0[2] = (Object) jsonFactory3;
      objectArray0[3] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "[HQ51Y8:#t`", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((OutputStream) printStream0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.BatchUpdateException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.backticked((String) null);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.emptyIterator();
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      SQLWarning sQLWarning0 = new SQLWarning("Lj9kK", "Lj9kK");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Lj9kK", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) mockRuntimeException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) constructor0;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) constructor0;
      objectArray0[3] = (Object) constructor0;
      objectArray0[4] = (Object) constructor0;
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) class1;
      objectArray0[7] = (Object) constructor0;
      objectArray0[8] = (Object) constructor0;
//      try { 
        constructor0.newInstance(objectArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.isBogusClass(class0);
      ClassUtil.nonNullString("e/%O!N$");
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaringClass(class0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.createInstance(class2, true);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      boolean boolean0 = true;
//      try { 
        ClassUtil.createInstance(class3, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Character character0 = Character.valueOf('1');
      ClassUtil.nonNull(character0, character0);
      Class<NoClass> class0 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getClassMethods(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockDate mockDate0 = new MockDate(1481, 0, 0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLWarning sQLWarning0 = new SQLWarning();
      Consumer<Object> consumer0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2166, 2821);
      typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      sQLWarning0.spliterator();
      Class<String> class2 = String.class;
      Class<IOException> class3 = IOException.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      mapType0.toString();
      mapType0.isTypeOrSuperTypeOf(class2);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.getAttribute(mapType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockError mockError0 = new MockError("ZERO_LENGTH_ENUM_ARRAY");
      assertNotNull(mockError0);
      
      Throwable throwable0 = ClassUtil.getRootCause(mockError0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNotNull(throwable0);
      
      String string0 = mockError0.toString();
      assertSame(mockError0, throwable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ZERO_LENGTH_ENUM_ARRAY", string0);
      assertNotNull(string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.SerializerProvider", "Failed to construct BeanSerializer for %s: (%s) %s", 19, throwable0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException0.getMessage());
      assertEquals(19, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Failed to construct BeanSerializer for %s: (%s) %s", sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException0.getMessage());
      assertEquals(19, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Failed to construct BeanSerializer for %s: (%s) %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException1.toString());
      assertEquals(19, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("Failed to construct BeanSerializer for %s: (%s) %s", sQLNonTransientConnectionException1.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = (SQLNonTransientConnectionException)ClassUtil.throwIfRTE(sQLNonTransientConnectionException1);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException2);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException2, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException2);
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException0.getMessage());
      assertEquals(19, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("Failed to construct BeanSerializer for %s: (%s) %s", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException1.toString());
      assertEquals(19, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("Failed to construct BeanSerializer for %s: (%s) %s", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException2.toString());
      assertEquals(19, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("Failed to construct BeanSerializer for %s: (%s) %s", sQLNonTransientConnectionException2.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.SerializerProvider", sQLNonTransientConnectionException2.getMessage());
      
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      assertNotNull(treeSet0);
      
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0, hashMap0);
      assertNotNull(beanPropertyMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(beanPropertyMap0.isCaseInsensitive());
      assertFalse(beanPropertyMap0.hasAliases());
      assertEquals(0, beanPropertyMap0.size());
      
      NameTransformer.NopTransformer nameTransformer_NopTransformer0 = new NameTransformer.NopTransformer();
      assertNotNull(nameTransformer_NopTransformer0);
      
      NameTransformer.NopTransformer nameTransformer_NopTransformer1 = (NameTransformer.NopTransformer)NameTransformer.NOP;
      assertFalse(nameTransformer_NopTransformer1.equals((Object)nameTransformer_NopTransformer0));
      assertNotSame(nameTransformer_NopTransformer1, nameTransformer_NopTransformer0);
      assertNotNull(nameTransformer_NopTransformer1);
      
      NameTransformer.Chained nameTransformer_Chained0 = (NameTransformer.Chained)NameTransformer.chainedTransformer(nameTransformer_NopTransformer0, nameTransformer_NopTransformer1);
      assertFalse(nameTransformer_NopTransformer0.equals((Object)nameTransformer_NopTransformer1));
      assertFalse(nameTransformer_NopTransformer1.equals((Object)nameTransformer_NopTransformer0));
      assertNotSame(nameTransformer_NopTransformer0, nameTransformer_NopTransformer1);
      assertNotSame(nameTransformer_NopTransformer1, nameTransformer_NopTransformer0);
      assertNotNull(nameTransformer_Chained0);
      
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
      assertFalse(nameTransformer_NopTransformer0.equals((Object)nameTransformer_NopTransformer1));
      assertFalse(nameTransformer_NopTransformer1.equals((Object)nameTransformer_NopTransformer0));
      assertFalse(beanPropertyMap1.equals((Object)beanPropertyMap0));
      assertNotSame(beanPropertyMap0, beanPropertyMap1);
      assertNotSame(nameTransformer_NopTransformer0, nameTransformer_NopTransformer1);
      assertNotSame(nameTransformer_NopTransformer1, nameTransformer_NopTransformer0);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
      assertNotNull(beanPropertyMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(beanPropertyMap0.isCaseInsensitive());
      assertFalse(beanPropertyMap0.hasAliases());
      assertEquals(0, beanPropertyMap0.size());
      assertEquals(0, beanPropertyMap1.size());
      assertTrue(beanPropertyMap1.isCaseInsensitive());
      assertFalse(beanPropertyMap1.hasAliases());
      
      BeanDeserializer beanDeserializer0 = null;
//      try {
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, beanPropertyMap1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      MockException mockException0 = new MockException((String) null);
      assertNotNull(mockException0);
      
      String string1 = mockException0.getMessage();
      assertNull(string1);
      
      String string2 = mockException0.getMessage();
      assertNull(string2);
      
      String string3 = "serialVersionUID";
      File file0 = MockFile.createTempFile("serialVersionUID", "t:X;Jk Kg7@");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("serialVersionUID0t:X;Jk Kg7@", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/serialVersionUID0t:X;Jk Kg7@", file0.toString());
      assertEquals("/tmp", file0.getParent());
      
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(file0, "serialVersionUID");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // serialVersionUID
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<NoClass> class1 = NoClass.class;
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, float0, "','");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Float (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method '',''
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = false;
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'M';
      charArray0[3] = 'p';
      charArray0[4] = '[';
      charArray0[5] = '\'';
      CharArrayReader charArrayReader0 = null;
//      try {
        charArrayReader0 = new CharArrayReader(charArray0, 1170, 1170);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.CharArrayReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.nonNullString("5#$?5`W(");
      assertEquals("5#$?5`W(", string0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.classOf("5#$?5`W(");
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class0, false);
      assertNotNull(list0);
      assertFalse(list0.contains(class1));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      String string0 = "\"%s\"";
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, class0, "\"%s\"");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.SimpleType) must override method '\"%s\"'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil.backticked("primitive");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class2 = CollectionType.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findConstructor(class4, true);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.hasClass(class3, class5);
      Class<Short> class6 = Short.class;
      ClassUtil.getDeclaredMethods(class6);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      
      Class<Character> class3 = Character.class;
      Class<String> class4 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class4, true);
      assertEquals(2, list0.size());
      
      Class<ArrayType> class5 = ArrayType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class5);
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      JsonFormat.Value jsonFormat_Value0 = new JsonFormat.Value();
      jsonFormat_Value0.toString();
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findExpectedFormat(jsonFormat_Value0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      MockError mockError0 = new MockError("[2q", (Throwable) null);
      mockError0.getMessage();
      mockError0.getStackTrace();
      mockError0.getStackTrace();
      mockError0.fillInStackTrace();
      mockError0.getMessage();
      mockError0.getMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Member member0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1114111;
      intArray0[2] = (-1723);
      intArray0[3] = 2149;
      intArray0[4] = (-347);
      intArray0[5] = (-1233);
      intArray0[6] = 302;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("entrySet", intArray0, mockIOException0);
      mockIOException0.addSuppressed(batchUpdateException0);
      mockIOException0.getMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassUtil.nonNullString("^)C");
      ClassUtil.backticked((String) null);
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericInterfaces(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<SimpleType> class0 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("keyUniverse", class0, "keyUniverse");
      ClassUtil.getRootCause(jsonMappingException0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Short short0 = new Short((short)1340);
      ClassUtil.nullOrToString(short0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }
}
