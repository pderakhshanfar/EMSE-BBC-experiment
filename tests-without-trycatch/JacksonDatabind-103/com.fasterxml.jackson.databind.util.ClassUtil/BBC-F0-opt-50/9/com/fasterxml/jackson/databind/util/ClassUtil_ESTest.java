/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:43:10 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      int int0 = classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-336));
      Integer integer2 = ClassUtil.nonNull(integer1, integer0);
      assertEquals((-336), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Character character0 = new Character('{');
      Character character1 = ClassUtil.nonNull((Character) null, character0);
      assertEquals('{', (char)character1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.io.InputStream, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      SQLWarning sQLWarning0 = new SQLWarning("}<QRv3", "JSON");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning: }<QRv3
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockError mockError0 = new MockError();
      Throwable throwable0 = ClassUtil.throwIfIOE(mockError0);
      assertSame(mockError0, throwable0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("nC'gKYJl2C#%REuLk@x", "[]", (-2));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("enum", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Byte> class1 = Byte.class;
      Class<Integer> class2 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(93);
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapType0, (JavaType[]) null, (JavaType) mapType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) referenceType0, (JavaType[]) null, javaType0);
      Class<?> class3 = ClassUtil.rawClass(collectionLikeType0);
      assertTrue(class3.isInterface());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      Class<Error> class1 = Error.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) placeholderForType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, placeholderForType0);
      Class<?> class2 = ClassUtil.rawClass(referenceType0);
      assertEquals(16385, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(">n");
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      Class<?> class1 = ClassUtil.rawClass(arrayType0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Void> class0 = Void.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(13, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class2, list0);
      assertEquals(6, list1.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$1180907282", class0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<?> class0 = ClassUtil.classOf(accessPattern0);
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Class<?> class1 = ClassUtil.classOf(enumSet0);
      assertEquals("class java.util.RegularEnumSet", class1.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, class0, "=r*qY%");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", 782);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jacks", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0);
      sQLWarning0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, (String) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.java.io.IOException");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("net.sf.cglib.proxy.java.io.IOException", mockRuntimeException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "r67`SD~CF}z\"e@{-,e");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Class ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile(" auz)$+I%_o*rCU/e4", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, " auz)$+I%_o*rCU/e4");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-393805500));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackso", (String) null, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLException sQLException0 = new SQLException("Multiple back-reference properties with name '", "Multiple back-reference properties with name '");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Multiple back-reference properties with name '", sQLException0);
      sQLException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("ga~cU$$\"C7m", class0, "ga~cU$$\"C7m");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.util.HashMap` from String \"ga~cU$$\"C7m\": ga~cU$$\"C7m
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockIOException mockIOException0 = new MockIOException("was expecting comma to separate ");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "was expecting comma to separate ", (Throwable) mockIOException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): was expecting comma to separate 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-2049), (-2049));
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "com.fasterxml.jackson.databind.ext.Java7SupportImpl");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected END_ARRAY: com.fasterxml.jackson.databind.ext.Java7SupportImpl
//         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException(")7hS,Iw'/wJ&cec!~^D", "jlwK|fupN-a*f!", 3, sQLWarning0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, ")7hS,Iw'/wJ&cec!~^D");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLException sQLException0 = new SQLException("!ByLdQ'F", "4z");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "4z");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4z
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", problem: ");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // , problem: 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<Object>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<Error>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockIOException0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 128, true);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<NoClass> class0 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, "9h");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from String \"JSON\": 9h
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "EiPjDuF!_=*>\"Fu");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // EiPjDuF!_=*>\"Fu
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, objectMapper0, (OutputStream) null);
      MockIOException mockIOException0 = new MockIOException("JSON", (Throwable) null);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float(0.0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedInputStream pipedInputStream0 = new PipedInputStream(37);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0, byteArray0, (-4784), true);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedOutputStream0, "Multiple back-reference properties with name '");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1744709515));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Constructor<InputStream> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = ClassUtil.backticked("IW4WnlM");
      assertEquals("`IW4WnlM`", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("AKROa+QeQ", "AKROa+QeQ", (-341), batchUpdateException0);
      batchUpdateException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("ac%2n &<wT/\u0007", "6Mmb_NZ6 raxrE");
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.getRootCause(sQLDataException0);
      assertEquals("6Mmb_NZ6 raxrE", sQLDataException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Double double0 = new Double((-1169.315027502064));
      Class<NoClass> class0 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(double0, class0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Double`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("entrySet");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientException0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLNonTransientException0);
      assertSame(throwable0, sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockError mockError0 = new MockError("org.hibernate.proxy.");
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<Short> class2 = Short.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class2, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(2, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Class<Long> class1 = Long.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class1, list0);
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("nwx", "com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer", (-1852831698));
      MockError mockError0 = new MockError("/)DlLDC[:qdznWJ1o(", sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      String string0 = ClassUtil.getPackageName(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6149));
      objectReader0.forType((JavaType) placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3Vf=S!::AyO]'iO", "P0m!:2p[nROjWkx.");
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      enumMap0.put(accessPattern0, resolvedRecursiveType0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertTrue(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("char", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("short", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Short", class1.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.wrapperType(class1);
      assertEquals("class java.lang.Float", class2.toString());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.wrapperType(class1);
      assertEquals("class java.lang.Long", class2.toString());
      assertEquals("long", class1.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals('\u0000', object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertEquals("``", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`int`", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      String string0 = ClassUtil.getClassDescription(mapType0);
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`java.util.HashMap`", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtil.quotedOr(class0, "}2Kpt0?1Jr");
      assertEquals("\"class java.lang.Long\"", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Long long0 = new Long((-2854L));
      String string0 = ClassUtil.nullOrToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JsonMappingException jsonMappingException0 = ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
      assertNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor constructor1 = (Constructor)ClassUtil.nonNull((AccessibleObject) constructor0, (AccessibleObject) classUtil_Ctor0._ctor);
      assertTrue(constructor1.isAccessible());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<?> class1 = ClassUtil.rawClass(simpleType0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      SQLException sQLException0 = new SQLException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockException mockException0 = new MockException("`java.io.IOException`");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: `java.io.IOException`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Character> class0 = Character.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Character` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/nft$\rW", (Map<String, ClientInfoStatus>) null, (Throwable) null);
      MockIOException mockIOException0 = new MockIOException(sQLClientInfoException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.sql.SQLClientInfoException: /nft$\rW
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Unresolved forward reference but no identity info", (-1854046887), mockIOException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, mockRuntimeException0, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class org.evosuite.runtime.mock.java.lang.MockRuntimeException (of class java.lang.Object) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      ClassUtil.verifyMustOverride(class0, error0, ">zcv( ^8Xcqe+]% ");
      assertEquals("java.lang.Error", error0.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.hasClass("", class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<LongNode> class0 = LongNode.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, false);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Class<Object> class1 = Object.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, true);
      assertEquals(11, list0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<MapType> class1 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType0, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertTrue(constructor1.isAccessible());
      assertNotNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("|Z;64F4", "|Z;64F4", 388);
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      assertEquals("|Z;64F4", sQLDataException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0, "Null String illegal for SerializedString");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTimeoutException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "TCz#YZ(AY");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertFalse(class1.isAnnotation());
  }
}
