/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:20:26 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<DataInputStream> class1 = DataInputStream.class;
      ClassUtil.getDeclaringClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(403);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      jsonFactory0.setCodec(objectReader0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("UU", "JSON");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      List<Class<?>> list0 = new ArrayList<Class<Boolean>>();
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
//      try { 
        ClassUtil.throwIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Byte> class0 = Byte.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(simpleType0, (String) null, (String) null);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'null' as a subtype of [simple type, class java.lang.Byte]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[0];
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, annotationMap0, annotationMapArray0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-641314725));
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter(annotatedConstructor0, placeholderForType0, typeResolutionContext_Basic0, annotationMap0, (-641314725));
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      JsonInclude.Value jsonInclude_Value1 = JsonInclude.Value.merge(jsonInclude_Value0, jsonInclude_Value0);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector0, annotatedParameter0, (PropertyName) null, (PropertyMetadata) null, jsonInclude_Value1);
      // Undeclared exception!
//      try { 
        ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) jsonFactory_Feature0;
      objectArray0[2] = (Object) jsonFactory2;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) jsonFactory3;
      objectArray0[6] = (Object) jsonFactory3;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "JSON", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0);
      DataTruncation dataTruncation0 = new DataTruncation(556, true, true, 556, (-9999));
      dataTruncation0.getNextWarning();
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "J{a~Tp]M", (Throwable) null);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      SerializerProvider serializerProvider0 = objectMapper3.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "Could not find creator property with name '%s' (known Creator properties: %s)", (Throwable) null);
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find creator property with name '%s' (known Creator properties: %s)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ")[xRdM*");
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-7));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2617, objectMapper2, mockPrintStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<NoClass> class1 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(2, class1, (String) null);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from number 2: null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Locale> enumMap0 = new EnumMap<ClientInfoStatus, Locale>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, referenceType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(class1);
      Version version0 = new Version(1257, 1288, 3084, (String) null, (String) null, "5{1}5");
      SimpleModule simpleModule0 = new SimpleModule((String) null, version0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      SimpleModule simpleModule1 = simpleModule0.addValueInstantiator(class0, valueInstantiator_Base0);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withTypeHandler(simpleModule1);
      Long long0 = new Long(1288);
      CollectionLikeType collectionLikeType3 = collectionLikeType2.withContentTypeHandler(long0);
      CollectionLikeType collectionLikeType4 = collectionLikeType3.withStaticTyping();
      ClassUtil.rawClass(collectionLikeType4);
      Class<CreatorProperty> class2 = CreatorProperty.class;
//      try { 
        ClassUtil.createInstance(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.deser.CreatorProperty has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonParser_Feature1);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonGenerator_Feature1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((Writer) mockFileWriter0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLInvalidAuthorizationSpecException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Locale> enumMap0 = new EnumMap<ClientInfoStatus, Locale>(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Locale> enumMap0 = new EnumMap<ClientInfoStatus, Locale>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<NullNode> class2 = NullNode.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class0, class2, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      int int0 = 37;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 37, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 3);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, "0_~E31");
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(jsonMappingException0);
      SimpleType simpleType0 = referenceType1.withTypeHandler("JSON");
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) simpleType0, jsonToken0, "com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Single");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGenerator0, (Exception) jsonMappingException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NUMBER_INT: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Single
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class1 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactory0, class1);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      Integer integer0 = new Integer((-1807324828));
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(integer0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(arrayType0, arrayType1);
      ArrayType arrayType2 = arrayType1.withTypeHandler(collectionLikeType0);
      ArrayType arrayType3 = arrayType2.withStaticTyping();
      ClassUtil.rawClass(arrayType3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Locale> enumMap0 = new EnumMap<ClientInfoStatus, Locale>(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Locale locale0 = Locale.ITALY;
      enumMap0.put(clientInfoStatus0, locale0);
      EnumMap<ClientInfoStatus, Locale> enumMap1 = new EnumMap<ClientInfoStatus, Locale>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Locale> enumMap0 = new EnumMap<ClientInfoStatus, Locale>(class1);
      EnumMap<ClientInfoStatus, Locale> enumMap1 = new EnumMap<ClientInfoStatus, Locale>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Double> class0 = Double.TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, (OutputStream) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<RuntimeException>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", mockIOException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException1, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         //  is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Module> class1 = Module.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.verifyMustOverride(class0, clientInfoStatus0, (String) null);
      Class<Long> class1 = Long.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockError mockError0 = new MockError();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0);
      ClassUtil.findEnumType(enumSet0);
      System.setCurrentTimeMillis(9223372036854775807L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-589), (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "-d=.;|C9o";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "-d=.;|C9o");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // -d=.;|C9o
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPropertyInclusion(jsonInclude_Value0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      LinkedList<Module> linkedList0 = new LinkedList<Module>(treeSet0);
      ObjectMapper objectMapper5 = objectMapper4.registerModules((Iterable<? extends Module>) linkedList0);
      Class<AccessPattern> class0 = AccessPattern.class;
      objectMapper5.readerFor(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      MockError mockError0 = new MockError(";py#vg");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";py#vg", ";py#vg", mockError0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(";py#vg", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      ClassUtil.hasClass(runtimeException0, class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassUtil.backticked("3,uCc^JUI:+#");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class1, false);
      int[] intArray0 = new int[1];
      intArray0[0] = 78;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("3,uCc^JUI:+#", intArray0);
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType";
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      SQLWarning sQLWarning1 = new SQLWarning("`3,uCc^JUI:+#`");
      sQLWarning0.setNextWarning(sQLWarning1);
      sQLWarning0.initCause(batchUpdateException0);
      batchUpdateException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Class<DataInputStream> class0 = DataInputStream.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.classOf(clientInfoStatus0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 26, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) uTF8JsonGenerator0, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "enum";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "enum");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("H@$x]t2g", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTimeoutException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "47lhPi%!PO!");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet.of(clientInfoStatus0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<NullNode> class1 = NullNode.class;
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.node.JsonNodeType");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      ObjectMapper objectMapper4 = objectMapper3.disable(jsonGenerator_FeatureArray0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[2] = mapperFeature2;
      ObjectMapper objectMapper5 = objectMapper4.enable(mapperFeatureArray0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("java.sql.ClientInfoS");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      ObjectMapper objectMapper6 = objectMapper5.setDefaultPrettyPrinter(defaultPrettyPrinter2);
      Class<Boolean> class0 = Boolean.class;
      objectMapper6.readerFor(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.io.IOException");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      MapType mapType1 = mapType0.withValueHandler((Object) null);
      MapLikeType mapLikeType0 = mapType1.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("|BY9`", "|BY9`", (-6));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1yxY|^e\u0002Wb7mG f");
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TfmpNwnL{2>'Nq9R 5$", "|BY9`", (-2190));
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      System.setCurrentTimeMillis(2419L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("mQf!k:G^-2:");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockRuntimeException0);
      sQLRecoverableException0.printStackTrace();
      sQLRecoverableException0.spliterator();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "unknown");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3&f=n2%o)ULg6nD", "");
      MockIOException mockIOException0 = new MockIOException("3&f=n2%o)ULg6nD");
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) null);
      Class<Float> class0 = Float.class;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_EMBEDDED_OBJECT: JSON
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Reader) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'm';
      charArray0[2] = ')';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 0, 67);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "l#fs");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "w");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // w
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xgz");
      Class<String> class1 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility((JsonAutoDetect.Value) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper4 = objectMapper3.setAnnotationIntrospector(annotationIntrospector1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper5 = objectMapper4.enable(deserializationFeature0);
      Class<CollectionType> class0 = CollectionType.class;
      objectMapper5.readerFor(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.backticked("hU}4 eSB^v");
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.findSuperTypes(class3, class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1008));
      ClassUtil.nonNull((PlaceholderForType) null, placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.findSuperClasses(class1, class0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class2);
      MapType mapType1 = mapType0.withTypeHandler(class2);
      MapType mapType2 = mapType1.withContentTypeHandler(mapType0);
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes((JavaType) mapType2, (Class<?>) class3, false);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isJacksonStdImpl((Object) class1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<String> class2 = String.class;
      ClassUtil.getConstructors(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "T@67fg=!h");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasClass(class0, class0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<DataInputStream> class1 = DataInputStream.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isProxyType(class1);
      ClassUtil.nameOf(class1);
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass";
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("BO<W?rja3$&9& f9Bx?", (Object[]) null);
      mockRuntimeException0.printStackTrace(printWriter0);
      MockException mockException0 = new MockException("H9y", mockRuntimeException0);
      mockRuntimeException0.initCause(mockException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.canBeABeanType(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getDeclaringClass(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, pipedOutputStream0, byteArray0, 3, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, "0-NofBQ=;U-rj}");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("oe'r.EVTMwT%jOFNq.", "0-NofBQ=;U-rj}", 977, jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLIntegrityConstraintViolationException: oe'r.EVTMwT%jOFNq.
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(" is not a primitive type");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "com.fasterxml.jackson.databind.PropertyName");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isJacksonStdImpl((Object) class1);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.classOf((Object) null);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.hasEnclosingMethod(class3);
      Class<MapType> class4 = MapType.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.getClassMethods(class1);
      ClassUtil.getGenericInterfaces(class1);
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class5);
      Class<Object> class6 = Object.class;
      ClassUtil.findClassAnnotations(class6);
      int[] intArray0 = new int[4];
      intArray0[0] = 316;
      intArray0[1] = 96;
      intArray0[2] = 1832;
      intArray0[3] = (-1743199137);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", "com.fasterxml.jackson.databind.node.ObjectNode", 4, sQLClientInfoException1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", intArray0, sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.classOf(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1041;
      intArray0[1] = (-2683);
      intArray0[2] = 2;
      intArray0[3] = (-1900);
      intArray0[4] = (-397);
      intArray0[5] = (-64);
      intArray0[6] = 101;
      intArray0[7] = 3516;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("' (code 0x");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, throwable0);
      MockError mockError0 = new MockError("", batchUpdateException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TreeSet<ClientInfoStatus> treeSet0 = new TreeSet<ClientInfoStatus>();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      enumSet0.containsAll(treeSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Float float0 = new Float(1605.9424236056);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      TreeSet<ClientInfoStatus> treeSet0 = new TreeSet<ClientInfoStatus>();
      enumSet0.containsAll(treeSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Failed to specialize base type ", (Throwable) null);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class0);
      Class<String> class3 = String.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream1, true, "Failed to specialize base type ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Failed to specialize base type 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.classNameOf(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaredFields(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      Byte byte0 = new Byte((byte) (-74));
      Byte byte1 = new Byte((byte) (-74));
      ClassUtil.nonNull(byte1, byte0);
      MockError mockError0 = new MockError();
      mockError0.printStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, (String) null);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<String> class2 = String.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.isCollectionMapOrArray(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.hasClass("org.hibernate.proxy.java.lang.Character", class3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "nnwpv");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class2 = Long.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, ", problem: ", "^%kqhM8FQZ_;yyJjZ,H");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^%kqhM8FQZ_;yyJjZ,H", "^%kqhM8FQZ_;yyJjZ,H", 44, jsonMappingException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Failed to instantiate class ", "PYu$w", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("^%kqhM8FQZ_;yyJjZ,H", map0, sQLClientInfoException0);
      sQLRecoverableException0.setNextException(sQLClientInfoException1);
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException1);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class2);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.isBogusClass(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<IOException> class5 = IOException.class;
      objectMapper0.readerFor(class5);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream1, false, "^%kqhM8FQZ_;yyJjZ,H");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // ^%kqhM8FQZ_;yyJjZ,H
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<String> class2 = String.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.isCollectionMapOrArray(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Kl&(/;1gr<P^GvG0*b", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.Character", "Kl&(/;1gr<P^GvG0*b", 8, sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLNonTransientException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Character
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Vector<Class<CollectionType>> vector0 = new Vector<Class<CollectionType>>();
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class2, true);
      ClassUtil.getClassDescription(runtimeException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class3);
      ClassUtil.nonNull(mapType0, mapType0);
      Float float0 = new Float(156.1114);
      Float float1 = new Float((-5141.0F));
      ClassUtil.nonNull(float0, float1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.classOf(class0);
      Byte byte0 = new Byte((byte)96);
      Byte byte1 = new Byte((byte)96);
      ClassUtil.nonNull(byte0, byte1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Annotation> class2 = Annotation.class;
      constructor0.toGenericString();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-700));
      placeholderForType0.actualType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassMethods(class2);
      ClassUtil.nameOf((Class<?>) null);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getEnclosingClass(class3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("entrySet");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0, sQLTransientConnectionException0);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.isBogusClass(class4);
      ClassUtil.isBogusClass((Class<?>) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLTransientConnectionException0, false);
      int int0 = 1910;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, "~Pec*:TU");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // ~Pec*:TU
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getDeclaringClass(class0);
      MockError mockError0 = new MockError();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      Vector<Class<CollectionType>> vector0 = new Vector<Class<CollectionType>>();
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getClassDescription(class1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class1);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      String string0 = ">)B8][$Wl_b";
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, class0, ">)B8][$Wl_b");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.Short) must override method '>)B8][$Wl_b'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.util.ClassUtil", "MODIFIED-FOR-URL", 1354);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, (OutputStream) null);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.databind.util.ClassUtil
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "o^1~D", sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      boolean boolean0 = false;
      ClassUtil.canBeABeanType(class0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("enum", false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator((InputDecorator) null);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature1);
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((Writer) mockFileWriter0);
      int int0 = 12;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "El}sEZ", 12);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      boolean boolean0 = false;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature0, false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("net.sf.cglib.proxy.java.io.IOException", true);
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((Writer) mockFileWriter0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "f';]MZdG9(*K", (-1));
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileWriter0, (Exception) sQLNonTransientException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLNonTransientException: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<MapType> class3 = MapType.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(33);
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      String string0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-1469));
      sQLIntegrityConstraintViolationException0.spliterator();
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getPackageName(class1);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Vector<Class<CollectionType>> vector0 = new Vector<Class<CollectionType>>();
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      Long long0 = new Long(0L);
      ClassUtil.isJacksonStdImpl((Object) long0);
      Class<ArrayType> class1 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 65599);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.getClassDescription((Object) null);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      Class<Long> class3 = Long.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.nonNullString("unknown");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      ClassUtil.nullOrToString(placeholderForType0);
      ClassUtil.nonNullString("keyType");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.type.PlaceholderForType@0000000001", "Unresolved forward reference but no identity info: ", 62);
      MockIOException mockIOException0 = new MockIOException("8", sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.isLocalType(class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaringClass(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<Float> class3 = Float.class;
      Class<Float> class4 = Float.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class4);
      MapType mapType1 = mapType0.withContentTypeHandler((Object) null);
      MapType mapType2 = mapType1.withStaticTyping();
      mapType2.withTypeHandler(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getDeclaredAnnotations();
      constructor0.getParameterTypes();
      constructor0.getAnnotatedReturnType();
      constructor0.toGenericString();
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 65599);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.getClassDescription(accessPattern0);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findEnumType(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nameOf(class2);
      ClassUtil.isConcrete(class1);
      Class<String> class3 = String.class;
      ClassUtil.getOuterClass(class3);
      Long long0 = new Long(0L);
      ClassUtil.classNameOf(long0);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.isBogusClass(class4);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
      ClassUtil.getDeclaredFields(class1);
      String string0 = "4hN\\'X18fQu9bkM";
      Integer integer0 = new Integer((-5));
//      try { 
        Integer.valueOf("4hN'X18fQu9bkM", (-5));
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // radix -5 less than Character.MIN_RADIX
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterTypes();
      constructor0.getAnnotatedReturnType();
      constructor0.toGenericString();
      Long long0 = new Long(0L);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.backticked("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      Class<RuntimeException> class2 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class2, true);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.hasClass(runtimeException0, class3);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.findClassAnnotations(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Long long0 = new Long(0L);
      MockIOException mockIOException0 = new MockIOException("annotation");
      ClassUtil.throwIfError(mockIOException0);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.findSuperTypes(class2, class2);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getGenericSuperclass(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.quotedOr((Object) null, "keyType");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(26);
      placeholderForType0.getContentType();
      placeholderForType0.findTypeParameters(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      placeholderForType0.getErasedSignature();
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      ClassUtil.getPackageName(class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$27");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nullOrToString(placeholderForType0);
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
      ClassUtil.nullOrToString("com.fasterxml.jackson.databind.type");
      ClassUtil.quotedOr(class0, "Ji!.-Af}#=^}\"N$o^");
      Class<String> class3 = String.class;
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (List<JsonNode>) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        arrayNode0.traverse((ObjectCodec) objectMapper0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.ArrayNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Annotation> class2 = Annotation.class;
      constructor0.toGenericString();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-700));
      placeholderForType0.actualType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassMethods(class2);
      ClassUtil.nameOf((Class<?>) null);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getEnclosingClass(class3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("entrySet");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0, sQLTransientConnectionException0);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.isBogusClass(class4);
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.findSuperClasses(class2, (Class<?>) null, true);
      MockException mockException0 = new MockException((String) null, sQLRecoverableException0);
      ClassUtil.throwIfIOE(mockException0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<NoClass> class2 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Long long0 = new Long(0L);
      ClassUtil.isProxyType(class1);
      ClassUtil.nonNullString(" (from class ");
      Class<RuntimeException> class2 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.classOf(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Annotation> class2 = Annotation.class;
      constructor0.toGenericString();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-700));
      placeholderForType0.actualType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassMethods(class2);
      ClassUtil.nameOf((Class<?>) null);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getEnclosingClass(class3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("entrySet");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0, sQLTransientConnectionException0);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.isBogusClass(class4);
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Annotation> class2 = Annotation.class;
      constructor0.toGenericString();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-700));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<?> class3 = ClassUtil.rawClass(placeholderForType0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassMethods(class2);
      ClassUtil.nameOf(class3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("entrySet");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0, sQLTransientConnectionException0);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.isBogusClass(class4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.toGenericString();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-700));
      placeholderForType0.actualType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassMethods(class2);
      ClassUtil.nameOf((Class<?>) null);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getEnclosingClass(class3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("entrySet");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 0, sQLTransientConnectionException0);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class1, true);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isJacksonStdImpl((Object) class1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.emptyIterator();
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^O*8(t~Gq0? H50.", "com.fasterxml.jacks", 802);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTimeoutException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jacks", "com.fasterxml.jacks", 802, sQLFeatureNotSupportedException0);
      SQLException sQLException0 = new SQLException("^O*8(t~Gq0? H50.", "^O*8(t~Gq0? H50.", 802, sQLTransientException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getDeclaredFields(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isBogusClass(class1);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.backticked("; failed to set access: ");
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.getClassDescription(class3);
      MockError mockError0 = new MockError();
      MockError mockError1 = new MockError();
      ClassUtil.hasClass(mockError1, class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(16345);
      Class<Double> class0 = Double.class;
      Class<Object> class1 = Object.class;
      Class<Character> class2 = Character.TYPE;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.quotedOr(class0, "f>$BH");
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isNonStaticInnerClass(class1);
      Long long0 = new Long(0L);
      ClassUtil.isProxyType(class1);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.isBogusClass(class0);
      Class<Error> class2 = Error.class;
      ClassUtil.findConstructor(class2, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.primitiveType(class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.getOuterClass(class5);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getDeclaredFields(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isBogusClass(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.findConstructor(class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.primitiveType(class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class4);
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Integer integer0 = new Integer(5);
      Short short0 = new Short((short) (-1582));
      ClassUtil.getClassDescription(short0);
      ClassUtil.getGenericSuperclass(class0);
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.backticked("Builder class %s does not have build method (name: '%s')");
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.getClassDescription(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil classUtil0 = new ClassUtil();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "l;5>!";
      SQLDataException sQLDataException0 = new SQLDataException("l;5>!", "l;5>!");
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "l;5>!");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // l;5>!
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.hasGenericTypes();
      sQLRecoverableException0.fillInStackTrace();
      Class<Double> class1 = Double.class;
      resolvedRecursiveType0.isTypeOrSuperTypeOf(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor1.getDeclaredAnnotations();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isBogusClass(class2);
      Class<Error> class3 = Error.class;
      ClassUtil.findConstructor(class3, true);
      Class<Byte> class4 = Byte.class;
      ClassUtil.primitiveType(class4);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class5);
      Class<ArrayType> class6 = ArrayType.class;
      ClassUtil.getOuterClass(class6);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Constructor<AccessibleObject> constructor1 = ClassUtil.findConstructor(class1, true);
      constructor1.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class2 = String.class;
      Class<Float> class3 = Float.class;
      ClassUtil.isBogusClass(class3);
      Class<Error> class4 = Error.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.primitiveType(class2);
      ClassUtil.hasEnclosingMethod(class3);
      Class<String> class5 = String.class;
      ClassUtil.getOuterClass(class5);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.quotedOr(list0, "8[~yC2TV");
      ClassUtil.classNameOf(class1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getDeclaringClass(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLDataException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(throwable0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      String string0 = "wTfxbsh^?rwvU(ep";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wTfxbsh^?rwvU(ep");
      Class<Byte> class2 = Byte.class;
      ClassUtil.findConstructor(class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getDeclaringClass(class0);
      Constructor<SimpleType> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor1.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Long long0 = new Long(0L);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<LinkedList> class0 = LinkedList.class;
      Class<Long> class1 = Long.TYPE;
      Integer integer0 = new Integer((-2468));
      ClassUtil.getClassDescription(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Class<String> class4 = String.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.backticked("j:$:`&C_kzjJ:wm,XS");
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.getClassDescription(class3);
      MockError mockError0 = new MockError();
      ClassUtil.hasClass(mockError0, class0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@y=Bu,^VM*b^T( >", " AS*m", (-2381));
      sQLTransientConnectionException0.getSuppressed();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // @y=Bu,^VM*b^T( >
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      ClassUtil.nullOrToString(placeholderForType0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nonNullString("keyType");
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class3 = String.class;
      ClassUtil.isBogusClass(class3);
      Class<Error> class4 = Error.class;
      ClassUtil.findConstructor(class4, false);
      Class<IOException> class5 = IOException.class;
      ClassUtil.findRawSuperTypes(class5, class1, false);
      Class<Float> class6 = Float.class;
      ClassUtil.isLocalType(class6, true);
      Class<MapLikeType> class7 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class7);
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isNonStaticInnerClass(class1);
      Long long0 = new Long(0L);
      ClassUtil.isProxyType(class1);
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t_{vSby!XyC*");
      ClassUtil.findConstructor(class0, false);
      boolean boolean0 = new Boolean("t_{vSby!XyC*");
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, false);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t_{vSby!XyC*");
      ClassUtil.findConstructor(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      ClassUtil.nullOrToString(placeholderForType0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nonNullString("keyType");
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class3 = String.class;
      ClassUtil.isBogusClass(class3);
      Class<Error> class4 = Error.class;
      ClassUtil.findConstructor(class4, false);
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.primitiveType(class5);
      Class<Short> class6 = Short.class;
      ClassUtil.hasEnclosingMethod(class6);
      Class<NoClass> class7 = NoClass.class;
      ClassUtil.getOuterClass(class7);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<NoClass> class1 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class1 = Object.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Double> class3 = Double.class;
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findSuperTypes(class3, class4);
      Class<IOException> class5 = IOException.class;
      ClassUtil.isProxyType(class5);
      Class<Object> class6 = Object.class;
      ClassUtil.findSuperTypes(class6, class1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Long> class2 = Long.class;
      Class<Long> class3 = Long.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
//      try { 
        TypeBindings.create((Class<?>) class3, (JavaType) placeholderForType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class java.lang.Long with 1 type parameter: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, class0, "ZERO_LENGTH_ENUM_ARRAY");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.reflect.AccessibleObject) must override method 'ZERO_LENGTH_ENUM_ARRAY'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findEnumType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getDeclaredAnnotations();
      constructor0.getParameterTypes();
      ClassUtil.isConcrete((Member) constructor0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null, ") decorated with @JsonCreator (for Enum type ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ) decorated with @JsonCreator (for Enum type 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.quotedOr(class0, "8[)OC2TV");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.backticked("6");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.getClassDescription(integer0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.backticked((String) null);
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.getClassDescription(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaringClass(class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.getRootCause(sQLDataException0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vlf,{Q@4/Whb.AQq", " has no default (no arg) constructor", 0);
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // vlf,{Q@4/Whb.AQq
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString((String) null);
      ClassUtil.getDeclaringClass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLWarning0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Annotation> class2 = Annotation.class;
      constructor0.toGenericString();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isNonStaticInnerClass(class2);
      Long long0 = new Long(0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.");
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.getConstructors(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, batchUpdateException0);
      sQLRecoverableException0.addSuppressed(batchUpdateException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      String string0 = "com.fasterxml.jackson.core.io.OutputDecorator";
      MockThrowable mockThrowable0 = new MockThrowable("com.fasterxml.jackson.core.io.OutputDecorator");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.core.io.OutputDecorator", mockThrowable0);
      URI uRI0 = null;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = null;
//      try {
        stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.core.io.OutputDecorator", (String) null, (String) null, 3873);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Method name is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      String string0 = "size";
      int[] intArray0 = new int[4];
      intArray0[0] = 1241;
      intArray0[1] = 0;
      intArray0[2] = 0;
      constructor0.toGenericString();
      intArray0[3] = (-1761);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("size", intArray0);
      batchUpdateException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class2);
      File file0 = MockFile.createTempFile("serialVersionUID", "~=I=");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileReader0, "~=I=", jsonLocation0);
      jsonLocation0.toString();
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassMethods(class2);
      Float float0 = new Float((double) 500);
      ClassUtil.quotedOr(float0, " has no default (no arg) constructor");
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3&f=n2%o)ULg6nD", "3&f=n2%o)ULg6nD", 3611);
      MockIOException mockIOException0 = new MockIOException("3", sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getEnclosingClass(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("#;RSkX", "#;RSkX");
      sQLNonTransientException0.getLocalizedMessage();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Error> class1 = Error.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Error is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.primitiveType(class1);
      ClassUtil classUtil0 = new ClassUtil();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-827);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("l1:{T", "l1:{T");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "NULL");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // NULL
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Object object0 = null;
      ClassUtil.getClassDescription((Object) null);
      ClassUtil classUtil0 = new ClassUtil();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig0 = null;
      JavaType javaType0 = null;
      // Undeclared exception!
//      try { 
        basicClassIntrospector0.forDeserialization((DeserializationConfig) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil classUtil0 = new ClassUtil();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3&f=n2%o)ULg6nD", "3&f=n2%o)ULg6nD", 3611);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil classUtil0 = new ClassUtil();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "&0@93Ubhe");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `java.lang.reflect.AccessibleObject` from String \"com.fasterxml.jackson.databind.util.ClassUtil$Ctor\": &0@93Ubhe
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassUtil.emptyIterator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ClassUtil.nonNullString(" has no default (no arg) constructor");
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getConstructors(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" has no default (no arg) constructor", " has no default (no arg) constructor", (-3730));
      String string0 = "kcDr!-D+";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(" has no default (no arg) constructor", "kcDr!-D+");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // kcDr!-D+
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Throwable throwable0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException("delegate", (Throwable) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.valueInstantiators();
      sQLTransientException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(iterator0, "#");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.printStackTrace();
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // delegate (through reference chain: java.util.Collections$EmptyIterator[\"#\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }
}
