/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:02:04 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "java.lang.Float";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Float");
      Iterator<ResolvedRecursiveType> iterator0 = ClassUtil.emptyIterator();
      Class<?> class0 = ClassUtil.classOf(iterator0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nonNullString("java.lang.Float");
      Class<RuntimeException> class1 = RuntimeException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getPackageName(class1);
      Class<JsonSerializer> class2 = JsonSerializer.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.JsonSerializer is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      Random.setNextRandom(1);
      ClassUtil.primitiveType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findDefaultConstructor();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning(";");
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1485);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(mockRuntimeException0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapLikeType1, javaTypeArray0, (JavaType) mapLikeType1);
      SimpleType simpleType0 = referenceType0.withTypeHandler(typeBindings0);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = false;
      Class<RuntimeException> class0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<RuntimeException>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "net.sf.cglib.proxy.com.fasterxml.jackson.annotation.SimpleObjectIdResolver", "tBrP");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'net.sf.cglib.proxy.com.fasterxml.jackson.annotation.SimpleObjectIdResolver' as a subtype of null: tBrP
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<ArrayType> class3 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class2, class3, class0);
      ArrayType arrayType1 = arrayType0.withValueHandler(mapLikeType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      ArrayType arrayType2 = arrayType1.withContentTypeHandler(classNameIdResolver0);
      arrayType1.containedTypeOrUnknown((-1657472572));
      ArrayType arrayType3 = arrayType2.withStaticTyping();
      ClassUtil.rawClass(arrayType3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getClassMethods(class0);
      SQLWarning sQLWarning0 = new SQLWarning("5Ya+i;AKl6'$!8u`!c", "@L{wCp'66\"+T!h|O");
      SQLException sQLException0 = null;
      sQLWarning0.setNextException((SQLException) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("+=cDP0F4bT@|FJ", "'$zO.d=fc1", (-2383));
      sQLTransientException0.getSuppressed();
      sQLTransientException0.spliterator();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      sQLTransientException0.printStackTrace(printWriter0);
      sQLTransientException0.getLocalizedMessage();
      sQLWarning0.initCause((Throwable) null);
      sQLWarning0.setNextException(sQLTransientException0);
      sQLWarning0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "java.lang.Short");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.Short
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findClassAnnotations(class1);
      Class<NoClass> class2 = NoClass.class;
      Class<CollectionType> class3 = CollectionType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(class2);
      ClassUtil.findSuperTypes(javaType0, class3, false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      Class<?> class2 = ClassUtil.classOf(enumSet0);
      ClassUtil.isJacksonStdImpl(class1);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.emptyIterator();
      Class<Character> class0 = Character.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.isNonStaticInnerClass(class0);
      String string0 = "P3AyXoeVqKM";
      MockThrowable mockThrowable0 = new MockThrowable("P3AyXoeVqKM");
      MockPrintStream mockPrintStream0 = new MockPrintStream(",!r>PW>A=7|'LPXAO");
      mockPrintStream0.println(1878L);
      PrintStream printStream0 = mockPrintStream0.append('i');
      MockThrowable.replacement_printStackTrace((Throwable) mockThrowable0, printStream0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("P3AyXoeVqKM", "P3AyXoeVqKM", (-1744709515));
      sQLTransientConnectionException0.printStackTrace();
      mockThrowable0.addSuppressed(sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockThrowable0);
      mockThrowable0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.getRootCause(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      DecimalNode decimalNode0 = new DecimalNode((BigDecimal) null);
      // Undeclared exception!
//      try { 
        ClassUtil.quotedOr(decimalNode0, "(Mdh]LS");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.emptyIterator();
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(95);
      // Undeclared exception!
//      try { 
        TypeBindings.create((Class<?>) class2, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.jsontype.TypeIdResolver with 2 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) error0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperTypes(javaType0, class0, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 318);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.getClassDescription(accessPattern0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.java.lang.RuntimeException", "P0", (-3), (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, false);
      System.setCurrentTimeMillis((-156L));
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, true);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<Long> class1 = Long.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDelegateCreator();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue((String) null);
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector0, (AnnotatedMember) null, (PropertyName) null, propertyMetadata1, jsonInclude_Value0);
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withMetadata(propertyMetadata1);
      // Undeclared exception!
//      try { 
        ClassUtil.nameOf((Named) beanPropertyDefinition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<Integer> class1 = Integer.class;
      Class<IOException> class2 = IOException.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      javaTypeArray0[0] = javaType0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      JavaType javaType1 = null;
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory1);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      CollectionType collectionType1 = collectionType0.withTypeHandler(class3);
      Byte byte0 = new Byte((byte)0);
      CollectionType collectionType2 = collectionType0.withTypeHandler(byte0);
      CollectionType collectionType3 = collectionType1.withValueHandler(collectionType2);
      JavaType javaType2 = typeFactory0.moreSpecificType(collectionType3, collectionType3);
      javaTypeArray0[1] = javaType2;
      TypeBindings typeBindings0 = TypeBindings.create(class3, javaTypeArray0[1]);
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[0], typeBindings0);
      Character character0 = new Character('C');
      ArrayType arrayType1 = arrayType0.withContentValueHandler(character0);
      TypeBindings typeBindings1 = arrayType1.getBindings();
      TypeBindings typeBindings2 = typeBindings1.withUnboundVariable("9FA_D@?@Wc;g[m4ZM6%");
      JavaType javaType3 = typeFactory0.constructType((Type) collectionType3, typeBindings2);
      javaTypeArray0[2] = javaType3;
      CollectionLikeType collectionLikeType0 = collectionType3.withStaticTyping();
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      // Undeclared exception!
//      try { 
        typeFactory0.constructFromCanonical((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Module> class0 = Module.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.wrapperType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(110);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "JSON");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.util.AccessPattern` from String \"org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType\": JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(2.2250738585072014E-308);
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass(double0, class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, class0, true);
      int int0 = (-810);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter1);
      ByteArrayBuilder byteArrayBuilder0 = null;
//      try {
        byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, (-810));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "0':a-;[x;sGC9");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper4 = objectMapper3.registerModules(moduleArray0);
      SerializerProvider serializerProvider0 = objectMapper4.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "0':a-;[x;sGC9", (Throwable) jsonMappingException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOException iOException0 = ClassUtil.createInstance(class0, true);
//      try { 
        ClassUtil.throwIfIOE(iOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withRootName("\rN3o4VF>9z7D[L");
      Locale locale0 = new Locale("M_|}KwU'0vu80e/;", "\rN3o4VF>9z7D[L");
      ObjectReader objectReader2 = objectReader1.with(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader2.without(deserializationFeature0, deserializationFeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader3, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1883, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "?*^,|z}Z1", (Throwable) null);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // ?*^,|z}Z1
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isBogusClass(class0);
      MockError mockError0 = new MockError("cK.2Wz7H$5Ow?");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "cK.2Wz7H$5Ow?");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.isLocalType(class0, false);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.getConstructors(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nameOf((Class<?>) null);
      Class<Short> class2 = Short.class;
      ClassUtil.nameOf(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.clear();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<RuntimeException> class1 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 192;
      intArray0[1] = 3785;
      intArray0[2] = (-3900);
      intArray0[3] = 43;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Yc)7{n>3I/8?5pLiY4", intArray0);
      batchUpdateException0.getNextException();
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "Yc)7{n>3I/8?5pLiY4");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class0, class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, byteArrayOutputStream0, byteArray0, (byte)0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "pc6o R/95";
      ClassUtil.nonNullString("pc6o R/95");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pc6o R/95");
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.nameOf(class1);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.emptyIterator();
      Class<MapLikeType> class4 = MapLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperTypes(class4, class2);
      Class<Boolean> class5 = Boolean.class;
      ClassUtil.findSuperClasses((Class<?>) null, class5, false);
      Integer integer0 = new Integer((-3149));
      ClassUtil.classOf(integer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("pc6o R/95", hashMap0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // pc6o R/95
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Long> class0 = Long.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader0, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      System.setCurrentTimeMillis(0L);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1980);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType((Class<?>) null, false);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.String");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<SettableBeanProperty> class2 = SettableBeanProperty.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class2, "m=f_VA@s;+@5q<mL");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.deser.SettableBeanProperty` from number 10: m=f_VA@s;+@5q<mL
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, true);
      ClassUtil.classOf(runtimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0, (String) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotations();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.isConcrete((Member) constructor0);
      Class<InputStream> class2 = InputStream.class;
//      try { 
        ClassUtil.createInstance(class2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.io.InputStream, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.isJacksonStdImpl((Object) enumSet0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      objectMapper0.writer((FilterProvider) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      jsonGenerator0.writeBinary(byteArray0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLNonTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLNonTransientConnectionException: java.sql.SQLWarning
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1744094291);
      intArray0[1] = (-1577);
      intArray0[2] = (-1743199137);
      intArray0[3] = (-1302);
      intArray0[4] = (-8);
      intArray0[5] = (-619);
      intArray0[6] = 2212;
      intArray0[7] = (-1166);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", intArray0);
      batchUpdateException0.getNextException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3337);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      FloatNode floatNode0 = FloatNode.valueOf(3337);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(floatNode0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "[]";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getEnclosingClass(class2);
      String string1 = "annotation";
      int int0 = 41;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("+ur.B");
      SQLTransientException sQLTransientException0 = new SQLTransientException("annotation", "+ur.B", sQLInvalidAuthorizationSpecException0);
      sQLTransientException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        sQLTransientException0.initCause(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLInvalidAuthorizationSpecException: +ur.B
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getPackageName(class0);
      Vector<Class<Object>> vector0 = new Vector<Class<Object>>();
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)1);
      ClassUtil.isJacksonStdImpl((Object) short0);
      Class<Float> class0 = Float.class;
      ClassUtil.getPackageName(class0);
      Vector<Class<Object>> vector0 = new Vector<Class<Object>>();
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      System.setCurrentTimeMillis(1909L);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<CollectionType> class1 = CollectionType.class;
      Class<String> class2 = String.class;
      ClassUtil.findConstructor(class2, true);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class1, class3, true);
      ClassUtil.quotedOr(class2, "QlO%eV ,t ;y$JAiX");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getPackageName(class1);
      Vector<Class<Object>> vector0 = new Vector<Class<Object>>();
      ClassUtil.primitiveType(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.quotedOr(class0, "*YMS&jZ^,Ci!C\"<L%");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.hasClass("*YMS&jZ^,Ci!C\"<L%", class2);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.getEnclosingClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Short short0 = new Short((short)1);
      MockError mockError0 = new MockError();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Ac", "?EET8sZ;`7", (-8), mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector<Class<Object>> vector0 = new Vector<Class<Object>>();
      Class<Long> class0 = Long.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.primitiveType(class0);
      Class<IOException> class1 = IOException.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getEnclosingClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isLocalType(class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getPackageName(class0);
      Vector<Class<Object>> vector0 = new Vector<Class<Object>>();
      Class<Double> class1 = Double.TYPE;
      ClassUtil.primitiveType(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nullOrToString(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("java.lang.Class@0000000001", "java.lang.Class@0000000001", (-844), sQLTimeoutException0);
      sQLTimeoutException1.getStackTrace();
      ClassUtil.getRootCause(sQLTimeoutException1);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(class0, class1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = new Short((short)1);
      ClassUtil.isJacksonStdImpl((Object) short0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("JSON", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) dataOutputStream0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.findSuperTypes(class0, class1, list0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory.defaultInstance();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nullOrToString(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang.Class@0000000001");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: java.lang.Class@0000000001
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      LinkedList<Class<Integer>> linkedList0 = new LinkedList<Class<Integer>>();
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.nullOrToString(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "&@e j]X8:w";
      ClassUtil.nonNullString("&@e j]X8:w");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.nullOrToString(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<NoClass> class1 = NoClass.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nullOrToString(class0);
      Class<Long> class1 = Long.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getDeclaredFields(class3);
      Class<String> class4 = String.class;
      ClassUtil.isConcrete(class4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.backticked("com.fasterxml.jackson.databind.introspect.AnnotatedClass");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getEnclosingClass(class0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.getClassDescription(classUtil_Ctor0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nullOrToString(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleAbstractTypeResolver0, class0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ReferenceType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet1);
      Long long0 = new Long(439L);
      ClassUtil.verifyMustOverride(class0, accessPattern0, "yFqjC^9dNRdl8h");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Short short0 = new Short((short)1);
      ClassUtil.isJacksonStdImpl((Object) short0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.classOf(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<String> class0 = String.class;
      Short short0 = new Short((short) (-1));
      Class<Error> class1 = Error.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      MapType mapType1 = mapType0.withValueHandler(class2);
      MapType mapType2 = mapType1.withStaticTyping();
      ClassUtil.isJacksonStdImpl((Object) mapType2);
      ClassUtil.classOf("Sd.");
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassUtil.backticked("NULL");
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      Long long0 = new Long(161L);
      MockIOException mockIOException0 = new MockIOException("`NULL`");
      SQLDataException sQLDataException0 = new SQLDataException("Yg@WxD-T\"YX1q_ZEN", mockIOException0);
      MockException mockException0 = new MockException(sQLDataException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findClassAnnotations(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
      ClassUtil.primitiveType(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Long> class3 = Long.class;
      ClassUtil.getDeclaredFields(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.isConcrete(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      MockException mockException0 = new MockException("com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.throwRootCauseIfIOE(mockException0);
      ClassUtil.isConcrete((Member) constructor0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nullOrToString(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.Class@0000000001");
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.getRootCause(sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTimeoutException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTimeoutException: java.lang.Class@0000000001
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.primitiveType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<SettableBeanProperty> class2 = SettableBeanProperty.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockException mockException0 = new MockException("Failed to instantiate class ");
      ClassUtil.throwRootCauseIfIOE(mockException0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1836);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<AccessPattern, Void> hashMap0 = new HashMap<AccessPattern, Void>();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Void> enumMap0 = new EnumMap<AccessPattern, Void>(class0);
      EnumMap<AccessPattern, Void> enumMap1 = new EnumMap<AccessPattern, Void>(enumMap0);
      ClassUtil.findEnumType(class0);
      ClassUtil.backticked("org.hibernate.proxy.");
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class0);
      HashMap<AccessPattern, Void> hashMap0 = new HashMap<AccessPattern, Void>();
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Void> enumMap0 = new EnumMap<AccessPattern, Void>(class1);
      EnumMap<AccessPattern, Void> enumMap1 = new EnumMap<AccessPattern, Void>(enumMap0);
      EnumMap<AccessPattern, Void> enumMap2 = new EnumMap<AccessPattern, Void>(enumMap1);
      EnumMap<AccessPattern, Void> enumMap3 = new EnumMap<AccessPattern, Void>((Map<AccessPattern, ? extends Void>) enumMap2);
      EnumMap<AccessPattern, Void> enumMap4 = new EnumMap<AccessPattern, Void>(enumMap1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Void> function0 = (Function<Object, Void>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Void> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Void>) function0);
      enumMap4.computeIfAbsent(accessPattern0, function1);
      enumMap4.isEmpty();
      ClassUtil.findEnumType(enumMap2);
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassUtil.nonNullString("NULL");
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSet1.parallelStream();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet1);
      Long long0 = new Long(161L);
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class1, class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(39);
      ClassUtil.nullOrToString(placeholderForType0);
      MockException mockException0 = new MockException();
      SQLDataException sQLDataException0 = new SQLDataException("[]", mockException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      sQLDataException0.addSuppressed(mockRuntimeException0);
      Throwable throwable0 = mockException0.initCause(sQLDataException0);
      sQLDataException0.addSuppressed(throwable0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "N<fQ");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nullOrToString(class0);
      ClassUtil.defaultValue(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.nonNullString("NULL");
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.getConstructors(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("2,;", "NULL");
      ClassUtil.throwIfIOE(sQLRecoverableException0);
      Byte byte0 = new Byte((byte) (-4));
      Class<Character> class1 = Character.class;
      ClassUtil.hasClass(byte0, class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("keyUniverse");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("x,kzN {k", "enum", 58, sQLInvalidAuthorizationSpecException0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "$<@R)L''W");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // $<@R)L''W
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nullOrToString(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.findClassAnnotations(class1);
      StackTraceElement stackTraceElement0 = new StackTraceElement("java.lang.Class@0000000001", "java.lang.Integer", "*dCvH2;XTh|KZDp", 7);
      int[] intArray0 = new int[7];
      intArray0[0] = 1726;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 1726;
      intArray0[5] = 7;
      intArray0[6] = 1726;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.lang.Integer", intArray0);
      MockError mockError0 = new MockError(batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockError0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("size", "vG@1',:fBAeZq5?o:mD", "java.lang.Integer", (-1631));
      stackTraceElementArray0[1] = stackTraceElement1;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.findClassAnnotations(class0);
      Iterator<String> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class1);
      ClassUtil.canBeABeanType(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getConstructors(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, iterator0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile("net.sf.cglib.proxy.com.fasterxml.jackson.core.io.IOContext", "net.sf.cglib.proxy.com.fasterxml.jackson.core.io.IOContext");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper0, mockPrintWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.", "org.hibernate.proxy.", sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(writerBasedJsonGenerator0, "org.hibernate.proxy.", sQLWarning0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      List<Class<?>> list0 = new ArrayList<Class<Short>>();
      ClassUtil classUtil0 = new ClassUtil();
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.findSuperTypes(class1, class0, list0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      MockException mockException0 = new MockException("com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.throwRootCauseIfIOE(mockException0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockException mockException0 = new MockException("com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.throwRootCauseIfIOE(mockException0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("keyUniverse");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("x,kzN {k", "enum", 58, sQLInvalidAuthorizationSpecException0);
      MockIOException mockIOException0 = new MockIOException("enum", sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): enum
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.quotedOr(class0, "*YMS&jZ^,Ci!C\"<L%");
      ClassUtil.findConstructor(class0, false);
      Class<Object> class1 = Object.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class3, class0, true);
      Float float0 = new Float(0.0F);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class4 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("*YMS&jZ^,Ci!C\"<L%", class4, "=N<$60FSI}U");
      ClassUtil.classNameOf(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.quotedOr((Object) null, "com.fasterxml.jackson.databind.deser.impl.PropertyValue$Any");
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl((Object) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.getTypeName();
      ClassUtil.rawClass(placeholderForType0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl((Object) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, (Object) null, "- e]b({D-E2$Iv)lJ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Byte byte0 = new Byte((byte)14);
      ClassUtil.getClassDescription((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unknown");
      DataTruncation dataTruncation0 = new DataTruncation((byte)14, false, false, 1271, (-1));
      ClassUtil.throwIfIOE(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getDeclaredFields(class0);
      DataTruncation dataTruncation0 = new DataTruncation(3798, false, false, 9, (-2135));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "Unexpected JSON value(s); expected at most %d properties (in JSON Array)", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("Cannot access ", "KgOf<yba^}U", dataTruncation0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<MapType> class1 = MapType.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.isObjectOrPrimitive(class2);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassUtil.findSuperTypes(class2, class2, list0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Float float0 = new Float(0.0);
      ClassUtil.getClassDescription(float0);
      DataTruncation dataTruncation0 = new DataTruncation(318, false, false, 318, 3122);
      ClassUtil.throwIfIOE(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.TYPE;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Character> class2 = Character.TYPE;
      ClassUtil.wrapperType(class2);
      ClassUtil.defaultValue(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.findSuperTypes(class1, class3);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nullOrToString(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Object> class1 = Object.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nonNullString("NULL");
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet0);
      Long long0 = new Long(161L);
      ClassUtil.hasClass((Object) null, class2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<AccessPattern, Void> hashMap0 = new HashMap<AccessPattern, Void>();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      hashMap0.put(accessPattern0, (Void) null);
      BiFunction<AccessPattern, Object, Void> biFunction0 = (BiFunction<AccessPattern, Object, Void>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Void) null).when(biFunction0).apply(any(com.fasterxml.jackson.databind.util.AccessPattern.class) , any());
      hashMap0.replaceAll(biFunction0);
      EnumMap<AccessPattern, Void> enumMap0 = new EnumMap<AccessPattern, Void>(hashMap0);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      Function<AccessPattern, Void> function0 = (Function<AccessPattern, Void>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Void) null).when(function0).apply(any(com.fasterxml.jackson.databind.util.AccessPattern.class));
      enumMap0.computeIfAbsent(accessPattern1, function0);
      enumMap0.isEmpty();
      ClassUtil.findEnumType(enumMap0);
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.backticked((String) null);
      Class<Integer> class1 = Integer.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<Double> class1 = Double.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.isObjectOrPrimitive(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ClassUtil.nonNull((PlaceholderForType) null, placeholderForType0);
      Class<Short> class3 = Short.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor1.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Object> class1 = Object.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.rawClass((JavaType) null);
      Class<MapLikeType> class2 = MapLikeType.class;
//      try { 
        ClassUtil.createInstance(class2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<Character> class0 = Character.TYPE;
      TypeReference<Long> typeReference0 = (TypeReference<Long>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      objectReader0.forType(typeReference0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = null;
//      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, (-583));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Buffer size <= 0
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Float float0 = new Float(0.0);
      ClassUtil.nonNull((Float) null, float0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DataTruncation dataTruncation0 = new DataTruncation((-646), false, false, 8, (-646));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.type", (Throwable) dataTruncation0);
      SQLDataException sQLDataException0 = new SQLDataException("39$9j", "elementType", dataTruncation0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data truncation
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      constructor0.getExceptionTypes();
      constructor0.getAnnotatedReturnType();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<String> class3 = String.class;
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class3, class4, true);
      Float float0 = new Float(446.4721F);
      Float float1 = new Float((double) 446.4721F);
      ClassUtil.nonNull(float0, float1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DataTruncation dataTruncation0 = new DataTruncation(63, true, true, 2, 63);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "[]", (Throwable) dataTruncation0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "iBQ", jsonMappingException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReferenceType> class5 = ReferenceType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class5, class4, class2);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      JsonMappingException jsonMappingException1 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapLikeType1, (String) null, "iBQ");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not resolve type id 'null' as a subtype of [map-like type; class com.fasterxml.jackson.databind.type.ReferenceType, [simple type, class com.fasterxml.jackson.databind.type.ReferenceType] -> [simple type, class com.fasterxml.jackson.databind.annotation.NoClass]]: iBQ
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Integer> class0 = Integer.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.findEnumType(class0);
      ClassUtil.nonNullString("NULL");
      Class<IOException> class2 = IOException.class;
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      Class<Short> class3 = Short.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getPackageName(class2);
      boolean boolean0 = true;
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<AccessPattern> class4 = AccessPattern.class;
      Class<MapLikeType> class5 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class5, true);
      Class<Object> class6 = Object.class;
      ClassUtil.isObjectOrPrimitive(class6);
      Class<CollectionType> class7 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class4, class7, false);
      Float float0 = null;
//      try { 
        Float.valueOf("java.lang");
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getClassMethods(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.primitiveType(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4136);
      ClassUtil.classOf(placeholderForType0);
      Class<ReferenceType> class3 = ReferenceType.class;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class4, class3, true);
      Class<String> class5 = String.class;
      ClassUtil.isObjectOrPrimitive(class5);
      Class<SimpleType> class6 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class6, (Class<?>) null, true);
      ClassUtil.nonNull((Float) null, (Float) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DataTruncation dataTruncation0 = new DataTruncation((-7), false, false, 4136, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Default constructor for ", (Throwable) dataTruncation0);
      SQLDataException sQLDataException0 = new SQLDataException("Default constructor for ", "?s", dataTruncation0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data truncation
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.quotedOr(class0, "*YMS&jZ^,Ci!C\"<L%");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.hasClass("*YMS&jZ^,Ci!C\"<L%", class1);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      classUtil_Ctor0.getConstructor();
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      // Undeclared exception!
//      try { 
        simpleAbstractTypeResolver0.addMapping(class0, (Class<? extends String>) class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot add mapping from class to itself
//         //
//         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Short short0 = Short.valueOf((short)240);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasClass(short0, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getDeclaredFields(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getClassDescription(class1);
      DataTruncation dataTruncation0 = new DataTruncation(3122, false, false, 3122, 318);
      ClassUtil.throwIfIOE(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("mc[g|WQ&]d/YP0", (String) null, intArray0, (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // mc[g|WQ&]d/YP0
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      constructor0.getExceptionTypes();
      constructor0.getAnnotatedReturnType();
      constructor0.getExceptionTypes();
      ClassUtil.isJacksonStdImpl((Object) class0);
      constructor0.toGenericString();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nameOf(class2);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.classNameOf((Object) null);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class3);
      Class<Double> class4 = Double.class;
      ClassUtil.getOuterClass(class4);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Error> class2 = Error.class;
      ClassUtil.getDeclaringClass(class2);
      String string0 = "[P97sFprl6";
      ClassUtil.nonNullString("[P97sFprl6");
      String string1 = "keyUniverse";
      int int0 = 0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, (JavaType) null, jsonToken0, "enum");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findEnumType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '5';
      CharsToNameCanonicalizer.createRoot();
      charArray0[2] = 'k';
      charArray0[3] = ';';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 2024, (-557), true);
      JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", jsonLocation0);
      jsonMappingException0.getStackTrace();
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.quotedOr((Object) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 62, objectMapper1, filterOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLSyntaxErrorException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLSyntaxErrorException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator((InputDecorator) null);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      Exception exception0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getConstructors(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<Double> class3 = Double.class;
      Class<MapLikeType> class4 = MapLikeType.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class4);
      MapType mapType1 = mapType0.withKeyTypeHandler(class3);
      Double double0 = new Double((-1344.280553679081));
      MapType mapType2 = mapType1.withKeyValueHandler(double0);
      MapType mapType3 = mapType2.withContentTypeHandler(mapType0);
      Class<Annotation> class5 = Annotation.class;
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class5, false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<Short> class2 = Short.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[6]);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[1]);
      Integer integer0 = new Integer((-1512867866));
      Integer integer1 = Integer.getInteger("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$NumberDeserializer", integer0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(integer1);
      Class<Integer> class3 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      JavaType javaType0 = referenceType1.refine(class0, (TypeBindings) null, arrayType0, javaTypeArray0);
      ReferenceType referenceType2 = ReferenceType.upgradeFrom(javaType0, javaTypeArray0[5]);
      ClassUtil.findSuperTypes((JavaType) referenceType2, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.hasClass("*YMS&jZ^,Ci!C\"<L%", class1);
      ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockException mockException0 = new MockException("com.fasterxml.jackson.databind.util.ArrayBuilders");
      ClassUtil.throwRootCauseIfIOE(mockException0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nullOrToString(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, true);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.quotedOr(class0, "*YMS&jZ^,Ci!C\"<L%");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.isLocalType(class3, false);
      classUtil_Ctor0.getConstructor();
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      ClassUtil.throwIfRTE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.classNameOf(list0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.canBeABeanType(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getOuterClass(class3);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.setAccessible(true);
      constructor0.getAnnotations();
      constructor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
      String string0 = "keyType";
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, class2, "keyType");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.RuntimeException) must override method 'keyType'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Short short0 = new Short((short) (-2706));
      ClassUtil.isJacksonStdImpl((Object) short0);
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class2 = Annotation.class;
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotation(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "`java.lang.Double`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `java.lang.Double`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.backticked("~-EZyp8mKoaX");
      ClassUtil.emptyIterator();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("enum", (String) null, sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("keyUniverse", "`~-EZyp8mKoaX`", sQLTimeoutException0);
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.quotedOr(class0, (String) null);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getConstructors(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(resolvedRecursiveType0, (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, true);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("') [Zgpb", (String) null, sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getClassMethods(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.primitiveType(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4136);
      ClassUtil.classOf(placeholderForType0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class3);
      ClassUtil.isBogusClass(class1);
      Class<AccessibleObject> class4 = AccessibleObject.class;
//      try { 
        ClassUtil.findConstructor(class4, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("vals");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "vals", (Throwable) mockRuntimeException0);
      mockRuntimeException0.addSuppressed(jsonMappingException0);
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.readerForUpdating(iOContext0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 0;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext0);
      TypeReference<Long> typeReference0 = (TypeReference<Long>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectReader0.forType(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<MapType> class1 = MapType.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.nonNull((Float) null, (Float) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DataTruncation dataTruncation0 = new DataTruncation((-646), false, false, 8, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.type", (Throwable) dataTruncation0);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type", jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data truncation
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.canBeABeanType(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Character is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, false);
      Class<Float> class1 = Float.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.nonNullString("NULL");
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      Long long0 = new Long(161L);
      ClassUtil.hasClass(long0, class3);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumMap0.putIfAbsent(accessPattern0, (CollectionLikeType) null);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<AccessPattern, Void> hashMap0 = new HashMap<AccessPattern, Void>();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      hashMap0.put(accessPattern0, (Void) null);
      BiFunction<AccessPattern, Object, Void> biFunction0 = (BiFunction<AccessPattern, Object, Void>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(com.fasterxml.jackson.databind.util.AccessPattern.class) , any());
      hashMap0.replaceAll(biFunction0);
      EnumMap<AccessPattern, Void> enumMap0 = new EnumMap<AccessPattern, Void>(hashMap0);
      enumMap0.isEmpty();
      ClassUtil.findEnumType(enumMap0);
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class1, class0, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      Class<Short> class3 = Short.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }
}
