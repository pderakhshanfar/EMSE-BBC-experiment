/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:07:00 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockError mockError0 = new MockError();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("TnBrFP6sv4jo Ft<i7");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, bufferedOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType' as a subtype of null: org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(0L);
      int[] intArray0 = new int[3];
      intArray0[0] = 11;
      intArray0[1] = 5;
      intArray0[2] = (-3117);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 5);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v", "v", intArray0, sQLNonTransientConnectionException0);
      batchUpdateException0.addSuppressed(sQLNonTransientConnectionException0);
      batchUpdateException0.spliterator();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "3 ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-197);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper0.readerFor(class0);
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException";
      MockFile mockFile0 = new MockFile("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.class;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " (from class ");
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.getGenericInterfaces(class1);
      Class<MapType> class2 = MapType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class2, class1, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+_%H2l`O33>8!;?2UD");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      placeholderForType0.getTypeName();
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      placeholderForType0.containedTypeOrUnknown((-9));
      System.setCurrentTimeMillis(0L);
      ClassUtil.nameOf((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-764));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      objectMapper0.readerFor(javaType0);
      String string0 = "net.sf.cglib.proxy.java.lang.Short";
//      try { 
        JsonPointer.compile("net.sf.cglib.proxy.java.lang.Short");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid input: JSON Pointer expression must start with '/': \"net.sf.cglib.proxy.java.lang.Short\"
//         //
//         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.backticked("org.hibernate.proxy.java.lang.Double");
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isBogusClass(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.verifyMustOverride(class1, class0, " (from class ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Annotation> class1 = Annotation.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1536);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      objectMapper0.readerForUpdating(accessPattern0);
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<?> class0 = ClassUtil.classOf(mockError0);
      ClassUtil.isProxyType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapType0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "unknown", (Throwable) mockError0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // unknown
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaTypeArray0[1]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[5]);
      MapType mapType2 = mapType1.withContentTypeHandler(mapType0);
      IntNode intNode0 = IntNode.valueOf(1091);
      MapType mapType3 = mapType2.withContentValueHandler(intNode0);
      MapType mapType4 = mapType3.withTypeHandler((Object) null);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType4, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<InputStream>[] classArray0 = (Class<InputStream>[]) Array.newInstance(Class.class, 2);
      Class<InputStream> class0 = InputStream.class;
      classArray0[0] = class0;
      Class<InputStream> class1 = InputStream.class;
      classArray0[1] = class1;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Longest collision chain in symbol table (of size ");
      Class<IntNode> class0 = IntNode.class;
      ClassUtil.nameOf(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory3.enable(jsonFactory_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockPrintWriter0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getCause();
      ClassUtil.classOf(mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.toGenericString();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.classOf(constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "public java.lang.Object()", true);
      StringReader stringReader0 = new StringReader("public java.lang.Object()");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = 'x';
      charArray0[2] = 't';
      charArray0[3] = '6';
      charArray0[4] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1311, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "", (JsonLocation) null);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1473), objectReader0, (OutputStream) null, byteArray0, (byte)25, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, (-12));
      SQLException sQLException0 = new SQLException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, jsonMappingException_Reference0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.sql.SQLException (through reference chain: UNKNOWN[?])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      MockThrowable mockThrowable0 = new MockThrowable("[Visibility: getter=%s,isGetter=%s,setter=%s,creator=%s,field=%s]");
      MockError mockError0 = new MockError("[null]", mockThrowable0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "[Visibility: getter=%s,isGetter=%s,setter=%s,creator=%s,field=%s]");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, (OutputStream) null, byteArray0, 2, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassUtil.isBogusClass((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getConstructors(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.getDeclaredMethods(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.getDeclaringClass(class0);
      Class<Annotation> class3 = Annotation.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ArrayType.construct(javaType0, (TypeBindings) null);
      arrayType1.isReferenceType();
      ClassUtil.rawClass(arrayType1);
      Class<Double> class4 = Double.class;
      ClassUtil.isProxyType(class4);
      ClassUtil.rawClass(resolvedRecursiveType0);
      Class<Object> class5 = Object.class;
      ClassUtil.findClassAnnotations(class5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findSuperClasses(class2, class1, true);
      ClassUtil.defaultValue(class1);
      Class<Error> class3 = Error.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      MockError mockError0 = new MockError("");
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("{FT7", "Reader returned 0 characters when trying to read ", (-1807771059));
      Throwable throwable0 = sQLSyntaxErrorException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("pu}Y\"\"9--HAy", ".-JM^_wLu<vdt<X~", (-1807771059), throwable0);
      sQLSyntaxErrorException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "?;l#@+w+_O3#!c");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      SimpleType simpleType0 = referenceType0.withStaticTyping();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, resolvedRecursiveType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      ClassUtil.rawClass(mapLikeType1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.Integer");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class1);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.JsonMappingException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Error> class1 = Error.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class0, class1, list0);
      Class<Float> class2 = Float.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) accessPattern0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      enumSet0.removeIf(predicate3);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      enumSet0.add(accessPattern0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<IOException> class1 = IOException.class;
      classUtil_Ctor0.getParamCount();
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class1, true);
      constructor1.getTypeParameters();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.hasClass(accessPattern0, class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.backticked(",H{6O_}h");
      ClassUtil.getConstructors(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, false);
      MockIOException mockIOException0 = new MockIOException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" in field name", "", 317, mockIOException0);
      mockIOException0.addSuppressed(sQLIntegrityConstraintViolationException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "com.fasterxml.jackson.databind.type");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      String string0 = "Default constructor for ";
      SQLWarning sQLWarning0 = new SQLWarning("Default constructor for ");
      sQLWarning0.getStackTrace();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLWarning0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "Default constructor for ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.nameOf(class0);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isProxyType(class0);
      System.setCurrentTimeMillis((-2679L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getClassDescription(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.isJacksonStdImpl((Object) "`com.fasterxml.jackson.databind.type.ArrayType`");
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, false);
      Class<Long> class3 = Long.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.isLocalType(class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ArrayList<Class<String>> arrayList0 = new ArrayList<Class<String>>();
      ClassUtil.getClassDescription(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ArrayType> class2 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Error> class1 = Error.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      mapType0.hasGenericTypes();
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-661868634));
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(30);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-624), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-631), true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      iOContext0.allocNameCopyBuffer(0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      SQLWarning sQLWarning0 = new SQLWarning("oD7KroA]SA)c\"", "oD7KroA]SA)c\"", 8);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning: oD7KroA]SA)c\"
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "43?)g]ruFo?%a\"oH{w");
      ClassUtil.nullOrToString(jsonMappingException0);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Object` from number 1: 43?)g]ruFo?%a\"oH{w
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("+#5@N{XdH");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings1);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.rawClass(javaType0);
      ClassUtil.isJacksonStdImpl((Object) javaType0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Module> class0 = Module.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withKeyValueHandler(typeFactory0);
      MockError mockError0 = new MockError(sQLNonTransientException0);
      MapType mapType2 = mapType1.withValueHandler(mockError0);
      MapType mapType3 = mapType2.withStaticTyping();
      MapType mapType4 = mapType3.withContentValueHandler(class0);
      mapType4.hasGenericTypes();
      ClassUtil.findSuperTypes((JavaType) mapType4, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLFeatureNotSupportedException0);
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      enumMap0.put(accessPattern0, noClass0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Error> class1 = Error.class;
      typeFactory0.constructMapType(class0, class1, class1);
      Class<Double> class2 = Double.TYPE;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<Object>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getClassDescription(class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParamCount();
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.nonNullString("Cannot access ");
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, (Class<?>) null);
      ClassUtil.getDeclaringClass(class2);
      System.setCurrentTimeMillis(0L);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findClassAnnotations(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, class2, "%N:{");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      MockError mockError0 = new MockError("{i'^bGyK}xkt$`%q)+");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<Double> class2 = Double.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType0, jsonToken0, "{i'^bGyK}xkt$`%q)+");
      mockError0.initCause(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 84;
      intArray0[2] = (-1457);
      intArray0[3] = (-953);
      intArray0[4] = (-1807771059);
      intArray0[5] = 2057;
      intArray0[6] = (-2533);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Failed to find default constructor of class ", "lC%rro", intArray0);
      batchUpdateException0.fillInStackTrace();
      MockError mockError0 = new MockError((String) null, batchUpdateException0);
      mockError0.printStackTrace();
      mockError0.fillInStackTrace();
      batchUpdateException0.initCause(mockError0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Error> class1 = Error.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      mapType0.hasGenericTypes();
      ClassUtil.hasClass((Object) null, class1);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      String string0 = "Trying to resolve a forward reference with id [";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("' (code 0x", "Trying to resolve a forward reference with id [");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class1 = Annotation.class;
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.classNameOf(class2);
      constructor0.getParameterTypes();
      Class<IOException> class3 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Double double0 = new Double((byte) (-10));
      ClassUtil.quotedOr("`java.lang.Class`", "elementType");
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      // Undeclared exception!
//      try { 
        TypeBindings.create(class1, (JavaType) simpleType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class java.lang.Float with 1 type parameter: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Byte.valueOf((byte)76);
      Character character0 = Character.valueOf('Y');
      ClassUtil.nonNull((Character) null, character0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Double double0 = new Double((byte)76);
      collectionType1.equals(collectionType0);
      typeFactory0.constructGeneralizedType(collectionType1, class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)76);
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.util.LinkedList is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("teF/{:u");
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
      Class<Float> class2 = Float.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      mapType0.hasGenericTypes();
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class3, false);
      ClassUtil.rawClass(mapType0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Character character0 = new Character('D');
      ClassUtil.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("cm.fasKterxml.jackso", "jq");
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.sql.SQLNonTransientConnectionException: cm.fasKterxml.jackso
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("java.lang.reflect.Ac");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      SQLWarning sQLWarning0 = new SQLWarning("PR6vHU)w%CTh$", (String) null, 34);
      ClassUtil.throwIfRTE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.nameOf(class0);
      ClassUtil.nullOrToString(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.canBeABeanType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-614630275));
      placeholderForType0.isReferenceType();
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      ClassUtil.getEnclosingClass(class1);
      System.setCurrentTimeMillis(4072L);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) iOContext1;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      mockPrintStream0.format(locale0, "W#", objectArray0);
      locale0.getUnicodeLocaleAttributes();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
      MockException mockException0 = new MockException();
      SQLException sQLException0 = new SQLException(mockException0);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaredMethods(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "-9", (-2400));
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.java.lang.String", "-9", sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning: org.hibernate.proxy.java.lang.String
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isLocalType(class1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("java.lang.String");
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      Method method0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7Q#;#KfNNkTHN^m");
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7Q#;#KfNNkTHN^m");
      MockThrowable mockThrowable0 = new MockThrowable("Default constructor for ", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(mockThrowable0);
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e<P");
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassMethods(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(46);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(placeholderForType0, (String) null, (String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not resolve type id 'null' as a subtype of $47
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Object> class1 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e0pVJhF{]");
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e0pVJhF{]");
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassMethods(class0);
      MockError mockError0 = new MockError("e0pVJhF{]");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      ClassUtil.quotedOr((Object) null, (String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.reflect.A");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.createInstance(class1, false);
      ClassUtil.classNameOf("");
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.nullOrToString("");
      ClassUtil.findClassAnnotations(class1);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.String`", "java.lang.String@0000000001", intArray0);
      Character character0 = Character.valueOf('X');
      Character.valueOf('X');
      ClassUtil.nonNull(character0, character0);
      ClassUtil.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, " vs ");
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Object> class1 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e0pVJhF{]");
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) class1;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "e0pVJhF{]", objectArray0);
      locale0.getUnicodeLocaleAttributes();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, printStream0);
      MockException mockException0 = new MockException();
      SQLException sQLException0 = new SQLException(mockException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayOutputStream0, (Exception) sQLException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLException: org.evosuite.runtime.mock.java.lang.MockThrowable
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7Q#;#KfNNkTHN^m");
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.primitiveType(class1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7Q#;#KfNNkTHN^m");
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.quotedOr(class0, "j]gYpFLT2H\"r$FnD");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7Q#;#KfNNkTHN^m");
      Class<ReferenceType> class0 = ReferenceType.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5D$7ik0z{hQ/Wu![U{", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLSyntaxErrorException0);
      sQLTimeoutException0.getStackTrace();
      sQLTimeoutException0.setNextException(sQLSyntaxErrorException0);
      sQLTimeoutException0.getSuppressed();
      ClassUtil.getRootCause(sQLTimeoutException0);
      Short short0 = new Short((short)842);
      Byte byte0 = new Byte((byte) (-65));
      ClassUtil.classOf(byte0);
      ClassUtil.isJacksonStdImpl(class0);
      Character character0 = Character.valueOf(')');
      Character character1 = new Character(';');
      Character character2 = new Character('?');
      Character.valueOf('w');
      Character character3 = Character.valueOf('J');
      ClassUtil.nonNull(character0, character3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      mockError0.getSuppressed();
      mockError0.getSuppressed();
      mockError0.getMessage();
      mockError0.getSuppressed();
      ClassUtil.classNameOf(mockError0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "`org.evosuite.runtime.mock.java.lang.MockError`");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getPackageName(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      Class<String> class2 = String.class;
      ClassUtil.findEnumType(class2);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind", mockError0);
      ClassUtil.quotedOr(mockRuntimeException0, "No native support for writing Type Ids");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)76);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.reflect.AccessibleObject is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectMapper0, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, true);
      SQLWarning sQLWarning0 = new SQLWarning(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning:  is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.primitiveType(class1);
      Class<String> class2 = String.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.quotedOr(class1, "java.lang");
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassDescription(class0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "ALLOW_COMMENTS", (-128));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "zD^mC^$jE/sj\"DzX:HX");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // zD^mC^$jE/sj\"DzX:HX
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Integer");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("@1&W7^midx]3~gb=", "net.sf.cglib.proxy.java.lang.Integer", (-1653959476));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("kpy~[EKD`hm&#10!55", map0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(|3+K3?x;8f~8i\"", sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.Integer", "net.sf.cglib.proxy.java.lang.Integer", map1, sQLTransientConnectionException0);
      sQLTimeoutException0.setNextException(sQLClientInfoException2);
      sQLTimeoutException0.getSuppressed();
      ClassUtil.getRootCause(sQLTimeoutException0);
      Integer integer0 = new Integer((-1653959476));
      ClassUtil.classOf(integer0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Character character0 = Character.valueOf('!');
      Character character1 = new Character('?');
      ClassUtil.nonNull(character0, character1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Double> class2 = Double.class;
      ClassUtil.getDeclaringClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class3);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, (NoClass) null);
      enumMap0.put(accessPattern0, (NoClass) null);
      ClassUtil.findEnumType(enumMap0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "~UqwX");
      MockError mockError0 = new MockError(jsonMappingException0);
      ClassUtil.hasClass(mockError0, class0);
      ClassUtil.backticked("~UqwX");
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.backticked("T{+x");
      ClassUtil.getDeclaredFields(class0);
      Class<?> class1 = ClassUtil.classOf("T{+x");
      System.setCurrentTimeMillis((-131L));
      ClassUtil.getEnclosingClass(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      ClassUtil.findClassAnnotations(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findSuperClasses(class3, class3, false);
      ClassUtil.findSuperTypes((Class<?>) null, class3);
      Class<String> class4 = String.class;
      ClassUtil.getEnclosingClass(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1536, 127);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class1, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class1);
      Class<String> class4 = String.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class4, true);
      Class<String> class5 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class5, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Void> class6 = Void.class;
      ClassUtil.getEnclosingClass(class6);
      boolean boolean0 = new Boolean(true);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class1);
      Class<String> class4 = String.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class4, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<AccessibleObject>[] classArray0 = (Class<AccessibleObject>[]) Array.newInstance(Class.class, 1);
      Class<AccessibleObject> class5 = AccessibleObject.class;
      classArray0[0] = class5;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Short> class3 = Short.TYPE;
      ClassUtil.defaultValue(class3);
      Class<Float> class4 = Float.class;
      ClassUtil.findRawSuperTypes(class2, class4, false);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete(class2);
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperClasses(class5, class0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<ArrayType> class1 = ArrayType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class1);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isProxyType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.getDeclaringClass(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class4);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (NoClass) null);
      enumMap0.put(accessPattern0, (NoClass) null);
      ClassUtil.findEnumType(enumMap0);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.hasClass(enumMap0, class5);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class1);
      Class<String> class4 = String.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class4, true);
      Class<Double> class5 = Double.class;
      ClassUtil.findEnumType(class5);
      Class<ArrayType> class6 = ArrayType.class;
      ClassUtil.getClassMethods(class6);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isProxyType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.getDeclaringClass(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class4);
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaringClass(class0);
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class1, class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findSuperTypes(javaType0, class2, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      ClassUtil.findEnumType(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.hasClass(class0, class1);
      String string0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("from-int");
      Throwable throwable0 = ClassUtil.getRootCause(sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("from-int", "from-int", throwable0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException(class1, (Throwable) sQLSyntaxErrorException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getStackTrace();
      ClassUtil.throwIfIOE(sQLClientInfoException0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer");
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[4] = class5;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.nonNullString((String) null);
      ClassUtil.backticked((String) null);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.isLocalType(class3, true);
      Class<Float> class4 = Float.class;
      ClassUtil.isProxyType(class4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<SimpleType> class5 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class5, class3);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.annotation.Annotation` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Class`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.canBeABeanType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isConcrete(class1);
      Class<Integer> class2 = Integer.class;
      Class<String> class3 = String.class;
      ClassUtil.findSuperClasses(class3, class1, false);
      Class<?> class4 = ClassUtil.primitiveType(class2);
      Class<String> class5 = String.class;
      ClassUtil.findEnumType(class5);
      ClassUtil.backticked(".!1W-RHc&]E((|D1I");
      Class<Object> class6 = Object.class;
      ClassUtil.findSuperTypes(class4, class6);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Kz 9 Ms*l");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Kz 9 Ms*l", "Kz 9 Ms*l", 1, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLIntegrityConstraintViolationException0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      sQLSyntaxErrorException0.spliterator();
      List<Class<?>> list0 = new Stack<Class<Integer>>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Wb$LKO0(#25", sQLTransactionRollbackException0);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("non-static member class");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nameOf((Named) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.Integer");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.Integer
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Byte.valueOf((byte) (-106));
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Void> class1 = Void.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)76);
      Integer integer0 = new Integer((byte)76);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) class3, (Object) integer0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class3, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) arrayType0);
      ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      Class<Byte> class4 = Byte.class;
//      try { 
        ClassUtil.createInstance(class4, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Byte has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      Class<Long> class2 = Long.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<String> class2 = String.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isConcrete(class1);
      List<Class<?>> list0 = new Stack<Class<Error>>();
      Class<String> class3 = String.class;
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
      Class<Double> class5 = Double.class;
      ClassUtil.getDeclaringClass(class5);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nonNullString("Cannot access ");
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isLocalType(class1, false);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.isProxyType(class3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<SimpleType> class4 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class4);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.SimpleType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayList<Class<String>> arrayList0 = new ArrayList<Class<String>>();
      Byte.valueOf((byte)76);
      Boolean boolean0 = new Boolean(false);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<?> class3 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.isProxyType(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.canBeABeanType(class2);
      Class<String> class3 = String.class;
      ClassUtil.hasClass((Object) null, class3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor1.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayList<Class<String>> arrayList0 = new ArrayList<Class<String>>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<IntNode> class1 = IntNode.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      ArrayList<Class<String>> arrayList0 = new ArrayList<Class<String>>();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("zYB/84");
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockFileWriter0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("YSl '_-k&3F^L^(p", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) sQLTimeoutException0);
      ClassUtil.getClassDescription(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.classNameOf(constructor0);
      ClassUtil.getPackageName(class0);
      Byte.valueOf((byte)76);
      ClassUtil.isProxyType(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.java.lang.Double", "org.hibernate.proxy.java.lang.Double");
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor1.getDeclaringClass();
      Class<Double> class2 = Double.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isConcrete((Member) classUtil_Ctor1._ctor);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ArrayList<Class<String>> arrayList0 = new ArrayList<Class<String>>();
      ClassUtil.getClassDescription(class0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.hasClass(beanDeserializerModifier0, class1);
      System.setCurrentTimeMillis(1692L);
      SQLWarning sQLWarning0 = new SQLWarning("`java.lang.Error`", "`java.lang.Error`", 3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLWarning0);
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      ClassUtil.throwIfIOE(throwable0);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<String> class2 = String.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isConcrete(class1);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperClasses(class3, class0, true);
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Double");
      ClassUtil.throwIfRTE((Throwable) null);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findConstructor(class4, true);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getPackageName(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.isProxyType(class2);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<String> class2 = String.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      ClassUtil.getPackageName(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.io.IOException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Float> class3 = Float.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      ClassUtil.emptyIterator();
      ClassUtil.getEnclosingClass(class4);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredFields(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"QFMU5icNp");
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Byte is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.getConstructors(class2);
      String string0 = "\"@9nG}t+5Oz>(\\s Ytm";
      String string1 = "org.hibernate.proxy.";
      ClassUtil.nonNullString("org.hibernate.proxy.");
      Class<Short> class3 = Short.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isLocalType(class2, true);
      ClassUtil.isProxyType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Jfl+f^1Vfn9Jj?", "}d_FUt14,cz-");
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.backticked("}d_FUt14,cz-");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "o`LKT}]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("\"@9nG}t+5Oz>(s Ytm");
      ClassUtil.getPackageName(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isLocalType((Class<?>) null, true);
      Class<Error> class3 = Error.class;
      ClassUtil.isProxyType(class3);
      String string0 = "Jfl+f^1Vfn9Jj?";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"@9nG}t+5Oz>(s Ytm", "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator");
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      String string1 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType";
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "non-static member class");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // non-static member class
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.findClassAnnotations(class1);
      MockError mockError0 = new MockError();
      mockError0.getSuppressed();
      String string0 = "NULL";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL");
      MockPrintStream mockPrintStream0 = new MockPrintStream("NULL");
      Locale locale0 = null;
//      try {
        locale0 = new Locale((String) null, "NULL", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Locale", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf("");
      Class<Byte> class1 = Byte.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<IOException> class2 = IOException.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", class0, "");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", jsonMappingException0);
      sQLNonTransientException1.spliterator();
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.String` from String \"com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler\": 
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<String> class2 = String.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getGenericSuperclass(class1);
      Class<Character> class3 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Character is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.classNameOf(constructor0);
      ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Double double0 = new Double(2572.625);
      ClassUtil.quotedOr(double0, "`java.lang.reflect.Constructor`");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nonNullString("\"@9nG}t+5Oz>(s Ytm");
      ClassUtil.getPackageName(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.isLocalType(class3, true);
      ClassUtil.isProxyType(class3);
      String string0 = "o`LKT}]\\";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o`LKT}]", "Jfl+f^1Vfn9Jj?");
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.backticked("\"@9nG}t+5Oz>(s Ytm");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nonNullString("\"@9nG}t+5Oz>(s Ytm");
      ClassUtil.getPackageName(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.isLocalType(class3, false);
      ClassUtil.isProxyType(class3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o`LKT}]", "JUfl+f^1Vfn9Jj?");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ArrayList<Class<String>> arrayList0 = new ArrayList<Class<String>>();
      ClassUtil.getClassDescription(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getPackageName(class0);
      IntNode intNode0 = new IntNode((-705045486));
      ClassUtil.getClassDescription(intNode0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf("");
      Class<IOException> class1 = IOException.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findSuperTypes(class3, class2);
      ClassUtil.nameOf((Named) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("local/anonymous", "[null]", sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getClassDescription(class0);
      Class<Object> class1 = Object.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "ZERO_LENGTH_ENUM_ARRAY");
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, jsonMappingException0, "`java.lang.Error`");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class com.fasterxml.jackson.databind.JsonMappingException (of class java.lang.Object) must override method '`java.lang.Error`'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("G.?+F[*o", "G.?+F[*o", 8, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.initCause((Throwable) null);
      sQLClientInfoException0.getLocalizedMessage();
      sQLClientInfoException0.printStackTrace();
      sQLClientInfoException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // G.?+F[*o
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-98));
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(byte0, class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Kz 9 Ms*l");
      sQLSyntaxErrorException0.spliterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "", 2523, sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("yyyy-MM-dd'T'HH:mm:ss.SSSZ", sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", 3908, sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // yyyy-MM-dd'T'HH:mm:ss.SSSZ
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.nameOf(class0);
      ClassUtil.canBeABeanType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
//      try { 
        ClassUtil.findConstructor(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      SQLWarning sQLWarning0 = new SQLWarning("non-static member class", "", 0);
      ClassUtil.throwIfIOE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getName();
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.findClassAnnotations(class1);
      MockError mockError0 = new MockError();
      mockError0.getSuppressed();
      String string0 = "NULL";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NULL");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "NULL");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // NULL
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.findConstructor(class4, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      PipedWriter pipedWriter0 = new PipedWriter();
      jsonFactory3.createGenerator((Writer) pipedWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      objectMapper0.getSerializerProviderInstance();
      MockFile mockFile0 = new MockFile("JSON");
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "elementType", uRLStreamHandler0);
//      try { 
        jsonFactory1.createParser(uRL1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.reflect.AccessibleObject is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil.backticked("Cannot resolve PropertyFilter with id '");
      Class<String> class0 = String.class;
      Integer integer0 = new Integer((-801));
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, integer0, "`Cannot resolve PropertyFilter with id '`");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Integer (of class java.lang.String) must override method '`Cannot resolve PropertyFilter with id '`'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<CollectionType> class2 = CollectionType.class;
      String string0 = "\"@9nG}t+5Oz>(\\s Ytm";
      String string1 = "Cannot access ";
      ClassUtil.nonNullString("Cannot access ");
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isLocalType(class1, false);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.isProxyType(class3);
      String string2 = "o`LKT}]\\";
      String string3 = "JUfl+f^1Vfn9Jj?";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o`LKT}]", (String) null);
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Byte> class3 = Byte.class;
      String string0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class3, class2, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.Byte) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.nameOf(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.nonNull((Character) null, (Character) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findConstructor(class3, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[6];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
//      try {
        annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, (Constructor<?>) null, annotationMap0, annotationMapArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null constructor not allowed
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockException mockException0 = new MockException("");
      MockException mockException1 = new MockException();
      mockException1.toString();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockException0);
      mockRuntimeException0.getLocalizedMessage();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      Class<CollectionType> class0 = CollectionType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class1);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) mapType0;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      BeanSerializerBuilder beanSerializerBuilder1 = new BeanSerializerBuilder((BeanDescription) null);
      // Undeclared exception!
//      try { 
        beanSerializerBuilder1.getClassInfo();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.reflect.A");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.createInstance(class1, false);
      ClassUtil.classNameOf("");
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.nullOrToString("");
      ClassUtil.findClassAnnotations(class1);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.String`", "java.lang.String@0000000001", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      batchUpdateException0.setNextException(sQLSyntaxErrorException0);
      batchUpdateException0.spliterator();
      batchUpdateException0.printStackTrace();
      batchUpdateException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `java.lang.String`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockException mockException0 = new MockException("serialVersionUID");
      mockException0.toString();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockException0);
      mockRuntimeException0.getLocalizedMessage();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.nullOrToString("serialVersionUID");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      basicBeanDescription0.getIgnoredPropertyNames();
      // Undeclared exception!
//      try { 
        basicBeanDescription0.instantiateBean(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float(0.0F);
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.classNameOf(class1);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Double double0 = new Double((byte) (-10));
      Class<Byte> class3 = Byte.class;
//      try { 
        ClassUtil.createInstance(class3, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Byte has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Short> class0 = Short.class;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      ClassUtil.getPackageName(class1);
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      int int0 = (-1181);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1181));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      placeholderForType0.isReferenceType();
      Class<MapLikeType> class0 = MapLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler((Object) null);
      // Undeclared exception!
//      try { 
        placeholderForType0.withTypeHandler(collectionLikeType1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.nameOf(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.fillInStackTrace();
      sQLTransientException0.printStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float(0.0F);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, (String) null);
      defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "@l;E");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot deserialize value of type `java.lang.RuntimeException` from number 0.0: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nonNullString("\"@9nG}t+5Oz>(s Ytm");
      ClassUtil.getPackageName(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.isLocalType(class3, true);
      ClassUtil.isProxyType(class3);
      String string0 = "o`LKT}]\\";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o`LKT}]", "JUfl+f^1Vfn9Jj?");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile((URI) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "";
      ClassUtil.classOf("");
      Class<Byte> class0 = Byte.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<SimpleType> class2 = SimpleType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.classNameOf(constructor0);
      ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      
      Class<ArrayType> class2 = ArrayType.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
      
      Class<Float> class3 = Float.class;
      boolean boolean0 = ClassUtil.isConcrete(class3);
      assertTrue(boolean0);
      
      Class<Integer> class4 = Integer.class;
      Class<RuntimeException> class5 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class4, class5, true);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Constructor<CollectionLikeType> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
      Class<Character> class1 = Character.class;
      SimpleType.constructUnsafe(class1);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      ClassUtil.rawClass(referenceType2);
      MockThrowable mockThrowable0 = new MockThrowable("Cannot figure out type for EnumMap (odd JDK platform?)");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0, "Cannot figure out type for EnumMap (odd JDK platform?)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot figure out type for EnumMap (odd JDK platform?)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "Multiple back-reference properties with name '";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class0 = Long.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      JavaType javaType0 = null;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class1, (JavaType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class java.lang.reflect.AccessibleObject with 1 type parameter: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }
}
