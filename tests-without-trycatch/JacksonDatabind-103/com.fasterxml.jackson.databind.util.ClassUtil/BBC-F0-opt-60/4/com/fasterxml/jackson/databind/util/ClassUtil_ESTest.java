/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:33:01 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      Class<?> class2 = ClassUtil.classOf(enumSet0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaType0);
      Class<SimpleType> class3 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaType0);
      referenceType0.withTypeHandler(enumSet0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-2315));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe Size <= 0
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getOuterClass(class0);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<String> class2 = String.class;
      ClassUtil.canBeABeanType(class2);
      Class<?> class3 = ClassUtil.classOf(list0);
      Class<Character> class4 = Character.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<IOException> class5 = IOException.class;
      ClassUtil.isConcrete(class5);
      ClassUtil.isCollectionMapOrArray(class3);
      Class<IOException> class6 = IOException.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class6, class6, true);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("cc;f!dT`nz>cWQ0b");
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "cc;f!dT`nz>cWQ0b", (Throwable) sQLWarning0);
      sQLWarning0.initCause(jsonMappingException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.getRootCause(throwable0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      objectMapper0.enable(jsonParser_FeatureArray0);
      ObjectMapper objectMapper1 = objectMapper0.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      objectMapper3.readerFor(class0);
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nonNullString(", scope=");
      System.setCurrentTimeMillis((-9223372036854775808L));
      Class<SimpleModule> class1 = SimpleModule.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockPrintStream mockPrintStream0 = new MockPrintStream(", scope=");
      PrintStream printStream0 = mockPrintStream0.printf(", scope=", (Object[]) methodArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintStream) mockPrintStream1);
      MockIOException mockIOException0 = new MockIOException(sQLInvalidAuthorizationSpecException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<Boolean> class2 = Boolean.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class2, jsonToken0, "elementType");
      ClassUtil.getRootCause(jsonMappingException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected START_ARRAY: elementType
//         //  at [Source: (char[])\"=\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaringClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.Base64Variant");
      ClassUtil.getPackageName(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal((-1988));
      Class<AccessPattern> class2 = AccessPattern.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class2, (String) null);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from number -1988: null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("void", "fAroSw/3:p,9K{@YEU");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.backticked((String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "<Ft");
      jsonMappingException0.getLocalizedMessage();
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // <Ft
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.primitiveType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      ClassUtil.getRootCause(sQLClientInfoException1);
      sQLClientInfoException0.fillInStackTrace();
      Class<Boolean> class2 = Boolean.class;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      ClassUtil.findConstructor(class2, true);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      JavaType javaType0 = TypeFactory.unknownType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", javaType0);
      virtualAnnotatedMember0.isPublic();
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isLocalType(class0, false);
      Class<MockFileInputStream> class2 = MockFileInputStream.class;
      ClassUtil.getDeclaredFields(class2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.isConcrete(class4);
      ClassUtil.isJacksonStdImpl(class2);
      Class<Integer> class5 = Integer.class;
      ClassUtil.getDeclaredFields(class5);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "HZJVKJtmQWD XB7:E8(");
      jsonMappingException0.getMessage();
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("HZJVKJtmQWD XB7:E8(", (String) null, throwable0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // HZJVKJtmQWD XB7:E8(
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      CollectionType collectionType0 = CollectionType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0]);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(javaTypeArray0[2]);
      ClassUtil.hasClass(collectionType1, class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.createInstance(class0, true);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.getConstructors(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'q';
      intArray0[1] = (-2028326306);
      intArray0[2] = (int) 'q';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getNextException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringWriter1, "non-static member class", (Throwable) null);
      ClassUtil.verifyMustOverride(class0, jsonMappingException0, "[virtual ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockException mockException0 = new MockException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 32767, objectMapper0, mockFileWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, false);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) writerBasedJsonGenerator0, (Exception) mockException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.backticked("-1E9cZ!Wn'wQwN3($9");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString(", field(s): ");
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      ObjectNode objectNode1 = objectNode0.deepCopy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) objectNode1, (Object) jsonNodeFactory0);
      Class<?> class0 = ClassUtil.rawClass(arrayType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredFields(class2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Ntg~N{q#mAb<9C $(7", "NULL", (-1881));
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.isProxyType(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "Cannot access ");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Short> class1 = Short.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getClassMethods(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      SQLWarning sQLWarning0 = new SQLWarning("Failed to instantiate class ", " (from class ");
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Double> enumMap0 = new EnumMap<ClientInfoStatus, Double>(class0);
      ClassUtil.findEnumType(enumMap0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      Class<Error> class2 = Error.class;
      Class<Integer> class3 = Integer.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Double> enumMap0 = new EnumMap<ClientInfoStatus, Double>(class0);
      ClassUtil.findEnumType(enumMap0);
      Class<Integer> class1 = Integer.TYPE;
      Object object0 = ClassUtil.defaultValue(class1);
      ClassUtil.classOf(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.classOf(object0);
      ClassUtil.getClassDescription(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "com.fasterxml.jacks", 12, sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.range(clientInfoStatus0, clientInfoStatus1);
      enumSet0.retainAll(arrayList0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1376);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      StringReader stringReader0 = new StringReader("array");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = 'k';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4048, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 33, 0, true);
      SQLException sQLException0 = new SQLException("array", "-=:*&HJwRPFF", 4048);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "array", (Throwable) sQLException0);
      ClassUtil.getClassDescription(jsonMappingException0);
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus1);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.wrapperType(class0);
      String string0 = "com.fasterxml.jacks";
      String string1 = "5@X";
      int int0 = 5;
      String string2 = "]k";
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "5@X");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0);
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      enumSet0.retainAll(arrayList0);
      ClassUtil.findEnumType(enumSet0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1376);
      ClassUtil.getClassDescription(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.hibernate.proxy.java.io.IOException");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, mockFileOutputStream0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(4754);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Class<ObjectNode> class1 = ObjectNode.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.hasClass(class0, class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      MockError mockError0 = new MockError("j(e`19J");
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double((-24.0));
      HashMap<ClientInfoStatus, Double> hashMap0 = new HashMap<ClientInfoStatus, Double>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put(clientInfoStatus0, double0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Double> enumMap0 = new EnumMap<ClientInfoStatus, Double>(class0);
      EnumMap<ClientInfoStatus, Double> enumMap1 = new EnumMap<ClientInfoStatus, Double>(enumMap0);
      EnumMap<ClientInfoStatus, Double> enumMap2 = enumMap1.clone();
      EnumMap<ClientInfoStatus, Double> enumMap3 = new EnumMap<ClientInfoStatus, Double>((Map<ClientInfoStatus, ? extends Double>) enumMap2);
      ClassUtil.findEnumType(enumMap3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      Class<ObjectNode> class2 = ObjectNode.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.defaultValue(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Missing type id when trying to resolve subtype of null: org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      Object object0 = ClassUtil.defaultValue(class2);
      ClassUtil.classNameOf(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, iterator0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-91);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 7, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("com.fasterxml.jackso");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackso", "com.fasterxml.jackso", 311);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLNonTransientConnectionException: com.fasterxml.jackso
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Module> class1 = Module.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.hasClass((Object) null, class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<ClientInfoStatus, Double> hashMap0 = new HashMap<ClientInfoStatus, Double>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Double double0 = new Double((-2116.36));
      hashMap0.put(clientInfoStatus0, double0);
      EnumMap<ClientInfoStatus, Double> enumMap0 = new EnumMap<ClientInfoStatus, Double>(hashMap0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.hasClass((Object) null, class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<ClientInfoStatus, Double> hashMap0 = new HashMap<ClientInfoStatus, Double>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Double double0 = new Double((-2116.36));
      hashMap0.put(clientInfoStatus0, double0);
      EnumMap<ClientInfoStatus, Double> enumMap0 = new EnumMap<ClientInfoStatus, Double>(hashMap0);
      ClassUtil.findEnumType(enumMap0);
      Class<Double> class1 = Double.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Void> class3 = Void.class;
      ClassUtil.nameOf(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Number is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.emptyIterator();
      MockError mockError0 = new MockError("+U~]1g");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.classOf(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLInvalidAuthorizationSpecException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Character.valueOf('\u0010');
      Class<Object> class0 = Object.class;
      Double double0 = new Double((-3631.223197753073));
      Double double1 = new Double((-3631.223197753073));
      ClassUtil.hasClass(double1, class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl1);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper4 = objectMapper3.disable(deserializationFeature0);
      objectMapper4.getDeserializationContext();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.constructSpecializedType((JavaType) null, class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Vh:i)");
      MockFile mockFile0 = new MockFile(", but also implicit accessor: ", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(jsonGenerator0, class0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `float` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.core.json.WriterBasedJsonGenerator`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Double double0 = new Double(144.43);
      ClassUtil.getClassDescription(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) constructor0);
      Class<Object> class2 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("5@GPy~@k");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      Class<CollectionType> class4 = CollectionType.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class4, class5);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1590));
      MapType mapType1 = mapType0.withKeyType(placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType1, placeholderForType0);
      Class<Long> class6 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class6);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, simpleType0);
      SimpleType simpleType1 = referenceType0.withValueHandler(mapType0);
      JavaType javaType0 = simpleType1.withContentType(placeholderForType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings1, (JavaType) mapType1, (JavaType[]) null, javaType0);
      collectionType0.withTypeHandler(constructor0);
      ClassUtil.rawClass(collectionType0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.TYPE;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLException sQLException0 = new SQLException();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.primitiveType(class1);
      ClassUtil.classNameOf(class1);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Void> class1 = Void.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getConstructors(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IOException> class3 = IOException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class3);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      SimpleType simpleType0 = referenceType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      Class<Object> class4 = Object.class;
      ClassUtil.getGenericInterfaces(class4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 11);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double(4.973623573789234);
      ClassUtil.getClassDescription(double0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.TYPE;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus1, clientInfoStatus2);
      ClassUtil.findEnumType(enumSet0);
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isNonStaticInnerClass(class1);
      String string0 = "4";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("4", "4");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) null, 1977);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "4", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 96, objectMapper1, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      JsonMappingException.from(jsonGenerator0, "4", (Throwable) jsonMappingException0);
      jsonMappingException0.getStackTrace();
      ClassUtil.getRootCause(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.backticked("?h9&&ibY=D[PDS|");
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.wrapperType(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.classOf((Object) null);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isConcrete(class3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.isProxyType(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJOPropertiesCollector0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) collectionLikeType0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader0, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectReader0);
      referenceType0.serialize(jsonGenerator0, defaultSerializerProvider_Impl1);
      referenceType0.getAnchorType();
      TypeFactory.defaultInstance();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
      Class<String> class4 = String.class;
      ClassUtil.isCollectionMapOrArray(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      mockRuntimeException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      ClassUtil.backticked("VgkjNDN");
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double((-1.0));
      ClassUtil.getClassDescription(double0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.primitiveType(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isProxyType(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      JavaType javaType0 = referenceType0.getAnchorType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "9_G&42\"B9n", javaType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      Class<Object> class1 = Object.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      ClassUtil.getGenericSuperclass(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Short> class2 = Short.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.primitiveType(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleModule simpleModule0 = new SimpleModule();
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Void> class1 = Void.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = false;
//      try { 
        ClassUtil.findConstructor(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      Class<Annotation> class6 = Annotation.class;
      ClassUtil.findClassAnnotations(class3);
      classUtil_Ctor0.getParamCount();
      constructor0.getParameterTypes();
      classUtil_Ctor0.getParameterAnnotations();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      ClassUtil.classNameOf(placeholderForType0);
      MockException mockException0 = new MockException();
      mockException0.getCause();
      ClassUtil.getConstructors(class6);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Byte> class0 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.primitiveType(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wb#y!`/,&:");
      ClassUtil.nonNullString("Lv%=)o");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.StdDateFormat");
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<SimpleModule>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      ClassUtil.findClassAnnotations(class3);
      classUtil_Ctor0.getParamCount();
      constructor0.getParameterTypes();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class6 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class6);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ResolvedRecursiveType> class7 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(class4, class7);
      Class<Object> class8 = Object.class;
      ClassUtil.findConstructor(class8, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      ClassUtil classUtil0 = new ClassUtil();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus1);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.isJacksonStdImpl(class6);
      Class<ObjectNode> class9 = ObjectNode.class;
      ClassUtil.getEnclosingClass(class9);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig");
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf((Class<?>) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1951);
      ClassUtil.getClassDescription(placeholderForType0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredFields(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Character.valueOf('\u0010');
      Class<Object> class0 = Object.class;
      Double double0 = new Double((-3631.223197753073));
      Double double1 = new Double((-3631.223197753073));
      ClassUtil.hasClass(double1, class0);
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaredAnnotations();
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, false);
      Class<Float> class2 = Float.class;
      ClassUtil.isProxyType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.findConstructor(class0, true);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.createInstance(class2, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.emptyIterator();
      ClassUtil.classNameOf(class0);
      MockException mockException0 = new MockException();
      SQLWarning sQLWarning0 = new SQLWarning("`java.lang.Class`", "`java.lang.Class`", mockException0);
      mockException0.printStackTrace();
      mockException0.initCause(sQLWarning0);
      mockException0.getCause();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "`java.lang.Class`");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isLocalType(class0, false);
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      SimpleModule simpleModule0 = new SimpleModule();
      ClassUtil.findRawSuperTypes(class0, class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TimeZone timeZone0 = TimeZone.getTimeZone("JSON");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      MockFile mockFile0 = new MockFile("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) objectMapper0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) objectMapper1;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("JSON", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, printStream0, byteArray0, 187, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTimeoutException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTimeoutException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.replace("t", clientInfoStatus0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Character.valueOf('\u0010');
      Class<Object> class0 = Object.class;
      Double double0 = new Double((-3631.223197753073));
      Double double1 = new Double((-3631.223197753073));
      Double double2 = ClassUtil.nonNull(double0, double1);
      ClassUtil.hasClass(double2, class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.getClassDescription(double0);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.quotedOr((Object) null, "com.fasterxml.jackso");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Void> class1 = Void.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.findConstructor(class0, false);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.createInstance(class2, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ArrayType> class3 = ArrayType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("$tA7nz7B%GPj[fy", class3, "6DcBCd'p*wA&}WrZ");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from String \"$tA7nz7B%GPj[fy\": 6DcBCd'p*wA&}WrZ
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Void> class1 = Void.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.classNameOf(class2);
      MockException mockException0 = new MockException();
      SQLDataException sQLDataException0 = new SQLDataException(mockException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "[null]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.annotation.ObjectIdGenerators");
      Throwable throwable0 = mockRuntimeException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      ClassUtil.backticked("com.fasterxml.jackson.annotation.ObjectIdGenerators");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "'>");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Void> class1 = Void.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.annotation.ObjectIdGenerators");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.annotation.ObjectIdGenerators", ";7oq", ";7oq", (-2754));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(";7oq", "org.hibernate.proxy.java.lang.Error", "com.fasterxml.jackson.annotation.ObjectIdGenerators", 8);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      mockRuntimeException0.fillInStackTrace();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      ClassUtil.backticked("com.fasterxml.jackson.annotation.ObjectIdGenerators");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE(throwable0, "sJp<}1&k");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // com.fasterxml.jackson.annotation.ObjectIdGenerators
//         //
//         verifyException("com.fasterxml.jackson.annotation.ObjectIdGenerators", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<SimpleModule> class2 = SimpleModule.class;
      Class<Object> class3 = Object.class;
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.isLocalType(class2, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      mockRuntimeException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      Integer integer0 = new Integer(2460);
      Integer integer1 = new Integer(53);
      Integer integer2 = new Integer(3);
      ClassUtil.nonNull(integer1, integer2);
      Class<Long> class1 = Long.TYPE;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.wrapperType(class1);
      ClassUtil.nonNullString("java.lang");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.getGenericSuperclass(class1);
      Constructor<Double> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Void> class2 = Void.class;
      ClassUtil.isJacksonStdImpl(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<SimpleModule> class2 = SimpleModule.class;
      Class<Object> class3 = Object.class;
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.isLocalType(class2, false);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("size", "size", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "NULL", 0, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.spliterator();
      MockFile mockFile0 = new MockFile("o:S vLny2@KgSE", "Strange Collection type ");
      sQLFeatureNotSupportedException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-492));
      Class<Float> class2 = Float.TYPE;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class0);
      System.setCurrentTimeMillis(0L);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("59yl<c|~J](os", (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      File file0 = MockFile.createTempFile("JSON", "com.fasterxml.jackso");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "JSON");
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) printStream0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLFeatureNotSupportedException: 59yl<c|~J](os
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.nameOf(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.java.lang.String");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Character.valueOf('H');
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      MockException mockException0 = new MockException();
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.getConstructors(class0);
      Double double0 = new Double((-2642.95034));
      ClassUtil.getClassDescription(class1);
      Class<Character> class2 = Character.TYPE;
      ClassUtil.hasClass(class0, class2);
      Class<Object> class3 = Object.class;
      Class<ArrayType> class4 = ArrayType.class;
      Class<AccessibleObject> class5 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class5, typeBindings0);
      // Undeclared exception!
//      try { 
        TypeBindings.create((Class<?>) class4, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.ArrayType with 2 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = new Double((-1.0));
      ClassUtil.getClassDescription(double0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassMethods(class0);
      ClassUtil.quotedOr((Object) null, "{f?");
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Character.valueOf('H');
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class0);
      MockException mockException0 = new MockException();
      mockException0.getCause();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "8&/(.ZK@/$2");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Double double0 = new Double((-1.0));
      ClassUtil.getClassDescription(double0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(double0);
      MockException mockException0 = new MockException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "`java.lang.Double`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `java.lang.Double`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Double double0 = new Double((-1.0));
      ClassUtil.getClassDescription(double0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf((Object) null);
      MockException mockException0 = new MockException();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((File) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("size", "size", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "NULL", 0, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-492));
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassUtil.nonNullString("kXE5_A4");
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass("kXE5_A4", class0);
      MockIOException mockIOException0 = new MockIOException();
      Class<IOException> class1 = IOException.class;
      ClassUtil.hasClass(mockIOException0, class1);
      Class<String> class2 = String.class;
      ClassUtil.getEnclosingClass(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("kXE5_A4");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonFactory2.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("kXE5_A4");
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.getConstructors(class0);
      Class<Short> class2 = Short.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.findClassAnnotations(class3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaringClass(class2);
      Integer integer0 = new Integer((-5));
      ClassUtil.nonNull((Integer) null, integer0);
      Class<Long> class4 = Long.class;
      ClassUtil.getGenericInterfaces(class4);
      ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      int[] intArray0 = new int[5];
      intArray0[0] = 76;
      intArray0[1] = 76;
      intArray0[3] = 76;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("size", "size", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "NULL", 0, sQLFeatureNotSupportedException0);
      MockFile mockFile0 = new MockFile("o:S vLny2@KgSE", "Strange Collection type ");
      sQLFeatureNotSupportedException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-492));
      Class<Float> class2 = Float.TYPE;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil.nonNullString("kXE5_A4");
      Class<MapType> class0 = MapType.class;
      ClassUtil.nameOf(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("kXE5_A4", (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.hasClass(class0, class1);
      MockIOException mockIOException0 = new MockIOException();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.hasClass((Object) null, class2);
      Class<Double> class3 = Double.class;
      ClassUtil.getEnclosingClass(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory0.setRootValueSeparator("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory1.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      mockFile0.createNewFile();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      jsonFactory3.createParser((InputStream) mockFileInputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((File) mockFile0, jsonEncoding0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.annotation.ObjectIdGenerators");
      mockRuntimeException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      ClassUtil.backticked("ScQ\"6f#qAh1@.-a_Z");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", static serializer of type ");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("WRITE_NULL_MAP_VALUES");
      mockRuntimeException0.getMessage();
      ClassUtil.classNameOf(mockRuntimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      sQLTimeoutException0.setNextException(batchUpdateException0);
      batchUpdateException0.setNextException(sQLTimeoutException0);
      ClassUtil.throwIfIOE(batchUpdateException0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class3, classUtil_Ctor1, "4Rt7a!");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class com.fasterxml.jackson.databind.util.ClassUtil$Ctor (of class com.fasterxml.jackson.databind.type.CollectionLikeType) must override method '4Rt7a!'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.emptyIterator();
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.getClassMethods(class2);
      ClassUtil.quotedOr((Object) null, "{f?");
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, false);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.emptyIterator();
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.getClassMethods(class2);
      ClassUtil.quotedOr((Object) null, "{f?");
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getEnclosingClass(class4);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<CollectionType> class2 = CollectionType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.nonNull((Integer) null, (Integer) null);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findEnumType(class0);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.isLocalType(class2, false);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, class3, "AIVJ/VoT0-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      String string0 = " ;,WL`{rz\">i";
      int[] intArray0 = new int[5];
      intArray0[0] = 76;
      intArray0[1] = 76;
      intArray0[2] = 76;
      intArray0[3] = 76;
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil classUtil0 = new ClassUtil();
      int[] intArray0 = new int[6];
      intArray0[0] = 555;
      intArray0[1] = 555;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nonNullString("local/anonymous");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-691));
      // Undeclared exception!
//      try { 
        placeholderForType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.nonNullString("kXE5_A4");
      Class<?> class0 = ClassUtil.classOf("kXE5_A4");
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getConstructors(class1);
      Class<Short> class2 = Short.class;
      Class<Object> class3 = Object.class;
      Class<Module> class4 = Module.class;
      ClassUtil.findRawSuperTypes(class3, class4, true);
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getPackageName(class2);
      Class<Long> class5 = Long.class;
      ClassUtil.getDeclaringClass(class5);
      Integer integer0 = new Integer(3);
      ClassUtil.nonNull((Integer) null, integer0);
      ClassUtil.getGenericInterfaces(class2);
      Class<String> class6 = String.class;
      ClassUtil.findEnumType(class6);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      String string0 = "NULL";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("size", "size", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "NULL", 0, sQLFeatureNotSupportedException0);
      MockFile mockFile0 = new MockFile("o:S vLny2@KgSE", "Strange Collection type ");
      sQLFeatureNotSupportedException0.getSuppressed();
      ClassUtil.getDeclaringClass(class0);
      Integer integer0 = new Integer((-943));
      ClassUtil.nonNull(integer0, (Integer) null);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<Character> class3 = Character.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.getDeclaringClass(class1);
      Integer integer0 = new Integer((-617));
      ClassUtil.nonNull(integer0, (Integer) null);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class4);
      Class<Float> class5 = Float.class;
      ClassUtil.findEnumType(class5);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
      Class<NoClass> class4 = NoClass.class;
      boolean boolean0 = true;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("size", "size", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "NULL", 0, sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.", "size");
      sQLSyntaxErrorException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("NULL", "jMs<Og#+5S|@RB");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("size", sQLFeatureNotSupportedException1);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "pnDH*JEz&}Y&TwL", (-906));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.", "org.hibernate.proxy.", (-906), sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorException1.initCause(sQLTransientConnectionException0);
      sQLSyntaxErrorException1.getStackTrace();
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      Double double0 = new Double(189.0);
      ClassUtil.quotedOr(double0, "{f?");
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, true);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<LinkedList> class0 = LinkedList.class;
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      Class<String> class2 = String.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getEnclosingClass(class3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1823;
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class4, true);
      Class<Long> class5 = Long.class;
      ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<RuntimeException> class6 = RuntimeException.class;
      ClassUtil.findSuperTypes(class6, class3, list0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile((String) null, "3]pVM$,({'(1PR");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<SimpleModule> class2 = SimpleModule.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      Class<SimpleModule> class4 = SimpleModule.class;
      ClassUtil.createInstance(class4, false);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassUtil.emptyIterator();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.classNameOf((Object) null);
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericSuperclass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      String string0 = "=D'vqTnS";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=D'vqTnS");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      int int0 = (-322);
      byteArrayBuilder0.appendFourBytes((-322));
      MockThrowable mockThrowable0 = new MockThrowable("[null]", sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[null]", "=D'vqTnS", "[null]", 96);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = null;
      StackTraceElement stackTraceElement1 = null;
//      try {
        stackTraceElement1 = new StackTraceElement((String) null, "[null]", "ZERO_LENGTH_ENUM_ARRAY", (byte)66);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil classUtil0 = new ClassUtil();
      int[] intArray0 = new int[6];
      intArray0[0] = 555;
      intArray0[1] = 555;
      intArray0[2] = 8;
      intArray0[3] = 555;
      intArray0[4] = 555;
      intArray0[5] = 555;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("local/anonymous", "org.hibernate.proxy.java.lang.Double", 555, intArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // local/anonymous
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.classNameOf(class0);
      ClassUtil.classNameOf(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      ContextAttributes.getEmpty();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("keyUniverse", "l]D1PN.f'](VY,i", (-2483));
      SQLException sQLException0 = new SQLException("=?~JrQ=", "`java.lang.Class`", sQLFeatureNotSupportedException0);
      MockIOException mockIOException0 = new MockIOException("=?~JrQ=", sQLException0);
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // =?~JrQ=
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      Class<Annotation> class6 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class6);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class7 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class7);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ResolvedRecursiveType> class8 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(class4, class8);
      Class<Object> class9 = Object.class;
      ClassUtil.findConstructor(class9, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.hasClass(simpleDeserializers0, class2);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("items", "items", 96);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("items", "items", 96);
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("items", "U 4");
      sQLFeatureNotSupportedException0.setNextException(sQLInvalidAuthorizationSpecException0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<String> class2 = String.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("size", "size", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "NULL", 0, sQLFeatureNotSupportedException0);
      MockFile mockFile0 = new MockFile("o:S vLny2@KgSE", "Strange Collection type ");
      MockFile mockFile1 = new MockFile(mockFile0, "Strange Collection type ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println((float) 0);
      sQLFeatureNotSupportedException0.getSuppressed();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Strange Collection type ");
      sQLNonTransientConnectionException0.printStackTrace(printWriter0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-473));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.nonNull((Enum<AccessPattern>) accessPattern0, (Enum<AccessPattern>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isConcrete(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.emptyIterator();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider defaultSerializerProvider0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, (DefaultDeserializationContext) null);
      SimpleModule simpleModule0 = new SimpleModule();
      SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class1, class0);
      objectMapper0.readerForUpdating(simpleModule1);
      HashMap<SimpleType, CollectionType> hashMap0 = null;
//      try {
        hashMap0 = new HashMap<SimpleType, CollectionType>(3, 0.0F);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal load factor: 0.0
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasEnclosingMethod(class0);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'N';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectReader0, charsToNameCanonicalizer0, charArray0, 0, 1, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "NULL", batchUpdateException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 871);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2656), objectMapper0, byteArrayBuilder0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.BatchUpdateException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getPackageName(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.getDeclaringClass(class0);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.getDeclaredMethods(class4);
      ClassUtil.nonNullString("");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1812);
      // Undeclared exception!
//      try { 
        placeholderForType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      batchUpdateException0.setNextException(sQLTimeoutException0);
      ClassUtil.throwIfIOE(batchUpdateException0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = false;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Float has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassUtil.backticked("rO");
      Class<String> class0 = String.class;
      Class<SimpleType> class1 = SimpleType.class;
      Class<Double> class2 = Double.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = null;
      // Undeclared exception!
//      try { 
        ReferenceType.construct(class2, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~Dj6Q", "~Dj6Q", 0, sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLTimeoutException0.addSuppressed(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        sQLTimeoutException0.initCause(sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLTransactionRollbackException: ~Dj6Q
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.emptyIterator();
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.createInstance(class2, false);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      Class<Annotation> class6 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class6);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class7 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class7);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ResolvedRecursiveType> class8 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(class4, class8);
      Class<Object> class9 = Object.class;
      ClassUtil.findConstructor(class9, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = true;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector(annotationIntrospector1);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      int[] intArray0 = new int[5];
      intArray0[0] = 720;
      intArray0[1] = (-1001);
      intArray0[2] = 0;
      intArray0[3] = 899;
      intArray0[4] = 0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@FE8D", "@FE8D", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLFeatureNotSupportedException0);
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.replace("primitive", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NULL", "Cannot figure out type for EnumMap (odd JDK platform?)", hashMap0);
      ClassUtil.throwIfIOE(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ShntGW");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, "size");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) "@|RoHel8";
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0;
//      try { 
        defaultSerializerProvider_Impl1.reportMappingProblem((Throwable) batchUpdateException0, "@|RoHel8", objectArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // @|RoHel8
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("SiX4r");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      ClassUtil.classNameOf(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassUtil.emptyIterator();
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf(class1);
      ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      int[] intArray0 = new int[5];
      intArray0[0] = 76;
      intArray0[1] = 76;
      intArray0[2] = 76;
      intArray0[3] = 76;
      intArray0[4] = 76;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" ;,WL`{rz\">i", " ;,WL`{rz\">i", 76, intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" ;,WL`{rz\">i", sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findClassAnnotations(class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.nonNull((Integer) null, (Integer) null);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      Class<Error> class2 = Error.class;
      Class<ArrayType> class3 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<MapLikeType> class4 = MapLikeType.class;
      Class<Long> class5 = Long.class;
      ClassUtil.findSuperTypes(class4, class5, list0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Error is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.emptyIterator();
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf(class1);
      ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Void> class2 = Void.class;
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.emptyIterator();
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getClassMethods(class4);
      ClassUtil.getClassMethods(class3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/JmRFrnr", "{f?");
      sQLSyntaxErrorException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/JmRFrnr", "{f?");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{f?", sQLFeatureNotSupportedException0);
      sQLSyntaxErrorException0.initCause(sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorException0.getStackTrace();
      ClassUtil.throwIfError(sQLSyntaxErrorException0);
      ClassUtil.quotedOr((Object) null, "{f?");
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassUtil.nonNullString("kXE5_A4");
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass("kXE5_A4", class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getLocalizedMessage();
      Class<IOException> class1 = IOException.class;
      ClassUtil.hasClass(mockIOException0, class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      classUtil_Ctor0.getParamCount();
      Class<String> class3 = String.class;
      ClassUtil.getEnclosingClass(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("kXE5_A4");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("with");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLWarning sQLWarning0 = new SQLWarning("siE8`oD#4;NCH^MC$#~", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ZERO_LENGTH_ENUM_ARRAY");
      sQLWarning0.addSuppressed(sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Sub-class %s (of class %s) must override method '%s'", sQLWarning0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class1, class3, false);
      Class<Object> class4 = Object.class;
      ClassUtil.isObjectOrPrimitive(class4);
      Class<String> class5 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class4, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class5, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, javaTypeArray0[0]);
      PropertyName propertyName0 = PropertyName.construct("non-static member class", "25}_%E:");
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class4, "non-static member class", simpleType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaTypeArray0[0], propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      Class<Annotation> class6 = Annotation.class;
      beanProperty_Std0.getContextAnnotation(class6);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      MapLikeType mapLikeType0 = mapType1.withValueHandler(class2);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0);
      ClassUtil.nullOrToString(arrayType0);
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.nonNullString("25}_%E:");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getOuterClass(class3);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      ClassUtil.findClassAnnotations(class3);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class6 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class6);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ResolvedRecursiveType> class7 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(class4, class7);
      Class<Object> class8 = Object.class;
      ClassUtil.findConstructor(class8, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl(class6);
      Class<ObjectNode> class9 = ObjectNode.class;
      ClassUtil.getEnclosingClass(class9);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      ClassUtil.classOf(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.getDeclaringClass(class4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory1.withClassLoader(classLoader0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.getContentType();
      Class<IOException> class5 = IOException.class;
      // Undeclared exception!
//      try { 
        typeFactory0.constructGeneralizedType((JavaType) null, class5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Long> class0 = Long.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Long is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nullOrToString(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class3, list0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      valueInstantiator_Base0.getIncompleteParameter();
      DeserializationContext deserializationContext0 = null;
      placeholderForType0.toString();
      String string0 = "(S?A`48!QkGn}M VvN";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(2);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactory0, placeholderForType1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classOf(class0);
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.getOuterClass(class2);
      String string0 = "entrySet";
      String string1 = "fi`/ln*3+OVZX3T3l";
      int int0 = 0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("x1-DX !{DY*ozbGV/", "wo-/Fr", 1638, sQLFeatureNotSupportedException0);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x1-DX !{DY*ozbGV/", "', '", (-409), mockIOException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string2 = "ManwJCO/4_8`";
      StackTraceElement stackTraceElement0 = new StackTraceElement("wo-/Fr", "fi`/ln*3+OVZX3T3l", "ManwJCO/4_8`", 1638);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("wo-/Fr", "ManwJCO/4_8`", "", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      int int1 = 65535;
      StackTraceElement stackTraceElement2 = new StackTraceElement("x1-DX !{DY*ozbGV/", "wo-/Fr", "8K&KNZq5}&E.\"pS#", 65535);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("8K&KNZq5}&E.\"pS#", "fi`/ln*3+OVZX3T3l", "entrySet", 1638);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", (String) null, (-409));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = null;
//      try {
        stackTraceElement5 = new StackTraceElement((String) null, "", "com.fasterxml.jackson.core.io.SerializedString", (-409));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findClassAnnotations(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1823;
      intArray0[1] = 0;
      intArray0[2] = (-3173);
      intArray0[3] = 2;
      intArray0[4] = (-1);
      intArray0[5] = 3;
      intArray0[6] = 1536;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("5!ab!9so#]", intArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "5!ab!9so#]", batchUpdateException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.classNameOf(class0);
      ClassUtil.classNameOf(class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "`java.lang.Class`", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-42);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      // Undeclared exception!
//      try { 
        iOContext0.allocWriteEncodingBuffer();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.reflect.AccessibleObject is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }
}
