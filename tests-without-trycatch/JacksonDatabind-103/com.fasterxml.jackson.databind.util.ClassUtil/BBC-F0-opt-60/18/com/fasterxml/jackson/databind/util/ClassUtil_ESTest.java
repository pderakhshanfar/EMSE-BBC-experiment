/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:41:03 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Byte");
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile(">1$+~DT]Nt", ">1$+~DT]Nt");
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasEnclosingMethod(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u]6! OC");
      MockThrowable mockThrowable0 = new MockThrowable(";@w7Qlq]Oy$W:]ZRCj");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("BU{8z^2k!tkZYRk", ";@w7Qlq]Oy$W:]ZRCj", mockThrowable0);
      mockThrowable0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      ClassUtil.getRootCause(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(73);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, (TypeBindings) null);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(934);
      StringBuilder stringBuilder0 = new StringBuilder("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.TypeFactory");
      StringBuilder stringBuilder1 = placeholderForType1.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = arrayType0.getErasedSignature(stringBuilder1);
      placeholderForType0.getGenericSignature(stringBuilder2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      ClassUtil.rawClass(arrayType0);
      byteArray0[0] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      placeholderForType0.getSuperClass();
      ClassUtil.quotedOr(placeholderForType0, " [truncated]");
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile(">1$+~D^T]Nt", ">1$+~D^T]Nt");
      long long0 = (-263L);
      Class<Error> class0 = Error.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 24, objectMapper0, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonLocation jsonLocation0 = new JsonLocation(uTF8JsonGenerator0, 0L, 2, 3627);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, ">1$+~D^T]Nt", jsonLocation0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(3, class0, "java.lang.Error");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonParser0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `long` from number 3: java.lang.Error
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("@KrdMPi", map0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@KrdMPi");
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1, sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1994924604), objectMapper2, mockFileWriter0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) mockFileWriter0, (Exception) sQLClientInfoException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLClientInfoException: @KrdMPi
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<Error>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.getClassDescription((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "x&WmaGlIW~";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("unknown", "x&WmaGlIW~");
      sQLTransactionRollbackException0.spliterator();
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.primitiveType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern1);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<NoClass>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, false);
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.io.InputStream", "TVR]L", (-1));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLWarning0);
      sQLWarning0.initCause(sQLNonTransientException0);
      MockError mockError0 = new MockError("", sQLWarning0);
      mockError0.addSuppressed(sQLWarning0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "TVR]L");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Double> class1 = Double.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Class<Object> class3 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0, (Object) resolvedRecursiveType0, (Object) resolvedRecursiveType0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class2, (JavaType) arrayType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      CollectionLikeType collectionLikeType1 = collectionType0.withTypeHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Default constructor for ", "@{bDh+WByl\"C", (byte)15);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("FCH/xgc0)", "Default constructor for ", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.emptyIterator();
      ClassUtil.getClassMethods(class0);
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getDeclaringClass(class3);
      Character character0 = Character.valueOf('D');
      ClassUtil.nullOrToString(character0);
      Class<Integer> class4 = Integer.class;
      ClassUtil.canBeABeanType(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockError mockError0 = new MockError("net.sf.cglib.proxy.");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "elementType");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) null, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassUtil.emptyIterator();
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "net.sf.cglib.proxy.java.lang.RuntimeException";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.RuntimeException");
      ClassUtil.classOf((Object) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.deser.std.StdDeserializer");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.emptyIterator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      deserializerFactoryConfig0.valueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", class1, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from String \"org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException\": org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.quotedOr((Object) null, "M");
      MockError mockError0 = new MockError("Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): type/property designed to be serialized as JSON Array");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "M", "org.hibernate.proxy.", 1024);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): type/property designed to be serialized as JSON Array", "M", "o=W#[w:^Az)VH", 1024);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockError0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//         //
//         // Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): type/property designed to be serialized as JSON Array
//         //
//         verifyException("M", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.getConstructors(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 96);
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedInputStream0, "Q3%m0 y");
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      SQLDataException sQLDataException0 = new SQLDataException("Q3%m0 y", mockIOException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLDataException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectMapper objectMapper2 = objectMapper0.enable(deserializationFeature0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      objectMapper3.enableDefaultTyping();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      objectMapper1.configure(deserializationFeature1, false);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper0.readerFor(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.canBeABeanType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getPackageName(class2);
      Class<Module> class3 = Module.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wd</<0+z/UYt~o[8|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<List> class0 = List.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.classNameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.getConstructors(class1);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, typeBindings0, (Object) class0, (Object) typeBindings0);
      TypeBindings typeBindings1 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      JavaType javaType1 = resolvedRecursiveType0.withContentType(referenceType0);
      ClassUtil.rawClass(javaType1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<ArrayNode> class0 = ArrayNode.class;
      Class<List> class1 = List.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Void> class0 = Void.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isCollectionMapOrArray(class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findEnumType(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.getEnclosingClass(class3);
      Class<Module> class4 = Module.class;
      ClassUtil.findClassAnnotations(class4);
      Class<String> class5 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class5, false);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<IOException> class6 = IOException.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class6, false);
      ClassUtil.nameOf((Class<?>) null);
      Class<Character> class7 = Character.class;
      ClassUtil.findConstructor(class7, false);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<IOException> class1 = IOException.class;
      Class<Void> class2 = Void.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.emptyIterator();
      ClassUtil.isObjectOrPrimitive(class1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.findSuperTypes(class4, class5, list0);
      Class<MapType> class6 = MapType.class;
      ClassUtil.getDeclaringClass(class6);
      Class<Float> class7 = Float.class;
      ClassUtil.hasEnclosingMethod(class7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockThrowable mockThrowable0 = new MockThrowable("e-qTn^Fx!;x1u", mockRuntimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "e-qTn^Fx!;x1u");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withTypeHandler(defaultDeserializationContext_Impl0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) mapType1, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected START_OBJECT: JSON
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<List> class1 = List.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.isCollectionMapOrArray(class3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = new Byte((byte) (-13));
      Class<IOException> class0 = IOException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(byte0, class0, "2p~Nu+4$");
      MockIOException mockIOException0 = new MockIOException("2p~Nu+4$", jsonMappingException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping();
      ObjectMapper objectMapper5 = objectMapper4.configure(deserializationFeature0, false);
      Class<AccessPattern> class0 = AccessPattern.class;
      objectMapper5.readerFor(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getGenericInterfaces(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getPackageName(class1);
      Class<String> class2 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class2, class0, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.nullOrToString(sQLTimeoutException0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eNRzQq");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.getClassMethods(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, true);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      ClassUtil.canBeABeanType(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      Class<Void> class5 = Void.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class5, 3543);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classNameOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isNonStaticInnerClass(class2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "-K5O%H=/TonTf";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-K5O%H=/TonTf");
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.findSuperTypes((JavaType) null, class3, true);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.java.lang.Boolean");
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 37;
      intArray0[2] = 5;
      intArray0[3] = (-9);
      intArray0[4] = 14;
      intArray0[5] = (-2922);
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTimeoutException0);
      sQLTimeoutException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "org.hibernate.proxy.java.lang.Boolean");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.isBogusClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TreeSet<Module> treeSet0 = new TreeSet<Module>();
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) treeSet0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[5] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[6] = deserializationFeature2;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassUtil.classNameOf(collectionType0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockError mockError0 = new MockError();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockError0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "]B6sBbh%z~,.^J(/");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<Object> class1 = Object.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.java.lang.Integer");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.SerializerProvider", "net.sf.cglib.proxy.java.lang.Integer", sQLRecoverableException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.SerializerProvider");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.format("com.fasterxml.jackson.databind.SerializerProvider", (Object[]) typeArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      sQLRecoverableException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jackson.databind.SerializerProvider
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nameOf(class0);
      Class<IOException> class1 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.createInstance(class1, false);
      ClassUtil.canBeABeanType(class1);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isLocalType(class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class3);
      BiFunction<Object, Long, Long> biFunction0 = (BiFunction<Object, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyLong());
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, (Long) null);
      enumMap0.replaceAll(biFunction0);
      ClassUtil.findEnumType(enumMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class4 = HashMap.class;
      JavaType javaType0 = null;
      // Undeclared exception!
//      try { 
        typeFactory0.constructMapType(class4, (JavaType) null, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, (CollectionLikeType) null);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("primitive", "org.hibernate.proxy.java.io.IOException");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.java.io.IOException", "primitive", hashMap0, sQLNonTransientException0);
      MockError mockError0 = new MockError("org.hibernate.proxy.java.io.IOException", sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "net.sf.cglib.proxy.java.lang.reflect.AccessibleObject", "+L]7D:>Io[ Nw4199<");
      ClassUtil.nonNull((JsonMappingException) null, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      Class<String> class3 = String.class;
      ClassUtil.findRawSuperTypes(class1, class3, false);
      ClassUtil.findSuperTypes(class3, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("utc-millisec");
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // utc-millisec
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.RuntimeException");
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = 114;
      intArray0[1] = 4744;
      intArray0[2] = 477;
      intArray0[3] = (-98);
      intArray0[4] = 2037;
      intArray0[5] = 225;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.java.lang.RuntimeException");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("net.sf.cglib.proxy.", "net.sf.cglib.proxy.java.lang.RuntimeException", 114, sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.java.lang.RuntimeException", intArray0, sQLSyntaxErrorException0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.isConcrete(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "net.sf.cglib.proxy.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = new Vector<Class<Boolean>>();
      ClassUtil.getPackageName(class1);
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.isJacksonStdImpl(class0);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findSuperTypes(class1, class3, list0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      Object object0 = new Object();
      ClassUtil.hasClass(object0, class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<String> class2 = String.class;
      ClassUtil.findConstructor(class2, false);
      Class<IOException> class3 = IOException.class;
      Class<Void> class4 = Void.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.getPackageName(class1);
      ClassUtil.emptyIterator();
      ClassUtil.isObjectOrPrimitive(class3);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class5);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      Locale locale0 = Locale.ROOT;
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class1);
      EnumMap<AccessPattern, CollectionLikeType> enumMap1 = new EnumMap<AccessPattern, CollectionLikeType>((Map<AccessPattern, ? extends CollectionLikeType>) enumMap0);
      BiConsumer<Object, CollectionLikeType> biConsumer0 = (BiConsumer<Object, CollectionLikeType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      enumMap0.forEach(biConsumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(enumMap1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.isObjectOrPrimitive(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(javaType0, "~etC6G]f+x", "~etC6G]f+x");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1837), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 16, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id '~etC6G]f+x' as a subtype of [simple type, class java.lang.Object]: ~etC6G]f+x
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<List> class2 = List.class;
      Class<Integer> class3 = Integer.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class2, class3);
      collectionType0.toString();
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      Locale locale0 = Locale.ROOT;
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class1);
      EnumMap<AccessPattern, CollectionLikeType> enumMap1 = new EnumMap<AccessPattern, CollectionLikeType>((Map<AccessPattern, ? extends CollectionLikeType>) enumMap0);
      BiConsumer<Object, CollectionLikeType> biConsumer0 = (BiConsumer<Object, CollectionLikeType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      enumMap0.forEach(biConsumer0);
      ClassUtil.findEnumType(enumMap1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      ClassUtil.nameOf(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("`java.lang.Object`");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "`java.lang.Object`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `java.lang.Object`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-5));
      Class<Double> class0 = Double.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      Locale locale0 = Locale.ROOT;
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class1);
      EnumMap<AccessPattern, CollectionLikeType> enumMap1 = new EnumMap<AccessPattern, CollectionLikeType>((Map<AccessPattern, ? extends CollectionLikeType>) enumMap0);
      BiConsumer<AccessPattern, CollectionLikeType> biConsumer0 = (BiConsumer<AccessPattern, CollectionLikeType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      enumMap1.forEach(biConsumer0);
      ClassUtil.findEnumType(enumMap1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.isObjectOrPrimitive(class3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classNameOf(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.isConcrete(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Can not use ObjectMapper with non-blocking parser");
      ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-5));
      Class<Double> class0 = Double.TYPE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      Locale locale0 = Locale.ROOT;
      ObjectReader objectReader1 = objectReader0.with(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0, deserializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectReader objectReader3 = objectReader2.with(jsonFactory0);
      objectReader3.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = null;
//      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-5), (-5));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.concurrent.ConcurrentHashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-5));
      Class<Double> class0 = Double.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      Locale locale0 = Locale.ROOT;
      ObjectReader objectReader1 = objectReader0.with(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0, deserializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectReader objectReader3 = objectReader2.with(jsonFactory0);
      objectReader3.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = null;
//      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-5), (-5));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.concurrent.ConcurrentHashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "JSON");
      SQLWarning sQLWarning0 = new SQLWarning("Internal error: unknown key type ", "d}SpW@Tm9X", 1536, jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning: Internal error: unknown key type 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      boolean boolean0 = false;
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findConstructor(class3, true);
      Class<Object> class4 = Object.class;
      ClassUtil.getOuterClass(class4);
      Character character0 = Character.valueOf('m');
      ClassUtil.quotedOr(character0, "unknown");
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Object> class1 = Object.class;
      Class<List> class2 = List.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Character character0 = new Character('H');
      ClassUtil.getClassDescription(character0);
      MockError mockError0 = new MockError("zb(Tv>");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", mockError0);
      sQLTransientConnectionException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot figure out type for EnumSet (odd JDK platform?)", "yB/E~T4'1/>d]vXEC");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("$)Tz;", "$)Tz;", 69, sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "Cannot figure out type for EnumSet (odd JDK platform?)", (Throwable) sQLSyntaxErrorException1);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Double double0 = new Double((-646.8));
      Class<?> class0 = ClassUtil.classOf(double0);
      ClassUtil.primitiveType(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.getConstructors(class3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class3);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Class<Float> class4 = Float.TYPE;
      ClassUtil.wrapperType(class4);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 73;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(73);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      placeholderForType0.getSuperClass();
      ClassUtil.quotedOr(placeholderForType0, " [truncated]");
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yxJ1");
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Double");
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("keyUniverse", "%EH]", 1296);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: keyUniverse
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.java.lang.Boolean");
      mockRuntimeException0.printStackTrace();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", sQLDataException0);
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException1);
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Boolean");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("~iN.KQj V](", "non-static member class");
      MockRuntimeException mockRuntimeException2 = new MockRuntimeException(sQLRecoverableException0);
      MockThrowable.getDefaultStackTrace();
      ClassUtil.nullOrToString((Object) null);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      Class<Double> class2 = Double.class;
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLWarning sQLWarning0 = new SQLWarning("Cannot access ", sQLRecoverableException0);
      SQLWarning sQLWarning1 = new SQLWarning("Cannot access ");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.nonNullString("");
      Class<?> class2 = ClassUtil.classOf("");
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getGenericSuperclass(class1);
      Class<Short> class3 = Short.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.nameOf((Class<?>) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Error>[] classArray0 = (Class<Error>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.nonNullString((String) null);
      ClassUtil.classOf((Object) null);
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isBogusClass(class0);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLWarning sQLWarning0 = new SQLWarning("Q53_(]%pS^xA*", ", needed ", 115, (Throwable) null);
      sQLWarning0.printStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ", needed ", (Throwable) sQLWarning0);
      ClassUtil.throwIfError(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getDeclaredMethods(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-574));
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaType javaType0 = null;
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      ClassUtil.getDeclaringClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.primitiveType(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      typeFactory0.constructRawCollectionLikeType(class1);
      JavaType[] javaTypeArray0 = null;
      // Undeclared exception!
//      try { 
        TypeBindings.createIfNeeded((Class<?>) null, (JavaType[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = new Byte((byte)42);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.backticked("0\"59");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class2, true);
      constructor1.getAnnotatedReceiverType();
      ClassUtil.nameOf(class2);
      classUtil_Ctor0.getParameterAnnotations();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`0\"59`");
      mockRuntimeException0.printStackTrace();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString("`0\"59`");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`0\"59`", "");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(sQLRecoverableException0);
      MockThrowable.getDefaultStackTrace();
      ClassUtil.nullOrToString(mockRuntimeException1);
      Class<String> class3 = String.class;
      ClassUtil.findConstructor(class3, true);
      Class<IOException> class4 = IOException.class;
      ClassUtil.getEnclosingClass(class4);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.findSuperClasses(class5, (Class<?>) null, false);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("LS>6bxU>YF>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Pb5O{-!n B0cB0P-", "elementType", (-2629));
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: Pb5O{-!n B0cB0P-
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.backticked("0\"59");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class2, true);
      constructor1.toGenericString();
      constructor1.getAnnotatedReceiverType();
      ClassUtil.nameOf(class2);
      classUtil_Ctor0.getParameterAnnotations();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`0\"59`");
      mockRuntimeException0.printStackTrace();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString("`0\"59`");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`0\"59`", "t");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(sQLRecoverableException0);
      mockRuntimeException1.getStackTrace();
      ClassUtil.nullOrToString(mockRuntimeException1);
      Class<String> class3 = String.class;
      ClassUtil.findConstructor(class3, true);
      SQLWarning sQLWarning0 = new SQLWarning("t", sQLRecoverableException0);
      Class<Character> class4 = Character.class;
      Class<Short> class5 = Short.class;
      ClassUtil.findRawSuperTypes(class4, class5, false);
      Class<JsonMappingException> class6 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class6);
      Class<JsonMappingException> class7 = JsonMappingException.class;
      ClassUtil.getPackageName(class7);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.canBeABeanType(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.isJacksonStdImpl((Object) classUtil_Ctor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("Failed to find default consmructor of class", sQLDataException0);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("S%rrEXtLyo&", "^");
      MockException mockException0 = new MockException(sQLFeatureNotSupportedException0);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class2 = Annotation.class;
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotationsByType(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.getGenericInterfaces(class0);
      Class<Short> class4 = Short.class;
      ClassUtil.getDeclaredMethods(class4);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1348);
      ClassUtil.nullOrToString(placeholderForType0);
      Class<CollectionType> class5 = CollectionType.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class5, true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findClassDescription((AnnotatedClass) null);
      basicBeanDescription0.getClassInfo();
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, false);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLTransientException0);
      ClassUtil.findRawSuperTypes(class1, class1, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.backticked("0\"59");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int[] intArray0 = new int[2];
      intArray0[0] = 214;
      intArray0[1] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      MockException mockException0 = new MockException(batchUpdateException0);
      ClassUtil.throwIfIOE(mockException0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Short> class2 = Short.class;
      Class<Double> class3 = Double.class;
      ClassUtil.isLocalType(class3, false);
      ClassUtil.getGenericInterfaces(class2);
      Class<MapType> class4 = MapType.class;
      ClassUtil.findEnumType(class3);
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.findConstructor(class5, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("td4_e<Yv+;F5vb");
      SQLWarning sQLWarning0 = new SQLWarning(" has no default (no arg) constructor", batchUpdateException0);
      ClassUtil.findRawSuperTypes(class1, class4, false);
      ClassUtil.quotedOr("0\"59", " has no default (no arg) constructor");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class1, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLRecoverableException0);
      SQLWarning sQLWarning1 = new SQLWarning("Cannot access ", sQLRecoverableException0);
      ClassUtil.findRawSuperTypes(class1, class1, false);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.hasClass(class0, class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.Long", "cJrMis}gBl4{5");
      sQLFeatureNotSupportedException0.fillInStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.ser.std.DateSerializer", "NULL", 43, sQLFeatureNotSupportedException0);
      ClassUtil.isJacksonStdImpl((Object) sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nameOf(class1);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperTypes(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.", sQLDataException0);
      sQLDataException0.initCause(sQLWarning0);
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.getPackageName(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class4);
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(enumMap0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader1 = objectReader0.withoutAttribute(class1);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature1, deserializationFeatureArray0);
      ObjectReader objectReader3 = objectReader2.withView(class5);
      objectReader3.getTypeFactory();
      Class<PlaceholderForType> class6 = PlaceholderForType.class;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class6, (JavaType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.PlaceholderForType with 1 type parameter: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLDataException sQLDataException0 = new SQLDataException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "elementType", "com.fasterxml.jackson.databind.JsonDeserializer");
      BigDecimal bigDecimal0 = new BigDecimal(2.147483647E9);
      Class<String> class1 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class1, "uy(o%E9bu j]CUXu");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.String` from number 2147483647: uy(o%E9bu j]CUXu
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      System.setCurrentTimeMillis(0L);
      ClassUtil.hasClass((Object) null, class1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.backticked("0\"59");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.nonNullString("<Tg:`8)?0?");
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class2, true);
      constructor1.getAnnotatedReceiverType();
      ClassUtil.nameOf(class2);
      classUtil_Ctor0.getParameterAnnotations();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`0\"59`");
      mockRuntimeException0.printStackTrace();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      Class<Short> class3 = Short.class;
      ClassUtil.nameOf(class3);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`java.lang.Short`", "t");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(sQLRecoverableException0);
      mockRuntimeException1.getStackTrace();
      ClassUtil.nullOrToString(mockRuntimeException1);
      Class<String> class4 = String.class;
      Constructor<String> constructor2 = ClassUtil.findConstructor(class4, true);
      ClassUtil.checkAndFixAccess((Member) constructor2, false);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.findConstructor(class5, false);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      annotationIntrospector0.findClassDescription((AnnotatedClass) null);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findRootName((AnnotatedClass) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("LS>6bxU>YF>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      jsonFactory2.enable(jsonFactory_Feature0);
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AnnotationIntrospector.nopInstance();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", sQLDataException0);
      ClassUtil.isBogusClass(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("enum", "Failed to find default consmructor of class", 36, sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedReceiverType();
      constructor0.isAnnotationPresent(class1);
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.backticked("0\"59");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.nonNullString("<Tg:`8)?0?");
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class2, true);
      constructor1.getAnnotatedReceiverType();
      ClassUtil.nameOf(class2);
      classUtil_Ctor0.getParameterAnnotations();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`0\"59`");
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      Class<Short> class3 = Short.class;
      ClassUtil.nameOf(class3);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`java.lang.Short`", "t");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(sQLRecoverableException0);
      mockRuntimeException1.getStackTrace();
      ClassUtil.nullOrToString(mockRuntimeException1);
      Class<String> class4 = String.class;
      Constructor<String> constructor2 = ClassUtil.findConstructor(class4, true);
      ClassUtil.checkAndFixAccess((Member) constructor2, false);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.findConstructor(class5, false);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("LS>6bxU>YF>");
      jsonFactory2.enable(jsonFactory_Feature0);
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      Byte byte0 = new Byte((byte)124);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, byte0, "net.sf.cglib.proxy.java.lang.Long");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Byte (of class java.lang.String) must override method 'net.sf.cglib.proxy.java.lang.Long'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Short short0 = new Short((short)62);
      SimpleType simpleType1 = simpleType0.withValueHandler(short0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((short)62);
      placeholderForType0.getInterfaces();
      // Undeclared exception!
//      try { 
        simpleType1.withContentValueHandler(placeholderForType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Simple types have no content types; cannot call withContenValueHandler()
//         //
//         verifyException("com.fasterxml.jackson.databind.type.SimpleType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findClassDescription((AnnotatedClass) null);
      basicBeanDescription0.getClassInfo();
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2057));
      placeholderForType0.getErasedSignature();
      placeholderForType0.getTypeName();
      Class<IOException> class2 = IOException.class;
      placeholderForType0.findSuperType(class2);
      placeholderForType0.getGenericSignature();
      placeholderForType0.isReferenceType();
      placeholderForType0.getGenericSignature();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        placeholderForType0.withValueHandler(class2);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      List<Class<?>> list0 = new Vector<Class<Integer>>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s<_Dv/Cj", (Throwable) null);
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D;nqzLI`APsF=79");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("D;nqzLI`APsF=79", "D;nqzLI`APsF=79", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLTransactionRollbackException0);
      MockThrowable mockThrowable0 = new MockThrowable("D;nqzLI`APsF=79", sQLSyntaxErrorException0);
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.numberValue();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "net.sf.cglib.proxy.java.lang.Double");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ReferenceType` from number null: net.sf.cglib.proxy.java.lang.Double
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.RuntimeEx", "", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable("size", (Throwable) null);
      ClassUtil.throwIfRTE(mockThrowable0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.getPackageName(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedReceiverType();
      constructor0.isAnnotationPresent(class1);
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.backticked("HXpr,<,TnKis~d%2");
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParameterAnnotations();
      ClassUtil.nonNullString("HXpr,<,TnKis~d%2");
      Class<Void> class3 = Void.class;
      constructor0.getAnnotatedReceiverType();
      ClassUtil.nameOf(class3);
      classUtil_Ctor0.getParameterAnnotations();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("HXpr,<,TnKis~d%2");
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      ClassUtil.nameOf(class2);
      ClassUtil.nullOrToString("mouM+>c2g");
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, true);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L@%", "L@%", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable("array", sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE((Throwable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "array");
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "primitive");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getPackageName(class3);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class4, list0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class3, class3, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findClassDescription((AnnotatedClass) null);
      basicBeanDescription0.getClassInfo();
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Byte byte0 = new Byte((byte)2);
      ClassUtil.classNameOf(byte0);
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.backticked((String) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, false);
      ClassUtil.getOuterClass(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.findSuperTypes(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.fillInStackTrace();
      SQLWarning sQLWarning0 = new SQLWarning("Failed to find default constructor of class ", sQLDataException0);
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      jsonFormat_Features0.get(jsonFormat_Feature0);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "org.hibernate.proxy.";
      int int0 = (-2693);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-2693), (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.", sQLIntegrityConstraintViolationException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("A$v[*IY");
      sQLNonTransientException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLNonTransientException0.setNextException(sQLIntegrityConstraintViolationException0);
      sQLNonTransientException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperTypes(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.", sQLDataException0);
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("' already had index (", "' already had index (", 2047);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: ' already had index (
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockException mockException0 = new MockException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.nameOf(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.quotedOr((Object) null, "[collection type; class ");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte)41);
      ClassUtil.getClassDescription(byte0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.quotedOr(byte0, "no such class found");
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnyGetter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findClassDescription((AnnotatedClass) null);
      basicBeanDescription0.getClassInfo();
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector0, (AnnotatedMember) null, propertyName0, (PropertyMetadata) null, (JsonInclude.Value) null);
      ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
      ClassUtil.quotedOr((Object) null, "``");
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.hasEnclosingMethod(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1266);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      Class<Short> class1 = Short.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isLocalType(class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findEnumType(class3);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findConstructor(class4, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaringClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class2);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = null;
      javaTypeArray0[6] = null;
      javaTypeArray0[7] = null;
      // Undeclared exception!
//      try { 
        CollectionLikeType.construct(class1, (TypeBindings) null, (JavaType) null, javaTypeArray0, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.nonNullString("");
      Class<?> class2 = ClassUtil.classOf(class1);
      ClassUtil.isCollectionMapOrArray(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.isLocalType(class3, false);
      ClassUtil.getClassDescription(class3);
      ClassUtil.nameOf((Named) null);
      MockIOException mockIOException0 = new MockIOException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", 1775, mockIOException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, true);
      Class<Float> class1 = Float.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getDeclaringClass(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnyGetter();
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      annotationIntrospector0.findClassDescription((AnnotatedClass) null);
      basicBeanDescription0.getClassInfo();
      annotationIntrospector0.findRootName((AnnotatedClass) null);
      JsonInclude.Value jsonInclude_Value0 = null;
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector0, (AnnotatedMember) null, (PropertyName) null, (PropertyMetadata) null, (JsonInclude.Value) null);
      // Undeclared exception!
//      try { 
        ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedReceiverType();
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.backticked("D7=n-*wvP(;Y");
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.nonNullString((String) null);
      ClassUtil.nameOf(class2);
      classUtil_Ctor0.getParameterAnnotations();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`D7=n-*wvP(;Y`");
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class4);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedReceiverType();
      constructor0.isAnnotationPresent(class2);
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.backticked("org.hibernate.proxy.");
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.nonNullString("org.hibernate.proxy.");
      ClassUtil.nameOf(class1);
      classUtil_Ctor0.getParameterAnnotations();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`java.lang.annotation.Annotation`");
      RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      Class<Object> class3 = Object.class;
      ClassUtil.nameOf(class3);
      ClassUtil.nullOrToString(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("LS>6bxU>YF>");
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class0 = Float.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("keyType", class0, "JSON");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Float` from String \"keyType\": JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      Class<Float> class2 = Float.class;
      Class<Character> class3 = Character.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, (TypeBindings) null);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      Character character0 = Character.valueOf('u');
      CollectionType collectionType1 = collectionType0.withContentValueHandler(character0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) collectionType1, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(character0);
      ClassUtil.rawClass(referenceType1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil.backticked((String) null);
      Class<Error> class0 = Error.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("AL_8;", "AL_8;", 11);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLNonTransientException0);
      Throwable throwable1 = ClassUtil.throwIfRTE(throwable0);
      MockFile mockFile0 = new MockFile(")T<s_%0");
      File file0 = MockFile.createTempFile("AL_8;", "AL_8;", (File) mockFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      sQLNonTransientException0.printStackTrace((PrintWriter) mockPrintWriter1);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.classNameOf(throwable1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLDataException sQLDataException0 = new SQLDataException("C7\t3ZUzg*V4<+K", "elementType");
      sQLDataException0.initCause((Throwable) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "elementType", "elementType");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // C7\t3ZUzg*V4<+K (through reference chain: java.lang.String[\"elementType\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.nonNullString("&n`1l%@t'74aNP91C");
      Class<?> class2 = ClassUtil.classOf(class1);
      ClassUtil.isCollectionMapOrArray(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.isLocalType(class3, false);
      ClassUtil.getGenericSuperclass(class1);
      Class<Short> class4 = Short.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.nameOf(class4);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.findEnumType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findEnumType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.findSuperTypes(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("Failed to find default constructor of class ", sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to find default constructor of class 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.classOf((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, true);
      Class<Void> class1 = Void.class;
      ClassUtil.findConstructor(class1, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      sQLTransientConnectionException0.addSuppressed(sQLClientInfoException1);
      sQLTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLDataException sQLDataException0 = new SQLDataException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IOException> class0 = IOException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(simpleAbstractTypeResolver0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) arrayType1, "x0WFK)Mwwh{@H");
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLDataException) (through reference chain: com.fasterxml.jackson.databind.type.ArrayType[\"x0WFK)Mwwh{@H\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      String string0 = "NULL";
      SQLDataException sQLDataException0 = new SQLDataException("elementType", "NULL");
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) beanDeserializerFactory0, "elementType");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // elementType (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"elementType\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLDataException sQLDataException0 = new SQLDataException("C7\t3ZUzg*V4<+K", "elementType");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) "elementType", "elementType");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // C7\t3ZUzg*V4<+K (through reference chain: java.lang.String[\"elementType\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SQLException sQLException0 = new SQLException("Cannot figure out type for EnumSet (odd JDK platform?)", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Could not find constructor with ", (Throwable) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cannot figure out type for EnumSet (odd JDK platform?)");
      PrintStream printStream0 = mockPrintStream0.format("net.sf.cglib.proxy.", (Object[]) null);
      sQLNonTransientException0.printStackTrace(printStream0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1), 6);
      sQLException0.setNextException(dataTruncation0);
      dataTruncation0.getSuppressed();
      ClassUtil.getRootCause(sQLNonTransientException0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<String> class2 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, printStream0, ", problem: ");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class org.evosuite.runtime.mock.java.io.MockPrintStream (of class java.lang.String) must override method ', problem: '
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Class<Short> class0 = Short.TYPE;
      LinkedList<Class<Object>> linkedList0 = new LinkedList<Class<Object>>();
      ClassUtil.getClassDescription(class0);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLException sQLException0 = new SQLException("92y", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("aG;x6+E", sQLException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", problem: ");
      sQLNonTransientException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLException0.setNextException(sQLNonTransientException0);
      sQLException0.getSuppressed();
      ClassUtil.getRootCause(sQLException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "keyType");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("D/H2MPq$d9yM|wu");
      String string0 = "\\xSgLPTya l9,";
      String string1 = "z,VQ,QUZv`";
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 8);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "B?!L^U7tQX<f`Q_L", 8, 54, 54, 54, 54, 0, 54, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal start day of week 54
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getClassDescription(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "com.fasterxml.jackson.databind.node.JsonNodeType", "**TZC;");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("**TZC;", jsonMappingException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, charArrayWriter0);
      JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, "`float`", (Throwable) jsonMappingException0);
      Class<Void> class3 = Void.class;
      ClassUtil.hasClass(jsonMappingException0, class3);
      Member member0 = null;
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.constructSpecializedType((JavaType) null, class4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLException sQLException0 = new SQLException("4{O1!~Bz}tE,h23", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", (Throwable) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("aG;x6+E");
      sQLNonTransientException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLNonTransientException0.setNextException(sQLException0);
      sQLException0.getSuppressed();
      ClassUtil.getRootCause(sQLException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, sQLException0, "net.sf.cglib.proxy.java.lang.Double");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.sql.SQLException (of class java.lang.Integer) must override method 'net.sf.cglib.proxy.java.lang.Double'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SQLException sQLException0 = new SQLException(")7OFx1R@1U=6lTRC V", ")7OFx1R@1U=6lTRC V");
      ClassUtil.throwIfRTE(sQLException0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = null;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      boolean boolean0 = false;
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap.construct((Collection<SettableBeanProperty>) arrayDeque0, false, (Map<String, List<PropertyName>>) hashMap0);
      HashMap<String, SettableBeanProperty> hashMap1 = new HashMap<String, SettableBeanProperty>();
      HashSet<String> hashSet0 = null;
//      try {
        hashSet0 = new HashSet<String>(0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal load factor: 0.0
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<Short> class2 = Short.TYPE;
      String string0 = "com.fasterxml.jackson.databind.type.MapType";
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, class2, "com.fasterxml.jackson.databind.type.MapType");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.MapLikeType) must override method 'com.fasterxml.jackson.databind.type.MapType'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Character character0 = new Character('6');
      ClassUtil.getClassDescription(character0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.hasClass(character0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`java.lang.Character`", "`java.lang.Character`");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", 43, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLFeatureNotSupportedException1);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      Class<Double> class1 = Double.class;
      ClassUtil.getConstructors(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class3 = Annotation.class;
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getPackageName(class0);
      String string0 = "; failed to set access: ";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("CMFWO$0znriz,", "; failed to set access: ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // ; failed to set access: 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      MockException mockException0 = new MockException("&yi0RP'\"%m");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockException0);
      SQLWarning sQLWarning0 = new SQLWarning("vals", sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vals", "vals", 0, sQLWarning0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // &yi0RP'\"%m
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      String string0 = "size";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "size");
      JsonMappingException.from((JsonParser) null, "size");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "size");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // size
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";=]sOlSTKl\"#Yx");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fzg(X5", sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      StringWriter stringWriter0 = new StringWriter(990);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "fzg(X5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ";=]sOlSTKl\"#Yx";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "fzg(X5";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, ";=]sOlSTKl\"#Yx", objectArray0);
      sQLTransactionRollbackException0.printStackTrace(printWriter0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransactionRollbackException0);
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.", "**BA", 1536);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLDataException0, 1536);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLWarning sQLWarning0 = new SQLWarning("v,vus;Wb]p", jsonMappingException1);
      sQLDataException0.addSuppressed(sQLWarning0);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0, "**BA");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // **BA
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      Class<Annotation> class2 = Annotation.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotatedReceiverType();
      constructor0.isAnnotationPresent(class3);
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      String string0 = ClassUtil.backticked("org.hibernate.proxy.");
      assertEquals("`org.hibernate.proxy.`", string0);
      
      classUtil_Ctor0.getParameterAnnotations();
      String string1 = ClassUtil.nonNullString("org.hibernate.proxy.");
      assertEquals("org.hibernate.proxy.", string1);
      
      ClassUtil.nameOf(class2);
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`java.lang.annotation.Annotation`");
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.emptyIterator();
      Class<Object> class4 = Object.class;
      String string2 = ClassUtil.nameOf(class4);
      assertEquals("`java.lang.Object`", string2);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getEnclosingClass(class0);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, false);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Short> class0 = Short.class;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Long long0 = new Long(2055L);
      String string0 = ClassUtil.classNameOf(long0);
      assertEquals("`java.lang.Long`", string0);
      
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ek|=2-RPs$", "Pza<9", batchUpdateException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(long0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      sQLIntegrityConstraintViolationException0.setNextException(batchUpdateException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      sQLIntegrityConstraintViolationException0.spliterator();
      jsonMappingException0.getStackTrace();
      jsonMappingException0.prependPath((Object) class0, 2708);
      Class<?> class1 = ClassUtil.classOf(jsonMappingException0);
      assertNotNull(class1);
      
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, false);
      Class<Short> class3 = Short.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class3);
      assertFalse(boolean1);
      
      ClassUtil.findClassAnnotations(class0);
      Class<SimpleType> class4 = SimpleType.class;
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class4);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.classNameOf(iterator0);
      String string0 = "";
      String string1 = "HV]<=?@mEy<_0.TH6";
      SQLWarning sQLWarning0 = new SQLWarning("", "HV]<=?@mEy<_0.TH6");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      String string2 = null;
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "HV]<=?@mEy<_0.TH6");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // HV]<=?@mEy<_0.TH6
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = " has no default (no arg) constructor";
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(class0, " has no default (no arg) constructor");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Short short0 = new Short((short) (-3141));
      ClassUtil.getClassDescription(short0);
      ClassUtil.classNameOf("`java.lang.Short`");
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }
}
