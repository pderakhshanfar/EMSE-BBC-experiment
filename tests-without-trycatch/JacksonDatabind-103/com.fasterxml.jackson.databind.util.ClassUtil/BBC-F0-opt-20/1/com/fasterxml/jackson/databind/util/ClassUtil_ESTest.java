/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:24:28 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.nameOf(class1);
      Class<?> class2 = ClassUtil.classOf(class0);
      ClassUtil.getOuterClass(class2);
      ClassUtil.getDeclaredMethods(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class3 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) collectionType0);
      Integer integer0 = new Integer((-1));
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType0, typeBindings0, (Object) integer0, (Object) "`java.io.IOException`");
      CollectionType collectionType1 = collectionType0.withValueHandler(arrayType0);
      Double double0 = new Double(0.0);
      CollectionType collectionType2 = collectionType1.withContentValueHandler(double0);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      ClassUtil.rawClass(collectionType3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus1);
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      ClassUtil.classOf(enumSet1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "|RY`", "java.lang.reflect.Ac");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '|RY`' as a subtype of null: java.lang.reflect.Ac
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<String>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.canBeABeanType(class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.getConstructors(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.getClassMethods(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class3 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException(" (from class ", class3, (String) null);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Object` from String \" (from class \": null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class1 = Module.class;
      boolean boolean0 = true;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(2289L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E0W=x6A[i2+j+v");
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 66, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLRecoverableException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLRecoverableException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getGenericInterfaces(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getClassMethods(class1);
      Class<ArrayType> class2 = ArrayType.class;
      Class<NoClass> class3 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class2, class3, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "JSON");
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      objectOutputStream0.writeBoolean(false);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath(throwable0, (Object) mockFile0, (-1448));
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[?])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&8~p7 ");
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2502));
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(placeholderForType0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(referenceType0);
      Double double0 = new Double((-2502));
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType2, (TypeBindings) null, (Object) resolvedRecursiveType0, (Object) double0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.String");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.wrapperType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isConcrete(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "java.lang.String", (-61), mockRuntimeException0);
      mockRuntimeException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "G}V$>&T[\"z%60:W");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SimpleType> class0 = SimpleType.class;
      Class<PropertyName> class1 = PropertyName.class;
      ClassUtil.findSuperTypes(class0, class1);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      MockError mockError0 = new MockError("8.zC");
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapType> enumMap0 = new EnumMap<AccessPattern, MapType>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.getOuterClass(class1);
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      Double double0 = new Double((-852.0));
      ClassUtil.nonNull((Double) null, double0);
      Class<Character> class1 = Character.class;
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<IOException>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.throwIfError(mockIOException0);
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class1);
      EnumMap<AccessPattern, Float> enumMap1 = enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Float float0 = new Float((-3390.2F));
      enumMap1.replace(accessPattern0, float0);
      EnumMap<AccessPattern, Float> enumMap2 = enumMap1.clone();
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap2);
      Class<MapLikeType> class3 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Long> class4 = Long.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(703);
      placeholderForType0.actualType();
      javaTypeArray0[6] = null;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class3, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[2]);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(collectionLikeType0, resolvedRecursiveType0);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) collectionLikeType1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings1, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[3]);
      ClassUtil.rawClass(referenceType0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassUtil.nonNullString("cp1");
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.nonNullString("cp1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cp1");
      ClassUtil.backticked("cp1");
      Class<PropertyName> class2 = PropertyName.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.isJacksonStdImpl(class0);
      Class<SimpleModule> class3 = SimpleModule.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.getEnclosingClass(class2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FAIL_ON_NULL_FOR_PRIMITIVES", "Z#tGn +xsOJ+U~Is", 452, mockIOException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("0^|3+k{<edkj=$txjDY", mockIOException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.enable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(96);
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(placeholderForType0).when(typeReference0).getType();
      objectMapper0.readerFor(typeReference0);
      ClassUtil.emptyIterator();
      ClassUtil.findEnumType((Enum<?>) jsonFactory_Feature0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ClassUtil.canBeABeanType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("D2@;*+dYUpD6");
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator((InputDecorator) null);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory3.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory4 = jsonFactory1.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      JsonFactory jsonFactory5 = jsonFactory4.setCodec(objectMapper0);
      jsonFactory5.createGenerator((Writer) mockPrintWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "D2@;*+dYUpD6", (-1746839910), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "JSON", (-1746839910), sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLFeatureNotSupportedException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory3, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayOutputStream0, byteArray0, 96, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTimeoutException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTimeoutException: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.primitiveType(class0);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.getDeclaringClass(class0);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<Character> class0 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "EeM2N");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapType> enumMap0 = new EnumMap<AccessPattern, MapType>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      Class<Byte> class1 = Byte.class;
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      javaTypeArray0[7] = (JavaType) placeholderForType0;
      javaTypeArray0[8] = (JavaType) placeholderForType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0, (Object) mockRuntimeException0, (Object) mockRuntimeException0);
      TypeBindings typeBindings1 = arrayType1.getBindings();
      JavaType[] javaTypeArray1 = new JavaType[5];
      javaTypeArray1[0] = (JavaType) arrayType1;
      javaTypeArray1[1] = (JavaType) arrayType0;
      javaTypeArray1[2] = (JavaType) arrayType0;
      javaTypeArray1[3] = (JavaType) placeholderForType0;
      javaTypeArray1[4] = (JavaType) arrayType0;
      MapType mapType0 = MapType.construct(class0, typeBindings1, javaTypeArray0[6], javaTypeArray1, javaTypeArray0[0], javaTypeArray1[1]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[1]);
      enumMap0.put(accessPattern0, mapType1);
      ClassUtil.findEnumType(enumMap0);
      Object object0 = new Object();
      Class<PropertyName> class2 = PropertyName.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.emptyIterator();
      MockError mockError0 = new MockError("~DEm?GK*dr", mockRuntimeException0);
      ClassUtil.nonNull((Error) mockError0, (Error) mockError0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 57343);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "enum", (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // enum
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("t[", "ef<[M%`y$qWYd", (-1752));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      sQLTransactionRollbackException0.fillInStackTrace();
      sQLTransactionRollbackException0.getStackTrace();
      sQLTransactionRollbackException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLTransactionRollbackException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0, " zaxnORFz5a}c/S");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         //  zaxnORFz5a}c/S
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      System.setCurrentTimeMillis(1L);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class3);
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, MapType> enumMap0 = new EnumMap<AccessPattern, MapType>(class2);
      ClassUtil.findEnumType(enumMap0);
      Object object0 = new Object();
      ClassUtil.classOf(object0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.canBeABeanType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Short short0 = new Short((short) (-7));
      Class<Short> class1 = Short.class;
      ClassUtil.hasClass(short0, class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-727));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nullOrToString(integer0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<Object> class0 = Object.class;
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findEnumType(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P");
      Class<Float> class0 = Float.class;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.classNameOf(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, false);
      System.setCurrentTimeMillis((-1L));
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.isCollectionMapOrArray(class3);
      String string0 = "ikMrn7XU,p";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d[B6IkIvl", "ikMrn7XU,p");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ikMrn7XU,p", "d[B6IkIvl", hashMap0, sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`java.lang.Class`", sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `java.lang.Class`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.getConstructors(class1);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      Class<List> class1 = List.class;
      CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) collectionType0);
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      Class<CollectionType> class2 = CollectionType.class;
      typeFactory0.constructRawMapLikeType(class2);
      Character character0 = new Character('l');
      PropertyName propertyName0 = new PropertyName("f($zi-fa", "|GUpG+gT^tkO!");
      PropertyName propertyName1 = PropertyName.NO_NAME;
      CollectionType collectionType3 = collectionType2.withTypeHandler(propertyName1);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class3, false);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      Class<Long> class2 = Long.TYPE;
      ClassUtil.findConstructor(class2, false);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes(class0, class3, list0);
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Float");
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericParameterTypes();
      ClassUtil.isConcrete((Member) constructor0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "net.sf.cglib.proxy.java.lang.Float");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // net.sf.cglib.proxy.java.lang.Float
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = true;
      Error error0 = ClassUtil.createInstance(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) error0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)71;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader0, (OutputStream) null, byteArray0, (byte)8, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*~4XND fNpN6n~${");
      SQLException sQLException0 = new SQLException("Sub-class %s (of class %s) must override method '%s'", "Sub-class %s (of class %s) must override method '%s'", sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLException: Sub-class %s (of class %s) must override method '%s'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(96);
      placeholderForType0.toString();
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Class<ArrayType> class2 = ArrayType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ArrayType arrayType2 = arrayType1.withContentValueHandler(arrayType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2677));
      ArrayType arrayType3 = arrayType2.withValueHandler(placeholderForType0);
      ArrayType arrayType4 = arrayType3.withContentTypeHandler(arrayType0);
      ClassUtil.findSuperTypes((JavaType) arrayType4, (Class<?>) class0, false);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.backticked("JsonInclude.Value(value=");
      int[] intArray0 = new int[5];
      intArray0[0] = (-65281);
      intArray0[1] = (-65281);
      intArray0[2] = (-65281);
      intArray0[3] = (-65281);
      intArray0[4] = (-65281);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.com.fasterxml.jackson.databind.PropertyName", intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("R,k,T.1-g&T?3}", "`JsonInclude.Value(value=`", (-65281), batchUpdateException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("JsonInclude.Value(value=", sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("<?c&EF#<BEd=", "<?c&EF#<BEd=", 323);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "net.sf.cglib.proxy.long", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("<?c&EF#<BEd=", "<?c&EF#<BEd=", (-1244651605), jsonMappingException0);
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.nonNullString((String) null);
      ClassUtil.getGenericInterfaces(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, (String) null, javaType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = "Cannot refine serialization key type %s into %s; types not related";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot refine serialization key type %s into %s; types not related");
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-3982));
      Class<?> class2 = ClassUtil.classOf(integer0);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl(class2);
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      ClassUtil.hasClass(list0, class3);
      ClassUtil.getGenericInterfaces(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class4, class3, list0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3982);
      longArray0[1] = (long) (-3982);
      longArray0[2] = (long) (-3982);
      longArray0[3] = (long) (-3982);
      longArray0[4] = (long) (-3982);
      longArray0[5] = (long) (-3982);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Cannot refine serialization key type %s into %s; types not related", "Cannot refine serialization key type %s into %s; types not related", (-3982), longArray0, batchUpdateException0);
      ClassUtil.throwIfError(batchUpdateException1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3982));
      // Undeclared exception!
//      try { 
        placeholderForType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.primitiveType(class0);
      Character character0 = Character.valueOf('n');
      ClassUtil.verifyMustOverride(class0, character0, "`java.lang.Character`");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("U~sT*FJ%ws~4IC-JN", "net.sf.cglib.proxy.java.lang.Object");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLFeatureNotSupportedException: U~sT*FJ%ws~4IC-JN
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredFields(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      Type type0 = ClassUtil.getGenericSuperclass(class2);
      ClassUtil.classNameOf(type0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.nonNullString((String) null);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getGenericInterfaces(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      beanDeserializerBuilder0.findProperty(propertyName0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "Failed to instantiate class ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      Class<Long> class2 = Long.TYPE;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLSyntaxErrorException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Object object0 = new Object();
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      String string0 = "] -- unresolved forward-reference?";
      String string1 = "byteOffset";
      SQLWarning sQLWarning0 = new SQLWarning("byteOffset", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.PropertyName", (-4321));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("] -- unresolved forward-reference?", sQLWarning0);
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement(", problem: ", "] -- unresolved forward-reference?", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.PropertyName", 1495);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string2 = null;
      StackTraceElement stackTraceElement1 = null;
//      try {
        stackTraceElement1 = new StackTraceElement((String) null, "\"%s\"", "byteOffset", 1495);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      TypeBindings.emptyBindings();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3N~De:JxCc5!N&mo");
      Class<Byte> class0 = Byte.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3N~De:JxCc5!N&mo");
      ClassUtil.quotedOr((Object) null, "VTvg R&p'rU+4]Cv");
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.getDeclaringClass(class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, true);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      System.setCurrentTimeMillis((-1470L));
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.canBeABeanType(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      Class<String> class1 = String.class;
      System.setCurrentTimeMillis(0L);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getDeclaredMethods(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      Class<JsonAutoDetect> class0 = jsonAutoDetect_Value0.valueFor();
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader0 = objectMapper0.readerFor(typeReference0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      objectReader0.with(formatFeature0);
      Class<Error> class1 = Error.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class2 = HashMap.class;
      // Undeclared exception!
//      try { 
        typeFactory1.constructRawMapType(class2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // TypeModifier Mock for TypeModifier, hashCode: 1354253023 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1664482700) return null for type [simple type, class java.lang.Object]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short short0 = new Short((short)1233);
      Class<Error> class0 = Error.class;
      Class<Error> class1 = Error.class;
      ClassUtil.hasClass((Object) null, class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<?> class2 = ClassUtil.classOf(class0);
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.isLocalType(class2, false);
      Class<MapType> class4 = MapType.class;
      ClassUtil.isBogusClass(class4);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nonNull((Void) null, (Void) null);
      System.setCurrentTimeMillis(0L);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Short short0 = Short.valueOf((short)1233);
      Class<Error> class0 = Error.class;
      ClassUtil.hasClass(short0, class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<String> class3 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short)1233);
      Class<Error> class0 = Error.class;
      ClassUtil.hasClass(short0, class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<String> class3 = String.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.primitiveType(class3);
      ClassUtil.isBogusClass(class3);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.quotedOr(list0, "BOOLEAN");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<Double> class1 = Double.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      System.setCurrentTimeMillis(2480L);
      ClassUtil.getDeclaredMethods(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      Class<Short> class0 = Short.TYPE;
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader0 = objectMapper0.readerFor(typeReference0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<Double> class1 = Double.class;
      typeFactory0.constructMapLikeType(class1, class1, class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getGenericParameterTypes();
      ClassUtil.isConcrete((Member) constructor0);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class3);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockException mockException0 = new MockException("org.hibernate.proxy.java.sql.SQLSyntaxErrorException");
      SQLDataException sQLDataException0 = new SQLDataException("\"A\"oz;rRI-!W1", "org.hibernate.proxy.java.sql.SQLSyntaxErrorException", (-6), mockException0);
      mockException0.initCause(sQLDataException0);
      MockError mockError0 = new MockError(mockException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'z|NQ", "java.lang.Integer", 3, mockError0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "Unexpected token (%s), expected %s");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      constructor0.newInstance(classArray0);
      constructor0.getGenericParameterTypes();
      ClassUtil.isConcrete((Member) constructor0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Short short0 = new Short((short)1233);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.classOf((Object) null);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<PropertyName> class3 = PropertyName.class;
      ClassUtil.isProxyType(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.canBeABeanType(class4);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("wmB&S+;", "wmB&S+;", 0, (Throwable) null);
      sQLTransactionRollbackException0.spliterator();
      String string0 = "net.sf.cglib.proxy.java.lang.Long";
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "net.sf.cglib.proxy.java.lang.Long");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // net.sf.cglib.proxy.java.lang.Long
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nonNullString("H");
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("H", "WE+b");
      sQLTimeoutException0.fillInStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLTimeoutException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getOuterClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "fV");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // fV
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultDeserializationContext_Impl0.getContextualType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "Zx", "Zx");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'Zx' as a subtype of null: Zx
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Character character0 = new Character('!');
      ClassUtil.nullOrToString(character0);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.isCollectionMapOrArray(class0);
      System.setCurrentTimeMillis(4207L);
      ClassUtil.getDeclaredMethods(class1);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isBogusClass(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.withArray("~>dc9'Bm;}=Yo1{`");
      arrayNode0.numberValue();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class1, "java.lang.Character@0000000001");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.findClassAnnotations(class1);
      Class<Character> class2 = Character.class;
      Class<Error> class3 = Error.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      Class<MapType> class1 = MapType.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
      Class<Object> class3 = Object.class;
      ClassUtil.isJacksonStdImpl(class3);
      System.setCurrentTimeMillis(0L);
      MockError mockError0 = new MockError();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockError0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("withFilterId", "java.lang.Object", sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "java.lang.Object");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.nullOrToString((Object) null);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Float> class3 = Float.class;
      ClassUtil.findEnumType(class3);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class4);
      System.setCurrentTimeMillis(0L);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Void> class0 = Void.class;
      TypeBindings.createIfNeeded(class0, (JavaType) null);
      Class<Integer> class1 = Integer.TYPE;
      Object object0 = ClassUtil.defaultValue(class1);
      ClassUtil.nullOrToString(object0);
      Class<Void> class2 = Void.class;
      ClassUtil.defaultValue(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "java.lang.Integer@0000000001");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Float float0 = new Float((double) 0.0F);
      ClassUtil.nonNull(float0, float0);
      ClassUtil.emptyIterator();
      ClassUtil.throwIfError((Throwable) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Void> class0 = Void.class;
      TypeBindings.createIfNeeded(class0, (JavaType) null);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nullOrToString(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getClassDescription("java.lang.Class@0000000001");
      ClassUtil.nullOrToString("`java.lang.String`");
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findSuperClasses(class3, class3, false);
      ClassUtil.nonNullString("'foY_*F`k");
      Class<Object> class4 = Object.class;
      ClassUtil.findEnumType(class4);
      Class<String> class5 = String.class;
      ClassUtil.isConcrete(class5);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Default constructor for ", (Throwable) null);
      sQLSyntaxErrorException0.spliterator();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "Default constructor for ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.backticked((String) null);
      String string0 = "net.sf.cglib.proxy.java.lang.Integer";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = "org.hibernate.proxy.java.lang.Integer";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.java.lang.Integer", "org.hibernate.proxy.java.lang.Integer", 37, sQLTimeoutException0);
      sQLDataException0.getSuppressed();
      String string2 = "ej)*((S";
      MockFile mockFile0 = new MockFile("ej)*((S", "java.lang.reflect.Ac");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "net.sf.cglib.proxy.");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // net.sf.cglib.proxy.
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Short short0 = new Short((short)1233);
      Class<Error> class0 = Error.class;
      ClassUtil.hasClass(short0, class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      constructor0.getParameterTypes();
      constructor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isBogusClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-5440));
      Class<Double> class3 = Double.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) vector0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      typeBindings0.withUnboundVariable("com.fasterxml.jackson.databind.type");
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nullOrToString(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getClassDescription("java.lang.Class@0000000001");
      ClassUtil.nullOrToString("`java.lang.String`");
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nullOrToString(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getClassDescription("java.lang.Class@0000000001");
      ClassUtil.nullOrToString("`java.lang.String`");
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findSuperClasses(class3, class3, false);
      ClassUtil.nonNullString("'foY_*F`k");
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Re]r", "entrySet");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isLocalType(class1, false);
      Double double0 = new Double((-1920.6789));
      ClassUtil.getClassDescription(double0);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getSuppressed();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonpCharacterEscapes0, true);
      HashMap<String, AccessPattern> hashMap0 = new HashMap<String, AccessPattern>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class1);
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class2, true);
      String string0 = "DS@";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("DS@", "com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic", 6);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("k2\"", "net.sf.cglib.proxy.", 6);
      sQLTransactionRollbackException0.setNextException(sQLNonTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      ClassUtil.canBeABeanType(class1);
      sQLNonTransientConnectionException0.setNextException(sQLTransactionRollbackException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DS@");
      Locale locale0 = Locale.GERMANY;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic", (Object[]) methodArray0);
      sQLNonTransientConnectionException0.printStackTrace(printWriter0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DS@
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.long", "+G.");
      File file0 = MockFile.createTempFile("+G.", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      objectOutputStream0.flush();
      PrintStream printStream0 = mockPrintStream0.printf("JAVA_LANG_OBJECT", (Object[]) annotationArray0);
      sQLException0.printStackTrace(printStream0);
      ClassUtil.throwIfError(sQLException0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "entrySet";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Re]r", "entrySet");
      sQLNonTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<CollectionType> class0 = CollectionType.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Void void0 = null;
      ClassUtil.nonNull((Void) null, (Void) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        typeFactory1.constructRawCollectionLikeType(class0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1664482700) return null for type [simple type, class java.lang.Object]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.canBeABeanType(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.fillInStackTrace();
      DataTruncation dataTruncation0 = new DataTruncation((-650), true, true, (-650), (-650), mockIOException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, dataTruncation0);
      sQLNonTransientException0.setNextException(dataTruncation0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLFeatureNotSupportedException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-39);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getCurrentLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", jsonLocation0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassUtil.nonNull((Void) null, (Void) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      Class<MapType> class1 = MapType.class;
      Class<Short> class2 = Short.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.nonNull("no long/Long-argument constructor/factory method to deserialize from Number value (%s)", " of constructor ");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Character> class1 = Character.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.classOf(class0);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isConcrete(class3);
      Class<NoClass> class4 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class4, class2, "`");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method '`'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Float float0 = new Float((-5.0F));
      ClassUtil.nonNull(float0, float0);
      int int0 = 44;
      ClassUtil.emptyIterator();
      Integer integer0 = new Integer(44);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, integer0, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Integer (of class java.lang.RuntimeException) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Character character0 = Character.valueOf('e');
      ClassUtil.quotedOr(character0, "entrySet");
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getClassDescription("=nO(<");
      MockError mockError0 = new MockError("entrySet");
      ClassUtil.nullOrToString(mockError0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findEnumType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.nonNullString("entrySet");
      Class<Object> class2 = Object.class;
      ClassUtil.isConcrete(class2);
      Class<String> class3 = String.class;
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Boolean> class1 = Boolean.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class1);
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class2, true);
      String string0 = "DS@";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("DS@", "com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic", 6);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DS@");
      Locale locale0 = Locale.GERMANY;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic", (Object[]) methodArray0);
      sQLNonTransientConnectionException0.printStackTrace(printWriter0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DS@
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getSuppressed();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonpCharacterEscapes0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      HashMap<String, AccessPattern> hashMap0 = new HashMap<String, AccessPattern>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 22, objectMapper1, byteArrayOutputStream0);
      jsonpCharacterEscapes0.getEscapeSequence(65599);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getParameterCount();
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      constructor0.newInstance(classArray0);
      constructor0.getGenericParameterTypes();
      ClassUtil.isConcrete((Member) constructor0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getParameterCount();
      constructor0.getAnnotatedParameterTypes();
      constructor0.getGenericParameterTypes();
      ClassUtil.nullOrToString(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Module> class3 = Module.class;
      ClassUtil.isConcrete(class3);
      ClassUtil.getPackageName(class2);
      Class<Module> class4 = Module.class;
      ClassUtil.getClassMethods(class4);
      ClassUtil.hasEnclosingMethod(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.lang.Class@0000000001", "java.lang.Class@0000000001");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "com.fasterxml.jackson.core.util.DefaultIndenter", sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      beanDeserializerBuilder0.findProperty(propertyName0);
      ClassUtil.nameOf((Named) null);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isProxyType(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nullOrToString(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getClassDescription("java.lang.Class@0000000001");
      ClassUtil.nullOrToString("`java.lang.String`");
      boolean boolean0 = new Boolean("java.lang.Class@0000000001");
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("wm{`!iwG", "annotation");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZFy+|Mi", "wm{`!iwG", 8201, throwable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FAIL_ON_NULL_FOR_PRIMITIVES", "estoI0Sn/%m.", 8201, sQLFeatureNotSupportedException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(vector0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(8201);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 16, objectReader1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3512, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nullOrToString(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vals");
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class3);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getSuppressed();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonpCharacterEscapes0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      HashMap<String, AccessPattern> hashMap0 = new HashMap<String, AccessPattern>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      jsonFactory1.createGenerator((DataOutput) null, jsonEncoding0);
      jsonpCharacterEscapes0.getEscapeSequence(65599);
      Class<SimpleType> class1 = SimpleType.class;
      objectMapper1.writerFor(class1);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(96);
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(placeholderForType0).when(typeReference0).getType();
      ObjectReader objectReader0 = objectMapper0.readerFor(typeReference0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<Double> class0 = Double.class;
      typeFactory0.constructMapLikeType(class0, class0, class0);
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      mockError0.getMessage();
      mockError0.toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, typeFactory0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 3, (DataInput) null, objectMapper0, byteQuadsCanonicalizer1, 3);
      // Undeclared exception!
//      try { 
        uTF8DataInputJsonParser0.nextBooleanValue();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      sQLClientInfoException0.getSuppressed();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonpCharacterEscapes0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      HashMap<String, AccessPattern> hashMap0 = new HashMap<String, AccessPattern>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, byteArrayOutputStream0);
      jsonpCharacterEscapes0.getEscapeSequence(65599);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.printStackTrace();
      mockError0.initCause((Throwable) null);
      mockError0.fillInStackTrace();
      mockError0.getMessage();
      mockError0.toString();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "org.evosuite.runtime.mock.java.lang.MockThrowable", 1737);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.printStackTrace();
      mockError0.initCause((Throwable) null);
      mockError0.fillInStackTrace();
      mockError0.getMessage();
      mockError0.toString();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = false;
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getClassMethods(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.getInterfaces();
      Class<AccessPattern> class2 = AccessPattern.class;
      placeholderForType0.isTypeOrSubTypeOf(class2);
      placeholderForType0.getInterfaces();
      ClassUtil.quotedOr(placeholderForType0, "entrySet");
      Class<Void> class3 = Void.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Void is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockPrintWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "T4;2kBr", (-1), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "JSON", 0, sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("T4;2kBr", "", 0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTimeoutException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTimeoutException: T4;2kBr
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLException sQLException0 = new SQLException("ZERO_LENGTH_ENUM_ARRAY", "entrySet", mockError0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLException0);
      ClassUtil.nullOrToString(throwable0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getOuterClass(class0);
      System.setCurrentTimeMillis((-1L));
      ClassUtil.backticked((String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.setMixInResolver(deserializationConfig1);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('1');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ObjectMapper objectMapper3 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, charArrayReader0, objectMapper3, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(1626, 8);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "S:|T<G)TT", (Throwable) batchUpdateException0);
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // S:|T<G)TT
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "enum";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "enum");
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with((DeserializerFactory) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "size", (-1295), jsonMappingException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      ClassUtil.classNameOf(classUtil0);
      JsonGenerator jsonGenerator0 = null;
      SQLException sQLException0 = new SQLException("\"%s\"", (String) null, throwable0);
      sQLTransactionRollbackException0.getSuppressed();
      // Undeclared exception!
//      try { 
        sQLTransactionRollbackException0.initCause(mockIOException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with org.evosuite.runtime.mock.java.lang.MockThrowable
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Character character0 = Character.valueOf('e');
      ClassUtil.quotedOr(character0, "entrySet");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Byte byte0 = new Byte((byte)124);
      Float float0 = new Float((double) (byte)124);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(byte0, float0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.getDeclaredFields(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Unrecognized Type: ", "NcRvE~", 2000);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("QgQcX.`mic_!;T]", "QgQcX.`mic_!;T]", "Unrecognized Type: ", 1067);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("QgQcX.`mic_!;T]", "QgQcX.`mic_!;T]", "NcRvE~", 2000);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("NcRvE~", "Nr&o$S<h`h3*{", "Nr&o$S<h`h3*{", 1067);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Unrecognized Type: ", "h{`#Qb.", "LS", (-2685));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("NULL", "", "", 1067);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("QgQcX.`mic_!;T]", "com.fasterxml.jackson.databind.ext.DOMDeserializer", "", (-2685));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("NULL", "h{`#Qb.", "ib", (-2685));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("Unrecognized Type: ", "vals", "size", 0);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("\"%s\"", "NULL", "Class ", 2996);
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", " does not override `withBeanProperties()`, needs to", 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.printStackTrace();
      sQLSyntaxErrorException0.initCause(sQLRecoverableException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      MockIOException mockIOException0 = new MockIOException(" does not override `withBeanProperties()`, needs to", throwable0);
      ClassUtil.getRootCause(mockIOException0);
      Byte byte0 = new Byte((byte)88);
      ClassUtil.classOf(byte0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.nonNull((IOException) mockIOException0, (IOException) mockIOException0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.printStackTrace();
      mockError0.initCause((Throwable) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      JavaType javaType0 = typeFactory2.constructFromCanonical("com.fasterxml.jackson.core.JsonProcessingException");
      Class<?> class0 = ClassUtil.rawClass(javaType0);
      Class<Short> class1 = Short.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findSuperTypes(javaType0, class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes.instance();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonFactory1.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nonNull((Void) null, (Void) null);
      TypeFactory.defaultInstance();
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nullOrToString(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getClassDescription("java.lang.Class@0000000001");
      ClassUtil.nullOrToString("`java.lang.String`");
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findSuperClasses(class3, class3, false);
      ClassUtil.nonNullString("'foY_*F`k");
      Class<Object> class4 = Object.class;
      ClassUtil.isConcrete(class4);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.getClassDescription(class1);
      ClassUtil.nullOrToString(class1);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Float float0 = new Float(2005.0F);
      ClassUtil.getClassDescription(float0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      javaTypeArray0[0] = javaType0;
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      System.setCurrentTimeMillis((-3333L));
      Class<Short> class2 = Short.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassUtil.nonNull((ArrayType) null, (ArrayType) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) class1, true);
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, (Class<?>) null, false);
      ClassUtil.getClassDescription(list0);
      ClassUtil.getGenericSuperclass(class1);
      Class<String> class2 = String.class;
      ClassUtil.getOuterClass(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.primitiveType(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) arrayDeque0, false, (Map<String, List<PropertyName>>) hashMap0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
      HashMap<String, SettableBeanProperty> hashMap1 = new HashMap<String, SettableBeanProperty>();
      HashSet<String> hashSet0 = new HashSet<String>();
      BeanDeserializer beanDeserializer0 = null;
//      try {
        beanDeserializer0 = new BeanDeserializer(beanDeserializerBuilder0, basicBeanDescription0, beanPropertyMap1, hashMap1, hashSet0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", " does not override `withBeanProperties()`, needs to", 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.printStackTrace();
      sQLSyntaxErrorException0.initCause(sQLRecoverableException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      MockIOException mockIOException0 = new MockIOException(" does not override `withBeanProperties()`, needs to", throwable0);
      ClassUtil.getRootCause(mockIOException0);
      Byte byte0 = new Byte((byte)88);
      ClassUtil.classOf(byte0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Float float0 = new Float((-751.7587145561221));
      ClassUtil.nullOrToString(float0);
      Class<Void> class0 = Void.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Void is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jackson.databind.introspect.AnnotatedField");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "`com.fasterxml.jackson.databind.introspect.AnnotatedField`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Vh]&eJ&(", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      AnnotatedField annotatedField1 = annotatedField0.withAnnotations(annotationMap0);
      annotatedField1.getMember();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredFields(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLWarning sQLWarning1 = new SQLWarning(sQLWarning0);
      sQLWarning0.setNextException(sQLWarning1);
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class2, (Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Double> class2 = Double.class;
      ClassUtil.nameOf(class2);
      Class<List> class3 = List.class;
      ClassUtil.isCollectionMapOrArray(class3);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.isCollectionMapOrArray(class1);
      Constructor<Character> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory2.disable(jsonParser_Feature1);
      ObjectOutputStream objectOutputStream0 = null;
//      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) error0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Short short0 = new Short((short)1233);
      Class<Error> class0 = Error.class;
      ClassUtil.hasClass(short0, class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      constructor0.getParameterTypes();
      constructor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isBogusClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-5440));
      Class<Double> class3 = Double.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) vector0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(0);
      Class<Long> class4 = Long.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      TypeBindings.createIfNeeded(class4, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) class1, (Object) placeholderForType1);
      // Undeclared exception!
//      try { 
        arrayType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Character character0 = Character.valueOf('e');
      ClassUtil.quotedOr(character0, "entrySet");
      ClassUtil.nonNullString("=nO(<");
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.copy();
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectMapper0.readerFor(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.classNameOf((Object) null);
      JsonGenerator jsonGenerator0 = null;
      String string0 = "-MOjde";
      SQLException sQLException0 = new SQLException("-MOjde", "[null]", (Throwable) null);
      sQLException0.getSuppressed();
      // Undeclared exception!
//      try { 
        sQLException0.initCause((Throwable) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with a null
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
      Class<CollectionType> class2 = CollectionType.class;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("entrySet", "entrySet", 363);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // entrySet
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }
}
