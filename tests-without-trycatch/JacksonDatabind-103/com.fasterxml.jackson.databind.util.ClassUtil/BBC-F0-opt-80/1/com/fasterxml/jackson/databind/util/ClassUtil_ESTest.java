/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:24:08 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector");
      Class<Error> class0 = Error.class;
      ClassUtil.isNonStaticInnerClass(class0);
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector");
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.JsonLocation", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1652333975), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1625), (ObjectCodec) null, pipedOutputStream0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "D");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(jsonMappingException0);
      jsonMappingException0.addSuppressed(sQLRecoverableException0);
      jsonMappingException0.initCause(sQLRecoverableException0);
      jsonMappingException0.getStackTrace();
      Short short0 = new Short((short) (-55));
      jsonMappingException0.prependPath((Object) short0, "2PJoIWTAH0\"mfUmn|_");
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      SimpleType simpleType1 = referenceType1.withTypeHandler((Object) null);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType1, "org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleValueInstantiators");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Missing type id when trying to resolve subtype of [reference type, class com.fasterxml.jackson.databind.type.CollectionLikeType<com.fasterxml.jackson.databind.type.CollectionLikeType><[simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType]>]: org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleValueInstantiators
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 1320;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      String string0 = "#3]";
      String string1 = "jnQ)@!r";
      MockFile mockFile0 = new MockFile("#3]", "jnQ)@!r");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "jnQ)@!r");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // jnQ)@!r
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockException mockException0 = new MockException();
      Throwable throwable0 = ClassUtil.getRootCause(mockException0);
      mockException0.initCause(throwable0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleDeserializers");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('S');
      Character character1 = ClassUtil.nonNull(character0, character0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, character1, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("''Hw(.9F}&");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("''Hw(.9F}&", class0, "''Hw(.9F}&");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Integer` from String \"''Hw(.9F}&\": ''Hw(.9F}&
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.getConstructors(class0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperTypes(class2, class1);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Short> class3 = Short.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class3, (Class<?>) null, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleModule");
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper2);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) byteArrayInputStream0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.module.SimpleModule");
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NUMBER_INT: net.sf.cglib.proxy.com.fasterxml.jackson.databind.module.SimpleModule
//         //  at [Source: (ByteArrayInputStream); line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      System.setCurrentTimeMillis(2721L);
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, false);
      Class<Float> class1 = Float.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.primitiveType(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.getClassMethods(class4);
      ClassUtil.backticked((String) null);
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<Long> class5 = Long.class;
      ClassUtil.findConstructor(class5, false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.toString();
      Class<Void> class1 = Void.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[13];
      JavaType[] javaTypeArray1 = new JavaType[6];
      javaTypeArray1[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[5] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray1, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(javaTypeArray1[1]);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(javaTypeArray1[5]);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      JavaType javaType0 = referenceType2.refine(class2, typeBindings0, resolvedRecursiveType0, javaTypeArray0);
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      SimpleType simpleType0 = referenceType0.withTypeHandler(javaTypeArray0[2]);
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, javaTypeArray1, javaTypeArray0[3], javaTypeArray1[1]);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) mapType0);
      CollectionType collectionType1 = collectionType0.withValueHandler("enum");
      Boolean boolean0 = Boolean.valueOf(true);
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(boolean0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType2, javaTypeArray1[3]);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<RuntimeException>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getEnclosingClass(class0);
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<NoClass> class0 = NoClass.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      typeBindings0.toString();
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isBogusClass(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short) (-2830));
      ClassUtil.isJacksonStdImpl((Object) short0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isBogusClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaredMethods(class1);
      Character character0 = new Character('4');
      ClassUtil.verifyMustOverride(class1, character0, "5I|>BXS->KmHf(&ay]");
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 6);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Module> class0 = Module.class;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      MockError mockError0 = new MockError();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "net.sf.cglib.proxy.", (-661868634));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Q", "2HWQQ", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", 1908);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockError0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isConcrete(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.primitiveType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class2, class2, true);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.primitiveType(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.getClassDescription(class0);
      ClassUtil.findSuperClasses(class0, class2, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getEnclosingClass(class1);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getDeclaringClass(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.NameTransformer$3");
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("");
      Class<MapType> class1 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.quotedOr((Object) null, "");
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.isProxyType(class0);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)127;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 1000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "JSON");
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLDataException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of null: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet.range(clientInfoStatus0, clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      enumSet0.add(clientInfoStatus1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) null, (Exception) sQLNonTransientException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1911), objectMapper0, pipedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON", (-1960), (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) null, "JSON");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON (through reference chain: UNKNOWN[\"JSON\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getPackageName(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[0];
      MapType mapType0 = MapType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      MapType mapType1 = mapType0.withKeyValueHandler((Object) null);
      MapType mapType2 = mapType1.withStaticTyping();
      Byte byte0 = new Byte((byte) (-10));
      MapType mapType3 = mapType2.withKeyTypeHandler(byte0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      MapType mapType4 = mapType3.withValueHandler(referenceType0);
      ClassUtil.rawClass(mapType4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isBogusClass(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s3(]`{@");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Error> enumMap0 = new EnumMap<AccessPattern, Error>(class1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.java.lang.Error", hashMap0);
      BiFunction<Object, Object, Error> biFunction0 = (BiFunction<Object, Object, Error>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      enumMap0.compute(accessPattern0, biFunction0);
      MockError mockError0 = new MockError("org.hibernate.proxy.java.lang.Error", sQLClientInfoException0);
      enumMap0.put(accessPattern0, (Error) mockError0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Error> enumMap0 = new EnumMap<AccessPattern, Error>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("s4", "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", (Throwable) null);
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      enumMap0.put(accessPattern0, (Error) mockError0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) null);
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, "@nd\"");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // @nd\"
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isConcrete(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Double> enumMap0 = new EnumMap<ClientInfoStatus, Double>(class1);
      EnumMap<ClientInfoStatus, Double> enumMap1 = new EnumMap<ClientInfoStatus, Double>(enumMap0);
      EnumMap<ClientInfoStatus, Double> enumMap2 = new EnumMap<ClientInfoStatus, Double>(enumMap1);
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      SQLTransientException sQLTransientException0 = new SQLTransientException("``");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "+.}X\"?h", "G{QS+]w>.Bz3Y[3.");
      sQLTransientException0.initCause(jsonMappingException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" slots is now full (all ", "Missing method (broken JDK (de)serialization?)");
      sQLTransientException0.setNextException(sQLNonTransientConnectionException0);
      sQLTransientException0.getSuppressed();
      MockException mockException0 = new MockException(" slots is now full (all ", sQLTransientException0);
      sQLTransientException0.getLocalizedMessage();
      sQLTransientException0.fillInStackTrace();
      sQLTransientException0.getStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException(" slots is now full (all ", (String) null, (-1752), mockException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLDataException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '+.}X\"?h' as a subtype of null: G{QS+]w>.Bz3Y[3.
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getGenericExceptionTypes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Sub-class %s (of class %s) must override method '%s'");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.lang.reflect.Ac", true);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      defaultDeserializationContext_Impl0.invalidTypeIdException(simpleType0, "Cannot access ", "non-static member class");
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[RawValue of type %s]");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator((OutputDecorator) null);
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator((InputDecorator) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1809238660));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      String string0 = "]HY,b=";
      SQLWarning sQLWarning0 = new SQLWarning("JSON");
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "]HY,b=", sQLWarning0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<NullNode> class1 = NullNode.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<String> class3 = String.class;
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      MockError mockError0 = new MockError();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2894);
      intArray0[1] = 10;
      intArray0[2] = 6088;
      intArray0[3] = 96;
      mockError0.fillInStackTrace();
      intArray0[4] = (-1);
      intArray0[5] = 342;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("property", intArray0, mockError0);
      mockError0.addSuppressed(batchUpdateException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, " has no default (no arg) constructor");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.isNonStaticInnerClass(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class1, "net.sf.cglib.proxy.java.sql.ClientInfoStatus");
      MockIOException mockIOException0 = new MockIOException("JSON", jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot deserialize value of type `char` from String \"JSON\": net.sf.cglib.proxy.java.sql.ClientInfoStatus
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
      System.setCurrentTimeMillis(2536L);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
      Long long0 = new Long((-2901L));
      Long long1 = Long.getLong("u=3", long0);
      Long long2 = new Long((-2901L));
      Long long3 = ClassUtil.nonNull(long1, long2);
      ArrayType arrayType1 = arrayType0.withValueHandler(long3);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ArrayType arrayType3 = arrayType2.withContentTypeHandler(mapLikeType0);
      ClassUtil.rawClass(arrayType3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.getOuterClass(class1);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.primitiveType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(0);
      ClassUtil.hasClass(integer0, class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockError mockError0 = new MockError("org.hibernate.proxy.");
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(0L);
      ClassUtil.nonNull((Long) null, long0);
      Double double0 = new Double(0L);
      ClassUtil.nonNull(double0, double0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.hasClass(class0, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v8y)EEk;");
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Double> class1 = Double.TYPE;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("Huf");
      typeBindings1.withUnboundVariable("x");
      typeBindings1.toString();
      Class<IOException> class3 = IOException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class4 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class4);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionLikeType collectionLikeType0 = collectionType1.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, true);
      Class<Integer> class5 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class3);
      ClassUtil.findConstructor(class5, true);
      ClassUtil.getDeclaringClass(class1);
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class6);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("g]E-6bNNmvX&fm<");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Object", "^[s", mockRuntimeException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^dyRqEA-2k9q3:^NHX", "^dyRqEA-2k9q3:^NHX", (-2127), sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      Class<NullNode> class1 = NullNode.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, false);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-1512867866);
      intArray0[2] = 377;
      intArray0[3] = 110;
      intArray0[4] = 1961;
      intArray0[5] = (-619);
      intArray0[6] = (-1976);
      intArray0[7] = 3704;
      intArray0[8] = (-1882);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("D\"npa3+LP", "D\"npa3+LP", intArray0, sQLTransientConnectionException0);
      ClassUtil.getRootCause(batchUpdateException0);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      typeBindings0.getTypeParameters();
      Class<Integer> class2 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<Integer>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("g]7e?GP", "mqV}f1?@^Ns\"i_+x|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getGenericInterfaces(class0);
      System.setCurrentTimeMillis((-1850L));
      ClassUtil.emptyIterator();
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class1, false);
      ClassUtil.nonNullString((String) null);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasClass((Object) null, class0);
      Boolean boolean0 = Boolean.valueOf(false);
      ClassUtil.getClassDescription(boolean0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      ClassUtil.nonNull((CollectionLikeType) null, (CollectionLikeType) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isConcrete(class0);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Character is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<NullNode> class0 = NullNode.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.quotedOr(class0, "ea@");
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SimpleType> class0 = SimpleType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 248);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getClassDescription(coreXMLDeserializers_Std0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std`", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      ObjectReader objectReader1 = objectReader0.withAttribute(iOContext1, objectMapper1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1203), objectReader1, bufferedOutputStream0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "_]oX]X)9Ut}O$", (Throwable) null);
      MockError mockError0 = new MockError("_]oX]X)9Ut}O$", sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("$ATZPvVR,]Ves", "$avh", (Map<String, ClientInfoStatus>) null, mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLClientInfoException: $ATZPvVR,]Ves
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&d0");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[2];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap1;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap1, annotationMapArray0);
      Constructor<?> constructor1 = annotatedConstructor0.getAnnotated();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<SimpleType> class1 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      RuntimeException runtimeException1 = (RuntimeException)ClassUtil.throwIfError(runtimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isProxyType(class1);
      Class<NoClass> class2 = NoClass.class;
      Class<String> class3 = String.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      int[] intArray0 = new int[5];
      intArray0[0] = 59;
      intArray0[1] = (-2973);
      intArray0[2] = 2269;
      intArray0[3] = 86;
      intArray0[4] = 1536;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.sql.ClientInfoS", intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.sql.ClientInfoS
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      System.setCurrentTimeMillis((-504L));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Long long0 = new Long((-920L));
      ClassUtil.classNameOf(long0);
      ClassUtil.nameOf((Class<?>) null);
      NullNode nullNode0 = NullNode.instance;
      nullNode0.asDouble((-2059.0));
      nullNode0.isTextual();
      ClassUtil.nonNull(nullNode0, nullNode0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("org.hibernate.proxy.");
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      beanDeserializerFactory1.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.sql.SQLNonTransientConnectionException
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Void> class2 = Void.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.getDeclaredMethods(class1);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class3, class3, list0);
      Class<Double> class4 = Double.class;
      ClassUtil.getDeclaredFields(class4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasClass(class0, class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.setInputDecorator((InputDecorator) null);
      jsonFactory0.disable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      Class<Void> class2 = Void.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassUtil.backticked("n.g|+2g&`_V");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      Class<Double> class1 = Double.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      MapType mapType1 = mapType0.withStaticTyping();
      ClassUtil.rawClass(mapType1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Ef-2QT.]p8B@v", "Ef-2QT.]p8B@v");
      Throwable throwable0 = ClassUtil.throwIfError(sQLDataException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasClass("Ef-2QT.]p8B@v", class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(throwable0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(javaType0);
      SimpleType simpleType0 = referenceType1.withStaticTyping();
      SimpleType simpleType1 = simpleType0.withContentValueHandler(objectMapper0);
      ReferenceType referenceType2 = referenceType0.withStaticTyping();
      SimpleType simpleType2 = simpleType1.withValueHandler(referenceType2);
      typeFactory0.constructArrayType((JavaType) simpleType2);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      ClassUtil.classOf(collectionType0);
      ClassUtil.nullOrToString(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassUtil.nonNull((Long) null, (Long) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-8071));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Error> class2 = Error.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<Object> class1 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, ", copied ", ", copied ");
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = null;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("' found (for property '");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      ClassUtil.classOf(resolvedRecursiveType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id ', copied ' as a subtype of null: , copied 
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.isLocalType(class2, false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassUtil.quotedOr("Nu", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      ClassUtil.backticked("\"Nu\"");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException("Nu", class0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.String` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.String`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.findEnumType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nu", "Ic2Gtu4_QA('1q", (-172));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<ArrayType> class0 = ArrayType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class2, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("9Vg)/RGWLu~3p", "Ic2Gtu4_QA('1q");
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLSyntaxErrorException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLClientInfoException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLClientInfoException: java.sql.SQLSyntaxErrorException: 9Vg)/RGWLu~3p
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      TypeFactory.unknownType();
      MockFile mockFile0 = new MockFile("FuP;^utn:q", "&SFTC");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLClientInfoException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLClientInfoException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-1808662384));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<String> class2 = String.class;
      ClassUtil.hasClass(accessPattern0, class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("al,$A|7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLClientInfoException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLClientInfoException: java.sql.SQLClientInfoException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Member member0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "|*&pEEnXcL+O6C*");
      jsonMappingException0.getSuppressed();
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // |*&pEEnXcL+O6C*
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTimeoutException0);
      sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.initCause(mockRuntimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      MockError mockError0 = new MockError();
      ClassUtil.nonNull((ArrayType) null, (ArrayType) null);
      mockError0.getStackTrace();
      ClassUtil.findRawSuperTypes(class0, class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "7|';r)SI0dL4)");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.findEnumType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.hasClass((Object) null, class1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isConcrete(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<String> class3 = String.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<MapType> class4 = MapType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "write a raw (unencoded) value");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value", "write a raw (unencoded) value");
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", "write a raw (unencoded) value", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "Build method '%s' has wrong return type (%s), not compatible with POJO type (%s)", jsonLocation0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.RunimeException");
      Integer integer0 = new Integer(1703);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.canBeABeanType(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.nameOf(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      ClassUtil.backticked("%Pq]p%ANw|1R=");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.defaultValue(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      ClassUtil.getPackageName(class0);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.classOf(class0);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      ClassUtil.nonNull(noClass0, noClass1);
      Class<String> class2 = String.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findEnumType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findConstructor(class2, true);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.nameOf(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.primitiveType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.isConcrete(class2);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.getClassDescription(class0);
      ClassUtil.classNameOf((Object) null);
      // Undeclared exception!
//      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing referencedType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.nonNullString("<nY%,5|>Z");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      MockError mockError0 = new MockError();
      ClassUtil.nonNull((ArrayType) null, (ArrayType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "<nY%,5|>Z");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.hasClass(class1, class1);
      ClassUtil.backticked("local/anonymous");
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.util.JsonGeneratorDelegate");
      System.setCurrentTimeMillis(37L);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      ClassUtil.isProxyType(class0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, true);
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = (-172);
      String string0 = "#\\.fLtf@B5(z'DLZ.";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("#.fLtf@B5(z'DLZ.", "#.fLtf@B5(z'DLZ.", (-172));
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.hibernate.proxy.java.lang.RuntimeException", "org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.addSuppressed(sQLTransactionRollbackException1);
      ClassUtil.getRootCause(sQLTransactionRollbackException1);
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      Class<ArrayType> class1 = ArrayType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      Class<Error> class2 = Error.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = javaType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[1]);
      // Undeclared exception!
//      try { 
        collectionType0.withContentValueHandler(class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getDeclaredFields(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isConcrete(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`", "keyUniverse", (-3153));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class2, typeBindings0);
      resolvedRecursiveType1.getSelfReferencedType();
      typeBindings0.toString();
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperTypes(javaType0, class3, true);
      System.setCurrentTimeMillis(100L);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.hasClass(class1, class1);
      ClassUtil.backticked("local/anonymous");
      ClassUtil.isBogusClass(class1);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nu", "Ic2Gtu4_QA('1q", (-172));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<Void> class4 = Void.class;
      ClassUtil.isNonStaticInnerClass(class4);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nu", "Ic2Gtu4_QA('1q", (-172));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<ArrayType> class0 = ArrayType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class2, true);
      Class<NullNode> class3 = NullNode.class;
      ClassUtil.findSuperClasses(class3, class0, true);
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.node.NullNode is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nu", "Ic2Gtu4_QA('1q", (-172));
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Ic2Gtu4_QA('1q", "org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.addSuppressed(sQLTransactionRollbackException1);
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      System.setCurrentTimeMillis(3970L);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Nu
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.nameOf(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nonNullString("&&xqmxUV\"|kO8");
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.getClassDescription(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Byte byte0 = new Byte((byte) (-56));
      String string0 = "|9JAPi|i0#b`Y";
      ClassUtil.quotedOr(class0, "|9JAPi|i0#b`Y");
      // Undeclared exception!
//      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.quotedOr((Object) null, "org.hibernate.proxy.");
      ClassUtil.backticked("p}7f.i4|}q");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O,VO)a0");
      String string0 = "L-eqTi\\E-BrUC!";
      String string1 = "";
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JavaType javaType0 = null;
      ClassUtil.getConstructors(class0);
      Byte byte0 = new Byte((byte) (-1));
      ClassUtil.quotedOr(byte0, "Default constructor for ");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<Object> class1 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, (String) null, (JavaType) null);
//      try { 
        defaultSerializerProvider_Impl1.serializerInstance(virtualAnnotatedMember0, "L-eqTiE-BrUC!");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // AnnotationIntrospector returned serializer definition of type java.lang.String; expected type JsonSerializer or Class<JsonSerializer> instead
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nu", "Ic2Gtu4_QA('1q", (-172));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isConcrete(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`", "`", (-1877));
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      System.setCurrentTimeMillis(100L);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nu", "Ic2Gtu4_QA('1q", (-172));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      System.setCurrentTimeMillis(3970L);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      classUtil_Ctor0.getParamCount();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      classUtil_Ctor0.getDeclaredAnnotations();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod((Class<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findEnumType(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", " (from class ", (-1473), (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(2, true, false, 0, 2547, sQLNonTransientConnectionException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) dataTruncation0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data truncation
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Object object0 = new Object();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "", "L-qTiEBrUC!");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", jsonMappingException0);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.findClassAnnotations(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getOuterClass(class3);
      Class<Long> class4 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class4, (-2169));
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<ReferenceType> class5 = ReferenceType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyName propertyName0 = PropertyName.construct("&0R$l>,x;#[s");
      ObjectIdGenerator<AccessPattern> objectIdGenerator0 = (ObjectIdGenerator<AccessPattern>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, propertyName0, objectIdGenerator0, true);
      JavaType javaType0 = objectIdWriter0.idType;
      // Undeclared exception!
//      try { 
        basicClassIntrospector0.forSerialization((SerializationConfig) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("83PM", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 83PM
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.canBeABeanType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getConstructor();
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.backticked("|WSMQ^_QI}^]BL]v");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.backticked("v@qgenkJ");
      Class<IOException> class1 = IOException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "Sub-class %s (of class %s) must override method '%s'");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil classUtil0 = new ClassUtil();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = false;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReceiverType();
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      constructor0.setAccessible(true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.newInstance(annotatedTypeArray0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isProxyType(class1);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.nonNullString("&&xqmxUV\"|kO8");
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getPackageName(class0);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.isObjectOrPrimitive(class0);
      SQLDataException sQLDataException0 = new SQLDataException("elementType");
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLDataException0);
      ClassUtil.throwIfError(throwable0);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(class1, class4);
      ClassUtil.backticked("|WSMQ^_QI}^]BL]v");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Object object0 = new Object();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "", "L-qTiEBrUC!");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", jsonMappingException0);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      ClassUtil.classOf("L-qTiEBrUC!");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.canBeABeanType(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, (String) null, sQLTransactionRollbackException0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Double> class1 = Double.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<NullNode> class2 = NullNode.class;
      ClassUtil.findClassAnnotations(class2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      Class<SimpleType> class2 = SimpleType.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.isProxyType(class2);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findConstructor(class4, true);
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.classNameOf(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil classUtil0 = new ClassUtil();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.classNameOf(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getOuterClass(class1);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.annotation.Annotation is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isProxyType(class1);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.nonNullString("&&xqmxUV\"|kO8");
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.getClassDescription(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getConstructors(class1);
      ClassUtil.throwIfIOE(runtimeException0);
      Class<String> class2 = String.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Annotation> class3 = Annotation.class;
      Class<IOException> class4 = IOException.class;
      boolean boolean0 = true;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, true);
      constructor0.getAnnotation(class3);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
      // Undeclared exception!
//      try { 
        typeResolutionContext_Basic0.resolveType(class1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.isJacksonStdImpl((Object) resolvedRecursiveType0);
      Short short0 = new Short((short) (-3511));
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[1];
      intArray0[0] = 43;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("entrySet", intArray0, (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("entrySet", (Throwable) null);
      ClassUtil.classOf(mockRuntimeException0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findEnumType(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, (String) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("<nY%,5|>Z");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      MockError mockError0 = new MockError();
      ClassUtil.getClassDescription(mockError0);
      ClassUtil.nonNull((ArrayType) null, (ArrayType) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nu", "Ic2Gtu4_QA('1q", (-172));
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.addSuppressed(sQLTransactionRollbackException1);
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      typeBindings0.toString();
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.nonNull((SimpleType) javaType0, (SimpleType) javaType0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      ClassUtil.findSuperTypes((Class<?>) null, (Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classOf((Object) null);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (Throwable) null);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getOuterClass(class0);
      JsonGenerator jsonGenerator0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("tA", "[null]", 0);
      sQLTransactionRollbackException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransactionRollbackException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) iterator0);
      ClassUtil.backticked("NULL");
      ClassUtil.emptyIterator();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.classNameOf((Object) null);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      MockFile mockFile0 = new MockFile("Sfrx", "[null]");
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        mockFile0.setLastModified((-2L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative time
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      MockException mockException0 = new MockException();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-124);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (int) (byte)0, (int) (byte) (-124));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      mockException0.initCause(jsonMappingException0);
      mockException0.fillInStackTrace();
      mockException0.getLocalizedMessage();
      ClassUtil.throwIfRTE(mockException0);
      Class<Long> class0 = Long.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`java.lang.Double`", "`java.lang.Double`", (-2114));
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      Double double0 = new Double(0.0);
      ClassUtil.nullOrToString(double0);
      ClassUtil.nullOrToString("java.lang.Double@0000000001");
      ClassUtil.isConcrete(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotatedReceiverType();
      constructor0.getAnnotatedParameterTypes();
      constructor0.setAccessible(true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
//      try { 
        constructor0.newInstance(fieldArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("JSON", "WRITE_ENUMS_USING_TO_STRING");
      MockRandomAccessFile mockRandomAccessFile0 = null;
//      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "JSON");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
//         //
//         verifyException("java.io.RandomAccessFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isProxyType(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.nonNullString("&&xqmxUV\"|kO8");
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      IOContext iOContext0 = null;
      int int0 = (-147);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      objectMapper1.enable(deserializationFeature0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("JSON", "JSON");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // JSON
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findEnumType(class1);
      Class<Double> class2 = Double.class;
      String string0 = "L-eqTi\\E-BrUC!";
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, class2, "L-eqTiE-BrUC!");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.Double) must override method 'L-eqTiE-BrUC!'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.canBeABeanType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.isProxyType(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      accessibleObjectArray0[1] = (AccessibleObject) null;
      accessibleObjectArray0[2] = (AccessibleObject) null;
      // Undeclared exception!
//      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      Throwable throwable0 = null;
      constructor0.getAnnotatedExceptionTypes();
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findEnumType(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-1473), (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(2547, false, false, 2, 2, sQLNonTransientConnectionException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.backticked((String) null);
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "T|:nM&vP,-+UK");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // T|:nM&vP,-+UK
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.classNameOf(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        SimpleType.constructUnsafe((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JavaType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.isJacksonStdImpl((Object) resolvedRecursiveType0);
      Short short0 = new Short((short) (-3511));
      ClassUtil.classOf(short0);
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.primitiveType(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "serialVersionUID");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // serialVersionUID
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Member member0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Float float0 = new Float(1055.96785902165);
      ClassUtil.classOf(float0);
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "M");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getConstructors(class1);
      ClassUtil.throwIfIOE(runtimeException0);
      Class<NoClass> class2 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.canBeABeanType(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.nameOf(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "Ss|k_DB$W/ (");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }
}
