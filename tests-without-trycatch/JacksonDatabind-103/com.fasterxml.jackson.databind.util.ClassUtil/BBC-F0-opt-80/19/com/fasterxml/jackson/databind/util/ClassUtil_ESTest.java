/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:48:51 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.createInstance(class0, true);
      Class<IOException> class1 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class1, true);
//      try { 
        ClassUtil.throwIfIOE(iOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator((String) null);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      Class<AccessPattern> class1 = AccessPattern.class;
      objectMapper0.readerFor(class1);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) jsonGenerator_Feature0);
      ClassUtil.backticked("JSON");
      ClassUtil.isLocalType(class2, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.defaultValue(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.canBeABeanType(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.getOuterClass(class2);
      Class<Object> class3 = Object.class;
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<Error>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.findSuperTypes(class0, class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Module> class2 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings1, (Object) class2, (Object) class0);
      SimpleModule simpleModule0 = new SimpleModule("org.hibernate.proxy.java.lang.Integer");
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(simpleModule0);
      ArrayType arrayType2 = arrayType1.withContentValueHandler((Object) null);
      Short short0 = new Short((short)7);
      ArrayType arrayType3 = arrayType2.withValueHandler(short0);
      ClassUtil.rawClass(arrayType3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Object> class2 = Object.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot access ");
      ClassUtil.findSuperClasses(class2, class1, false);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<Integer> class1 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, (String) null);
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NUMBER_INT
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf((Collection<AccessPattern>) enumSet0);
      enumSet1.retainAll(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf(enumSet1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, false);
      Class<InputStream> class1 = InputStream.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.io.InputStream, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      ClassUtil.isLocalType(class0, false);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1344));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nonNull((Object) null, (Object) class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-562), objectReader0, pipedOutputStream0, byteArray0, 34, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "JSON", 11);
      SQLTransientException sQLTransientException0 = new SQLTransientException("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER", sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "JSON", (byte) (-33), sQLTransientException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.com.fasterxml.jackson.core.io.InputDecorator", "Z\"&;`5-tx`S{#SwC+q", (-7));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) class0, "=<.v");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.com.fasterxml.jackson.core.io.InputDecorator (through reference chain: com.fasterxml.jackson.databind.type.MapLikeType[\"=<.v\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, false);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
//      try { 
        ClassUtil.createInstance(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ReferenceType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<NoClass> class0 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class1, class0, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassUtil.nonNullString("1$./JJ5=weh8L| Y");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getTypeParameters();
      constructor0.getGenericParameterTypes();
      Class<Annotation> class2 = Annotation.class;
      constructor0.setAccessible(false);
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.getCause();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      ClassUtil.backticked("NRHoA{%+");
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "NRHoA{%+");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Constructor<InputStream> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(constructor0, class0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.io.InputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.reflect.Constructor`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getClassMethods(class0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isConcrete(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "ACa{]0Q:h)7r");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.ArrayType` from String \"org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType\": ACa{]0Q:h)7r
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<BinaryNode> class1 = BinaryNode.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.io.FilterInput");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<IOException> class0 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      ClassUtil.findEnumType(enumMap0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "DF<TA,fr4W>_Y$";
      ClassUtil.backticked("DF<TA,fr4W>_Y$");
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("color", "color", hashMap0, sQLDataException0);
      sQLDataException0.initCause(sQLClientInfoException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "com)fasterxm.jacks^n.databind.util.ClasUtil$EnumTypeiocator");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockError mockError0 = new MockError();
      mockError0.getLocalizedMessage();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findRawSuperTypes(class0, class0, false);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      typeBindings0.findBoundType("83rk;ot'");
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      MockFile mockFile0 = new MockFile("JSON", "com.fasterxml.jackson.core.io.SerializedString");
      File file0 = MockFile.createTempFile("JSON", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "+f@Q");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // +f@Q
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Character character0 = Character.valueOf('B');
      ClassUtil.nonNull(character0, character0);
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.findSuperTypes(class2, class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "org.hibernate.proxy.java.io.FilterInputStream", jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, (OutputStream) null, byteArray0, (byte)6, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonpCharacterEscapes0.getEscapeSequence((-1746375819));
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("java.lang.RuntimeEx", "java.lang.RuntimeEx", 10);
      MockIOException mockIOException0 = new MockIOException(sQLRecoverableException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassUtil.nonNullString("-Infinity");
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      Class<String> class1 = String.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Integer> class2 = Integer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getConstructors(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.emptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("NONE");
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientException0);
      ClassUtil.primitiveType(class0);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<Float> class3 = Float.class;
      ClassUtil.getDeclaredFields(class3);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class4);
      Class<String> class5 = String.class;
      ClassUtil.createInstance(class5, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ClassUtil.getClassDescription(integer0);
      Enum<AccessPattern> enum0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.nullOrToString("com.fasterxml.jackson.databind.type");
      ClassUtil.isBogusClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      Class<MapLikeType> class2 = MapLikeType.class;
      simpleType1.containedTypeOrUnknown((-1987));
      Class<Error> class3 = Error.class;
      simpleType1.findTypeParameters(class3);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class1, true);
      TypeBindings typeBindings0 = TypeBindings.create(class1, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      SimpleType simpleType2 = simpleType1.withTypeHandler(resolvedRecursiveType0);
      Class<Object> class4 = Object.class;
      TypeBindings.createIfNeeded((Class<?>) class4, (JavaType) simpleType0);
      simpleType2.withValueHandler(class3);
      ClassUtil.hasClass(simpleType2, class0);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.findRawSuperTypes(class5, class5, false);
      Class<IOException> class6 = IOException.class;
      ClassUtil.nameOf(class6);
      ClassUtil.findClassAnnotations(class5);
      ClassUtil.getDeclaringClass(class0);
      Class<NoClass> class7 = NoClass.class;
      ClassUtil.findClassAnnotations(class7);
      Class<Error> class8 = Error.class;
      ClassUtil.findEnumType(class8);
      Class<AccessPattern> class9 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class9);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "no String-argument constructor/factory method to deserialize from String value ('%s')");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no String-argument constructor/factory method to deserialize from String value ('%s')
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.nonNullString("=xp-Y[+");
      ClassUtil.classNameOf("=xp-Y[+");
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataException0.initCause(sQLDataException1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      vector0.add((JavaType) resolvedRecursiveType0);
      Character character0 = new Character(',');
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(character0);
      ClassUtil.findSuperTypes(javaType0, class0, false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern1, accessPattern0);
      ArrayDeque<Float> arrayDeque0 = new ArrayDeque<Float>();
      enumSet0.add(accessPattern0);
      enumSet0.retainAll(arrayDeque0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("unknown", "java.lang.reflect.Ac");
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(throwable0);
      MockError mockError0 = new MockError("unknown", batchUpdateException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class0, class1, list0);
      Class<Character> class2 = Character.class;
      ClassUtil.getConstructors(class2);
      Class<String> class3 = String.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassUtil.isLocalType(class3, false);
      Class<InputStream> class4 = InputStream.class;
      ClassUtil.isConcrete(class4);
      Class<AccessibleObject> class5 = AccessibleObject.class;
//      try { 
        ClassUtil.findConstructor(class5, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassUtil.emptyIterator();
      Short short0 = new Short((short)2820);
      ClassUtil.classNameOf(short0);
      ClassUtil.emptyIterator();
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isProxyType(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("`java.lang.Short`", map0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("`java.lang.Short`", "array", (short)2820, map1, sQLClientInfoException1);
      ClassUtil.throwIfError(sQLClientInfoException2);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `java.lang.Short`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.TYPE;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "net.sf.cglib.proxy.java.io.IOException");
      MockThrowable mockThrowable0 = new MockThrowable(jsonMappingException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("C", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.ObjectMapper", mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";,!g4E0S", "org.hibernate.proxy.com.fasterxml.jackson.core.JsonFactory", (-1746839910), sQLNonTransientConnectionException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.java.io.IOException
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<BinaryNode> class0 = BinaryNode.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getOuterClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getClassDescription(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.backticked("zzN5pE_pyPtl+0iZDid");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<CreatorProperty> class0 = CreatorProperty.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<Object> class2 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isConcrete(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      List<Class<?>> list0 = new Vector<Class<Error>>();
      Class<Float> class1 = Float.class;
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]@H<6nv]n<as(ju1Nu'");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "non-static member class");
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 2);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.KeyDeserializer$None", "com.fasterxml.jackson.databind.KeyDeserializer$None");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(d", "(d", 1, sQLException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLNonTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLNonTransientConnectionException: (d
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLException sQLException0 = new SQLException((String) null, sQLDataException0);
      sQLDataException0.initCause(sQLException0);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      ClassUtil.backticked("Should never try to reset delegate");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      JavaType javaType0 = objectMapper1.constructType(class0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, "4Iw:_~RKMifU\" .rm");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Integer]: 4Iw:_~RKMifU\" .rm
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern2, accessPattern0);
      ArrayDeque<Float> arrayDeque0 = new ArrayDeque<Float>();
      enumSet0.add(accessPattern0);
      enumSet0.retainAll(arrayDeque0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.getClassMethods(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1100));
      coreXMLDeserializers_Std0.getValueType();
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
      Double double0 = new Double(1.0);
      ClassUtil.nullOrToString(double0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findConstructor(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Character> class0 = Character.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "non-static member class");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      objectMapper0.readerFor(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Character> class0 = Character.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      objectMapper0.readerFor(class1);
      ClassUtil.nullOrToString(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
//      try { 
        ClassUtil.createInstance(class2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.TYPE;
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("9{R'2{e4L)k", "9{R'2{e4L)k", (-580));
      Throwable throwable0 = ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning(throwable0);
      sQLWarning0.getSuppressed();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("9{R'2{e4L)k", sQLWarning0);
      mockRuntimeException0.getSuppressed();
      ClassUtil.isJacksonStdImpl((Object) "9{R'2{e4L)k");
      ClassUtil.nameOf((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      ClassUtil.throwIfError((Throwable) null);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern4 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern3, accessPattern4);
      ClassUtil.findEnumType(enumSet0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      ClassUtil.classOf(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<CollectionLikeType>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Integer> class0 = Integer.TYPE;
      Class<Byte> class1 = Byte.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<FilterInputStream> class1 = FilterInputStream.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.classOf((Object) null);
      System.setCurrentTimeMillis((-54L));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Float> class1 = Float.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class3, class2, false);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      enumMap0.put(accessPattern0, jsonMappingException0);
      ClassUtil.findEnumType(enumMap0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("!;M{_Wuvfcc*vwmo", "!;M{_Wuvfcc*vwmo", "<gDEGY6e!Iws0oo", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("<gDEGY6e!Iws0oo", "vals", "", 57);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!;M{_Wuvfcc*vwmo", sQLClientInfoException0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Error> class1 = Error.class;
      ClassUtil.isBogusClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(57);
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      String string0 = "additional serializer definitions";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("additional serializer definitions", "additional serializer definitions", 4, mockRuntimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(28);
      ClassUtil.getClassDescription(integer0);
      Class<Short> class0 = Short.class;
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.isJacksonStdImpl((Object) class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class3 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("Jgo", class3, "net.sf.cglib.proxy.java.lang.Short");
      ClassUtil.getRootCause(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator((String) null);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      objectMapper0.writeValueAsBytes(jsonFactory2);
      Class<AccessPattern> class1 = AccessPattern.class;
      objectMapper0.readerFor(class1);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, boolean0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      SQLWarning sQLWarning0 = new SQLWarning();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("l1X");
      sQLTransactionRollbackException0.printStackTrace();
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.hasClass(accessPattern0, class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) classUtil_Ctor0._ctor, (AccessibleObject) constructor1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(63);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "com.fasterxml.jackso", 63, sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLNonTransientException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vals");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H%>07p9qV<]");
      ClassUtil.findEnumType(class0);
      ClassUtil.backticked("; failed to set access: ");
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, false);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(error0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      enumMap0.put(accessPattern0, jsonMappingException0);
      ClassUtil.findEnumType(enumMap0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.toString();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(simpleType0, propertyName0, (ObjectIdGenerator<?>) null, false);
      SimpleType simpleType1 = (SimpleType)objectIdWriter0.idType;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType1, "iV]=[iZpZjuGID");
      enumMap0.put(accessPattern0, jsonMappingException0);
      ClassUtil.findEnumType(enumMap0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.quotedOr((Object) null, (String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "W?Ht");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      objectMapper0.readerFor(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator((String) null);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      Class<AccessPattern> class1 = AccessPattern.class;
      objectMapper0.readerFor(class1);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature1);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      ClassUtil.classNameOf(iOException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) iOException0, "DN<1e?w");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DN<1e?w
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.Short", "java.lang.Short", 0);
      File file0 = MockFile.createTempFile("java.lang.Short", (String) null, (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sQLTimeoutException0;
      objectArray0[1] = (Object) mockPrintWriter0;
      locale0.getUnicodeLocaleKeys();
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "y", objectArray0);
      sQLDataException0.printStackTrace(printWriter0);
      sQLTimeoutException0.initCause(sQLDataException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Short", sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer(28);
      ClassUtil.getClassDescription(integer0);
      Class<Short> class0 = Short.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr(integer0, "JuC%yii");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.toString();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "U");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr(class0, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.getDeclaredMethods(class1);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"class com.fasterxml.jackson.databind.type.ResolvedRecursiveType\"");
      SQLTransientException sQLTransientException0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("9{R'2{e4L)k", "9{R'2{e4L)k", (-580));
      Throwable throwable0 = ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning(throwable0);
      sQLWarning0.getSuppressed();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("9{R'2{e4L)k", sQLWarning0);
      mockRuntimeException0.getSuppressed();
      ClassUtil.isJacksonStdImpl((Object) "9{R'2{e4L)k");
      ClassUtil.nameOf((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2743), objectMapper1, mockPrintStream0);
      byteArrayOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasClass((Object) null, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "+L;");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "elementType");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("): has to be escaped using backslash to be included in ", "): has to be escaped using backslash to be included in ", batchUpdateException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer((-857));
      ClassUtil.getClassDescription((Object) null);
      Class<Short> class0 = Short.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, "dJuC%yii");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.getSuppressed();
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.backticked("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      Class<ArrayType> class1 = ArrayType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.hasEnclosingMethod(class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/RLPe");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]Ih|2qdlEj;", "C?=d]$m5");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]Ih|2qdlEj;", sQLTransactionRollbackException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      Class<Float> class2 = Float.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-3));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classNameOf(accessPattern0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.constructType(class2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      ClassUtil.findEnumType(enumMap0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, enumMap0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class1);
      ClassUtil.findEnumType(enumMap0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 5);
      Class<Double> class2 = Double.class;
      classArray0[0] = class2;
      Class<Double> class3 = Double.class;
      classArray0[1] = class3;
      Class<Double> class4 = Double.class;
      classArray0[2] = class4;
      Class<Double> class5 = Double.class;
      classArray0[3] = class5;
      Class<Double> class6 = Double.class;
      classArray0[4] = class6;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<String> class2 = String.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      System.setCurrentTimeMillis((-9223372036854775808L));
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      constructor0.getGenericParameterTypes();
      constructor0.getAnnotations();
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotation(class4);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Integer> class5 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class5);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("keyType", "keyType");
      sQLTransactionRollbackException0.fillInStackTrace();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "keyType");
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Character> class0 = Character.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.classNameOf(class0);
      Character.valueOf('#');
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "`java.lang.Class`");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "IIAq-n/83nmPJnu");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<String> class2 = String.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      constructor0.getDeclaredAnnotations();
      constructor0.getGenericParameterTypes();
      constructor0.getAnnotations();
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotation(class4);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Integer> class5 = Integer.TYPE;
      ClassUtil.isNonStaticInnerClass(class5);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<ArrayType> class2 = ArrayType.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      objectMapper0.readerFor(class2);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Float float0 = new Float((float) 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl1, false);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(serializers_Base0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLWarning sQLWarning0 = new SQLWarning();
      MockException mockException0 = new MockException("k{3lGr7/f[Q0`?F*s");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) mockException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: k{3lGr7/f[Q0`?F*s
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLDataException0);
      sQLDataException0.spliterator();
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      ClassUtil.isJacksonStdImpl((Object) null);
      SQLDataException sQLDataException1 = new SQLDataException((String) null, "net.sf.cglib.proxy.java.lang.reflect.AccessibleObject", (-1690));
      MockFile mockFile0 = new MockFile("entrySet");
      File file0 = MockFile.createTempFile("Cannot figure out type for EnumMap (odd JDK platform?)", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      throwable0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      objectMapper0.readerFor(class1);
      SQLWarning sQLWarning0 = new SQLWarning();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer(28);
      ClassUtil.getClassDescription(integer0);
      Class<Short> class0 = Short.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer(28);
      ClassUtil.getClassDescription(integer0);
      Class<Short> class0 = Short.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr(integer0, "dJuC%yii");
      Class<MapType> class1 = MapType.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.getSuppressed();
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.backticked("net.sf.cglib.proxy.");
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      MockError mockError0 = new MockError();
      Byte byte0 = new Byte((byte) (-6));
      ClassUtil.quotedOr((Object) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<String> class2 = String.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.findClassAnnotations(class2);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      ClassUtil.throwIfRTE(mockError0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassUtil.throwIfRTE(sQLDataException0);
      sQLDataException0.spliterator();
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "URI", "\", G");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      Character.valueOf('U');
      MockError mockError1 = new MockError();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer(28);
      ClassUtil.getClassDescription(integer0);
      Class<Short> class0 = Short.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        sQLDataException0.printStackTrace((PrintWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getStackTrace();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.readerFor(class2);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Float float0 = new Float((float) 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isProxyType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[5], typeBindings0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class4, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) arrayType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      SimpleType simpleType0 = referenceType1.withContentValueHandler(javaTypeArray0[1]);
      JavaType javaType0 = simpleType0.withContentTypeHandler(javaTypeArray0[5]);
      resolvedRecursiveType0.withHandlersFrom(javaType0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, resolvedRecursiveType0, "size");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class com.fasterxml.jackson.databind.type.ResolvedRecursiveType (of class com.fasterxml.jackson.databind.JsonMappingException) must override method 'size'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNullString("");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      // Undeclared exception!
//      try { 
        placeholderForType0.withValueHandler("");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<String> class2 = String.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      System.setCurrentTimeMillis((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      constructor0.getGenericParameterTypes();
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotation(class4);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Integer> class5 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class5);
      ClassUtil.isBogusClass(class5);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
//      try { 
        placeholderForType0.withTypeHandler((Object) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, (Class<?>) null, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.isProxyType(class1);
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.canBeABeanType(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      Class<Integer> class1 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2566);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      PropertyName propertyName1 = new PropertyName((String) null, (String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Integer> class2 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, "NULL", mapType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName1, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, placeholderForType0);
      ClassUtil.nameOf((Named) beanProperty_Std1);
      Class<Character> class3 = Character.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.emptyIterator();
      ClassUtil.classNameOf((Object) null);
      Character.valueOf('Z');
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.hasClass(beanProperty_Std1, class4);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("!;M{_Wuvfcc*vwmo", "!;M{_Wuvfcc*vwmo", "<gDEGY6e!Iws0oo", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("<gDEGY6e!Iws0oo", "vals", "", 57);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!;M{_Wuvfcc*vwmo", sQLClientInfoException0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Error> class1 = Error.class;
      ClassUtil.isBogusClass(class1);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      ClassUtil.nonNull(noClass0, noClass1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockRuntimeException mockRuntimeException1 = (MockRuntimeException)mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.getSuppressed();
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException1, "entrySet");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<MapType> class0 = MapType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.backticked("t,eYE)");
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.quotedOr(class0, "t,eYE)");
      Class<Float> class1 = Float.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, "`t,eYE)`", "BnYE<s2&msv=v");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.String (of class java.lang.Float) must override method 'BnYE<s2&msv=v'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassUtil.backticked("org.hibernate.proxy.java.io.IOException");
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, "`org.hibernate.proxy.java.io.IOException`", "BnYE<s2&msv=v");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.String (of class float) must override method 'BnYE<s2&msv=v'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isConcrete(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.nameOf(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!;M{_Wuvfcc*vwmo", "!;M{_Wuvfcc*vwmo");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!;M{_Wuvfcc*vwmo", sQLClientInfoException0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      Class<Character> class0 = Character.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      Class<ReferenceType> class1 = ReferenceType.class;
      TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      boolean boolean0 = new Boolean("!;M{_Wuvfcc*vwmo");
      Class<Error> class2 = Error.class;
      ClassUtil.isBogusClass(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, (String) null, resolvedRecursiveType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<String> class4 = String.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      Class<IOException> class6 = IOException.class;
      ClassUtil.hasClass(class0, class1);
      Character.valueOf('N');
      MockError mockError1 = new MockError("6P]&n44gpM+Iq(J5");
      ClassUtil.hasClass(mockError1, class6);
      Class<ResolvedRecursiveType> class7 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class7);
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.nullOrToString((Object) null);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class1);
      Byte byte0 = new Byte((byte)3);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, class2, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ResolvedRecursiveType) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.nameOf(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ClassUtil.getEnclosingClass(class0);
      String string0 = " (from class ";
      Class<String> class1 = String.class;
      ClassUtil.verifyMustOverride(class1, " (from class ", " (from class ");
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      ClassUtil.nullOrToString(class1);
      ClassUtil.isBogusClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(96);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("!;M{_Wuvfcc*vwmo", "!;M{_Wuvfcc*vwmo", "<gDEGY6e!Iws0oo", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("<gDEGY6e!Iws0oo", "vals", "", 57);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!;M{_Wuvfcc*vwmo", sQLClientInfoException0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      Class<Character> class0 = Character.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      Class<ReferenceType> class1 = ReferenceType.class;
      TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.hasClass(resolvedRecursiveType0, class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Error> class2 = Error.class;
      ClassUtil.isBogusClass(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(57);
      ClassUtil.classOf(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr(class0, "");
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.getDeclaredMethods(class1);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"class com.fasterxml.jackson.databind.type.ResolvedRecursiveType\"");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      HashMap<String, JsonNode> hashMap1 = new HashMap<String, JsonNode>(hashMap0);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap1);
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // JSON
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericInterfaces(class1);
      Byte byte0 = new Byte((byte)3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      Class<SettableBeanProperty> class3 = SettableBeanProperty.class;
      ClassUtil.nullOrToString(typeFactory0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      Class<CollectionType> class4 = CollectionType.class;
      Class<String> class5 = String.class;
      Class<String> class6 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class6);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class5, (JavaType) simpleType0);
      JavaType[] javaTypeArray1 = new JavaType[5];
      javaTypeArray1[0] = (JavaType) simpleType0;
      javaTypeArray1[1] = (JavaType) simpleType0;
      javaTypeArray1[2] = (JavaType) simpleType0;
      javaTypeArray1[3] = (JavaType) simpleType0;
      javaTypeArray1[4] = (JavaType) simpleType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class4, typeBindings0, (JavaType) simpleType0, javaTypeArray1, javaTypeArray1[3]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withStaticTyping();
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withTypeHandler(class6);
      javaTypeArray0[0] = (JavaType) referenceType2;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class5);
      javaTypeArray0[1] = (JavaType) collectionType1;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded(class3, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      CollectionType collectionType2 = typeFactory0.constructCollectionType((Class<? extends Collection>) class2, (JavaType) resolvedRecursiveType0);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException(collectionType3, "vals", "vals");
      ClassUtil.throwIfError(invalidTypeIdException0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findEnumType(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.hasClass(class1, class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getClassMethods(class3);
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double(Double.NaN);
      ClassUtil.nonNull(double0, double1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("VX.x3D^", "W-?us|v6f0\"5a{,9b", 590);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      sQLNonTransientConnectionException0.addSuppressed(sQLClientInfoException1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("VX.x3D^", "W-?us|v6f0\"5a{,9b", (-605166913), sQLNonTransientConnectionException0);
      String string0 = "net.sf.cglib.proxy.java.lang.Double";
      MockFile mockFile0 = new MockFile("[O]HM6", "net.sf.cglib.proxy.java.lang.Double");
      MockFile mockFile1 = new MockFile(mockFile0, "[O]HM6");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "net.sf.cglib.proxy.java.lang.Double");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // net.sf.cglib.proxy.java.lang.Double
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nullOrToString(class1);
      ClassUtil.nonNull(noClass0, noClass0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.primitiveType(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      classUtil_Ctor0.getConstructor();
      Class<Short> class4 = Short.class;
      ClassUtil.findSuperTypes((Class<?>) null, class4);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("size", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("serialVersionUID", clientInfoStatus1);
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("keyType", clientInfoStatus2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("serialVersionUID", "entrySet", hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("ZERO_LENGTH_ENUM_ARRAY", "entrySet", sQLClientInfoException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("size", "nT)\"Npjl{X;MTv", "z$5\"?$!AX\"t^z~1qBL=", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("OC=Rhe8 ", "NULL", "NULL", 8);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("' has value that is not of type ArrayNode (but ", "keyType", "OC=Rhe8 ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      sQLClientInfoException0.initCause(sQLTransientException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // serialVersionUID
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(59, 603);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class0 = LinkedList.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      javaTypeArray0[7] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[4]);
      CollectionType collectionType0 = typeFactory1.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionLikeType0);
      CollectionType collectionType1 = collectionType0.withValueHandler(collectionLikeType0);
      CollectionType collectionType2 = collectionType1.withContentValueHandler("8[Ku1),}C-Mtzg[Doy");
      ClassUtil.rawClass(collectionType2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr(class0, "");
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.getDeclaredMethods(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 57343;
      intArray0[3] = (-64);
      intArray0[4] = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '|';
      charArray0[2] = '=';
      charArray0[3] = '3';
      charArray0[4] = 'o';
      charArray0[5] = '?';
      jsonFactory0.createParser(charArray0);
      intArray0[5] = 1;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "JSON", intArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) jsonGenerator0, (Exception) batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.BatchUpdateException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassUtil.nonNullString("array");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getConstructors(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "keyType", "keyType");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapLikeType mapLikeType0 = mapType0.withContentValueHandler(simpleKeyDeserializers0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(mapLikeType0, "keyUniverse");
      jsonMappingException0.getCause();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing type id when trying to resolve subtype of [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: keyUniverse
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("sU");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // sU
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, (-746));
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H%>07p9qV<]");
      ClassUtil.findEnumType(class0);
      ClassUtil.backticked("L}S;Hq|0q43Yiozew");
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.getPackageName(class4);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vals");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7?]");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Double> class0 = Double.class;
      Class<NoClass> class1 = NoClass.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class1, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("vals", "7?]", "vals", 76);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("7?]", "vals", sQLTransientConnectionException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.getSuppressed();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7?]");
      Throwable throwable0 = ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      sQLTransientConnectionException0.setNextException(sQLFeatureNotSupportedException0);
      ClassUtil.canBeABeanType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "7?]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7?]
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredMethods(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY", 3665, (int[]) null);
      batchUpdateException0.getUpdateCounts();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 3665);
      Throwable throwable0 = batchUpdateException0.initCause(sQLTimeoutException0);
      ClassUtil.getRootCause(batchUpdateException0);
      ClassUtil.nameOf((Named) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZERO_LENGTH_ENUM_ARRAY
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = false;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ReferenceType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.spliterator();
      sQLTimeoutException0.fillInStackTrace();
      sQLTimeoutException0.getStackTrace();
      String string0 = "(*\"]e|$?.3ZJr6.I'e";
      String string1 = "zM89't/fn.E?L<[94M";
//      try { 
        MockURI.URI("(*\"]e|$?.3ZJr6.I'e", ":Ue@0)CE8K", ":Ue@0)CE8K", "zM89't/fn.E?L<[94M");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: (*\"]e|$?.3ZJr6.I'e://[:Ue@0)CE8K]:Ue@0)CE8K#zM89't/fn.E?L%3C[94M
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<MapType> class4 = MapType.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      MockError mockError0 = new MockError();
      Throwable throwable0 = mockError0.fillInStackTrace();
      Class<IOException> class5 = IOException.class;
      ClassUtil.hasClass(mockError0, class5);
      // Undeclared exception!
//      try { 
        mockError0.addSuppressed(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Self-suppression not permitted
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.defaultValue(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLDataException0);
      throwable0.fillInStackTrace();
      sQLDataException0.spliterator();
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      Class<Long> class2 = Long.class;
      ClassUtil.hasClass(throwable0, class2);
      Character.valueOf('F');
      Class<Short> class3 = Short.class;
      ClassUtil.hasClass("com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer", class3);
      Class<NoClass> class4 = NoClass.class;
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.primitiveType(class5);
      ClassUtil.isJacksonStdImpl(class4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class6 = LinkedList.class;
      Class<Object> class7 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class6, class7);
      CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(class2);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class7, false);
      Class<AccessibleObject> class8 = AccessibleObject.class;
      ClassUtil.hasClass(class1, class8);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Class<Short> class1 = Short.class;
      Class<BinaryNode> class2 = BinaryNode.class;
      objectMapper0.readerFor(class2);
      OutputStream outputStream0 = null;
      jsonFactory0._getBufferRecycler();
      Float float0 = new Float((float) 3);
      TypeBindings typeBindings0 = null;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      // Undeclared exception!
//      try { 
        ReferenceType.construct((Class<?>) null, (TypeBindings) null, (JavaType) referenceType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JavaType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper1.writerWithView(class0);
      SQLException sQLException0 = new SQLException("LONG", (String) null, (-2599));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", sQLException0);
      sQLTimeoutException0.setNextException(sQLException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "cNUp;P/", (Throwable) sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "cNUp;P/");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // cNUp;P/
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      // Undeclared exception!
//      try { 
        jsonFactory3.createGenerator((OutputStream) null, jsonEncoding0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Writer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.emptyIterator();
      ClassUtil.classNameOf(class0);
      Character character0 = Character.valueOf('#');
      Class<Short> class1 = Short.class;
      ClassUtil.hasClass(character0, class1);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getGenericSuperclass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Character> class3 = Character.class;
      ClassUtil.findRawSuperTypes(class3, class3, true);
      SQLDataException sQLDataException0 = new SQLDataException("^Xb|1rE9GfszqBM<xJM");
      sQLDataException0.getLocalizedMessage();
      SQLDataException sQLDataException1 = new SQLDataException("[]", "com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations", 0);
      sQLDataException1.getSuppressed();
      sQLDataException0.getStackTrace();
      sQLDataException0.setNextException(sQLDataException1);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Double is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Member member0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassUtil.nonNullString("keyType");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("keyType");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("keyType", mockRuntimeException0);
      // Undeclared exception!
//      try { 
        sQLTransactionRollbackException0.setStackTrace((StackTraceElement[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("!;M{_Wuvfcc*vwmo", sQLClientInfoException0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      Class<Character> class0 = Character.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      Class<ReferenceType> class1 = ReferenceType.class;
      TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.hasClass(resolvedRecursiveType0, class0);
      Class<Error> class2 = Error.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      objectMapper0.readerFor(class1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<Short> class1 = Short.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      sQLTimeoutException0.spliterator();
      ClassUtil.getRootCause(sQLTimeoutException0);
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessibleObject> class3 = AccessibleObject.class;
//      try { 
        ClassUtil.findConstructor(class3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class0);
      SQLDataException sQLDataException0 = new SQLDataException(" $fYxe}8xEL>x^");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) sQLDataException0, 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" $fYxe}8xEL>x^", "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", 0, jsonMappingException0);
      sQLDataException0.setNextException(sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Nv>')?uGq", " $fYxe}8xEL>x^", (-1), jsonMappingException0);
      sQLTransientConnectionException0.getStackTrace();
      PrintStream printStream0 = null;
      // Undeclared exception!
//      try { 
        jsonMappingException0.printStackTrace((PrintStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      Class<Short> class1 = Short.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2938), objectReader0, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.nullOrToString(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.getGenericInterfaces(class3);
      Byte byte0 = new Byte((byte)3);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, byte0, "java.lang.Class@0000000001");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Byte (of class com.fasterxml.jackson.databind.type.MapLikeType) must override method 'java.lang.Class@0000000001'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getGenericSuperclass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Character> class3 = Character.class;
      ClassUtil.findRawSuperTypes(class3, class3, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Class<RuntimeException> class4 = RuntimeException.class;
      objectMapper0.readerFor(class4);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Float float0 = new Float((float) 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getTypeParameters();
      constructor0.getGenericParameterTypes();
      Class<Annotation> class2 = Annotation.class;
      constructor0.setAccessible(false);
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.getCause();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      ClassUtil.backticked("NRHoA{%+");
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "NRHoA{%+");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getParameterCount();
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      constructor0.getDeclaredAnnotation(class2);
      constructor0.getDeclaredAnnotationsByType(class3);
      constructor0.getAnnotations();
      constructor0.getName();
      constructor0.isAnnotationPresent(class3);
      constructor0.getParameterTypes();
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, class1, "");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method ''
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<Object> class1 = Object.class;
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      
      Class<NoClass> class3 = NoClass.class;
      String string1 = ClassUtil.nameOf(class3);
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }
}
