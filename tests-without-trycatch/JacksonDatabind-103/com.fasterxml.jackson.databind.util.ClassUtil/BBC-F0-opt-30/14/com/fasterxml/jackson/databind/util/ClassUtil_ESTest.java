/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:25:03 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      HashMap<AccessPattern, Character> hashMap0 = new HashMap<AccessPattern, Character>();
      Character character0 = Character.valueOf(':');
      hashMap0.put(accessPattern0, character0);
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(hashMap0);
      enumMap0.clear();
      ClassUtil.findEnumType(enumMap0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Character character0 = Character.valueOf('+');
      HashMap<AccessPattern, Character> hashMap0 = new HashMap<AccessPattern, Character>();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      hashMap0.put(accessPattern0, character0);
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(hashMap0);
      enumMap0.clear();
      ClassUtil.findEnumType(enumMap0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Character character0 = Character.valueOf('t');
      HashMap<AccessPattern, Character> hashMap0 = new HashMap<AccessPattern, Character>();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      hashMap0.put(accessPattern0, character0);
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(hashMap0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.wrapperType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class1, class0);
      HashMap<AccessPattern, Character> hashMap0 = new HashMap<AccessPattern, Character>();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      hashMap0.put(accessPattern0, (Character) null);
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(hashMap0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getOuterClass(class0);
      Class<InputStream> class1 = InputStream.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.io.InputStream, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Class<BooleanNode> class0 = BooleanNode.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findSuperTypes(class3, class1);
      ClassUtil.isNonStaticInnerClass(class2);
      System.setCurrentTimeMillis(0L);
      ClassUtil.backticked("java.lang.Integer");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isLocalType(class0, true);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) referenceType0, javaTypeArray0[1]);
      ClassUtil.rawClass(mapType0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.nameOf(class0);
      ClassUtil.rawClass((JavaType) null);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "`java.lang.RuntimeException`", jsonLocation0);
      jsonMappingException0.getMessage();
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9Zj<]");
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      typeFactory0.constructRawMapType(class2);
      Class<HashMap> class3 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class3, class3);
      MapType mapType1 = mapType0.withStaticTyping();
      Float float0 = new Float(0.0F);
      MapLikeType mapLikeType0 = mapType1.withContentValueHandler(float0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(mapType1);
      ClassUtil.findSuperTypes((JavaType) mapLikeType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Void> class1 = Void.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.findSuperTypes(class0, class1, list0);
      String string0 = "IQE4(hA\\BDS`";
      int[] intArray0 = new int[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("IQE4(hABDS`");
      sQLTransientConnectionException0.printStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("IQE4(hABDS`", "IQE4(hABDS`", 2196, sQLTransientConnectionException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IQE4(hABDS`");
      sQLFeatureNotSupportedException0.setNextException(sQLTransientConnectionException0);
      // Undeclared exception!
//      try { 
        sQLFeatureNotSupportedException0.initCause(sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLTransientConnectionException: IQE4(hABDS`
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">v=BXxcZmQYrF',o", "vCO* zbjD2,-#ZZ!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping1 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping(objectMapper_DefaultTyping1);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withOverrides((ClassIntrospector.MixInResolver) null);
      SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.copy();
      SimpleMixInResolver simpleMixInResolver3 = simpleMixInResolver2.withoutLocalDefinitions();
      ObjectMapper objectMapper5 = objectMapper4.setMixInResolver(simpleMixInResolver3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">v=BXxcZmQYrF',o");
      objectMapper5.writeValue((Writer) mockPrintWriter0, (Object) objectMapper_DefaultTyping0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<Long> class0 = Long.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(javaType0);
      ClassUtil.rawClass(arrayType1);
      Class<Byte> class1 = Byte.class;
      ClassUtil.findConstructor(class1, false);
      Class<Error> class2 = Error.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Error is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<BooleanNode> class0 = BooleanNode.class;
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Error> class2 = Error.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      System.setCurrentTimeMillis(813L);
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.lang.Character", (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(list0, "net.sf.cglib.proxy.java.lang.Character");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      sQLWarning0.initCause(jsonMappingException0);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) booleanNode0, "net.sf.cglib.proxy.java.lang.Character");
      // Undeclared exception!
      ClassUtil.getRootCause(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.defaultValue(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Q*`T>AUL)BZa");
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonFactory_Feature0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((DataOutput) dataOutputStream0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLIntegrityConstraintViolationException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jsonGenerator0.writeNumber(bigInteger0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLIntegrityConstraintViolationException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getDeclaringClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.RuntimeExc");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, objectMapper1, mockPrintStream0, byteArray0, (byte)30, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      Separators separators0 = new Separators('|', '=', '|');
      MinimalPrettyPrinter minimalPrettyPrinter1 = minimalPrettyPrinter0.setSeparators(separators0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter1);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getClassMethods(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getOuterClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class2);
      Class<SimpleType> class3 = SimpleType.class;
      Class<MapLikeType> class4 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      Class<Short> class5 = Short.class;
      ClassUtil.findSuperTypes(class5, class4, list0);
      Class<String> class6 = String.class;
      ClassUtil.getOuterClass(class6);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("u~tx~Sz#]", "net.sf.cglib.proxy.java.lang.Object", 3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("-LG9g7", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("6$ej:I,N_J", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning("-LG9g7", "-LG9g7", sQLSyntaxErrorException0);
      sQLWarning0.spliterator();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern4 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern3, accessPattern4);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<BooleanNode> class1 = BooleanNode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      MapType mapType1 = mapType0.withContentValueHandler(class1);
      Character character0 = Character.valueOf('G');
      mapType1.equals(character0);
      mapType1.getTypeName();
      mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withKeyTypeHandler(class1);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType1);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
      ArrayType arrayType1 = arrayType0.withValueHandler(booleanNode0);
      typeFactory0.moreSpecificType(mapType2, arrayType1);
      StringBuilder stringBuilder0 = new StringBuilder();
      mapType2.getErasedSignature(stringBuilder0);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, true);
      Class<Byte> class2 = Byte.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.quotedOr("70Z-R", "70Z-R");
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      ClassUtil.primitiveType(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes(class4, class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Object", "C ,y", (-419862944));
      sQLTransactionRollbackException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      ClassUtil.isProxyType(class2);
      Class<Integer> class5 = Integer.class;
//      try { 
        ClassUtil.createInstance(class5, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nonNullString((String) null);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("UT)`HCQ*7.", "com.fasterxml.jackson.databind.type.CollectionType", (-477279648), sQLSyntaxErrorException0);
      sQLTimeoutException0.getLocalizedMessage();
      sQLSyntaxErrorException0.initCause(sQLTimeoutException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nameOf(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<ArrayType> class3 = ArrayType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(resolvedRecursiveType0);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler((Object) null);
      ReferenceType referenceType3 = referenceType2.withValueHandler(class1);
      ReferenceType referenceType4 = referenceType3.withStaticTyping();
      javaTypeArray0[1] = (JavaType) referenceType4;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType5 = ReferenceType.construct(class1, (TypeBindings) null, javaTypeArray0[6], javaTypeArray0, javaTypeArray0[6]);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) referenceType5);
      MapType mapType0 = MapType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) collectionType0, javaTypeArray0, (JavaType) referenceType4, javaTypeArray0[2]);
      Float float0 = new Float((-151.614));
      MapType mapType1 = mapType0.withKeyTypeHandler(float0);
      ReferenceType referenceType6 = ReferenceType.upgradeFrom(mapType1, referenceType3);
      ReferenceType referenceType7 = referenceType6.withTypeHandler(referenceType2);
      ClassUtil.rawClass(referenceType7);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasClass(integer0, class1);
      ClassUtil.getConstructors(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      ClassUtil.nullOrToString(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.isJacksonStdImpl(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.nullOrToString(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aV0^-lU`7@Dg:X4o[5");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TL)%N @30u");
      Float float0 = new Float(0.0);
      ClassUtil.nonNull((Float) null, float0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.nameOf(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "Q#");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("java.lang.RuntimeExc");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockIOException0);
      mockIOException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, "java.lang.RuntimeExc");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.hasClass(class0, class0);
      Short short0 = new Short((short)0);
      ClassUtil.nullOrToString(short0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectMapper objectMapper3 = objectMapper2.findAndRegisterModules();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPropertyInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      objectMapper3.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper5 = objectMapper4.enable(serializationFeature0, serializationFeatureArray0);
      Class<IOException> class0 = IOException.class;
      ObjectReader objectReader0 = objectMapper5.readerWithView(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      objectReader0.forType(class1);
      ClassUtil.findEnumType((Enum<?>) jsonInclude_Include0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "};/*|x";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "};/*|x");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Object` from String [N/A]: };/*|x
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      Class<Short> class1 = Short.class;
      objectReader0.forType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<Void> class0 = Void.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findPropertyInclusion((JsonInclude.Value) null);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector1, (AnnotatedMember) null, propertyName1, propertyMetadata0, (JsonInclude.Value) null);
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withMetadata(propertyMetadata0);
      ClassUtil.nameOf((Named) beanPropertyDefinition0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.findSuperClasses(class0, class0, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Short> class0 = Short.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      ClassUtil.getPackageName(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findClassAnnotations(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class3, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Character character0 = new Character('h');
      ClassUtil.verifyMustOverride(class0, character0, "Failed to find default constructor of class ");
      Class<IOException> class1 = IOException.class;
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float((-410.12513));
      Class<Short> class0 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "[null]");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Short` from number -410.12512: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.nameOf(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "Failed to find default constructor of class ");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.nameOf(class0);
      ClassUtil.primitiveType(class0);
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class0);
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassUtil.nonNull((MapType) null, (MapType) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      ClassUtil.getRootCause(sQLNonTransientException0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", (Class<?>) null, "com.fasterxml.jackso");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type [null] from String \" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type\": com.fasterxml.jackso
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jacks");
//      try { 
        ClassUtil.throwIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1846), (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(2, 1);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArrayBuilder0.NO_BYTES, 0, (-1));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "B", (Throwable) null);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // B
//         //  at [Source: (byte[])\"\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getConstructors(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.emptyIterator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperTypes(javaType0, class2, true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Void> class0 = Void.class;
      ClassUtil.canBeABeanType(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "E");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("E", hashMap0, jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // E
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.getPackageName(class0);
      ClassUtil.backticked((String) null);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isLocalType((Class<?>) null, false);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getOuterClass(class1);
      Class<ArrayType> class2 = ArrayType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(class1);
      ClassUtil.findSuperTypes(javaType0, class1, false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ClassUtil.nameOf((Named) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2047, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "gzdS");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NULL: gzdS
//         //  at [Source: UNKNOWN; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K!");
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("x>d>n%pa9,XTA'Uu}}L");
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory4 = jsonFactory3.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonGenerator_Feature1);
      jsonFactory5.disable(jsonGenerator_Feature1);
      jsonFactory5.setInputDecorator((InputDecorator) null);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((DataOutput) null);
      SQLException sQLException0 = new SQLException("w%x~8,1m<r/,JM^^", "}2<", 0);
      Short short0 = new Short((short)2415);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) short0, (-1));
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): w%x~8,1m<r/,JM^^ (through reference chain: java.lang.Short[?])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Object object0 = new Object();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("lj_V9pZ");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "FAIL_ON_NULL_CREATOR_PROPERTIES");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasClass(object0, class0);
      ClassUtil.emptyIterator();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      Float float0 = new Float((-2659.778F));
      ClassUtil.hasClass(float0, class1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isLocalType(class0, false);
      Class<ArrayType> class1 = ArrayType.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperClasses(class1, class3, false);
      Class<Object> class4 = Object.class;
      ClassUtil.findRawSuperTypes(class4, class3, false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = null;
//      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-218), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.concurrent.ConcurrentHashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ClassUtil.rawClass(mapType0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      Class<MapType> class2 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperTypes(class0, class3, list0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.nameOf((Named) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.defaultValue(class0);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.nameOf(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.nameOf(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      String string0 = "annotation";
      SQLDataException sQLDataException0 = new SQLDataException("annotation");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3847));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) placeholderForType0, "annotation");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // annotation (through reference chain: com.fasterxml.jackson.databind.type.PlaceholderForType[\"annotation\"])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Byte byte0 = new Byte((byte)66);
      ClassUtil.nullOrToString(byte0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.quotedOr("com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer", "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer");
      MockError mockError0 = new MockError("withContentInclusion");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "?dmd");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.createInstance(class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassUtil.nonNull((MapType) null, (MapType) null);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.hasClass((Object) null, class0);
      Integer integer0 = Integer.valueOf((-570));
      ClassUtil.hasClass(integer0, class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      int int0 = 125;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ByteArrayBuilder byteArrayBuilder0 = null;
//      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-570));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Boolean boolean0 = Boolean.FALSE;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.hasClass(class0, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class0);
      Boolean boolean0 = Boolean.FALSE;
      ClassUtil.hasClass(boolean0, class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<IOException> class3 = IOException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      Class<Long> class4 = Long.class;
      TypeBindings typeBindings0 = TypeBindings.create(class4, (List<JavaType>) null);
      Float float0 = new Float(3875.17F);
      Class<IOException> class5 = IOException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class5, typeBindings0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) float0, (Object) resolvedRecursiveType0);
      TypeBindings typeBindings1 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings1, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) arrayType0);
      ClassUtil.classNameOf(referenceType0);
      Class<Boolean> class6 = Boolean.class;
      ClassUtil.primitiveType(class6);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = "java.lang.Double";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Double");
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      Class<Double> class1 = Double.class;
      ClassUtil.isJacksonStdImpl(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      int int0 = (-1784);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      objectMapper0.configure(jsonParser_Feature0, false);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI scheme is not \"file\"
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("&A#tCg");
      mockRuntimeException0.toString();
      mockRuntimeException0.toString();
      mockRuntimeException0.getStackTrace();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isConcrete(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isBogusClass(class1);
      System.setCurrentTimeMillis(6L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      int[] intArray0 = new int[1];
      intArray0[0] = 795;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getSuppressed();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      OutputStream outputStream0 = null;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) null);
      jsonGenerator0.writeStartArray(795);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.BatchUpdateException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateException1.getSuppressed();
      batchUpdateException1.getSuppressed();
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.defaultValue(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      String string0 = "elementType";
      ClassUtil.hasClass("elementType", class0);
      SQLException sQLException0 = new SQLException("elementType", (String) null, 864);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("elementType", sQLException0);
      ClassUtil.getRootCause(mockRuntimeException0);
      ClassUtil.isConcrete(class0);
      ClassUtil.nonNullString("elementType");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactoryConfig0, beanDeserializerFactory0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class1 = Long.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass("elementType", class0);
      Class<String> class1 = String.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.findEnumType(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<MapType> class1 = MapType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNullString("java.io.IOException");
      ClassUtil.isNonStaticInnerClass(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<?> class2 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredFields(class2);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "entrySet", 71);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.getConstructors(class1);
      ClassUtil.defaultValue(class2);
      ClassUtil.findClassAnnotations(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.isProxyType(class3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z_i5");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("z_i5");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "C", (-4));
      mockRuntimeException0.initCause(sQLSyntaxErrorException0);
      ClassUtil.getClassDescription(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isLocalType(class1, false);
      Double double0 = Double.valueOf(0.0);
      ClassUtil.nonNull((Object) double0, (Object) class1);
      ClassUtil.nonNullString("rsSw.~3<1-+Zz'n^9s");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      Class<IOException> class2 = IOException.class;
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      ClassUtil.getConstructors(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.nameOf(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.findEnumType(class4);
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class5);
      Class<Short> class6 = Short.class;
      ClassUtil.primitiveType(class6);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Short> class1 = Short.TYPE;
      StackTraceElement stackTraceElement0 = new StackTraceElement("mXkl@", "keyUniverse", "keyUniverse", (-2087));
      StackTraceElement stackTraceElement1 = new StackTraceElement("default", "size", "size", (-2087));
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("+U=z_q@aS[oLy");
      mockRuntimeException0.getLocalizedMessage();
      Throwable throwable0 = mockRuntimeException0.fillInStackTrace();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(throwable0);
      mockRuntimeException0.toString();
      mockRuntimeException1.toString();
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.getClassDescription(boolean0);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isLocalType(class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("pYpNn;sFE-cZ6,3d[");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("pYpNn;sFE-cZ6,3d[", (String) null, 66);
      mockRuntimeException0.initCause((Throwable) null);
      mockRuntimeException0.printStackTrace();
      ClassUtil.classOf((Object) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isLocalType(class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("pYpNn;sFE-cZ6,3d[");
      int int0 = 66;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("pYpNn;sFE-cZ6,3d[", (String) null, 66);
      mockRuntimeException0.initCause((Throwable) null);
      mockRuntimeException0.printStackTrace();
      ClassUtil.classOf((Object) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      String string0 = "v62rul4/p46s";
      JavaType[] javaTypeArray0 = new JavaType[3];
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      // Undeclared exception!
//      try { 
        TypeBindings.create((Class<?>) null, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      Double double0 = Double.valueOf(0.0);
      ClassUtil.nonNull((Object) double0, (Object) class1);
      ClassUtil.getOuterClass(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.findEnumType(class2);
      ClassUtil.getPackageName(class1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("() returned value of type ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(filterOutputStream0, "com.fasterxml.jackso", (Throwable) null);
      mockFileOutputStream0.write(7);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang", jsonMappingException0);
      ClassUtil.throwIfError(mockRuntimeException0);
      mockRuntimeException0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, "com.fasterxml.jackso");
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nonNullString((String) null);
      ClassUtil.nonNullString("annotation");
      SQLException sQLException0 = new SQLException(": cannot find property with name '");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // : cannot find property with name '
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<?> class2 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredFields(class2);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "entrySet", 71);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.getConstructors(class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getEnclosingClass(class1);
      Class<Short> class3 = Short.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.isBogusClass(class4);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<?> class2 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredFields(class2);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Q-,wwX", "entrySet", "T\"b=wGDtTRJ=eY", 71);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Q-,wwX", "T\"b=wGDtTRJ=eY", (String) null, (-130));
      StackTraceElement stackTraceElement2 = new StackTraceElement("entrySet", "entrySet", " with 2 type parameters: class expects ", (-130));
      StackTraceElement stackTraceElement3 = new StackTraceElement("h(E%;F3Pg~8<Pp0S:", "R-p*pf73_C5;Q>", "T\"b=wGDtTRJ=eY", (-1582));
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.defaultValue(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z_i5");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("z_i5");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "C", (-4));
      mockRuntimeException0.initCause(sQLSyntaxErrorException0);
      mockRuntimeException0.printStackTrace();
      ClassUtil.classOf(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapType> class0 = MapType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaredMethods(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.canBeABeanType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class2 = LinkedList.class;
      Class<IOException> class3 = IOException.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class2, class3);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("mi$9v>o2", "NULL", (-7));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("mi$9v>o2", sQLTransactionRollbackException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientException0);
      CollectionType collectionType2 = collectionType1.withValueHandler(mockRuntimeException0);
      ClassUtil.quotedOr(collectionType2, "[]");
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Short> class2 = Short.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      objectReader0.forType(class3);
//      try { 
        JsonPointer.compile("U6+!:]Tqn{");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid input: JSON Pointer expression must start with '/': \"U6+!:]Tqn{\"
//         //
//         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.nonNull((MapType) null, (MapType) null);
      Float float0 = new Float((-864.0F));
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-271));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.quotedOr(accessPattern0, "rvev/2Ch&4f7zn9TT");
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Character> class3 = Character.class;
      ClassUtil.isProxyType(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.findConstructor(class4, true);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getClassMethods(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getEnclosingClass(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.getGenericSuperclass(class3);
      TypeFactory.defaultInstance();
      int int0 = (-171);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LRUMap<Object, JavaType> lRUMap0 = null;
//      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-171), (-171));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.concurrent.ConcurrentHashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("elementType", "Q>1 AbQGP[%R\"", 1);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      int[] intArray0 = new int[1];
      intArray0[0] = 795;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getSuppressed();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("\"double\"");
      OutputStream outputStream0 = null;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) null);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.BatchUpdateException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class2);
      objectReader0.forType(class1);
//      try { 
        JsonPointer.compile("-,bQe");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid input: JSON Pointer expression must start with '/': \"-,bQe\"
//         //
//         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isLocalType(class1, true);
      Double double0 = Double.valueOf(0.0);
      ClassUtil.nonNull((Object) double0, (Object) class1);
      ClassUtil.nonNullString("rsSw.~3<1-+Zz'n^9s");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("rsSw.~3<1-+Zz'n^9s", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isLocalType(class1, false);
      Double double0 = Double.valueOf(0.0);
      ClassUtil.nonNull((Object) double0, (Object) class1);
      ClassUtil.nonNullString("rsSw.~3<1-+Zz'n^9s");
      int[] intArray0 = new int[6];
      intArray0[0] = (-545);
      intArray0[1] = 1;
      System.setCurrentTimeMillis((-9223372036854775808L));
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      Character character0 = Character.valueOf('k');
      arrayType0.withContentTypeHandler(character0);
      ClassUtil.primitiveType(class0);
      ClassUtil.quotedOr(list0, "\"[m(6x\"T{s^%=@h");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.nonNull((MapType) null, (MapType) null);
      Float float0 = new Float((-864.0F));
      ClassUtil.quotedOr(float0, "4NxywZCy;#8tW");
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Short> class2 = Short.TYPE;
      Class<Float> class3 = Float.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.defaultValue(class2);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findClassAnnotations(class4);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.findEnumType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1);
      SQLException sQLException0 = new SQLException("~oIPSY", "~oIPSY");
      sQLException0.getStackTrace();
      ClassUtil.throwIfError(sQLException0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isLocalType(class1, false);
      Double double0 = Double.valueOf(0.0);
      ClassUtil.nonNull((Object) double0, (Object) class1);
      ClassUtil.nonNullString("rsSw.~3<1-+Zz'n^9s");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("rsSw.~3<1-+Zz'n^9s", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Short> class1 = Short.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      Character character0 = Character.valueOf('k');
      arrayType0.withContentTypeHandler(character0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      String string0 = "cp`6{u?\\gORGS{\\Y";
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredMethods(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(78);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      Class<MapType> class0 = MapType.class;
      Class<Integer> class1 = Integer.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<ReferenceType> class4 = ReferenceType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class4);
      Character character0 = Character.valueOf('k');
      arrayType0.withContentTypeHandler(character0);
      ArrayType arrayType1 = typeFactory0.constructArrayType(class0);
      arrayType1.withStaticTyping();
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, class3, "&W]+*-");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method '&W]+*-'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Character character0 = Character.valueOf('!');
      Character character1 = Character.valueOf('!');
      Character character2 = ClassUtil.nonNull(character1, character0);
      ClassUtil.nullOrToString(character2);
      SQLException sQLException0 = new SQLException("^:_Sl\"ffO# IL#uuG", "R=Xs[n$M@ pVpF]");
      ClassUtil.throwIfIOE(sQLException0);
      Class<IOException> class0 = IOException.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLException sQLException0 = new SQLException("wdk.Ul");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("wdk.Ul", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      sQLException0.printStackTrace((PrintStream) mockPrintStream0);
      ClassUtil.throwIfError(sQLException0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Character> class0 = Character.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning("Unresolved forward reference but no identity info: ", "RO<]oD");
      ClassUtil.getRootCause(sQLWarning0);
      Class<Long> class1 = Long.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("i", "n|:51EwU+j_", 1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("g1{{4i/fZ%=", sQLIntegrityConstraintViolationException0);
      sQLTransientException0.spliterator();
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<NoClass>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      String string0 = "elementType";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("elementType", "Q>1 AbQGP[%R\"", 1);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLSyntaxErrorException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      Class<Character> class2 = Character.class;
      objectReader0.forType(class2);
//      try { 
        JsonPointer.compile("Q>1 AbQGP[%R\"");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid input: JSON Pointer expression must start with '/': \"Q>1 AbQGP[%R\"\"
//         //
//         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<IOException> class1 = IOException.class;
      ClassUtil.createInstance(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.classNameOf((Object) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        beanDeserializerBuilder0.buildAbstract();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer(78);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      ClassUtil.classNameOf((Object) null);
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Error> class0 = Error.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr((Object) null, " has no default (no arg) constructor");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withAdditionalDeserializers((Deserializers) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null Deserializers
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Integer> class1 = Integer.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class3);
      Character character0 = Character.valueOf('k');
      arrayType0.withContentTypeHandler(character0);
      arrayType0.withStaticTyping();
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, typeFactory0, "cp`6{u?gORGS{Y");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class com.fasterxml.jackson.databind.type.TypeFactory (of class java.lang.String) must override method 'cp`6{u?gORGS{Y'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 2846, mockError0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("KA_ap4RMX9]XW^#x", "KA_ap4RMX9]XW^#x", sQLTimeoutException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      sQLTimeoutException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "org.hibernate.proxy.", 2846);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("J", (String) null, 853, hashMap0, mockError0);
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockError mockError1 = new MockError(sQLDataException0);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 2846, mockError0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("KA_ap4RMX9]XW^#x", "KA_ap4RMX9]XW^#x", sQLTimeoutException0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.isConcrete(class0);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
//      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getPackageName(class0);
      LinkedList<PlaceholderForType> linkedList0 = new LinkedList<PlaceholderForType>();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      linkedList0.add(placeholderForType0);
      ClassUtil.nonNull(linkedList0, linkedList0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, class0, "elementType");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.reflect.AccessibleObject) must override method 'elementType'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Character character0 = Character.valueOf('x');
      ClassUtil.nonNull(character0, character0);
      ClassUtil.nullOrToString((Object) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(103, 24);
      System.setCurrentTimeMillis(2147483647L);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2392;
      intArray0[1] = 3546;
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class1 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      arrayType0.withContentTypeHandler(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      ObjectReader objectReader0 = objectMapper1.reader();
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      TypeFactory typeFactory1 = objectReader1.getTypeFactory();
      typeFactory1.constructArrayType(class1);
      arrayType0.withStaticTyping();
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "Kj_! I#0'5`t)D'P");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Character character0 = Character.valueOf('!');
      Character character1 = ClassUtil.nonNull(character0, character0);
      ClassUtil.nullOrToString(character1);
      HashMap<String, ClientInfoStatus> hashMap0 = null;
//      try {
        hashMap0 = new HashMap<String, ClientInfoStatus>(0, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal load factor: 0.0
//         //
//         verifyException("java.util.HashMap", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer(78);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      Class<MapType> class0 = MapType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", 2219);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer(78);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.createInstance(class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.classNameOf(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
//      try { 
        beanDeserializerBuilder0.buildAbstract();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      int int0 = 4116;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("HOST_NAME", "HOST_NAME", 4116);
      SQLTransientException sQLTransientException0 = new SQLTransientException("HOST_NAME", sQLIntegrityConstraintViolationException0);
      sQLTransientException0.spliterator();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // HOST_NAME
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      String string0 = "2{Qv49> hpkG@$+&lp";
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.lang", "2{Qv49> hpkG@$+&lp");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "java.lang");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2392;
      intArray0[1] = 3546;
      intArray0[2] = (-784);
      intArray0[3] = 1494;
      intArray0[4] = 96;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) batchUpdateException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.nameOf(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Constructor<Float> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      deserializerFactoryConfig0.keyDeserializers();
      defaultDeserializationContext_Impl0.weirdNativeValueException(stdKeyDeserializers0, class0);
      String string0 = null;
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class2 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class2);
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class1, javaTypeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.JsonMappingException with 1 type parameter: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.nameOf(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Constructor<Float> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<?> class2 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredFields(class2);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "entrySet", 71);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Q-,wwX", "entrySet", "T\"b=wGDtTRJ=eY", 71);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("T\"b=wGDtTRJ=eY", "Q-,wwX", "RfIF", (-130));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("3W v(9:=", "h(E%;F3Pg~8<Pp0S:", "Q-,wwX", 71);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "3W v(9:=", "Q-,wwX", (-130));
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLDataException0.getLocalizedMessage();
      mockRuntimeException0.addSuppressed(sQLDataException0);
      sQLDataException0.getLocalizedMessage();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.toString();
      mockRuntimeException0.toString();
      ClassUtil.getClassDescription(mockRuntimeException0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getDeclaringClass(class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.isProxyType(class4);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil.nonNullString("PjHNwrs");
      int int0 = 1324;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("PjHNwrs", "QM|+{w:M*M7|GCgF$", 1324);
      String string0 = "local/anonymous";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("local/anonymous", "g@^)zMdm6Xw 6KU{0%s");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // g@^)zMdm6Xw 6KU{0%s
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findConstructor(class3, true);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findEnumType(class0);
      Class<MapType> class1 = MapType.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      SQLWarning sQLWarning0 = new SQLWarning("cp`6{u?gORGS{Y", "P");
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Problem binding JSON into Map.Entry: unexpected content after JSON Object entry: ", "ZERO_LENGTH_ENUM_ARRAY");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 32);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      Class<IOException> class1 = IOException.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, arrayType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0, (JavaType) referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class0);
      mapType0.withKeyTypeHandler(collectionType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
//      try { 
        resolvedRecursiveType0.getErasedSignature(stringBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null resolver
//         //
//         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("elementType", "Q>1 AbQGP[%R\"", 1);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      ClassUtil.quotedOr(accessibleObjectArray0[1], "com.fasterxml.jacks");
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor1.getConstructor();
      Class<Short> class2 = Short.class;
//      try { 
        ClassUtil.createInstance(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      String string0 = "elementType";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("elementType", "Q>1 AbQGP[%R\"", 1);
      sQLSyntaxErrorException0.getStackTrace();
      // Undeclared exception!
//      try { 
        sQLSyntaxErrorException0.printStackTrace((PrintWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getPackageName(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.getOuterClass(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Long long0 = new Long(987L);
      ClassUtil.isJacksonStdImpl((Object) long0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getGenericInterfaces(class0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      ClassUtil.getClassDescription(booleanNode0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`com.fasterxml.jackson.databind.node.BooleanNode`", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      sQLClientInfoException1.addSuppressed(sQLClientInfoException0);
      sQLClientInfoException0.getStackTrace();
      sQLClientInfoException1.spliterator();
      ClassUtil.getRootCause(sQLClientInfoException1);
      Class<Object> class2 = Object.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class4);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLClientInfoException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLClientInfoException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Void> class2 = Void.class;
      ClassUtil.findSuperClasses(class2, class1, true);
      ClassUtil.getClassMethods(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getOuterClass(class3);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class4);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getClassMethods(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("entrySet");
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) null, jsonEncoding0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("5~IJkJ7QZnxW", "KH_`tJ@J:t", 640);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: 5~IJkJ7QZnxW
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "KK2LWn|h 8.?");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClassUtil.nonNull((MapType) null, (MapType) null);
      Float float0 = new Float((-864.0F));
      ClassUtil.quotedOr(float0, "4NxywZCy;#8tW");
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<Short> class1 = Short.class;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class0);
      String string0 = "$$uML9Z<: iQI%% B=H";
      int int0 = 51;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("$$uML9Z<: iQI%% B=H", "Should have gotten ", 51);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("$$uML9Z<: iQI%% B=H", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1585;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2jy9^`e'm6}v1a_O", "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning(" (from class ", "eJTd>.", sQLTimeoutException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLWarning0);
      assertEquals("java.sql.SQLWarning:  (from class ", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1536);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayBuilder0;
      objectArray0[1] = (Object) jsonFactory0;
      PrintStream printStream0 = mockPrintStream0.printf("b`P<;#9", objectArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1536;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("b`P<;#9", intArray0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      MockException mockException0 = new MockException("O%49Sx", mockRuntimeException0);
      mockRuntimeException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLException sQLException0 = new SQLException("JSON", "JSON", mockException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) printStream0, (Exception) sQLException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLException: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2901), false, false, (-2901), (-2901));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("]&$$y7=PHPw%[*48m&", "]&$$y7=PHPw%[*48m&", (-2901), dataTruncation0);
      SQLWarning sQLWarning0 = new SQLWarning("n2B._.\"3zb#xd3YfA5", "Unexpected IOException (of type %s): %s", sQLNonTransientException0);
      dataTruncation0.setNextWarning(sQLWarning0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "_`D4:-D");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // _`D4:-D
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Short> class1 = Short.TYPE;
      Class<Float> class2 = Float.TYPE;
      ClassUtil.findClassAnnotations(class1);
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 2846, mockError0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("KA_ap4RMX9]XW^#x", "KA_ap4RMX9]XW^#x", sQLTimeoutException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      sQLTimeoutException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      Class<Double> class0 = Double.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }
}
