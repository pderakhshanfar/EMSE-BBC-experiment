/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:02:20 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaType javaType0 = objectMapper3.constructType(class0);
      ClassUtil.rawClass(javaType0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("; failed to set access: ");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ; failed to set access: 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.mixInCount();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      objectMapper0.readerFor((JavaType) simpleType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class1);
      BiFunction<AccessPattern, Object, Long> biFunction0 = (BiFunction<AccessPattern, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      enumMap0.replaceAll(biFunction0);
      ClassUtil.findEnumType(enumMap0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.TYPE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      // Undeclared exception!
//      try { 
        typeFactory1.constructSpecializedType(simpleType0, class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.PlaceholderForType not subtype of [simple type, class com.fasterxml.jackson.databind.util.AccessPattern]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      ClassUtil.isProxyType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '2';
      charArray0[2] = '+';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-3), (-3));
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected NOT_AVAILABLE: JSON
//         //  at [Source: (char[])\"~2+\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getClassMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getConstructors(class3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(list0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      objectReader0.without(jsonParser_Feature0);
      // Undeclared exception!
//      try { 
        JsonPointer.valueOf("java.lang.reflect.Ac");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid input: JSON Pointer expression must start with '/': \"java.lang.reflect.Ac\"
//         //
//         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isJacksonStdImpl(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, objectOutputStream0, byteArray0, 2012, false);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "@VU/ZS", "iN)xdhh:#8CJ0Z*9");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `java.lang.RuntimeException` from String \"@VU/ZS\": iN)xdhh:#8CJ0Z*9
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "primitive", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)118;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, mockFileOutputStream0, byteArray0, 3, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((byte) (-2), class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `short` from number -2: org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      String string0 = "format";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("format", sQLFeatureNotSupportedException0);
      mockRuntimeException0.getSuppressed();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.initCause(mockRuntimeException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!\"HC[+GEmQ|2HL<y");
      ClassUtil.classOf("!\"HC[+GEmQ|2HL<y");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, pipedOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedOutputStream0, "0");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) pipedInputStream0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.defaultValue(class1);
      ClassUtil.getEnclosingClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<String> class3 = String.class;
      ClassUtil.findClassAnnotations(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory1.setInputDecorator(inputDecorator0);
      jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null, jsonEncoding0);
      MockException mockException0 = new MockException("FRfa8fe");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: FRfa8fe
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getPackageName(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.nameOf(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findSuperTypes(class0, class3);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(192);
      ClassUtil.verifyMustOverride(class0, integer0, "I@d;s@Wv");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.defaultValue(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.hasClass(class1, class2);
      ClassUtil.nonNullString("V*#](bYSA");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Character", "V*#](bYSA", (Throwable) null);
      sQLTransactionRollbackException0.getStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("V*#](bYSA", "net.sf.cglib.proxy.java.lang.Character", iOException0);
      ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      Class<Double> class3 = Double.class;
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) null, (Exception) iOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Float> class2 = Float.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<String>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      Class<NoClass> class2 = NoClass.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.core.filter.TokenFilter");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLNonTransientConnectionException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Float");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getParameterCount();
      constructor0.getGenericParameterTypes();
      constructor0.isAnnotationPresent(class1);
      constructor0.getParameters();
      constructor0.getDeclaredAnnotationsByType(class1);
      constructor0.toGenericString();
      constructor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getDeclaringClass(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.getConstructors(class1);
      ClassUtil.findSuperClasses((Class<?>) null, class3, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericParameterTypes();
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ClassUtil.findSuperTypes(javaType0, class0, true);
      ClassUtil.isLocalType(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1608;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[8] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader2 = objectReader1.with(jsonNodeFactory0);
      objectReader2.withoutFeatures(deserializationFeatureArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      // Undeclared exception!
//      try { 
        mockPrintStream0.format((String) null, (Object[]) deserializationFeatureArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ClassUtil.findSuperTypes(javaType0, class0, true);
      Class<Character> class1 = Character.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      // Undeclared exception!
//      try { 
        beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Module> class0 = Module.class;
      boolean boolean0 = true;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")w(-BoR\"Gl{");
      Short short0 = new Short((short)6287);
      ClassUtil.classNameOf(short0);
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<NoClass> class1 = NoClass.class;
      simpleType0.isTypeOrSubTypeOf(class1);
      ClassUtil.rawClass(simpleType0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 571, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(")w(-BoR\"Gl{", (String) null, 305, sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // )w(-BoR\"Gl{
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      MockError mockError0 = new MockError(sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      MockError mockError0 = new MockError(sQLDataException0);
      sQLDataException0.initCause(mockError0);
      sQLDataException0.printStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<Float> class1 = Float.TYPE;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getMessage();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0);
      mockRuntimeException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLException sQLException0 = new SQLException("8C Wl)46^Fm", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", mockRuntimeException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8C Wl)46^Fm", "8C Wl)46^Fm", 108, sQLException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "8C Wl)46^Fm", (Throwable) sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "!W[>(Xr4/UHh1U=");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isLocalType(class2, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<AccessPattern> linkedList0 = new LinkedList<AccessPattern>();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      linkedList0.add(accessPattern0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<IOException> class0 = IOException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      // Undeclared exception!
//      try { 
        objectReader0.with((JsonFactory) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]m[A");
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getEnclosingClass(class1);
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.quotedOr((Object) null, "]m[A");
      ClassUtil.findSuperTypes((Class<?>) null, class2, list0);
      ClassUtil.getOuterClass(class1);
      ClassUtil.getDeclaredMethods(class1);
      Class<Short> class3 = Short.class;
      ClassUtil.isLocalType(class3, false);
      Class<Double> class4 = Double.class;
      ClassUtil.hasEnclosingMethod(class4);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.Error", "org.hibernate.proxy.java.lang.Error");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "e6", (-934), sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLDataException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleModule simpleModule0 = new SimpleModule();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      HashMap<String, RuntimeException> hashMap0 = new HashMap<String, RuntimeException>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-32);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, objectMapper2, filterOutputStream0, byteArray0, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.reflect.A");
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module", 8, sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) filterOutputStream0, (Exception) sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLDataException: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, sQLSyntaxErrorException0);
      MockIOException mockIOException0 = new MockIOException(sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): java.sql.SQLInvalidAuthorizationSpecException
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = new Vector<Class<RuntimeException>>();
      ClassUtil.getPackageName(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getOuterClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.long");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("M9|bQEq2<0", mockIOException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.primitiveType(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1743199137));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(56319);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, (String) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      System.setCurrentTimeMillis(3L);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.emptyIterator();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getPackageName(class0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("q*^FqIB", "com.fasterxml.jackson.databind.type", 245);
      sQLInvalidAuthorizationSpecException0.spliterator();
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      ClassUtil.primitiveType(class0);
      Object object0 = new Object();
      ClassUtil.getClassDescription(object0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      EnumMap<AccessPattern, Long> enumMap1 = enumMap0.clone();
      enumMap0.isEmpty();
      enumMap1.clone();
      Long long0 = new Long(0L);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Long long1 = new Long(0L);
      enumMap1.put(accessPattern0, long0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.hasEnclosingMethod(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      JavaType javaType0 = objectMapper1.constructType(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<AccessPattern> linkedList0 = new LinkedList<AccessPattern>();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      linkedList0.add(accessPattern0);
      EnumSet<AccessPattern> enumSet0 = EnumSet.copyOf((Collection<AccessPattern>) linkedList0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      Class<Float> class0 = Float.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class1);
      EnumMap<AccessPattern, Long> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Long> enumMap2 = enumMap0.clone();
      Long long0 = new Long(0L);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Long long1 = new Long(0L);
      enumMap2.put(accessPattern0, long1);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Character> class1 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class1, class0, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class1);
      EnumMap<AccessPattern, Long> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Long> enumMap2 = enumMap1.clone();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Long long0 = new Long(0L);
      enumMap2.put(accessPattern0, long0);
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot access ");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(collectionType1, class2);
      mockRuntimeException0.initCause(jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.CollectionType`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/ +vvz");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      ClassUtil.findEnumType(enumSet0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.hasEnclosingMethod(class2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iIF2B6E;-@G40JMx", "iIF2B6E;-@G40JMx", 8, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo((JsonSetter.Value) null);
      TextNode textNode0 = TextNode.valueOf("8z}aV]X(kJuIR8I-");
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(textNode0);
      Class<IOException> class0 = IOException.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "iIF2B6E;-@G40JMx");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected NOT_AVAILABLE: iIF2B6E;-@G40JMx
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isBogusClass(class1);
      Class<IOException> class2 = IOException.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findRawSuperTypes(class3, class2, false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "iIF2B6E\\;-@G40JMx";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iIF2B6E;-@G40JMx", "iIF2B6E;-@G40JMx", 8, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "iIF2B6E;-@G40JMx");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1776);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("v@$6kkMBqZS/<;F8AU", "GaSg,:v", (-1776), intArray0);
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.emptyIterator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<MapType> class2 = MapType.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      MapType mapType1 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) mapType0, (JavaType) mapType0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("E?GV~Z#!=/}(H5<cr", "E?GV~Z#!=/}(H5<cr");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mapType1, 2237);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      MapType mapType2 = mapType1.withContentTypeHandler(jsonMappingException0);
      Class<MapType> class3 = MapType.class;
      ClassUtil.hasClass(mapType2, class3);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleModule simpleModule0 = new SimpleModule();
      MockError mockError0 = new MockError("6r");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "6r");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nullOrToString((Object) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Error> class1 = Error.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.quotedOr((Object) null, "");
      Class<Float> class2 = Float.class;
      ClassUtil.getGenericInterfaces(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "1-7_L$qDPi2g6<1q=$", "java.lang.Character");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `java.lang.Error` from String \"1-7_L$qDPi2g6<1q=$\": java.lang.Character
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.isJacksonStdImpl((Object) sQLInvalidAuthorizationSpecException0);
      ClassUtil.nameOf((Class<?>) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.hasClass(sQLFeatureNotSupportedException0, class1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      ClassUtil.quotedOr((Object) null, "org.hibernate.proxy.java.lang.RuntimeException");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.annotation.Annotation is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNullString("p&r5&4?uo4lu ");
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Module> class3 = Module.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.ser.std.CalendarSerializer", "7wfx]C24iP A", (int[]) null);
      batchUpdateException0.getNextException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GaQjC:Dv{Ps!o");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockError mockError0 = new MockError(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockError0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      MockFile mockFile0 = new MockFile("ek[(?`S!f*Co~Ia", "JSON");
      File file0 = MockFile.createTempFile("t.+3^/#O", "ek[(?`S!f*Co~Ia", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) sQLTimeoutException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTimeoutException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<IOException> class1 = IOException.class;
      Class<Module> class2 = Module.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Multiple type ids specified with ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 223, objectReader1, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.getStackTrace();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl((Object) sQLSyntaxErrorException0);
      ClassUtil.hasClass(consumer0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Void is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Character> class0 = Character.class;
      ClassUtil.getEnclosingClass(class0);
      Member member0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NoClass noClass0 = ClassUtil.nonNull((NoClass) null, (NoClass) null);
      assertNull(noClass0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.char", "ylU}(1%@BqKS IQ3n", (-8));
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLRecoverableException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Pqdfe:eel");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<String> class2 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GaQjC:Dv{Ps!o");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 135);
      MockError mockError0 = new MockError(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLDataException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 135);
      MockError mockError0 = new MockError(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockError0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLDataException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<ResolvedRecursiveType> class1 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.backticked(" in character escape sequence");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.throwIfError((Throwable) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[8];
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class2, (JavaType) simpleType0, (JavaType) simpleType0);
      Long long0 = new Long(0L);
      MapType mapType1 = mapType0.withTypeHandler(long0);
      javaTypeArray0[0] = (JavaType) mapType1;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      javaTypeArray0[7] = (JavaType) simpleType0;
      Class<Boolean> class3 = Boolean.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3]);
      MapType mapType2 = MapType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) mapType1, (JavaType) referenceType0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) mapType2);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Class<SimpleModule> class4 = SimpleModule.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, (TypeBindings) null);
      CollectionType collectionType2 = collectionType1.withValueHandler(resolvedRecursiveType0);
      CollectionLikeType collectionLikeType0 = collectionType2.withTypeHandler(javaTypeArray0[6]);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class5, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, (String) null);
      ClassUtil.getRootCause(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.module.SimpleModule is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<BooleanNode> class2 = BooleanNode.class;
      Class<Long> class3 = Long.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      MapType mapType1 = mapType0.withKeyValueHandler(class0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType1, (JavaType[]) null, (JavaType) mapType1);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, false);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class4);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.primitiveType(class1);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      Class<String> class4 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling.shouldAllThrowIOExceptions();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GaQjC:Dv{Ps!o");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.primitiveType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ClassUtil.getDeclaredMethods(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", "Pg{<rn^", 1123);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("278l8wm3", "WV", hashMap0);
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("{t7", "Failed to find default constructor of class ");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // Failed to find default constructor of class 
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.hasClass(class1, class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.primitiveType(class3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      int[] intArray0 = new int[8];
      intArray0[0] = 389;
      intArray0[1] = (-2);
      intArray0[2] = 53;
      intArray0[3] = 2553;
      intArray0[4] = 3250;
      intArray0[5] = (-1615);
      intArray0[6] = (-1056);
      intArray0[7] = 785;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", intArray0);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", batchUpdateException0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class3, (Throwable) sQLDataException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0, (JavaType) simpleType0);
      Long long0 = new Long((-814L));
      MapType mapType1 = mapType0.withContentValueHandler(long0);
      MapType mapType2 = mapType1.withKeyValueHandler(collectionLikeType0);
      MapLikeType mapLikeType0 = mapType2.withContentValueHandler(class2);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(mapType0);
      ClassUtil.rawClass(mapLikeType1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<AccessPattern> class0 = AccessPattern.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException("java.lang.Float", class0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.String`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getClassDescription(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = false;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getOuterClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@{jb'!pzhm;oxk!R", sQLRecoverableException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("|f(@*U-N#*N", "@{jb'!pzhm;oxk!R", 2164, sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException("a_q%~qGJc5r.V", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): a_q%~qGJc5r.V
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Long long0 = new Long(0L);
      ClassUtil.nonNull((Long) null, long0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      sQLWarning0.getSuppressed();
      sQLWarning0.spliterator();
      sQLWarning0.fillInStackTrace();
      sQLWarning0.getStackTrace();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        sQLWarning0.printStackTrace((PrintWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassUtil.backticked("java.lang.Float");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredFields(class1);
      Class<String> class2 = String.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.hasEnclosingMethod(class1);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.isLocalType(class3, true);
      Class<Short> class4 = Short.class;
      Class<Long> class5 = Long.class;
      ClassUtil.findSuperTypes(class4, class5);
      ClassUtil.backticked("tq'p4`s");
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.findEnumType(class0);
      Boolean boolean0 = new Boolean((String) null);
      ClassUtil.hasClass(boolean0, class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.hasClass(class0, class1);
      ClassUtil classUtil0 = new ClassUtil();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("non-static member class", "non-static member class");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Cannot resolve ObjectId forward reference using property '%s' (of type %s): Bean not yet resolved", "Cannot resolve ObjectId forward reference using property '%s' (of type %s): Bean not yet resolved", "non-static member class", 4765);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("|S%1Qifd", "net.sf.cglib.proxy.java.lang.RuntimeException", "net.sf.cglib.proxy.java.lang.RuntimeException", 4765);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1341);
      Class<?> class0 = ClassUtil.classOf(placeholderForType0);
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findConstructor(class1, true);
      Class<BooleanNode> class2 = BooleanNode.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ConfigOverrides configOverrides1 = new ConfigOverrides();
      ConfigOverrides configOverrides2 = configOverrides1.copy();
      configOverrides2.getDefaultMergeable();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null, "net.sf.cglib.proxy.java.lang.Character");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // net.sf.cglib.proxy.java.lang.Character
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.nonNullString("");
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.backticked("no int/Int-argument constructor/factory method to deserialize from Number value (%s)");
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.hasClass(object0, class0);
      ClassUtil classUtil0 = new ClassUtil();
      SQLWarning sQLWarning0 = new SQLWarning("no int/Int-argument constructor/factory method to deserialize from Number value (%s)", (String) null, (-1946));
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "`no int/Int-argument constructor/factory method to deserialize from Number value (%s)`");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `no int/Int-argument constructor/factory method to deserialize from Number value (%s)`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findEnumType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
//      try { 
        ClassUtil.findConstructor(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.primitiveType(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)62;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)18;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)62, (byte)18}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1);
      
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getSuppressed();
      sQLRecoverableException0.printStackTrace();
      sQLRecoverableException0.getLocalizedMessage();
      sQLRecoverableException0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      assertNotNull(iOException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertNotNull(class1);
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasClass(class1, class2);
      assertFalse(boolean0);
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      String string0 = ClassUtil.nonNullString("V*#`(bYvA");
      assertNotNull(string0);
      assertEquals("V*#`(bYvA", string0);
      
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = ClassUtil.nonNull(noClass0, (NoClass) null);
      assertNotNull(noClass1);
      assertSame(noClass1, noClass0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean0 = ClassUtil.hasClass(class0, (Class<?>) null);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.core", string0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      String string1 = ClassUtil.isLocalType(class1, false);
      assertNull(string1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) classUtil0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class4);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      assertSame(class4, class0);
      
      boolean boolean2 = ClassUtil.isConcrete(class1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertSame(class0, class4);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      assertSame(class0, class4);
      
      String string2 = ClassUtil.getClassDescription(class2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`java.lang.RuntimeException`", string2);
      
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ClassUtil.backticked("no int/Int-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(string0);
      assertEquals("`no int/Int-argument constructor/factory method to deserialize from Number value (%s)`", string0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(4, constructor1.getModifiers());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor1);
      assertTrue(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(4, constructor1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      
      Class<String> class1 = String.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      String string0 = ClassUtil.getClassDescription(iterator0);
      assertNotNull(string0);
      assertEquals("`java.util.Collections$EmptyIterator`", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      System.setCurrentTimeMillis(1L);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.String()", constructor1.toString());
      
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.String()", constructor1.toString());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertEquals("char", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      assertEquals("char", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      assertEquals("char", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class1);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals("char", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(list1.isEmpty());
      assertEquals(6, list1.size());
      assertNotSame(list1, list0);
      
      String string0 = ClassUtil.canBeABeanType(class3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      boolean boolean0 = ClassUtil.hasClass("[uH<3W*-", class0);
      assertFalse(boolean0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("j:\\Fwer]o0v=:cS9");
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.toString());
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isFloat());
      
      boolean boolean2 = booleanNode0.isNull();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isFloat());
      
      MissingNode missingNode0 = (MissingNode)booleanNode0.findPath("j:\\Fwer]o0v=:cS9");
      assertNotNull(missingNode0);
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertTrue(missingNode0.isMissingNode());
      
      double double0 = booleanNode0.asDouble();
      assertEquals(0.0, double0, 0.01);
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals("false", booleanNode0.asText());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isFloat());
      
      boolean boolean3 = ClassUtil.hasClass(defaultDeserializationContext_Impl0, class0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      String string1 = ClassUtil.getPackageName(class0);
      assertNull(string1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bLyz");
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", problem: ", "H");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(", problem: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("H", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , problem: ", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("bLyz", (String) null, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(", problem: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("H", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , problem: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: bLyz", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("bLyz", sQLNonTransientConnectionException0.getMessage());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientConnectionException0);
      assertNotNull(mockRuntimeException0);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(": latter is not a subtype of former");
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertNotNull(mockRuntimeException1);
      
      RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException1);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertFalse(runtimeException0.equals((Object)mockRuntimeException1));
      assertNotNull(runtimeException0);
      assertEquals(", problem: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("H", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: , problem: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: bLyz", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("bLyz", sQLNonTransientConnectionException0.getMessage());
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, runtimeException0);
      assertNotSame(mockRuntimeException1, runtimeException0);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertNotSame(runtimeException0, mockRuntimeException1);
      assertSame(runtimeException0, mockRuntimeException0);
      
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute("TA0majY3(?joS==", runtimeException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<Character> class2 = Character.TYPE;
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class2);
      assertNotNull(list0);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = ClassUtil.isProxyType(class3);
      assertFalse(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(4, methodArray0.length);
      
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = ClassUtil.nonNull(noClass0, noClass0);
      assertNotNull(noClass1);
      assertSame(noClass1, noClass0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      assertNotNull(iOException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertNotNull(class1);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasClass(class1, class2);
      assertFalse(boolean0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      
      String string0 = ClassUtil.nonNullString("V*#](bYSA");
      assertNotNull(string0);
      assertEquals("V*#](bYSA", string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Character", "V*#](bYSA", (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("V*#](bYSA", "net.sf.cglib.proxy.java.lang.Character", iOException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      assertEquals("V*#](bYSA", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: V*#](bYSA", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      Class<String> class3 = String.class;
      boolean boolean2 = ClassUtil.isBogusClass(class3);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<SimpleType> class4 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class4, class1);
      assertFalse(list0.contains(class1));
      assertNotNull(list0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class3);
      assertNotNull(fieldArray0);
      assertEquals(5, fieldArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException0.toString());
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.databind.node.ValueNode", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      String string0 = ClassUtil.backticked("no int/Int-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(string0);
      assertEquals("`no int/Int-argument constructor/factory method to deserialize from Number value (%s)`", string0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      Class<Object> class3 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class3);
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      
      Class<Long> class0 = Long.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.");
      assertFalse(boolean0);
      
//      try { 
        ClassUtil.findConstructor(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1341);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      
      Class<?> class0 = ClassUtil.classOf(placeholderForType0);
      assertNotNull(class0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals("class com.fasterxml.jackson.databind.type.PlaceholderForType", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, class0, true);
      assertNotNull(list0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals("class com.fasterxml.jackson.databind.type.PlaceholderForType", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<Void> class1 = Void.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      String string0 = ClassUtil.quotedOr(list0, (String) null);
      assertNotNull(string0);
      assertEquals("\"[]\"", string0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals("class com.fasterxml.jackson.databind.type.PlaceholderForType", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      Throwable throwable1 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-147));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertNull(sQLException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<Long> class0 = Long.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      assertNotNull(typeBindings0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      assertNotNull(referenceType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, typeBindings0, (Object) class0, (Object) class0);
      assertNotNull(arrayType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      
      Class<Float> class2 = Float.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType0, placeholderForType0);
      assertNotNull(collectionLikeType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);
      assertNotNull(objectReader0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      
      ObjectReader objectReader1 = objectReader0.withRootName("A7f ;\"s/^~/qJU#Q):O");
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader2 = objectReader1.withHandler(deserializationProblemHandler0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(typeFactory0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(typeFactory1);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      
      Class<LinkedList> class3 = LinkedList.class;
      // Undeclared exception!
//      try { 
        typeFactory1.constructRawCollectionType(class3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$748907243) return null for type [simple type, class java.lang.Object]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Integer> class1 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      Class<RuntimeException> class2 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(typeBindings0);
      assertNotNull(javaType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      javaTypeArray0[0] = javaType0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(698);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      
      // Undeclared exception!
//      try { 
        placeholderForType0.withStaticTyping();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = ClassUtil.nonNullString("V*#](bYSA");
      assertNotNull(string0);
      assertEquals("V*#](bYSA", string0);
      
      Class<Object> class0 = Object.class;
      String string1 = ClassUtil.isLocalType(class0, false);
      assertNull(string1);
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertNotNull(list0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean0 = ClassUtil.hasClass(class0, (Class<?>) null);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) classUtil0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class4);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      assertSame(class4, class0);
      
      boolean boolean2 = ClassUtil.isConcrete(class1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertSame(class0, class4);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      assertSame(class0, class4);
      
      String string1 = ClassUtil.getClassDescription(class2);
      assertNotNull(string1);
      assertEquals("`java.lang.RuntimeException`", string1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      assertNotNull(list0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      String string0 = ClassUtil.quotedOr(class0, (String) null);
      assertNotNull(string0);
      assertEquals("\"class java.io.IOException\"", string0);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      assertNotNull(iOException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasClass(class1, class2);
      assertFalse(boolean0);
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      String string0 = ClassUtil.nonNullString("V*#](bYSA");
      assertNotNull(string0);
      assertEquals("V*#](bYSA", string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Character", "V*#](bYSA", (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("V*#](bYSA", "net.sf.cglib.proxy.java.lang.Character", iOException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: V*#](bYSA", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("V*#](bYSA", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException1.getSQLState());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      Class<Double> class3 = Double.class;
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertFalse(list0.contains(class1));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("D!m{iBo%_1X[7Ukh", "D!m{iBo%_1X[7Ukh");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.toString());
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Failed to instantiate class ", "Failed to instantiate class ", sQLFeatureNotSupportedException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.toString());
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: Failed to instantiate class ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Failed to instantiate class ", sQLRecoverableException0.getMessage());
      assertEquals("Failed to instantiate class ", sQLRecoverableException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.toString());
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: Failed to instantiate class ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Failed to instantiate class ", sQLRecoverableException0.getMessage());
      assertEquals("Failed to instantiate class ", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D!m{iBo%_1X[7Ukh", sQLFeatureNotSupportedException1.toString());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      Class<CollectionType> class1 = CollectionType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor0 = classUtil_Ctor0.getConstructor();
      assertNull(constructor0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Jo@~");
      assertFalse(boolean0);
      
      NoClass noClass0 = ClassUtil.nonNull((NoClass) null, (NoClass) null);
      assertNull(noClass0);
      
      Class<Object> class0 = Object.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasClass("[uH<3W*-", class0);
      assertFalse(boolean0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("j:\\Fwer]o0v=:cS9");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException1.getMessage());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertEquals("false", booleanNode0.asText());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      
      MissingNode missingNode0 = (MissingNode)booleanNode0.findPath("j:\\Fwer]o0v=:cS9");
      assertNotNull(missingNode0);
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertEquals("false", booleanNode0.asText());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals("", missingNode0.toString());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isLong());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertTrue(missingNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isInt());
      
      double double0 = booleanNode0.asDouble();
      assertEquals(0.0, double0, 0.01);
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertEquals("false", booleanNode0.asText());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      
      boolean boolean2 = ClassUtil.hasClass(defaultDeserializationContext_Impl0, class0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      String string1 = ClassUtil.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.lang", string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      Class<SimpleModule> class0 = SimpleModule.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(resolvedRecursiveType0, (-453));
      assertNotNull(jsonMappingException_Reference0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals((-453), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals((-453), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      assertNotNull(throwable0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals((-453), jsonMappingException_Reference0.getIndex());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      assertNotNull(iOException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasClass(class1, class2);
      assertFalse(boolean0);
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      String string0 = ClassUtil.nonNullString("V*#](bYSA");
      assertNotNull(string0);
      assertEquals("V*#](bYSA", string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Character", "V*#](bYSA", (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("write a boolean value", sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: write a boolean value", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("write a boolean value", sQLNonTransientConnectionException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("write a boolean value", "net.sf.cglib.proxy.java.lang.Character", iOException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      assertEquals("write a boolean value", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: write a boolean value", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.toString());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      assertNotNull(iOException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      
      Class<?> class1 = ClassUtil.classOf(iOException0);
      assertNotNull(class1);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.io.IOException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      NoClass noClass0 = ClassUtil.nonNull((NoClass) null, (NoClass) null);
      assertNull(noClass0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.io.IOException`", string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateTimeInstance();
      assertNotNull(simpleDateFormat0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      
      ObjectMapper objectMapper3 = objectMapper2.setDateFormat(simpleDateFormat0);
      assertNotNull(objectMapper3);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper3.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy h:mm:ss a", simpleDateFormat0.toLocalizedPattern());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, iOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Iterator<AccessibleObject> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = ClassUtil.nullOrToString(iterator0);
      assertNotNull(string0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      assertNotNull(collectionLikeType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(defaultDeserializationContext_Impl0);
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertNotNull(collectionLikeType1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType1.isArrayType());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.isFinal());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(collectionLikeType1, class1);
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType1.isArrayType());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.isFinal());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.CollectionLikeType`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      assertNotNull(booleanNode0);
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isShort());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals("false", booleanNode0.asText());
      
      int int0 = (-866);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-866));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Character> class1 = Character.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      assertNotNull(arrayType0);
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-585));
      assertFalse(placeholderForType1.equals((Object)placeholderForType0));
      assertNotNull(placeholderForType1);
      assertFalse(placeholderForType1.isMapLikeType());
      assertEquals(0, placeholderForType1.containedTypeCount());
      assertFalse(placeholderForType1.hasHandlers());
      assertTrue(placeholderForType1.hasContentType());
      assertFalse(placeholderForType1.useStaticType());
      assertFalse(placeholderForType1.isInterface());
      assertFalse(placeholderForType1.isEnumType());
      assertFalse(placeholderForType1.isArrayType());
      assertFalse(placeholderForType1.isPrimitive());
      assertFalse(placeholderForType1.hasValueHandler());
      assertFalse(placeholderForType1.isCollectionLikeType());
      assertFalse(placeholderForType1.isContainerType());
      assertTrue(placeholderForType1.isConcrete());
      assertFalse(placeholderForType1.isFinal());
      assertTrue(placeholderForType1.isJavaLangObject());
      assertFalse(placeholderForType1.isAbstract());
      
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(placeholderForType1);
      assertFalse(placeholderForType1.equals((Object)placeholderForType0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(arrayType1);
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(placeholderForType1.isMapLikeType());
      assertEquals(0, placeholderForType1.containedTypeCount());
      assertFalse(placeholderForType1.hasHandlers());
      assertTrue(placeholderForType1.hasContentType());
      assertFalse(placeholderForType1.useStaticType());
      assertFalse(placeholderForType1.isInterface());
      assertFalse(placeholderForType1.isEnumType());
      assertFalse(placeholderForType1.isArrayType());
      assertFalse(placeholderForType1.isPrimitive());
      assertFalse(placeholderForType1.hasValueHandler());
      assertFalse(placeholderForType1.isCollectionLikeType());
      assertFalse(placeholderForType1.isContainerType());
      assertTrue(placeholderForType1.isConcrete());
      assertFalse(placeholderForType1.isFinal());
      assertTrue(placeholderForType1.isJavaLangObject());
      assertFalse(placeholderForType1.isAbstract());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasHandlers());
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(placeholderForType1, placeholderForType0);
      assertNotSame(arrayType1, arrayType0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string0 = "net.sf.cglib.proxy.java.lang.Character";
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "net.sf.cglib.proxy.java.lang.Character");
      assertFalse(placeholderForType0.equals((Object)placeholderForType1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(invalidTypeIdException0);
      assertNull(invalidTypeIdException0.getTypeId());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(placeholderForType0, placeholderForType1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      String string1 = "2s&X2";
      Class<Short> class2 = Short.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("2s&X2", class2, "keyType");
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(invalidFormatException0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) invalidFormatException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Short` from String \"2s&X2\": keyType
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      
      Class<String> class1 = String.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(placeholderForType0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", invalidTypeIdException0.getTypeId());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) invalidTypeIdException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType' as a subtype of $1: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-147));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertNull(sQLException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      String string0 = "keyUniverse";
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "java.lang.Double");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.Double
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<String> class1 = String.class;
      boolean boolean1 = ClassUtil.hasClass(class0, class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class2 = Object.class;
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertSame(class3, class2);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      boolean boolean3 = ClassUtil.hasClass(constructor1, class4);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertSame(class3, class2);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Integer`", string0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor1);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertEquals(2, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertEquals(2, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor1.getDeclaredAnnotations();
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertEquals(2, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Double> class1 = Double.class;
      JavaType javaType0 = null;
      Class<Error> class2 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, true);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(class0, class1);
      
      Class<String> class3 = String.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, (JavaType) null);
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      // Undeclared exception!
//      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing referencedType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.node.ValueNode", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      String string0 = ClassUtil.backticked("no int/Int-argument constructor/factory method to deserialize from Number value (%s)");
      assertNotNull(string0);
      assertEquals("`no int/Int-argument constructor/factory method to deserialize from Number value (%s)`", string0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-147));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertNull(sQLException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("keyType");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("keyType", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: keyType", sQLInvalidAuthorizationSpecException0.toString());
      
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      assertEquals("keyType", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: keyType", sQLInvalidAuthorizationSpecException0.toString());
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean0 = ClassUtil.hasClass(class0, (Class<?>) null);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) classUtil0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class4, class5);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertSame(class4, class0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "(@JsonValue serializer for method ");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("9T/]{HnZAvHX&/Dj", "g.'", hashMap0, jsonMappingException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("9T/]{HnZAvHX&/Dj", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: 9T/]{HnZAvHX&/Dj", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("g.'", sQLClientInfoException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[2~", "g.'", sQLClientInfoException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("g.'", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("[2~", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: [2~", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("9T/]{HnZAvHX&/Dj", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: 9T/]{HnZAvHX&/Dj", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("g.'", sQLClientInfoException0.getSQLState());
      
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (@JsonValue serializer for method 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("entrySet", (Throwable) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: entrySet", sQLSyntaxErrorException0.toString());
      assertEquals("entrySet", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: entrySet", sQLSyntaxErrorException0.toString());
      assertEquals("entrySet", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // entrySet
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Integer`", string0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.", sQLNonTransientConnectionException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.", sQLNonTransientConnectionException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("`java.lang.Integer`", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.", sQLNonTransientConnectionException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("`java.lang.Integer`", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: `java.lang.Integer`", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`java.lang.Integer`", "`java.lang.Integer`", (Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("`java.lang.Integer`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.Integer`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("`java.lang.Integer`", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("`java.lang.Integer`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.Integer`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("`java.lang.Integer`", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("`java.lang.Integer`", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("`java.lang.Integer`", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.Integer`", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // `java.lang.Integer`
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(5, classUtil_CtorArray0.length);
      
      Class<?> class2 = ClassUtil.classOf(list0);
      assertFalse(list0.contains(class2));
      assertNotNull(class2);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.util.ArrayList", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      assertNotNull(objectMapper2);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper2, byteArrayOutputStream0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      
      Class<Object> class3 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class3);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Error is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean0 = ClassUtil.hasClass(class0, (Class<?>) null);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) classUtil0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      String string1 = "B+4K";
      File file0 = MockFile.createTempFile("OLa3A&mZO(Orc)@Rqd/", "B+4K");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/OLa3A&mZO(Orc)@Rqd/0B+4K", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/OLa3A&mZO(Orc)@Rqd", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("0B+4K", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      assertNotNull(printStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/OLa3A&mZO(Orc)@Rqd/0B+4K", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/OLa3A&mZO(Orc)@Rqd", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(4L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("0B+4K", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((OutputStream) printStream0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/OLa3A&mZO(Orc)@Rqd/0B+4K", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/OLa3A&mZO(Orc)@Rqd", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(4L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("0B+4K", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(159, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      MockIOException mockIOException0 = new MockIOException(batchUpdateException0);
      assertNotNull(mockIOException0);
      
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3l*l;{4idL$Z1wqm");
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: 3l*l;{4idL$Z1wqm", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("3l*l;{4idL$Z1wqm", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfRTE(sQLDataException0);
      assertNotNull(sQLDataException1);
      assertEquals("java.sql.SQLDataException: 3l*l;{4idL$Z1wqm", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("3l*l;{4idL$Z1wqm", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("3l*l;{4idL$Z1wqm", sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: 3l*l;{4idL$Z1wqm", sQLDataException1.toString());
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<String> class1 = String.class;
      boolean boolean1 = ClassUtil.hasClass(class0, class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.nonNullString("V*#](bYSA");
      assertNotNull(string0);
      assertEquals("V*#](bYSA", string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Character", "V*#](bYSA", (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("keyUniverse", sQLTransactionRollbackException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("keyUniverse", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: keyUniverse", sQLNonTransientConnectionException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("V*#](bYSA", "net.sf.cglib.proxy.java.lang.Character", sQLNonTransientConnectionException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("keyUniverse", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: keyUniverse", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: V*#](bYSA", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("V*#](bYSA", sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("keyUniverse", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: keyUniverse", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: V*#](bYSA", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("V*#](bYSA", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.java.lang.Character", sQLTransactionRollbackException1.toString());
      assertEquals("V*#](bYSA", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "[uH<3W*-";
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasClass("[uH<3W*-", class0);
      assertFalse(boolean0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("j:\\Fwer]o0v=:cS9");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.toString());
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.toString());
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("j:\\Fwer]o0v=:cS9", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: j:\\Fwer]o0v=:cS9", sQLTransientConnectionException1.toString());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string1 = ClassUtil.classNameOf(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.Class`", string1);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-866));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertNotNull(arrayType0);
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-866));
      assertFalse(placeholderForType1.equals((Object)placeholderForType0));
      assertNotNull(placeholderForType1);
      assertFalse(placeholderForType1.isPrimitive());
      assertTrue(placeholderForType1.hasContentType());
      assertFalse(placeholderForType1.hasHandlers());
      assertFalse(placeholderForType1.isMapLikeType());
      assertFalse(placeholderForType1.isInterface());
      assertTrue(placeholderForType1.isConcrete());
      assertFalse(placeholderForType1.isContainerType());
      assertFalse(placeholderForType1.isFinal());
      assertFalse(placeholderForType1.isAbstract());
      assertTrue(placeholderForType1.isJavaLangObject());
      assertFalse(placeholderForType1.isCollectionLikeType());
      assertFalse(placeholderForType1.isEnumType());
      assertFalse(placeholderForType1.hasValueHandler());
      assertFalse(placeholderForType1.useStaticType());
      assertEquals(0, placeholderForType1.containedTypeCount());
      assertFalse(placeholderForType1.isArrayType());
      
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(placeholderForType1);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(placeholderForType1.equals((Object)placeholderForType0));
      assertNotNull(arrayType1);
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.useStaticType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(placeholderForType1.isPrimitive());
      assertTrue(placeholderForType1.hasContentType());
      assertFalse(placeholderForType1.hasHandlers());
      assertFalse(placeholderForType1.isMapLikeType());
      assertFalse(placeholderForType1.isInterface());
      assertTrue(placeholderForType1.isConcrete());
      assertFalse(placeholderForType1.isContainerType());
      assertFalse(placeholderForType1.isFinal());
      assertFalse(placeholderForType1.isAbstract());
      assertTrue(placeholderForType1.isJavaLangObject());
      assertFalse(placeholderForType1.isCollectionLikeType());
      assertFalse(placeholderForType1.isEnumType());
      assertFalse(placeholderForType1.hasValueHandler());
      assertFalse(placeholderForType1.useStaticType());
      assertEquals(0, placeholderForType1.containedTypeCount());
      assertFalse(placeholderForType1.isArrayType());
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(placeholderForType1, placeholderForType0);
      
      // Undeclared exception!
//      try { 
        placeholderForType0.withTypeHandler(arrayType1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      String string0 = "keyUniverse";
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "keyUniverse");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.setAttribute((Object) null, class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, accessPattern0, "com.fasterxml.jackson.databind.KeyDeserializer$None");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class com.fasterxml.jackson.databind.util.AccessPattern (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'com.fasterxml.jackson.databind.KeyDeserializer$None'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(5, classUtil_CtorArray0.length);
      
      Class<?> class2 = ClassUtil.classOf(list0);
      assertFalse(list0.contains(class2));
      assertNotNull(class2);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.util.ArrayList", class2.toString());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      assertNotNull(objectMapper2);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper2, byteArrayOutputStream0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      
      Exception exception0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-147));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      
      String string0 = ClassUtil.nullOrToString(placeholderForType0);
      assertNotNull(string0);
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Throwable throwable0 = null;
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      MockError mockError0 = new MockError(sQLWarning0);
      assertNotNull(mockError0);
      
      String string0 = "TT8C? 91}!GjlHU)gd";
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "TT8C? 91}!GjlHU)gd");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      String string0 = ClassUtil.nameOf(class1);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.PlaceholderForType`", string0);
      
      Class<Short> class2 = Short.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Long> class3 = Long.class;
      boolean boolean2 = ClassUtil.isBogusClass(class3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(class3, class0);
      
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R~Ht\"=.", "%7M-.,hzE=pv", (-1365));
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: R~Ht\"=.", sQLNonTransientConnectionException0.toString());
      assertEquals("R~Ht\"=.", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1365), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("%7M-.,hzE=pv", sQLNonTransientConnectionException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R~Ht\"=.", ".f[hI5iKH<+", 0, sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: R~Ht\"=.", sQLNonTransientConnectionException0.toString());
      assertEquals("R~Ht\"=.", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1365), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("%7M-.,hzE=pv", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: R~Ht\"=.", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("R~Ht\"=.", sQLSyntaxErrorException0.getMessage());
      assertEquals(".f[hI5iKH<+", sQLSyntaxErrorException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(".f[hI5iKH<+", "R~Ht\"=.", sQLSyntaxErrorException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: R~Ht\"=.", sQLNonTransientConnectionException0.toString());
      assertEquals("R~Ht\"=.", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1365), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("%7M-.,hzE=pv", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: R~Ht\"=.", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("R~Ht\"=.", sQLSyntaxErrorException0.getMessage());
      assertEquals(".f[hI5iKH<+", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(".f[hI5iKH<+", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: .f[hI5iKH<+", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("R~Ht\"=.", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("java.sql.SQLNonTransientConnectionException: R~Ht\"=.", sQLNonTransientConnectionException0.toString());
      assertEquals("R~Ht\"=.", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1365), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("%7M-.,hzE=pv", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: R~Ht\"=.", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("R~Ht\"=.", sQLSyntaxErrorException0.getMessage());
      assertEquals(".f[hI5iKH<+", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(".f[hI5iKH<+", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: .f[hI5iKH<+", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("R~Ht\"=.", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("%7M-.,hzE=pv", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: R~Ht\"=.", sQLNonTransientConnectionException1.toString());
      assertEquals((-1365), sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("R~Ht\"=.", sQLNonTransientConnectionException1.getMessage());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'c';
      charArray0[2] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(charArray0, 0, (-2));
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertArrayEquals(new char[] {'P', 'c', 'j'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(3, charArray0.length);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8209, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLInvalidAuthorizationSpecException: .f[hI5iKH<+
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = false;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Constructor<Double> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(3, methodArray0.length);
      
      Class<Integer> class3 = Integer.class;
      boolean boolean1 = ClassUtil.isBogusClass(class3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Short> class4 = Short.class;
      Class<RuntimeException> class5 = RuntimeException.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class4, class5);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.SimpleType", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockThrowable mockThrowable0 = new MockThrowable("x<A|q0a");
      assertNotNull(mockThrowable0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("x<A|q0a", mockThrowable0);
      assertNotNull(sQLTransientException0);
      assertEquals("x<A|q0a", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: x<A|q0a", mockThrowable0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("x<A|q0a", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: x<A|q0a", sQLTransientException0.toString());
      
      MockError mockError0 = new MockError("x<A|q0a", sQLTransientException0);
      assertNotNull(mockError0);
      
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.setAttribute(mockError0, sQLTransientException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = ClassUtil.backticked("!");
      assertNotNull(string0);
      assertEquals("`!`", string0);
      
      Class<ArrayType> class0 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean0 = false;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = null;
      String string1 = "net.sf.cglib.proxy.";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SerializerProvider serializerProvider0 = null;
      String string2 = "serialVersionUID";
      // Undeclared exception!
//      try { 
        JsonMappingException.from((SerializerProvider) null, "serialVersionUID");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";%3");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ;%3", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(";%3", sQLInvalidAuthorizationSpecException0.getMessage());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Character> class0 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Character is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      
      String string0 = "[null]";
      int int0 = (-1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("size", "[null]", (-1));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("[null]", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: size", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("size", sQLInvalidAuthorizationSpecException0.getMessage());
      
      CharArrayWriter charArrayWriter0 = null;
//      try {
        charArrayWriter0 = new CharArrayWriter((-1117));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative initial size: -1117
//         //
//         verifyException("java.io.CharArrayWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Boolean> class1 = Boolean.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Boolean has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean0 = ClassUtil.hasClass(class0, (Class<?>) null);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) classUtil0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class4);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      assertSame(class4, class0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.core.JsonProcessingException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isBigDecimal());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertEquals("false", booleanNode0.asText());
      
      double double0 = booleanNode0.asDouble();
      assertEquals(0.0, double0, 0.01);
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isBigDecimal());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertEquals("false", booleanNode0.asText());
      
      Class<Float> class1 = Float.class;
      boolean boolean1 = ClassUtil.hasClass(booleanNode0, class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isBigDecimal());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertEquals("false", booleanNode0.asText());
      
      Class<IOException> class2 = IOException.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class2);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = "net.sf.cglib.proxy.";
      String string1 = "1,(HTC*()Ghc>";
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("net.sf.cglib.proxy.", "1,(HTC*()Ghc>");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 1,(HTC*()Ghc>
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasClass("Vwf)0+", class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class<Character> class2 = Character.TYPE;
      assertFalse(class2.equals((Object)class0));
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotSame(class2, class0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      assertFalse(list0.contains(class1));
      assertFalse(class0.equals((Object)class2));
      assertNotNull(list0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(class0, class2);
      
      Class<Annotation> class3 = Annotation.class;
      Class<MapType> class4 = MapType.class;
      boolean boolean0 = ClassUtil.isProxyType(class4);
      assertFalse(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertFalse(class0.equals((Object)class2));
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotSame(class0, class2);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertFalse(class0.equals((Object)class2));
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      assertNotSame(class0, class2);
      
      Class<ArrayType> class5 = ArrayType.class;
      boolean boolean1 = ClassUtil.isBogusClass(class5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, class3);
      assertFalse(list1.contains(class1));
      assertFalse(class0.equals((Object)class2));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(class0, class2);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      String string0 = "P%A#";
      SQLDataException sQLDataException0 = new SQLDataException("P%A#");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      sQLSyntaxErrorException0.fillInStackTrace();
      sQLSyntaxErrorException0.printStackTrace();
      sQLDataException0.addSuppressed(sQLSyntaxErrorException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, byte0, "P%A#");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      Class<String> class4 = String.class;
      classArray0[3] = class4;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }
}
