/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:23:37 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
//      try { 
        ClassUtil.createInstance(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, enumSet0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-6), objectMapper1, (OutputStream) null, byteArray0, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("net.sf.cglib.proxy.", hashMap0, sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "org.hibernate.proxy.com.fasterxml.jackson.core.io.IOContext", sQLClientInfoException1);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.classOf(object0);
      Class<IntNode> class1 = IntNode.class;
      ClassUtil.findConstructor(class1, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isConcrete(class1);
      Class<Module> class2 = Module.class;
//      try { 
        ClassUtil.createInstance(class2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes(class1, (Class<?>) null);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.backticked("[creator property, name '");
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      Float float0 = new Float(0.0F);
      ClassUtil.verifyMustOverride(class0, float0, "org.hibernate.proxy.java.lang.RuntimeException");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) stringWriter0, (Exception) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isJacksonStdImpl(class0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unknown");
      ClassUtil.isBogusClass(class2);
      ClassUtil.getClassDescription(class0);
      System.setCurrentTimeMillis((byte)55);
      ClassUtil.isBogusClass(class1);
      System.setCurrentTimeMillis((byte)55);
      Class<Short> class3 = Short.class;
      ClassUtil.isCollectionMapOrArray(class3);
      MockError mockError0 = new MockError();
      Throwable throwable0 = mockError0.fillInStackTrace();
      mockError0.initCause(throwable0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, ":=JXL%&qT@_o2");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, objectMapper0, pipedOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockIOException mockIOException0 = new MockIOException(sQLRecoverableException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, (String) null);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NULL
//         //  at [Source: UNKNOWN; line: -1, column: -1]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nameOf(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.canBeABeanType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      Class<Double> class0 = Double.class;
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonEncoding0);
      HashMap<AccessPattern, AccessibleObject> hashMap0 = new HashMap<AccessPattern, AccessibleObject>();
      objectReader0.withAttributes(hashMap0);
      String string0 = "+~71Y#SC^@Z*slI";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("+~71Y#SC^@Z*slI", "JSON");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // JSON
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      typeFactory0.constructRawCollectionType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", (String) null, 0, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLWarning0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isConcrete(class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      annotationIntrospector1.hasAnySetter((Annotated) null);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapType> class0 = MapType.class;
      List<Class<?>> list0 = new Vector<Class<IOException>>();
      ClassUtil.getDeclaredFields(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("}Cg;", "com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("}Cg;", sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.Void");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      enumSet1.add(accessPattern2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EnumSet.complementOf(enumSet1);
      ClassUtil.findEnumType(enumSet1);
      ClassUtil.classOf(accessPattern1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<LinkedList> class1 = LinkedList.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      typeFactory0.constructRawCollectionType(class1);
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal((-3613));
      Class<Void> class0 = Void.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "u`{O0[whu8Bt:;zn");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "w[S>h33pfy+&rbs}Q?");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // w[S>h33pfy+&rbs}Q?
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "st0EkW");
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      EnumSet<AccessPattern> enumSet2 = EnumSet.complementOf(enumSet1);
      ClassUtil.findEnumType(enumSet2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.setNextException(sQLIntegrityConstraintViolationException1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.java.lang.Byte", "net.sf.cglib.proxy.java.lang.Byte", (int[]) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "Cannot handle managed/back reference '%s': type: container deserializer of type %s returned null for 'getContentDeserializer()'");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<Boolean>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory2.constructRawCollectionType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, true);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "com.fasterxml.jackso";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackso", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      ObjectReader objectReader1 = objectReader0.with((JsonNodeFactory) null);
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackso");
      objectReader1.withRootName(propertyName0);
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("com.fasterxml.jackso", "com.fasterxml.jackso");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // com.fasterxml.jackso
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasClass(placeholderForType0, class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      Class<Character> class0 = Character.class;
      Class<Byte> class1 = Byte.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      MapType mapType2 = mapType1.withTypeHandler(class0);
      MapType mapType3 = mapType2.withContentTypeHandler(mapType0);
      MapLikeType mapLikeType0 = mapType3.withContentTypeHandler(class0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, true);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("org.hibernate.proxy.java.sql.ClientInfoStatus");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(90);
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      TypeBindings typeBindings0 = TypeBindings.create(class1, list0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(referenceType0, "|+");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing type id when trying to resolve subtype of [reference type, class com.fasterxml.jackson.databind.util.AccessPattern<$91><$91>]: |+
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.getClassDescription(enumMap0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("qM:ZU{<", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile1, jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      mockFile1.renameTo(mockFile0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NULL", "org.hibernate.proxy.", 56319);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "; line: ", (Throwable) sQLNonTransientException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // ; line: 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf((-393805500));
      intNode0.isTextual();
      ClassUtil.getClassDescription(intNode0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      Class<Error> class1 = Error.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`com.fasterxml.jackson.databind.node.IntNode`");
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.isConcrete(class1);
      ClassUtil.emptyIterator();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getPackageName(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.findConstructor(class3, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.hasClass(constructor0, class0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.printStackTrace();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-123);
      jsonFactory0.createParser(byteArray0);
      MockFile mockFile0 = new MockFile("qM:ZU{<", "");
      MockFile mockFile1 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NULL", "org.hibernate.proxy.java.lang.Double", 2459);
      ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.Long");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.java.lang.Long");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Character character0 = new Character('a');
      ClassUtil.isJacksonStdImpl((Object) character0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class1);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<IntNode> class2 = IntNode.class;
      Class<Byte> class3 = Byte.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.hasClass(list0, class4);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf((Named) null);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.classNameOf(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      Class<Long> class2 = Long.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      Float float0 = new Float(0.0F);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(float0);
      CollectionType collectionType2 = collectionType1.withValueHandler(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, (TypeBindings) null);
      CollectionType collectionType3 = collectionType2.withTypeHandler(resolvedRecursiveType0);
      ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class2, false);
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (RuntimeException) null);
      ClassUtil.findEnumType(enumMap0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Double is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "pX@!&2bpy!Lc.CQI");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", class0, (String) null);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from String \"net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException\": null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.isProxyType(class0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, false);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class0, class3, false);
      PropertyName propertyName0 = PropertyName.construct("");
      Class<AccessibleObject> class4 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "", resolvedRecursiveType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, resolvedRecursiveType0, propertyName0, annotatedField0, propertyMetadata0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1151);
      placeholderForType0.actualType();
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, (JavaType) null);
      ClassUtil.nameOf((Named) beanProperty_Std1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1106);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "JSON");
      assertNotNull(invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertNull(invalidTypeIdException0.getTypeId());
      
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, (OutputStream) null, byteArray0, (byte)60, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      MockException mockException0 = new MockException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) mockException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)18;
      jsonFactory0.createParser(byteArray0);
      jsonFactory0.createParser("JSON");
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      jsonFactory3.createNonBlockingByteArrayParser();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockFileWriter0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLRecoverableException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLRecoverableException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      sQLIntegrityConstraintViolationException0.initCause(mockRuntimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNull((String) null, "Z{7'z*_Z#XO>Woa4%");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      MockException mockException0 = new MockException("com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) mockException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassUtil.nonNull("ovCea0zwJqT;G}+d", "ovCea0zwJqT;G}+d");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.TYPE;
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.isBogusClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializerModifiers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, " is not a primitive type");
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.String` from number 10:  is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findConstructor(class0, true);
      boolean boolean1 = new Boolean(false);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("qM:ZU{<", "");
      MockFile mockFile1 = new MockFile(mockFile0, "`e-3 Q");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile1, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NULL", "org.hibernate.proxy.java.lang.Double", 2459);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "; line: ", (Throwable) sQLNonTransientException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // ; line: 
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getClassDescription(iterator0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.createInstance(class1, true);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[0];
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, annotationMap0, annotationMapArray0);
      AnnotatedParameter annotatedParameter0 = annotatedConstructor0.getParameter(1067);
      Member member0 = annotatedParameter0.getMember();
      ClassUtil.checkAndFixAccess(member0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes(class0, class2, list0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      objectMapper1.configure(serializationFeature0, true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('w');
      charArrayWriter1.append((CharSequence) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Boolean boolean0 = new Boolean((String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, boolean0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 256, objectMapper0, charArrayWriter1);
      SQLException sQLException0 = new SQLException((String) null, "M&CRMS ", 1);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("non-static member class");
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassUtil.nonNull((String) null, (String) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      ClassUtil.nullOrToString(sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.", "org.hibernate.proxy.java.lang.Long", (-1744674775));
      Class<Long> class0 = Long.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      Class<SimpleType> class1 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      stack0.add(javaType0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType1.getSelfReferencedType();
      ClassUtil.rawClass((JavaType) null);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.core.io.SegmentedStringWriter", (String) null, (Throwable) null);
      ClassUtil.nullOrToString((Object) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "0", 863);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getPackageName(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.java.lang.Long", "org.hibernate.proxy.java.lang.Long", (Throwable) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isProxyType(class0);
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[5];
      intArray0[0] = 5950;
      intArray0[1] = 1536;
      intArray0[2] = (-1);
      intArray0[3] = (-1657472572);
      intArray0[4] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("]M=%=K", intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("63p-k?aQ");
      sQLNonTransientException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      batchUpdateException0.setNextException(sQLDataException0);
      ClassUtil.getRootCause(batchUpdateException0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Long> class0 = Long.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isObjectOrPrimitive(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.nameOf(class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.hasEnclosingMethod(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.isLocalType(class3, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NULL", "J|aR}GH'h__Te*4");
      sQLTransactionRollbackException0.fillInStackTrace();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      referenceType0.withStaticTyping();
      Class<Object> class1 = Object.class;
      IntNode intNode0 = IntNode.valueOf((-1004));
      referenceType0.withContentValueHandler(intNode0);
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class1, false);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Short> class0 = Short.class;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig1.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      String string0 = "Value returned by 'any-getter' %s() not java.util.Map but %s";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl1, "Value returned by 'any-getter' %s() not java.util.Map but %s");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Value returned by 'any-getter' %s() not java.util.Map but %s
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-951));
      coreXMLDeserializers_Std0.getValueType();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      ClassUtil.isJacksonStdImpl((Object) coreXMLDeserializers_Std0);
      Class<Character> class2 = Character.class;
//      try { 
        ClassUtil.createInstance(class2, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Character has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IntNode.valueOf((-1496));
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      Long long0 = new Long(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|G&(!:Cr<");
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withDeserializerModifier(beanDeserializerModifier1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertNotNull(deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig1.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig2));
      assertNotNull(deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig3.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig3.hasDeserializers());
      assertFalse(deserializerFactoryConfig3.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig3.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig3.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig3));
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig3);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig3));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      ClassUtil.getClassDescription((Object) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      ClassUtil.getClassDescription(stdKeyDeserializers0);
      Class<Long> class0 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = ClassUtil.nonNull((String) null, (String) null);
      assertNull(string0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-1561), false, false, (-1561), (-1561));
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, dataTruncation0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("non-static member class", "Iyi:*rx)~R31-", (-137), sQLRecoverableException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("Iyi:*rx)~R31-", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: non-static member class", sQLTimeoutException0.toString());
      assertEquals("non-static member class", sQLTimeoutException0.getMessage());
      assertEquals((-137), sQLTimeoutException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9b?lO(/R", "Failed to instantiate class ", (-137), sQLTimeoutException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("Iyi:*rx)~R31-", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: non-static member class", sQLTimeoutException0.toString());
      assertEquals("non-static member class", sQLTimeoutException0.getMessage());
      assertEquals((-137), sQLTimeoutException0.getErrorCode());
      assertEquals("9b?lO(/R", sQLNonTransientConnectionException0.getMessage());
      assertEquals("Failed to instantiate class ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: 9b?lO(/R", sQLNonTransientConnectionException0.toString());
      assertEquals((-137), sQLNonTransientConnectionException0.getErrorCode());
      
      String string1 = sQLNonTransientConnectionException0.getLocalizedMessage();
      assertNotNull(string1);
      assertEquals("9b?lO(/R", string1);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("Iyi:*rx)~R31-", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: non-static member class", sQLTimeoutException0.toString());
      assertEquals("non-static member class", sQLTimeoutException0.getMessage());
      assertEquals((-137), sQLTimeoutException0.getErrorCode());
      assertEquals("9b?lO(/R", sQLNonTransientConnectionException0.getMessage());
      assertEquals("Failed to instantiate class ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: 9b?lO(/R", sQLNonTransientConnectionException0.toString());
      assertEquals((-137), sQLNonTransientConnectionException0.getErrorCode());
      
      DataTruncation dataTruncation1 = (DataTruncation)ClassUtil.throwIfError(dataTruncation0);
      assertNotNull(dataTruncation1);
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(dataTruncation1, dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      
      String string2 = ClassUtil.getClassDescription(sQLTimeoutException0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(dataTruncation0, dataTruncation1);
      assertEquals("`java.sql.SQLTimeoutException`", string2);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("Iyi:*rx)~R31-", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: non-static member class", sQLTimeoutException0.toString());
      assertEquals("non-static member class", sQLTimeoutException0.getMessage());
      assertEquals((-137), sQLTimeoutException0.getErrorCode());
      
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-1743199137), false, false, (-4), 8);
      assertNotNull(dataTruncation0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[WCqq^)$vPuO.(^", "[WCqq^)$vPuO.(^", (Throwable) null);
      assertNotNull(sQLRecoverableException0);
      assertEquals("[WCqq^)$vPuO.(^", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("[WCqq^)$vPuO.(^", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: [WCqq^)$vPuO.(^", sQLRecoverableException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = sQLRecoverableException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("[WCqq^)$vPuO.(^", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("[WCqq^)$vPuO.(^", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: [WCqq^)$vPuO.(^", sQLRecoverableException0.toString());
      
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.backticked("[WCqq^)$vPuO.(^");
      assertNotNull(string0);
      assertEquals("`[WCqq^)$vPuO.(^`", string0);
      
      String string1 = ClassUtil.getClassDescription((Object) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("unknown", string1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertSame(class2, class0);
      assertEquals(5, classUtil_CtorArray0.length);
      
      Class<?> class3 = ClassUtil.classOf("[null]");
      assertNotNull(class3);
      assertEquals(17, class3.getModifiers());
      assertEquals("class java.lang.String", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      
      Class<Integer> class4 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor0);
      
      Class<Object> class5 = Object.class;
      Class<NoClass> class6 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class5, class6, true);
      assertFalse(list0.contains(class3));
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.hasClass(character0, class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<?> class2 = ClassUtil.classOf(character0);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Character", class2.toString());
      assertFalse(class2.isAnnotation());
      
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<Character> class4 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class4, false);
      assertFalse(list0.contains(class2));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertNotNull(referenceType0);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(simpleType0);
      assertNotNull(referenceType1);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isAnchorType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      
      Class<Object> class1 = Object.class;
      IntNode intNode0 = IntNode.valueOf((-1004));
      assertNotNull(intNode0);
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-1004.0), intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short) (-1004), intNode0.shortValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1004L), intNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertEquals((-1004), intNode0.intValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals((-1004.0F), intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      
      ReferenceType referenceType2 = referenceType0.withContentValueHandler(intNode0);
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertNotNull(referenceType2);
      assertNotSame(referenceType0, referenceType2);
      assertSame(referenceType0, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-1004.0), intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short) (-1004), intNode0.shortValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1004L), intNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertEquals((-1004), intNode0.intValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals((-1004.0F), intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.useStaticType());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isAbstract());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class1, true);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertNotNull(list0);
      assertNotSame(referenceType0, referenceType2);
      assertSame(referenceType0, referenceType1);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Class<Object> class1 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Float float0 = new Float((-2020.3484058683637));
      assertNotNull(float0);
      assertEquals((-2020.3484F), (float)float0, 0.01F);
      
      Class<?> class2 = ClassUtil.classOf(float0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Float", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(17, class2.getModifiers());
      
      Type type0 = ClassUtil.getGenericSuperclass(class1);
      assertNull(type0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<CollectionType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<String> class0 = String.class;
      String string0 = ClassUtil.createInstance(class0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<Object> class1 = Object.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "pBaT}[gK*ws6");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.backticked("EYt?/[]m3*)I99D");
      assertNotNull(string0);
      assertEquals("`EYt?/[]m3*)I99D`", string0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      Class<Error> class3 = Error.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
//      try { 
        ClassUtil.createInstance(class4, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "R2/,");
      assertNotNull(string0);
      assertEquals("R2/,", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertNotNull(referenceType0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(simpleType0);
      assertNotNull(referenceType1);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType1, (Class<?>) class0, true);
      assertNotNull(list0);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(13, methodArray0.length);
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Double> class2 = Double.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertFalse(class2.equals((Object)class1));
      assertNotNull(class3);
      assertNotSame(class2, class1);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertEquals("double", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      
      Class<ArrayType> class4 = ArrayType.class;
      Class<IOException> class5 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class4, class5, true);
      assertFalse(list0.contains(class3));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = true;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Constructor<Annotation> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      Class<Long> class1 = Long.class;
      Class<NoClass> class2 = NoClass.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, class2);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      
      Class<Void> class3 = Void.class;
      ClassUtil.createInstance(class3, true);
      assertEquals(java.lang.Void@12d36b36, (Void)void0);
      
      String string0 = null;
      String string1 = ClassUtil.backticked((String) null);
      assertNotNull(string1);
      assertEquals("[null]", string1);
      
      String string2 = "Failed to find default constructor of class ";
      BufferedReader bufferedReader0 = null;
//      try {
        bufferedReader0 = new BufferedReader((Reader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Reader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<ArrayType> class1 = ArrayType.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Stack<Class<Float>> stack0 = new Stack<Class<Float>>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1106);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isContainerType());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "size");
      assertNotNull(invalidTypeIdException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isContainerType());
      assertNull(invalidTypeIdException0.getTypeId());
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
//      try { 
        ClassUtil.throwRootCauseIfIOE(invalidTypeIdException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Missing type id when trying to resolve subtype of $1107: size
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<CollectionType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = ClassUtil.nonNull(long0, long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      String string0 = ClassUtil.nullOrToString(long1);
      assertNotNull(string0);
      
      Iterator<Integer> iterator1 = ClassUtil.emptyIterator();
      assertNotNull(iterator1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      String string1 = ClassUtil.nonNull("java.lang.Long@0000000001", "java.lang.Long@0000000001");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string2 = ClassUtil.nonNullString("ZERO_LENGTH_ENUM_ARRAY");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", string2);
      
      Class<Character> class1 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float float0 = new Float((float) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Class<Boolean> class2 = Boolean.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      
      boolean boolean2 = ClassUtil.isConcrete(class0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertFalse(class2.isEnum());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("]w7", "]w7", (-1652333975));
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: ]w7", sQLNonTransientException0.toString());
      assertEquals("]w7", sQLNonTransientException0.getSQLState());
      assertEquals("]w7", sQLNonTransientException0.getMessage());
      assertEquals((-1652333975), sQLNonTransientException0.getErrorCode());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwIfRTE(sQLNonTransientException0);
      assertNotNull(sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: ]w7", sQLNonTransientException0.toString());
      assertEquals("]w7", sQLNonTransientException0.getSQLState());
      assertEquals("]w7", sQLNonTransientException0.getMessage());
      assertEquals((-1652333975), sQLNonTransientException0.getErrorCode());
      assertEquals("]w7", sQLNonTransientException1.getSQLState());
      assertEquals("]w7", sQLNonTransientException1.getMessage());
      assertEquals((-1652333975), sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: ]w7", sQLNonTransientException1.toString());
      
      Class<?> class3 = ClassUtil.primitiveType(class0);
      assertNull(class3);
      
      Class<AccessPattern> class4 = AccessPattern.class;
      Class<ArrayType> class5 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class4, class5, false);
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<CollectionType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = ClassUtil.nonNull(long0, long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      String string0 = ClassUtil.nullOrToString(long1);
      assertNotNull(string0);
      
      Iterator<Integer> iterator1 = ClassUtil.emptyIterator();
      assertNotNull(iterator1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      String string1 = ClassUtil.nonNull("java.lang.Long@0000000001", "java.lang.Long@0000000001");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string2 = ClassUtil.nonNullString("ZERO_LENGTH_ENUM_ARRAY");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", string2);
      
      Class<Character> class1 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float float0 = new Float((-2142.334F));
      assertNotNull(float0);
      assertEquals((-2142.334F), (float)float0, 0.01F);
      
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("char", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("entrySet");
      assertNotNull(string0);
      assertEquals("entrySet", string0);
      
      Class<Character> class0 = Character.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      assertSame(class1, class0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertSame(class0, class1);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (-1L));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      String string1 = ClassUtil.classNameOf((Object) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[null]", string1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNotNull(type0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.sql.ClientInfoStatus`", string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.nameOf(class0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.sql.ClientInfoStatus`", string1);
      
      Class<Object> class2 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class2);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<ArrayType> class1 = ArrayType.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<IOException> class3 = IOException.class;
      Class<?> class4 = ClassUtil.getDeclaringClass(class3);
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor0 = classUtil_Ctor0.getConstructor();
      assertNull(constructor0);
      
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(15, objectArray0.length);
      
      Class<?> class2 = ClassUtil.primitiveType(class0);
      assertNull(class2);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.quotedOr(class0, "1@V-zJRlR}A6m8<ao5");
      assertNotNull(string0);
      assertEquals("\"class java.lang.Long\"", string0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean1 = ClassUtil.hasClass(class0, class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"class java.lang.Long\"");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1@V-zJRlR}A6m8<ao5");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "1@V-zJRlR}A6m8<ao5");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // 1@V-zJRlR}A6m8<ao5
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = null;
      String string1 = ClassUtil.nonNull((String) null, (String) null);
      assertNull(string1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class1);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("t_yQOk|>b_");
      assertNotNull(string0);
      assertEquals("t_yQOk|>b_", string0);
      
      String string1 = ClassUtil.backticked("p<8)B2,UH Vj6HM^1*");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`p<8)B2,UH Vj6HM^1*`", string1);
      
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = ClassUtil.getPackageName(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("com.fasterxml.jackson.databind.annotation", string2);
      
      Integer integer0 = new Integer(481);
      assertNotNull(integer0);
      assertEquals(481, (int)integer0);
      
      String string3 = ClassUtil.quotedOr(integer0, "`p<8)B2,UH Vj6HM^1*`");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\"481\"", string3);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) integer0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<NoClass> class1 = NoClass.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      assertSame(class1, class0);
      
      Class<Object> class3 = Object.class;
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      assertNull(class2);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(">KU@h/0X8J", "serialVersionUID", (-1809238660), (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals(">KU@h/0X8J", sQLClientInfoException0.getMessage());
      assertEquals((-1809238660), sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: >KU@h/0X8J", sQLClientInfoException0.toString());
      assertEquals("serialVersionUID", sQLClientInfoException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor0 = classUtil_Ctor0.getConstructor();
      assertNull(constructor0);
      
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Boolean> class2 = Boolean.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      Class<?> class3 = ClassUtil.primitiveType(class0);
      assertNull(class3);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("hgJBA");
      assertNotNull(string0);
      assertEquals("hgJBA", string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      String string1 = ClassUtil.nameOf(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.RuntimeException`", string1);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      String string2 = constructor0.getName();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("java.lang.Object", string2);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      String string3 = ClassUtil.backticked("java.lang.Object");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("`java.lang.Object`", string3);
      
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<NoClass> class2 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("keyType");
      assertNotNull(string0);
      assertEquals("keyType", string0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Cay+iy0", "keyUniverse", 603, (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals("keyUniverse", sQLClientInfoException0.getSQLState());
      assertEquals("Cay+iy0", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Cay+iy0", sQLClientInfoException0.toString());
      assertEquals(603, sQLClientInfoException0.getErrorCode());
      
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0, "keyUniverse");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // keyUniverse
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[1];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      assertEquals(1, accessibleObjectArray0.length);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<NoClass> class1 = NoClass.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(17, methodArray0.length);
      
      Class<Annotation> class3 = Annotation.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor1);
      assertEquals(2, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      
      Annotation[] annotationArray1 = constructor1.getAnnotationsByType(class3);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertNotNull(annotationArray1);
      assertNotSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      assertEquals(2, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      
      Class<Annotation> class4 = Annotation.class;
      boolean boolean0 = constructor1.isAnnotationPresent(class4);
      assertSame(class4, class3);
      assertFalse(boolean0);
      assertEquals(2, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      
      Class<Integer> class5 = Integer.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class5);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Character> class6 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class6, class3, false);
      assertNotNull(list0);
      assertSame(class3, class4);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = false;
      String string0 = ClassUtil.nonNull("keyUniverse", "REGEX");
      assertNotNull(string0);
      assertEquals("keyUniverse", string0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<CollectionType> class1 = CollectionType.class;
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1653959476));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, (String) null);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(invalidTypeIdException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertNull(invalidTypeIdException0.getTypeId());
      
      InvalidTypeIdException invalidTypeIdException1 = (InvalidTypeIdException)ClassUtil.throwIfRTE(invalidTypeIdException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(invalidTypeIdException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(invalidTypeIdException0, invalidTypeIdException1);
      assertSame(invalidTypeIdException1, invalidTypeIdException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNull(invalidTypeIdException1.getTypeId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.hasClass(character0, class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<?> class2 = ClassUtil.classOf(character0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.Character", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      String string0 = ClassUtil.getPackageName(class3);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertFalse(class3.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      Class<CollectionType> class4 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class4, true);
      assertTrue(list0.contains(class2));
      assertNotNull(list0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.Character", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("vals", "K0iBPhGQN(<E9ZhWq17", (Map<String, ClientInfoStatus>) null, sQLRecoverableException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: vals", sQLClientInfoException0.toString());
      assertEquals("K0iBPhGQN(<E9ZhWq17", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("vals", sQLClientInfoException0.getMessage());
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      sQLClientInfoException0.addSuppressed(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: vals", sQLClientInfoException0.toString());
      assertEquals("K0iBPhGQN(<E9ZhWq17", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("vals", sQLClientInfoException0.getMessage());
      
      MockException mockException0 = new MockException("K0iBPhGQN(<E9ZhWq17", sQLClientInfoException0);
      assertNotNull(mockException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      MockException mockException1 = new MockException((String) null, sQLIntegrityConstraintViolationException0);
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotNull(mockException1);
      
      mockException1.printStackTrace();
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotSame(mockException1, mockException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string1 = mockException0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockException0.equals((Object)mockException1));
      assertNotNull(string1);
      assertNotSame(mockException0, mockException1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: K0iBPhGQN(<E9ZhWq17", string1);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: vals", sQLClientInfoException0.toString());
      assertEquals("K0iBPhGQN(<E9ZhWq17", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("vals", sQLClientInfoException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Class<Object> class5 = Object.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class5);
      assertNotNull(typeArray0);
      assertSame(class5, class1);
      assertEquals(0, typeArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "S_v%L~VPrE-*6x_c@@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // S_v%L~VPrE-*6x_c@@
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean0 = false;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException", sQLNonTransientConnectionException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "com.fasterxml.jackson.databind.introspect.AnnotatedMember", sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotatedMember", sQLSyntaxErrorException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.introspect.AnnotatedMember", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        sQLSyntaxErrorException0.printStackTrace((PrintStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      int int0 = 1536;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "org.hibernate.proxy.java.lang.Long", 1536);
      assertNotNull(sQLRecoverableException0);
      assertEquals(1536, sQLRecoverableException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.Long", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: com.fasterxml.jackson.core.filter.FilteringParserDelegate", sQLRecoverableException0.toString());
      assertEquals("com.fasterxml.jackson.core.filter.FilteringParserDelegate", sQLRecoverableException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertEquals(1536, sQLRecoverableException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.Long", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: com.fasterxml.jackson.core.filter.FilteringParserDelegate", sQLRecoverableException0.toString());
      assertEquals("com.fasterxml.jackson.core.filter.FilteringParserDelegate", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: com.fasterxml.jackson.core.filter.FilteringParserDelegate", sQLRecoverableException1.toString());
      assertEquals(1536, sQLRecoverableException1.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.Long", sQLRecoverableException1.getSQLState());
      assertEquals("com.fasterxml.jackson.core.filter.FilteringParserDelegate", sQLRecoverableException1.getMessage());
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<SimpleType> class1 = SimpleType.class;
      Class<Character> class2 = Character.class;
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[5] = null;
      // Undeclared exception!
//      try { 
        TypeBindings.create(class0, javaTypeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class java.lang.Character with 6 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Long> class2 = Long.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertEquals(6, list1.size());
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      mockRuntimeException0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = mockRuntimeException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      MockThrowable mockThrowable0 = new MockThrowable("entrySet");
      assertNotNull(mockThrowable0);
      
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals("entrySet", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: entrySet", mockThrowable0.toString());
      
      Throwable throwable0 = mockRuntimeException0.initCause(mockThrowable0);
      assertFalse(throwable0.equals((Object)mockThrowable0));
      assertNotNull(throwable0);
      assertNotSame(mockThrowable0, throwable0);
      assertNotSame(throwable0, mockThrowable0);
      assertEquals("entrySet", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: entrySet", mockThrowable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      
      String string0 = mockRuntimeException0.toString();
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      
      String string1 = mockRuntimeException0.toString();
      assertNotNull(string1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string1);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "a");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // a
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean1 = true;
      AccessibleObject accessibleObject0 = ClassUtil.createInstance(class1, true);
      assertNotNull(accessibleObject0);
      assertFalse(accessibleObject0.isAccessible());
      
      accessibleObject0.setAccessible(false);
      assertFalse(accessibleObject0.isAccessible());
      
      Class<?> class2 = ClassUtil.classOf(accessibleObject0);
      assertNotNull(class2);
      assertFalse(accessibleObject0.isAccessible());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.reflect.AccessibleObject", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isArray());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertFalse(list0.contains(class2));
      assertNotNull(list0);
      assertFalse(accessibleObject0.isAccessible());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.reflect.AccessibleObject", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isArray());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Object> class3 = Object.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Class<Error> class5 = Error.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class5);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      String string0 = ClassUtil.nameOf(class5);
      assertNotNull(string0);
      assertEquals("`java.lang.Error`", string0);
      
      Class<NoClass> class6 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class6, true);
      assertNotNull(constructor0);
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Integer> class7 = Integer.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class7, class3, list0);
      assertFalse(list1.contains(class2));
      assertFalse(list0.contains(class2));
      assertNotNull(list1);
      assertSame(list1, list0);
      assertSame(list0, list1);
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertFalse(accessibleObject0.isAccessible());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.reflect.AccessibleObject", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      SQLException sQLException0 = new SQLException("[null]");
      assertNotNull(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: [null]", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("[null]", sQLException0.getMessage());
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfError(sQLException0);
      assertNotNull(sQLException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: [null]", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("[null]", sQLException0.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("[null]", sQLException1.getMessage());
      assertEquals("java.sql.SQLException: [null]", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.reflect.AccessibleObject is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float float2 = ClassUtil.nonNull(float0, float1);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.hasClass(character0, class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<?> class2 = ClassUtil.classOf(character0);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Character", class2.toString());
      
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      SQLException sQLException0 = new SQLException((Throwable) null);
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      
      // Undeclared exception!
//      try { 
        sQLException0.addSuppressed((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Cannot suppress a null exception.
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("]w7", "]w7", (-1652333975));
      assertNotNull(sQLNonTransientException0);
      assertEquals((-1652333975), sQLNonTransientException0.getErrorCode());
      assertEquals("]w7", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ]w7", sQLNonTransientException0.toString());
      assertEquals("]w7", sQLNonTransientException0.getMessage());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwIfRTE(sQLNonTransientException0);
      assertNotNull(sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      assertEquals((-1652333975), sQLNonTransientException0.getErrorCode());
      assertEquals("]w7", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ]w7", sQLNonTransientException0.toString());
      assertEquals("]w7", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ]w7", sQLNonTransientException1.toString());
      assertEquals((-1652333975), sQLNonTransientException1.getErrorCode());
      assertEquals("]w7", sQLNonTransientException1.getSQLState());
      assertEquals("]w7", sQLNonTransientException1.getMessage());
      
      Class<?> class3 = ClassUtil.primitiveType(class0);
      assertNull(class3);
      
      Class<?> class4 = ClassUtil.wrapperType(class2);
      assertNotNull(class4);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.Double", class4.toString());
      assertFalse(class4.isPrimitive());
      assertEquals(17, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "t_yQOk|>b_";
      String string1 = ClassUtil.nonNullString("t_yQOk|>b_");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("t_yQOk|>b_", string1);
      
      String string2 = ClassUtil.backticked("p<8)B2,UH Vj6HM^1*");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("`p<8)B2,UH Vj6HM^1*`", string2);
      
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = ClassUtil.getPackageName(class0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("com.fasterxml.jackson.databind.annotation", string3);
      
      Class<NoClass> class1 = NoClass.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      assertSame(class1, class0);
      
      Class<Object> class3 = Object.class;
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class3);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class4);
      assertNotNull(class5);
      assertFalse(class5.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class5.toString());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isAnnotation());
      assertEquals(1025, class5.getModifiers());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isArray());
      
      Class<Character> class6 = Character.class;
      String string4 = ClassUtil.getPackageName(class6);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("java.lang", string4);
      
      Class<Float> class7 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class7, class0, false);
      assertNotNull(list0);
      assertSame(class0, class1);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String string5 = "vals";
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class6);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Character is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.SimpleType`", string0);
      
      Class<Float> class1 = Float.class;
      Class<Double> class2 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNotNull(constructor0);
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = constructor0.getAnnotation(class4);
      assertNull(annotation0);
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertSame(annotationArray2, annotationArray1);
      assertEquals(0, annotationArray2.length);
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Double> class5 = Double.class;
      boolean boolean0 = ClassUtil.hasClass("\"vmN[sc KjUv0a*", class5);
      assertSame(class5, class2);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Void> class6 = Void.class;
      boolean boolean2 = ClassUtil.isBogusClass(class6);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Class<ArrayType> class7 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class7);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
      
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class4);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("\"vmN[sc KjUv0a*", "NULL", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("NULL", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"vmN[sc KjUv0a*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"vmN[sc KjUv0a*", sQLNonTransientConnectionException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("NULL", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("\"vmN[sc KjUv0a*", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"vmN[sc KjUv0a*", sQLNonTransientConnectionException0.toString());
      assertEquals("NULL", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"vmN[sc KjUv0a*", sQLNonTransientConnectionException1.toString());
      assertEquals("\"vmN[sc KjUv0a*", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      
      Class<CollectionLikeType> class8 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor1 = ClassUtil.findConstructor(class8, true);
      assertNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("hgJBA");
      assertNotNull(string0);
      assertEquals("hgJBA", string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      String string1 = ClassUtil.nameOf(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.RuntimeException`", string1);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      String string2 = constructor0.getName();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("java.lang.Object", string2);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      String string3 = ClassUtil.backticked("java.lang.Object");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("`java.lang.Object`", string3);
      
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("J],U}<l]rlEz>I", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      hashMap0.forEach(biConsumer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("elementType", "elementType", (int[]) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: elementType", batchUpdateException0.toString());
      assertEquals("elementType", batchUpdateException0.getSQLState());
      assertEquals("elementType", batchUpdateException0.getMessage());
      
      sQLClientInfoException0.setNextException(batchUpdateException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: elementType", batchUpdateException0.toString());
      assertEquals("elementType", batchUpdateException0.getSQLState());
      assertEquals("elementType", batchUpdateException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)ClassUtil.throwIfError(sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Error()", constructor1.toString());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[1];
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      assertEquals(1, accessibleObjectArray0.length);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class1, true);
      assertNotNull(list0);
      assertSame(class2, class0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      Class<Integer> class3 = Integer.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class1, list0);
      assertNotNull(list1);
      assertSame(class2, class0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(7, list1.size());
      
      String string0 = "(DgV";
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "(DgV");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      
      String string0 = ClassUtil.nullOrToString(resolvedRecursiveType0);
      assertNotNull(string0);
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, objectMapper0, stringWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(3, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Long> class1 = Long.class;
      boolean boolean2 = ClassUtil.isProxyType(class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 7);
      Class<Character> class2 = Character.class;
      classArray0[0] = class2;
      Class<Character> class3 = Character.class;
      classArray0[1] = class3;
      Class<Character> class4 = Character.class;
      classArray0[2] = class4;
      Class<Character> class5 = Character.class;
      classArray0[3] = class5;
      Class<Character> class6 = Character.class;
      classArray0[4] = class6;
      Class<Character> class7 = Character.class;
      classArray0[5] = class7;
      Class<Character> class8 = Character.class;
      classArray0[6] = class8;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.nonNullString("e_,a9mwG4 qtWsME(Q)");
      assertNotNull(string0);
      assertEquals("e_,a9mwG4 qtWsME(Q)", string0);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, resolvedRecursiveType0, "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class com.fasterxml.jackson.databind.type.ResolvedRecursiveType (of class com.fasterxml.jackson.databind.type.MapLikeType) must override method 'com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      String string0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.createInstance(class0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "pBaT}[gK*ws6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Iterator<CollectionType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = ClassUtil.nonNull(long0, long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      String string0 = ClassUtil.nullOrToString(long1);
      assertNotNull(string0);
      
      String string1 = ClassUtil.backticked("java.lang.Long@0000000001");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Iterator<Integer> iterator1 = ClassUtil.emptyIterator();
      assertNotNull(iterator1);
      
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Character character0 = Character.valueOf('P');
      assertNotNull(character0);
      assertEquals('P', (char)character0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte) (-25);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-476), false);
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)1, (byte)0, (byte)3, (byte) (-45), (byte) (-67), (byte)35, (byte)96, (byte) (-25)}, byteArray0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(9, byteArray0.length);
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-476), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(1, 1536);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.ClientInfoStatus", class2.toString());
      assertFalse(class2.isPrimitive());
      assertTrue(class2.isEnum());
      assertEquals(16401, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      
      String string1 = ClassUtil.quotedOr("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"com.fasterxml.jackson.databind.type\"", string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class2);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      DeserializationConfig deserializationConfig0 = null;
      Class<AccessPattern> class3 = AccessPattern.class;
      // Undeclared exception!
//      try { 
        SimpleType.constructUnsafe((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JavaType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "t_yQOk|>b_";
      String string1 = ClassUtil.nonNullString("t_yQOk|>b_");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("t_yQOk|>b_", string1);
      
      String string2 = ClassUtil.backticked("p<8)B2,UH Vj6HM^1*");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`p<8)B2,UH Vj6HM^1*`", string2);
      
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = ClassUtil.getPackageName(class0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("com.fasterxml.jackson.databind.annotation", string3);
      
      Integer integer0 = new Integer(481);
      assertNotNull(integer0);
      assertEquals(481, (int)integer0);
      
      String string4 = ClassUtil.quotedOr(integer0, "^{_OhpN_@^rnLf0$2>&");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\"481\"", string4);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) integer0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<NoClass> class1 = NoClass.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      assertSame(class1, class0);
      
      Class<Object> class3 = Object.class;
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class4);
      assertNotNull(class5);
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertEquals(1025, class5.getModifiers());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class5.toString());
      
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class3, class4, "t_yQOk|>b_");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class java.lang.Object) must override method 't_yQOk|>b_'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<Double> class2 = Double.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertNotNull(class3);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<Double> class2 = Double.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertNotNull(class3);
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("keyType");
      assertNotNull(string0);
      assertEquals("keyType", string0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Long> class0 = Long.class;
//      try { 
        ClassUtil.createInstance(class0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Long has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      int int0 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=yK", "=yK", 0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: =yK", sQLTransactionRollbackException0.toString());
      assertEquals("=yK", sQLTransactionRollbackException0.getMessage());
      assertEquals("=yK", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      int[] intArray0 = new int[0];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("8x0L.F", "k!@P,", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: 8x0L.F", sQLNonTransientConnectionException0.toString());
      assertEquals("k!@P,", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("8x0L.F", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("lDVkc?L:^I\"[7)!", "=yK", intArray0, sQLNonTransientConnectionException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.SQLNonTransientConnectionException: 8x0L.F", sQLNonTransientConnectionException0.toString());
      assertEquals("k!@P,", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("8x0L.F", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: lDVkc?L:^I\"[7)!", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("lDVkc?L:^I\"[7)!", batchUpdateException0.getMessage());
      assertEquals("=yK", batchUpdateException0.getSQLState());
      
      int[] intArray1 = batchUpdateException0.getUpdateCounts();
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals("java.sql.SQLNonTransientConnectionException: 8x0L.F", sQLNonTransientConnectionException0.toString());
      assertEquals("k!@P,", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("8x0L.F", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: lDVkc?L:^I\"[7)!", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("lDVkc?L:^I\"[7)!", batchUpdateException0.getMessage());
      assertEquals("=yK", batchUpdateException0.getSQLState());
      
      sQLTransactionRollbackException0.setNextException(batchUpdateException0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals("java.sql.SQLTransactionRollbackException: =yK", sQLTransactionRollbackException0.toString());
      assertEquals("=yK", sQLTransactionRollbackException0.getMessage());
      assertEquals("=yK", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 8x0L.F", sQLNonTransientConnectionException0.toString());
      assertEquals("k!@P,", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("8x0L.F", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: lDVkc?L:^I\"[7)!", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("lDVkc?L:^I\"[7)!", batchUpdateException0.getMessage());
      assertEquals("=yK", batchUpdateException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // =yK
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "keyType";
      String string1 = ClassUtil.nonNullString("keyType");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("keyType", string1);
      
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      Class<MapType> class1 = MapType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      String string2 = mockIOException0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string2);
      
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.ser.impl.FailingSerializer");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(true);
      assertFalse(boolean0);
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockIOException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      
      MockFile mockFile1 = null;
//      try {
        mockFile1 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI scheme is not \"file\"
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<IOException> class0 = IOException.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      assertNotNull(typeBindings0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      Class<Error> class1 = Error.class;
      String string0 = "{i+RgZ1s*\\Wj`|p'd>";
      PlaceholderForType placeholderForType0 = new PlaceholderForType(248);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      
      Class<Character> class2 = Character.class;
      Class<IOException> class3 = IOException.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      Class<ArrayType> class4 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class4, class0, class2);
      assertNotNull(mapLikeType0);
      assertSame(class0, class3);
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isMapLikeType());
      
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[2]);
      assertNotNull(referenceType0);
      assertSame(class0, class3);
      assertSame(class3, class0);
      assertEquals(3, javaTypeArray0.length);
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      
      // Undeclared exception!
//      try { 
        placeholderForType0.refine(class2, typeBindings0, referenceType0, javaTypeArray0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Throwable throwable0 = null;
      Throwable throwable1 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4147));
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertNull(javaType0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
//      try { 
        defaultSerializerProvider_Impl0.resolveSubType((JavaType) null, "SMvg=i+zXT+5J.a");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'SMvg=i+zXT+5J.a' as a subtype of null: problem: (java.lang.NullPointerException) null
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "elementType", (-1));
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertEquals((-1), sQLTransientException0.getErrorCode());
      assertEquals("elementType", sQLTransientException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) constructor0, (-1));
      assertNotNull(jsonMappingException0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertEquals((-1), sQLTransientException0.getErrorCode());
      assertEquals("elementType", sQLTransientException0.getSQLState());
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.getRootCause(jsonMappingException0);
      assertNotNull(sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertEquals((-1), sQLTransientException0.getErrorCode());
      assertEquals("elementType", sQLTransientException0.getSQLState());
      assertEquals("elementType", sQLTransientException1.getSQLState());
      assertEquals((-1), sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Void> class0 = Void.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      byte byte0 = (byte) (-79);
      Byte byte1 = new Byte((byte) (-79));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-79), (byte)byte1);
      
      boolean boolean0 = ClassUtil.hasClass(byte1, class0);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Void is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }
}
