/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:37:06 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Void> class0 = Void.class;
      ClassUtil.getConstructors(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      MockFile mockFile0 = new MockFile("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, mockFileOutputStream0, byteArray0, 3, false);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper1);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "vHA");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // vHA
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassUtil.rawClass(mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      System.setCurrentTimeMillis((-1277L));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      NoClass noClass0 = ClassUtil.createInstance(class0, true);
      ClassUtil.hasClass(noClass0, class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      SQLException sQLException0 = new SQLException("{1&E9x.}qy~", " (from class ");
      SQLWarning sQLWarning0 = new SQLWarning("annotation", "annotation", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("annotation", "Cannot figure out type for EnumMap (odd JDK platform?)", 3, sQLWarning0);
      sQLException0.initCause(sQLSyntaxErrorException0);
      sQLException0.printStackTrace();
      sQLException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, "_C+");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("b]Vy_:Rnz~pW!");
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.core.Base64Variant", "b]Vy_:Rnz~pW!", (-2174), sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("tN");
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonFactory jsonFactory4 = jsonFactory3.setCharacterEscapes((CharacterEscapes) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o0:1t5RiwT)cq");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) error0, (-485));
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.sql.SQLNonTransientException: java.sql.SQLTransientConnectionException: JSON (through reference chain: java.lang.Error[?])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Byte> class0 = Byte.TYPE;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1795));
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not a valid textual representation");
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapLikeType0, mapLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, mapLikeType0);
      collectionLikeType0.withContentType(mapLikeType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
      Class<?> class0 = ClassUtil.rawClass(arrayType0);
      ClassUtil.getConstructors(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.backticked("not a valid textual representation");
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.sql.ClientInfoStatus", "net.sf.cglib.proxy.java.sql.ClientInfoStatus");
      ClassUtil.getRootCause(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(placeholderForType0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.sf.cglib.proxy.short");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 52);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(bufferedOutputStream0, "net.sf.cglib.proxy.short", mockRuntimeException0);
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.short", jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, "");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLSyntaxErrorException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLInvalidAuthorizationSpecException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, List<PropertyName>> enumMap0 = new EnumMap<AccessPattern, List<PropertyName>>(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.defaultValue(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, ClientInfoStatus> enumMap0 = new EnumMap<AccessPattern, ClientInfoStatus>(class2);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      TreeSet<IOException> treeSet0 = new TreeSet<IOException>();
      enumSet0.retainAll(treeSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern1);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("");
      Class<List> class0 = List.class;
      ClassUtil.isJacksonStdImpl(class0);
      Double double0 = new Double(311.65572);
      ClassUtil.nullOrToString(double0);
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1007));
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) typeBindings0, (Object) placeholderForType0);
      TypeBindings typeBindings1 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings1, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0, (JavaType) arrayType0);
      MapLikeType mapLikeType0 = mapType0.withContentTypeHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, (String) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<List> class0 = List.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.classOf((Object) null);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Failed to find default constructor of class ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isConcrete(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockFile mockFile1 = new MockFile(mockFile0, "com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile1, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      int int0 = 98;
      Throwable throwable0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", 98, (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      sQLNonTransientException0.spliterator();
      sQLNonTransientException0.printStackTrace();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonFactory0.disable(jsonParser_Feature0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGenerator0, (Exception) sQLNonTransientException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLNonTransientException: java.sql.SQLTransactionRollbackException: JSON
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern3 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern3, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<InputStream> class1 = InputStream.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.io.InputStream, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.LinkedNode");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, mockPrintStream0, byteArray0, (-1929), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(674, (byte) (-69));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.LinkedNode");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.LinkedNode
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.createInstance(class0, true);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<DecimalNode> class1 = DecimalNode.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<String>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";G)qcNa>k0n?,mn)Wma");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(")n@[3?[", "java.lang.Object", (-1355));
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, ")n@[3?[");
      sQLIntegrityConstraintViolationException0.initCause(jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.writeValueAsString(jsonFactory0);
      objectMapper0.readerForUpdating(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassUtil.nonNull((Byte) null, (Byte) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isJacksonStdImpl(class0);
      Integer integer0 = new Integer(96);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.hasClass(integer0, class1);
      Class<Float> class2 = Float.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Float is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperTypes(class0, class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.hasClass(mockRuntimeException0, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "com.fasterxml.jackso";
      ClassUtil.backticked("com.fasterxml.jackso");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLSyntaxErrorException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLSyntaxErrorException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-698565172), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      MockIOException mockIOException0 = new MockIOException("P_Hla|m&e$O\"x@?<c<", (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockIOException0, "P_Hla|m&e$O\"x@?<c<");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // P_Hla|m&e$O\"x@?<c<
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      enumMap0.values();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Long long0 = Long.valueOf(781L);
      Long long1 = new Long(0L);
      enumMap0.getOrDefault(long0, long1);
      enumMap0.put(accessPattern0, long0);
      enumMap0.keySet();
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector1, (AnnotatedMember) null, (PropertyName) null, propertyMetadata1, jsonInclude_Value0);
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withInclusion(jsonInclude_Value0);
      // Undeclared exception!
//      try { 
        ClassUtil.nameOf((Named) beanPropertyDefinition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonFactory jsonFactory1 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.readerForUpdating(jsonEncoding0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, List<PropertyName>> enumMap0 = new EnumMap<AccessPattern, List<PropertyName>>(class0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4);
      Object object0 = new Object();
      objectMapper0.readerForUpdating(object0);
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(0L);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 4058;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(22);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      objectReader0.with(jsonNodeFactory0);
      String string0 = null;
      String string1 = "v{S&mo=H\\AS^|T|n{";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream((String) null, "v{S&mo=HAS^|T|n{");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<Float> class2 = Float.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getDeclaredFields(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, collectionType0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 8, true);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionLikeType0);
      CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, (JavaType[]) null, (JavaType) collectionType0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(collectionType0, (String) null, "org.hibernate.proxy.java.util.List");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'null' as a subtype of [collection type; class java.util.List, contains [simple type, class java.lang.Object]]: org.hibernate.proxy.java.util.List
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.isJacksonStdImpl((Object) beanDeserializerFactory0);
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 10);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nonNullString("@'");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3254);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(placeholderForType0, "org.hibernate.proxy.java.lang.String", "M|FP-zx`N('DbFfp");
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.String", "@'", jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLDataException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'org.hibernate.proxy.java.lang.String' as a subtype of $3255: M|FP-zx`N('DbFfp
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException(sQLIntegrityConstraintViolationException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.sql.SQLIntegrityConstraintViolationException
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(1024);
      ClassUtil.nonNull((Integer) null, integer0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getDeclaredFields(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-444));
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      arrayType0.hasGenericTypes();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      // Undeclared exception!
//      try { 
        placeholderForType0.refine(class1, typeBindings0, arrayType0, javaTypeArray0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Byte byte0 = new Byte((byte)77);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.primitiveType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "k&m", (-1746839910));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Default constructor for ", "java.lang.Object", sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Default constructor for ", "Default constructor for ", sQLNonTransientConnectionException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLRecoverableException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, mockIOException0);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<NoClass>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isBogusClass(class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
      ClassUtil.rawClass(simpleType1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Module> class0 = Module.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Byte> class2 = Byte.class;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      IOException iOException0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      ClassUtil.nameOf(class2);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.canBeABeanType(class2);
      Character character0 = new Character('j');
      ClassUtil.classNameOf(character0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x?igkR=0,Yb", "x?igkR=0,Yb", (-4775), (Throwable) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      ClassUtil.throwIfRTE((Throwable) null);
      MockError mockError0 = new MockError("Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Short short0 = new Short((short)1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.nonNull((Object) short0, (Object) class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
      ClassUtil.getPackageName(class0);
      ClassUtil.nameOf((Class<?>) null);
      Float float0 = new Float(0.0F);
      ClassUtil.nullOrToString(float0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.nameOf(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Float float0 = new Float(0.0);
      ClassUtil.isJacksonStdImpl((Object) float0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.java.io.IOException", "org.hibernate.proxy.java.io.IOException", (Throwable) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      ClassUtil.throwIfRTE((Throwable) null);
      sQLTransactionRollbackException0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "vals");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)127;
      byteArray0[3] = (byte)50;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      Class<NoClass> class0 = NoClass.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_STRING: JSON
//         //  at [Source: (byte[])\"l\u00002\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.backticked("Cannot update object of type ");
      ClassUtil.nameOf((Named) null);
      Integer integer0 = new Integer((-1744674775));
      Class<Error> class1 = Error.class;
      ClassUtil.hasClass(integer0, class1);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Class<Boolean>> linkedList0 = new LinkedList<Class<Boolean>>();
      Class<Integer> class0 = Integer.TYPE;
      Class<List> class1 = List.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.util.List is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y,xSSqo");
      ClassUtil.getGenericSuperclass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Double> class2 = Double.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.findEnumType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Eiwdz)*k;ob_LbnM!");
      Class<Double> class1 = Double.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class1, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      Class<String> class2 = String.class;
      TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) mapType0);
      Class<Integer> class3 = Integer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, (TypeBindings) null);
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler((Object) null);
      Class<JsonDeserializer> class4 = JsonDeserializer.class;
      ClassUtil.findSuperTypes(javaType1, class4, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Re&7.{O", ".D[?QVP5)!");
      MockException mockException0 = new MockException(".D[?QVP5)!", sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Re&7.{O
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("V3q;/`E");
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.nameOf(class1);
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isProxyType(class2);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.java.io.IOException", "net.sf.cglib.proxy.java.io.IOException", (int[]) null);
      ClassUtil.throwIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      Class<Character> class1 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getOuterClass(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getConstructors(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8iyP-|>4M,H", "V3q;/`E", (-13));
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "net.sf.cglib.proxy.java.lang.RuntimeException");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.java.lang.RuntimeException
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Short> class0 = Short.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      Class<Short> class1 = Short.class;
      Class<Character> class2 = Character.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapType0, (JavaType[]) null, javaType0);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(collectionType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) mapLikeType0);
      Class<CollectionType> class3 = CollectionType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      resolvedRecursiveType0.withTypeHandler((Object) null);
      Class<Integer> class4 = Integer.class;
      ClassUtil.findSuperTypes(javaType0, class4, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.java.lang.Double", "net.sf.cglib.proxy.java.lang.Error");
      MockException mockException0 = new MockException("|ZS^309d$iI|LvQE", sQLTimeoutException0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Short> class0 = Short.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-623));
      coreXMLDeserializers_Std0.getValueType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "L^s8", (String) null);
      ClassUtil.throwIfError(jsonMappingException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Short> class0 = Short.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-623));
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.nameOf(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getPackageName(class2);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) objectOutputStream0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("java.lang", sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLWarning: java.lang
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf(class0);
      int[] intArray0 = new int[1];
      intArray0[0] = 192;
      int int0 = 5;
      SQLDataException sQLDataException0 = new SQLDataException("t'+", "`com.fasterxml.jackson.databind.JsonMappingException`", 5);
      sQLDataException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`com.fasterxml.jackson.databind.JsonMappingException`", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", 192, intArray0, sQLDataException0);
      sQLDataException0.addSuppressed(batchUpdateException0);
      sQLDataException0.initCause(batchUpdateException0);
      batchUpdateException0.getLargeUpdateCounts();
      ClassUtil.throwIfRTE(batchUpdateException0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, true);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isConcrete(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 13);
      coreXMLDeserializers_Std0.getValueType();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<Byte> class1 = Byte.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "JSON");
      ClassUtil.classOf((Object) null);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Character> class0 = Character.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 13);
      coreXMLDeserializers_Std0.getValueType();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected FIELD_NAME: JSON
//         //  at [Source: (char[])\"^\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ClassUtil.getDeclaredFields(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isNonStaticInnerClass(class2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isBogusClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findEnumType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Double> class2 = Double.class;
      MapType mapType0 = MapType.construct(class2, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaType0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, (TypeBindings) null);
      Class<RuntimeException> class4 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class4, (TypeBindings) null);
      resolvedRecursiveType1.withTypeHandler(typeBindings0);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class5, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      MockException mockException0 = new MockException("local/anonymous", sQLTimeoutException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.classNameOf(fileSystemHandling0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getClassMethods(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getConstructors(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      File file0 = MockFile.createTempFile("JSON", "0*DA^zOq>~`?Cu'W", (File) mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator(file0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "JSON", " is not a primitive type");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize Map key of type `java.lang.Void` from String \"JSON\":  is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.backticked("com.fasterxml.jackso");
      Class<String> class1 = String.class;
      ClassUtil.verifyMustOverride(class1, "Cannot figure out type for EnumMap (odd JDK platform?)", "`com.fasterxml.jackso`");
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasClass(class0, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getOuterClass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "Re&7.{O";
      ClassUtil.nonNullString("H$9GXPbc{P!u");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.classNameOf("b@Uc1i@:");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`java.lang.String`");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "b@Uc1i@:", (JavaType) null);
      virtualAnnotatedMember0.fixAccess(false);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8iyP-|>4M,H", "V3q;/`E", (-13));
      sQLTransactionRollbackException0.getLocalizedMessage();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Double double0 = new Double(0.0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.hasClass("8iyP-|>4M,H", class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getDeclaringClass(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.backticked("b,6b@$Z.}2^)q(K");
      ClassUtil.nameOf((Named) null);
      Class<Float> class2 = Float.class;
      ClassUtil.hasClass((Object) null, class2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Short> class0 = Short.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-623));
      ClassUtil.nonNullString("b@Uc1i@:");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Long.getLong("Re&7.{O");
      ClassUtil.classNameOf((Object) null);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.backticked("com.fasterxml.jackso");
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLException sQLException0 = new SQLException("*~q", "*~q", 424);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      sQLException0.initCause(mockRuntimeException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockRuntimeException0);
      ClassUtil.nameOf(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLDataException: org.evosuite.runtime.mock.java.lang.MockThrowable
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassUtil.nonNullString("USE_JAVA_ARRAY_FOR_JSON_ARRoY");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getName();
      constructor0.getAnnotations();
      Class<Void> class1 = Void.class;
//      try { 
        ClassUtil.findConstructor(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.nonNullString("USE_JAVA_ARRAY_FOR_JSON_ARRAY");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(11);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getName();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Double double0 = new Double(0.0);
      ClassUtil.nameOf(class0);
      ClassUtil.rawClass(placeholderForType0);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, classUtil_Ctor0, ".uU$n6\"#*@<.Ii#d");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class com.fasterxml.jackson.databind.util.ClassUtil$Ctor (of class java.lang.Double) must override method '.uU$n6\"#*@<.Ii#d'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<Double> class2 = Double.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType.construct(class1, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      Class<Short> class3 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler((Object) null);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findSuperTypes(javaType1, class4, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      MockException mockException0 = new MockException((String) null, sQLTimeoutException0);
      ClassUtil.rawClass(javaType1);
      ClassUtil.getPackageName(class0);
      ClassUtil.isJacksonStdImpl((Object) mockException0);
      Class<IOException> class5 = IOException.class;
      ClassUtil.findConstructor(class5, false);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLException sQLException0 = new SQLException("*~q", "*~q", 424);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      sQLException0.initCause(mockRuntimeException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.nameOf(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5247, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      Class<Character> class1 = Character.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, object0, "y");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Double (of class java.lang.Character) must override method 'y'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getClassDescription((Object) null);
      Class<MapType> class0 = MapType.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getName();
      constructor0.getAnnotations();
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Double> class2 = Double.class;
      ClassUtil.hasClass(class1, class2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.isJacksonStdImpl((Object) class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      Double double0 = new Double((-2044.39));
      Integer integer0 = new Integer(46);
      ClassUtil.hasClass(integer0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<String> class2 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class1);
      ClassUtil.quotedOr(list0, (String) null);
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '^';
      charArray0[5] = '';
      charArray0[6] = '^';
      charArray0[7] = '^';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class3 = Object.class;
      JsonToken jsonToken1 = JsonToken.NOT_AVAILABLE;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class3, jsonToken1, "JSON");
      ClassUtil.classOf(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, true);
      Object object0 = ClassUtil.nonNull((Object) class0, (Object) error0);
      ClassUtil.isJacksonStdImpl(object0);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Double double0 = new Double(0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(double0, class0, "\"%s\"");
      jsonMappingException0.printStackTrace();
      ClassUtil.hasClass(jsonMappingException0, class0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Class<Byte> class1 = Byte.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      ClassUtil.isBogusClass(class0);
      Class<Void> class2 = Void.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.nonNullString("non-static member class");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      constructor0.isAnnotationPresent(class2);
      constructor0.getAnnotation(class2);
      ClassUtil.nullOrToString(constructor0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.getClassDescription(class2);
      ClassUtil.isConcrete(class1);
      ClassUtil.emptyIterator();
      ClassUtil.getClassMethods(class3);
      Class<NoClass> class4 = NoClass.class;
//      try { 
        ClassUtil.createInstance(class4, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '';
      charArray0[2] = 'A';
      charArray0[3] = '^';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<IOException> class1 = IOException.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, (String) null);
      ClassUtil.classOf(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Error> class1 = Error.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.nonNullString("USE_JAVA_ARRAY_FOR_JSON_ARRAY");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "_Y,C>ODE^42]v");
      SQLException sQLException0 = new SQLException("_Y,C>ODE^42]v", "F|$", sQLRecoverableException0);
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.classNameOf("org.hibernate.proxy.java.lang.Short");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("USE_JAVA_ARRAY_FOR_JSON_ARRAY", class0, "com.fasterxml.jackso");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `int` from String \"USE_JAVA_ARRAY_FOR_JSON_ARRAY\": com.fasterxml.jackso
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("E-", (String) null);
      sQLWarning0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "E-");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // E-
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Long> class1 = Long.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      assertNotNull(objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, deserializationFeatureArray0.length);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      assertNotNull(tokenFilterContext0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      
      JsonPointer jsonPointer0 = JsonPointer.forPath(tokenFilterContext0, true);
      assertNotNull(jsonPointer0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertTrue(jsonPointer0.matches());
      assertEquals('/', JsonPointer.SEPARATOR);
      
      ObjectReader objectReader2 = objectReader1.at(jsonPointer0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertTrue(jsonPointer0.matches());
      assertEquals('/', JsonPointer.SEPARATOR);
      assertEquals(0, deserializationFeatureArray0.length);
      
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(typeFactory0);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertTrue(jsonPointer0.matches());
      assertEquals('/', JsonPointer.SEPARATOR);
      assertEquals(0, deserializationFeatureArray0.length);
      
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (TypeBindings) null);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(javaType0);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertTrue(jsonPointer0.matches());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      assertEquals('/', JsonPointer.SEPARATOR);
      assertEquals(0, deserializationFeatureArray0.length);
      
      Class<?> class2 = ClassUtil.rawClass(javaType0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(class2);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertTrue(jsonPointer0.matches());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals('/', JsonPointer.SEPARATOR);
      assertEquals(0, deserializationFeatureArray0.length);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", problem: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      
      Class<Long> class2 = Long.class;
      MapType mapType0 = MapType.construct(class2, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      assertNotNull(mapType0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      
      Class<Short> class3 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      assertNotNull(typeBindings0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      Class<AccessPattern> class4 = AccessPattern.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      
      Class<MapLikeType> class5 = MapLikeType.class;
      MapType mapType1 = MapType.construct((Class<?>) class5, typeBindings0, javaType0, (JavaType[]) null, javaType0, (JavaType) mapType0);
      assertFalse(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler(mapType1);
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType1.equals((Object)mapType0));
      assertNotNull(javaType1);
      assertNotSame(mapType0, mapType1);
      assertSame(resolvedRecursiveType0, javaType1);
      assertNotSame(mapType1, mapType0);
      assertSame(javaType1, resolvedRecursiveType0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isPrimitive());
      assertTrue(javaType1.isEnumType());
      assertFalse(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isFinal());
      
      Class<ArrayType> class6 = ArrayType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType1, class6, true);
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType1.equals((Object)mapType0));
      assertNotNull(list0);
      assertNotSame(mapType0, mapType1);
      assertSame(resolvedRecursiveType0, javaType1);
      assertNotSame(mapType1, mapType0);
      assertSame(javaType1, resolvedRecursiveType0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isPrimitive());
      assertTrue(javaType1.isEnumType());
      assertFalse(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isFinal());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", problem: ", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: , problem: ", sQLTimeoutException0.toString());
      assertEquals(", problem: ", sQLTimeoutException0.getMessage());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLTimeoutException0.getSQLState());
      
      MockException mockException0 = new MockException("9|<+iA", sQLTimeoutException0);
      assertNotNull(mockException0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // , problem: 
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Double> class2 = Double.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      
      MapType mapType0 = MapType.construct(class1, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      assertNotNull(mapType0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isJavaLangObject());
      
      Class<Short> class3 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaType0);
      assertNotNull(typeBindings0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler((Object) null);
      assertNotNull(javaType1);
      assertSame(resolvedRecursiveType0, javaType1);
      assertSame(javaType1, resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.isEnumType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isArrayType());
      assertEquals(0, javaType1.containedTypeCount());
      assertTrue(javaType1.isFinal());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<Boolean> class4 = Boolean.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType1, class4, true);
      assertNotNull(list0);
      assertSame(resolvedRecursiveType0, javaType1);
      assertSame(javaType1, resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.isEnumType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isArrayType());
      assertEquals(0, javaType1.containedTypeCount());
      assertTrue(javaType1.isFinal());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      MockException mockException0 = new MockException((String) null, sQLTimeoutException0);
      assertNotNull(mockException0);
      
      Class<ReferenceType> class5 = ReferenceType.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.constructType(class5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<Integer> class2 = Integer.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class4);
      assertFalse(boolean0);
      
      Class<NoClass> class5 = NoClass.class;
      String string1 = ClassUtil.nameOf(class5);
      assertNotNull(string1);
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", string1);
      
      String string2 = ClassUtil.getPackageName(class5);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("com.fasterxml.jackson.databind.annotation", string2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class3);
      assertFalse(boolean0);
      
      Class<Float> class4 = Float.class;
      String string0 = ClassUtil.nameOf(class4);
      assertNotNull(string0);
      assertEquals("`java.lang.Float`", string0);
      
      Class<Object> class5 = Object.class;
      String string1 = ClassUtil.isLocalType(class5, false);
      assertNull(string1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLSyntaxErrorException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLSyntaxErrorException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Object> class1 = Object.class;
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      String string1 = ClassUtil.backticked("yKN");
      assertNotNull(string1);
      assertEquals("`yKN`", string1);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNull(deserializationConfig0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(749);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      // Undeclared exception!
//      try { 
        placeholderForType0.withTypeHandler("yKN");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      String string0 = ClassUtil.createInstance(class1, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 4);
      Class<Float> class3 = Float.class;
      classArray0[0] = class3;
      Class<Float> class4 = Float.class;
      classArray0[1] = class4;
      Class<Float> class5 = Float.class;
      classArray0[2] = class5;
      Class<Float> class6 = Float.class;
      classArray0[3] = class6;
      // Undeclared exception!
//      try { 
        typeFactory0.constructParametricType(class2, classArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.MapLikeType with 4 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(15);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.isJavaLangObject());
      
      String string0 = ClassUtil.getClassDescription(placeholderForType0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.PlaceholderForType`", string0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.isJavaLangObject());
      
      String string1 = null;
      String string2 = ClassUtil.backticked((String) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("[null]", string2);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      assertSame(class3, class1);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class4);
      assertFalse(boolean0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class3);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertSame(class3, class1);
      assertNotSame(list1, list0);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      String string0 = ClassUtil.quotedOr(mockError0, (String) null);
      assertNotNull(string0);
      assertEquals("\"org.evosuite.runtime.mock.java.lang.MockThrowable\"", string0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedOutputStream0, "\"org.evosuite.runtime.mock.java.lang.MockThrowable\"");
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertEquals("java.io.IOException", string0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        sQLTransactionRollbackException0.setStackTrace((StackTraceElement[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.nonNullString("USE_JAVA_ARRAY_FOR_JSON_ARRAY");
      assertNotNull(string0);
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", string0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("USE_JAVA_ARRAY_FOR_JSON_ARRAY", "USE_JAVA_ARRAY_FOR_JSON_ARRAY");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.java.lang.Short", "F|$", sQLRecoverableException0);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("F|$", sQLException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.lang.Short", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: org.hibernate.proxy.java.lang.Short", sQLException0.toString());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLException0);
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("F|$", sQLException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.lang.Short", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: org.hibernate.proxy.java.lang.Short", sQLException0.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException1.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException1.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException1.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation((-2675), false, true, (-2129), 1540, sQLRecoverableException0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Byte> class1 = Byte.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Class<Character> class2 = Character.class;
      String string0 = ClassUtil.quotedOr(list0, "com.fasterxml.jackson.databind.util.AccessPattern");
      assertNotNull(string0);
      assertEquals("\"[]\"", string0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class4 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class4);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class3);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) collectionType1;
      javaTypeArray0[1] = (JavaType) collectionType0;
      javaTypeArray0[2] = (JavaType) collectionType1;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, (TypeBindings) null, (JavaType) collectionType1, javaTypeArray0, (JavaType) collectionType1);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(referenceType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(3, javaTypeArray0.length);
      
      ReferenceType referenceType1 = referenceType0.withValueHandler(class2);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType0, referenceType1);
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(3, javaTypeArray0.length);
      
      boolean boolean1 = ClassUtil.hasClass(referenceType0, class2);
      assertTrue(boolean1 == boolean0);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType0, referenceType1);
      assertFalse(boolean1);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(3, javaTypeArray0.length);
      
      String string1 = ClassUtil.classNameOf(referenceType1);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertNotNull(string1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType0, referenceType1);
      assertEquals("`com.fasterxml.jackson.databind.type.ReferenceType`", string1);
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertEquals(3, javaTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Short> class0 = Short.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-623));
      assertNotNull(coreXMLDeserializers_Std0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertNull(javaType0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "L^s8", (JavaType) null);
      assertNotNull(virtualAnnotatedMember0);
      assertEquals("L^s8", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertNull(field0);
      assertEquals("L^s8", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getAnnotation(class3);
      assertNull(annotation0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class2, (Annotation) null);
      assertNotNull(annotationMap0);
      assertEquals(1, annotationMap0.size());
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertNotNull(annotatedField0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      
      Member member0 = annotatedField0.getMember();
      assertNull(member0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<Short> class0 = Short.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      assertNotNull(beanSerializerBuilder0);
      assertFalse(beanSerializerBuilder0.hasProperties());
      
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      assertNull(annotatedClass0);
      assertFalse(beanSerializerBuilder0.hasProperties());
      
      Class<Void> class2 = Void.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1522));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "Cannot find a deserializer for type ", placeholderForType0);
      assertNotNull(virtualAnnotatedMember0);
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals("Cannot find a deserializer for type ", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertNull(field0);
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals("Cannot find a deserializer for type ", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getAnnotation(class4);
      assertNull(annotation0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class3, (Annotation) null);
      assertNotNull(annotationMap0);
      assertEquals(1, annotationMap0.size());
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertNotNull(annotatedField0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      
      Member member0 = annotatedField0.getMember();
      assertNull(member0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertNotNull(class2);
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals(1025, class2.getModifiers());
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      SQLException sQLException0 = new SQLException("[e(9Bf", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", 317);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      
      sQLException0.printStackTrace();
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLException: [e(9Bf", sQLDataException0.toString());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLDataException0.getMessage());
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfIOE(sQLException0);
      assertNotNull(sQLException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      assertEquals(317, sQLException1.getErrorCode());
      assertEquals("[e(9Bf", sQLException1.getMessage());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException1.toString());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException1.getSQLState());
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class4, true);
      assertNotNull(constructor1);
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6$^ +?*v", "AUTO");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("-Infinity", hashMap0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+`^QE5o\"Al{]", sQLClientInfoException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      
      sQLClientInfoException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+`^QE5o\"Al{]", "NULL", sQLNonTransientConnectionException0);
      assertNotNull(sQLRecoverableException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("NULL", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: +`^QE5o\"Al{]", sQLRecoverableException0.toString());
      assertEquals("+`^QE5o\"Al{]", sQLRecoverableException0.getMessage());
      
      sQLRecoverableException0.addSuppressed(sQLNonTransientConnectionException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("NULL", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: +`^QE5o\"Al{]", sQLRecoverableException0.toString());
      assertEquals("+`^QE5o\"Al{]", sQLRecoverableException0.getMessage());
      
      Class<Short> class0 = Short.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = ClassUtil.quotedOr((Object) null, "6$^ +?*v");
      assertNotNull(string0);
      assertEquals("6$^ +?*v", string0);
      
      boolean boolean0 = ClassUtil.hasClass("+`^QE5o\"Al{]", class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<CollectionType> class2 = CollectionType.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1miTeW%~RI5EmBJ01L");
      assertFalse(boolean0);
      
      Class<Double> class3 = Double.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      
      MapType mapType0 = MapType.construct(class2, (TypeBindings) null, javaType0, (JavaType[]) null, javaType0, javaType0);
      assertNotNull(mapType0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) mapType0);
      assertNotNull(typeBindings0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler((Object) null);
      assertNotNull(javaType1);
      assertSame(resolvedRecursiveType0, javaType1);
      assertSame(javaType1, resolvedRecursiveType0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.isAbstract());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.hasValueHandler());
      assertTrue(javaType1.isFinal());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.isCollectionLikeType());
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType1, class4, false);
      assertNotNull(list0);
      assertSame(resolvedRecursiveType0, javaType1);
      assertSame(javaType1, resolvedRecursiveType0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.isAbstract());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isJavaLangObject());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.hasValueHandler());
      assertTrue(javaType1.isFinal());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.isCollectionLikeType());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      MockException mockException0 = new MockException("ALLOW_UNQUOTED_CONTROL_CHARS", sQLIntegrityConstraintViolationException0);
      assertNotNull(mockException0);
      
      JavaType javaType2 = defaultDeserializationContext_Impl0.constructType(class0);
      ClassUtil.rawClass(javaType2);
      Class<MapType> class5 = MapType.class;
      ClassUtil.getPackageName(class5);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockException0);
      ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
      String string0 = "@c";
      ClassUtil.nonNullString(string0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class6 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getAnnotation(class6);
      ClassUtil.classNameOf(annotation0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.backticked("com.fasterxml.jackso");
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackso`", string0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(0, classArray0.length);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(0, typeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class3);
      assertNull(annotation0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      
      String string0 = ClassUtil.backticked("x043GHcj'Z__(");
      assertNotNull(string0);
      assertEquals("`x043GHcj'Z__(`", string0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Class<MapLikeType> class2 = MapLikeType.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      
      Iterator<ArrayType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      SQLException sQLException0 = new SQLException("[e(9Bf", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", 317);
      assertNotNull(sQLException0);
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      
      sQLException0.printStackTrace();
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      assertNotNull(sQLDataException0);
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLException: [e(9Bf", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLDataException0.getMessage());
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfIOE(sQLException0);
      assertNotNull(sQLException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException1.toString());
      assertEquals("[e(9Bf", sQLException1.getMessage());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException1.getSQLState());
      assertEquals(317, sQLException1.getErrorCode());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfError(sQLDataException0);
      assertNotNull(sQLDataException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals(317, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLException0.toString());
      assertEquals("[e(9Bf", sQLException0.getMessage());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLException: [e(9Bf", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLException: [e(9Bf", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLException: [e(9Bf", sQLDataException1.toString());
      assertNull(sQLDataException1.getSQLState());
      
      boolean boolean2 = ClassUtil.isNonStaticInnerClass(class3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      
      boolean boolean2 = vector0.add((JavaType) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("ujknown");
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      
      TypeBindings typeBindings2 = typeBindings0.withUnboundVariable("ujknown");
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings2.equals((Object)typeBindings0));
      assertTrue(typeBindings2.equals((Object)typeBindings1));
      assertNotNull(typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings2, typeBindings1);
      assertNotSame(typeBindings2, typeBindings0);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings2.size());
      assertTrue(typeBindings2.isEmpty());
      
      String string0 = typeBindings0.toString();
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertNotNull(string0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings0, typeBindings2);
      assertEquals("<>", string0);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeBindings typeBindings3 = typeBindings0.withUnboundVariable("<>");
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings3.equals((Object)typeBindings1));
      assertTrue(typeBindings3.equals((Object)typeBindings0));
      assertTrue(typeBindings3.equals((Object)typeBindings2));
      assertNotNull(typeBindings3);
      assertNotSame(typeBindings0, typeBindings3);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings3, typeBindings2);
      assertNotSame(typeBindings3, typeBindings0);
      assertNotSame(typeBindings3, typeBindings1);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings3.size());
      assertTrue(typeBindings3.isEmpty());
      
      JavaType javaType1 = typeBindings0.findBoundType("SQRv' ml2Wm>]=v*7");
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings0.equals((Object)typeBindings3));
      assertNull(javaType1);
      assertNotSame(typeBindings0, typeBindings3);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings0, typeBindings2);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SQRv' ml2Wm>]=v*7");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string1 = "ALLOW_UNQUOTED_CONTROL_CHARS";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      MockException mockException0 = new MockException("ALLOW_UNQUOTED_CONTROL_CHARS", sQLIntegrityConstraintViolationException0);
      assertNotNull(mockException0);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      String string2 = ClassUtil.getPackageName(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("java.lang", string2);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: org.evosuite.runtime.mock.java.lang.MockThrowable: ALLOW_UNQUOTED_CONTROL_CHARS", sQLRecoverableException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ALLOW_UNQUOTED_CONTROL_CHARS", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: ALLOW_UNQUOTED_CONTROL_CHARS
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.nonNullString("USE_JAVA_ARRAY_FOR_JSON_ARRAY");
      assertNotNull(string0);
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", string0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("USE_JAVA_ARRAY_FOR_JSON_ARRAY", "USE_JAVA_ARRAY_FOR_JSON_ARRAY");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.java.lang.Short", "F|$", sQLRecoverableException0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLException: org.hibernate.proxy.java.lang.Short", sQLException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Short", sQLException0.getMessage());
      assertEquals("F|$", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation((-2675), false, true, (-2129), 1540, sQLRecoverableException0);
      assertNotNull(dataTruncation0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.toString());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException0.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("USE_JAVA_ARRAY_FOR_JSON_ARRAY", sQLRecoverableException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("long", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      boolean boolean0 = ClassUtil.isConcrete(class2);
      assertFalse(boolean0);
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("long", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      Byte byte0 = new Byte((byte)110);
      assertNotNull(byte0);
      assertEquals((byte)110, (byte)byte0);
      
      String string0 = ClassUtil.nullOrToString(byte0);
      assertNotNull(string0);
      
      Long long0 = new Long((byte) (-81));
      assertNotNull(long0);
      assertEquals((-81L), (long)long0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("T237.cEbCnG", "AUTO");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: T237.cEbCnG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("T237.cEbCnG", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("-Infinity", hashMap0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: T237.cEbCnG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("T237.cEbCnG", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+`^QE5o\"Al{]", sQLClientInfoException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: T237.cEbCnG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("T237.cEbCnG", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("-Infinity");
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: -Infinity", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("-Infinity", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      
      sQLClientInfoException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: T237.cEbCnG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("T237.cEbCnG", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+`^QE5o\"Al{]", "NULL", sQLNonTransientConnectionException0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotNull(sQLRecoverableException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: T237.cEbCnG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("T237.cEbCnG", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("+`^QE5o\"Al{]", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: +`^QE5o\"Al{]", sQLRecoverableException0.toString());
      assertEquals("NULL", sQLRecoverableException0.getSQLState());
      
      sQLRecoverableException0.addSuppressed(sQLNonTransientConnectionException0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: T237.cEbCnG", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("T237.cEbCnG", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("+`^QE5o\"Al{]", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: +`^QE5o\"Al{]", sQLRecoverableException0.toString());
      assertEquals("NULL", sQLRecoverableException0.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // T237.cEbCnG
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "6$^ +?*v";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6$^ +?*v", "AUTO");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("-Infinity", hashMap0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+`^QE5o\"Al{]", sQLClientInfoException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      
      sQLClientInfoException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+`^QE5o\"Al{]", "NULL", sQLNonTransientConnectionException0);
      assertNotNull(sQLRecoverableException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("+`^QE5o\"Al{]", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: +`^QE5o\"Al{]", sQLRecoverableException0.toString());
      assertEquals("NULL", sQLRecoverableException0.getSQLState());
      
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertNotNull(annotatedType0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class2, false);
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(constructor1);
      assertSame(class2, class1);
      assertNotSame(constructor1, constructor0);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor1.getDeclaredAnnotation(class3);
      assertTrue(constructor1.equals((Object)constructor0));
      assertNull(annotation0);
      assertSame(class2, class1);
      assertNotSame(constructor1, constructor0);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      Class<Error> class4 = Error.class;
      Constructor<Error> constructor2 = ClassUtil.findConstructor(class4, false);
      assertTrue(constructor2.equals((Object)constructor1));
      assertTrue(constructor2.equals((Object)constructor0));
      assertNotNull(constructor2);
      assertSame(class4, class2);
      assertSame(class4, class1);
      assertNotSame(constructor2, constructor1);
      assertNotSame(constructor2, constructor0);
      assertEquals(1, constructor2.getModifiers());
      assertEquals("public java.lang.Error()", constructor2.toString());
      assertFalse(constructor2.isAccessible());
      assertFalse(constructor2.isVarArgs());
      assertFalse(constructor2.isSynthetic());
      
      AnnotatedType[] annotatedTypeArray0 = constructor2.getAnnotatedParameterTypes();
      assertTrue(constructor2.equals((Object)constructor1));
      assertTrue(constructor2.equals((Object)constructor0));
      assertNotNull(annotatedTypeArray0);
      assertSame(class4, class2);
      assertSame(class4, class1);
      assertNotSame(constructor2, constructor1);
      assertNotSame(constructor2, constructor0);
      assertEquals(1, constructor2.getModifiers());
      assertEquals("public java.lang.Error()", constructor2.toString());
      assertFalse(constructor2.isAccessible());
      assertFalse(constructor2.isVarArgs());
      assertFalse(constructor2.isSynthetic());
      assertEquals(0, annotatedTypeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      assertTrue(constructor1.equals((Object)constructor2));
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      assertTrue(constructor1.equals((Object)constructor2));
      assertTrue(constructor1.equals((Object)constructor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      Annotation[] annotationArray1 = classUtil_Ctor1.getDeclaredAnnotations();
      assertTrue(constructor1.equals((Object)constructor2));
      assertTrue(constructor1.equals((Object)constructor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(annotationArray1);
      assertSame(class2, class4);
      assertSame(class2, class1);
      assertNotSame(constructor1, constructor0);
      assertNotSame(constructor1, constructor2);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      AnnotatedType[] annotatedTypeArray1 = constructor1.getAnnotatedExceptionTypes();
      assertTrue(constructor1.equals((Object)constructor2));
      assertTrue(constructor1.equals((Object)constructor0));
      assertFalse(annotatedTypeArray1.equals((Object)annotatedTypeArray0));
      assertNotNull(annotatedTypeArray1);
      assertSame(class2, class4);
      assertSame(class2, class1);
      assertNotSame(constructor1, constructor0);
      assertNotSame(constructor1, constructor2);
      assertNotSame(annotatedTypeArray1, annotatedTypeArray0);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals(0, annotatedTypeArray1.length);
      
      Constructor<?> constructor3 = classUtil_Ctor1.getConstructor();
      assertTrue(constructor1.equals((Object)constructor2));
      assertTrue(constructor1.equals((Object)constructor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(constructor3);
      assertSame(class2, class4);
      assertSame(class2, class1);
      assertNotSame(constructor1, constructor0);
      assertNotSame(constructor1, constructor2);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertEquals("public java.lang.Error()", constructor3.toString());
      assertEquals(1, constructor3.getModifiers());
      assertFalse(constructor3.isVarArgs());
      assertFalse(constructor3.isSynthetic());
      assertFalse(constructor3.isAccessible());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, false);
      assertTrue(constructor1.equals((Object)constructor2));
      assertTrue(constructor1.equals((Object)constructor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertSame(class2, class4);
      assertSame(class2, class1);
      assertNotSame(constructor1, constructor0);
      assertNotSame(constructor1, constructor2);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      String string0 = ClassUtil.getClassDescription(class3);
      assertNotNull(string0);
      assertEquals("`java.lang.annotation.Annotation`", string0);
      
      Class<MapType> class5 = MapType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-13);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)78, (byte)11, (byte) (-13)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Iterator<Boolean> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, iterator0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[null]");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)78, objectMapper1, bufferedOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(78, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectMapper0);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(78, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(78, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<IOException> class1 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<IOException> class3 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      assertNotNull(list0);
      assertSame(class3, class1);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class4);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Annotation> class1 = Annotation.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNull(class2);
      
      Class<String> class3 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, (Class<?>) null, false);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector1).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector1);
      assertFalse(basicBeanDescription1.equals((Object)basicBeanDescription0));
      assertNotNull(basicBeanDescription1);
      assertNotSame(basicBeanDescription1, basicBeanDescription0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      List<BeanPropertyDefinition> list1 = basicBeanDescription1.findProperties();
      assertFalse(basicBeanDescription1.equals((Object)basicBeanDescription0));
      assertNull(list1);
      assertNotSame(basicBeanDescription1, basicBeanDescription0);
      
      // Undeclared exception!
//      try { 
        basicBeanDescription1.findFactoryMethod((Class<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      String string0 = ClassUtil.nullOrToString(byte0);
      assertNotNull(string0);
      
      Long long0 = new Long((byte) (-99));
      assertNotNull(long0);
      assertEquals((-99L), (long)long0);
      
      String string1 = ClassUtil.getClassDescription(long0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.Long`", string1);
      
      Class<Byte> class2 = Byte.class;
      boolean boolean1 = ClassUtil.isProxyType(class2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertNotNull(annotatedType0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotatedTypeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor1.getDeclaredAnnotations();
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(annotationArray0);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[][] annotationArray1 = classUtil_Ctor1.getParameterAnnotations();
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(annotationArray1);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      AnnotatedType[] annotatedTypeArray1 = constructor0.getAnnotatedExceptionTypes();
      assertFalse(annotatedTypeArray1.equals((Object)annotatedTypeArray0));
      assertNotNull(annotatedTypeArray1);
      assertNotSame(annotatedTypeArray1, annotatedTypeArray0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotatedTypeArray1.length);
      
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(constructor1);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.annotation.Annotation`", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      Class<String> class2 = String.class;
      Constructor<String> constructor2 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor2);
      assertFalse(constructor2.isSynthetic());
      assertEquals(1, constructor2.getModifiers());
      assertEquals("public java.lang.String()", constructor2.toString());
      assertFalse(constructor2.isVarArgs());
      assertFalse(constructor2.isAccessible());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, classArray0.length);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, typeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class3);
      assertNull(annotation0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      
      String string0 = ClassUtil.backticked("x043GHcj'Z__(");
      assertNotNull(string0);
      assertEquals("`x043GHcj'Z__(`", string0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertNull(annotation0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      Annotation annotation1 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertNull(annotation1);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      
      Iterator<ArrayType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class3);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      assertSame(class3, class1);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class4);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-13));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals((-13), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      String string0 = sQLTransactionRollbackException0.getLocalizedMessage();
      assertNull(string0);
      assertEquals((-13), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertEquals((-13), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals((-13), sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException1, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = ClassUtil.backticked("elementType");
      assertNotNull(string0);
      assertEquals("`elementType`", string0);
      
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      String string1 = constructor0.getName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.io.IOException", string1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        sQLTransactionRollbackException0.setStackTrace((StackTraceElement[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0);
      assertNotNull(jsonAutoDetect_Value0);
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getCreatorVisibility());
      
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getCreatorVisibility());
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ObjectMapper objectMapper4 = objectMapper3.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertNotNull(objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getCreatorVisibility());
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper5 = objectMapper4.disable(mapperFeatureArray0);
      assertNotNull(objectMapper5);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper3);
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(1, mapperFeatureArray0.length);
      
      ObjectReader objectReader0 = objectMapper5.readerForUpdating(jsonAutoDetect_Visibility0);
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper3);
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NONE, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(1, mapperFeatureArray0.length);
      
      ClassUtil.findEnumType((Enum<?>) jsonTypeInfo_As0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      
      boolean boolean2 = vector0.add((JavaType) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("ujknown");
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      
      TypeBindings typeBindings2 = typeBindings0.withUnboundVariable("ujknown");
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings2.equals((Object)typeBindings1));
      assertTrue(typeBindings2.equals((Object)typeBindings0));
      assertNotNull(typeBindings2);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings2, typeBindings0);
      assertNotSame(typeBindings2, typeBindings1);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings2.isEmpty());
      assertEquals(0, typeBindings2.size());
      
      String string0 = typeBindings0.toString();
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertNotNull(string0);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertEquals("<>", string0);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeBindings typeBindings3 = typeBindings0.withUnboundVariable("<>");
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings3.equals((Object)typeBindings0));
      assertTrue(typeBindings3.equals((Object)typeBindings1));
      assertTrue(typeBindings3.equals((Object)typeBindings2));
      assertNotNull(typeBindings3);
      assertNotSame(typeBindings0, typeBindings3);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings3, typeBindings0);
      assertNotSame(typeBindings3, typeBindings1);
      assertNotSame(typeBindings3, typeBindings2);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings3.size());
      assertTrue(typeBindings3.isEmpty());
      
      JavaType javaType1 = typeBindings0.findBoundType("SQRv' ml2Wm>]=v*7");
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings0.equals((Object)typeBindings3));
      assertNull(javaType1);
      assertNotSame(typeBindings0, typeBindings3);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<Float> class1 = Float.class;
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Iterator<ArrayType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(12, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Annotation> class1 = Annotation.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNull(class2);
      
      Class<String> class3 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, (Class<?>) null, false);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      List<BeanPropertyDefinition> list1 = basicBeanDescription0.findProperties();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod((Class<?>[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      
      Class<Void> class3 = Void.class;
      Class<ReferenceType> class4 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class4, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      Class<JsonDeserializer> class5 = JsonDeserializer.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class5, class2, true);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Character> class2 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      
      SQLException sQLException0 = new SQLException("*~q", "*~q", 424);
      assertNotNull(sQLException0);
      assertEquals(424, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: *~q", sQLException0.toString());
      assertEquals("*~q", sQLException0.getMessage());
      assertEquals("*~q", sQLException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      assertNotNull(sQLDataException0);
      assertEquals(424, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: *~q", sQLException0.toString());
      assertEquals("*~q", sQLException0.getMessage());
      assertEquals("*~q", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: *~q", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLException: *~q", sQLDataException0.toString());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfIOE(sQLDataException0);
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals(424, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: *~q", sQLException0.toString());
      assertEquals("*~q", sQLException0.getMessage());
      assertEquals("*~q", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: *~q", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLException: *~q", sQLDataException0.toString());
      assertEquals("java.sql.SQLDataException: java.sql.SQLException: *~q", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLException: *~q", sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      
      Throwable throwable0 = null;
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Class<AccessPattern> class5 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class4, class5, false);
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = "9:qj_!Kf.Ved";
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(18, methodArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "9:qj_!Kf.Ved");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vals", "vals");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("vals", sQLTimeoutException0.getMessage());
      assertEquals("vals", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: vals", sQLTimeoutException0.toString());
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, ": cannot determine type parameters");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // : cannot determine type parameters
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      
      boolean boolean2 = vector0.add((JavaType) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("unknown");
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      
      TypeBindings typeBindings2 = typeBindings0.withUnboundVariable("unknown");
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings2.equals((Object)typeBindings0));
      assertTrue(typeBindings2.equals((Object)typeBindings1));
      assertNotNull(typeBindings2);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings2, typeBindings1);
      assertNotSame(typeBindings2, typeBindings0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(typeBindings2.isEmpty());
      assertEquals(0, typeBindings2.size());
      
      String string0 = typeBindings0.toString();
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertNotNull(string0);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertEquals("<>", string0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeBindings typeBindings3 = typeBindings0.withUnboundVariable("<>");
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings3.equals((Object)typeBindings2));
      assertTrue(typeBindings3.equals((Object)typeBindings1));
      assertTrue(typeBindings3.equals((Object)typeBindings0));
      assertNotNull(typeBindings3);
      assertNotSame(typeBindings0, typeBindings3);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings3, typeBindings0);
      assertNotSame(typeBindings3, typeBindings2);
      assertNotSame(typeBindings3, typeBindings1);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings3.size());
      assertTrue(typeBindings3.isEmpty());
      
      JavaType javaType1 = typeBindings0.findBoundType("SQRv' ml2Wm>]=v*7");
      assertTrue(typeBindings0.equals((Object)typeBindings3));
      assertTrue(typeBindings0.equals((Object)typeBindings2));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertNull(javaType1);
      assertNotSame(typeBindings0, typeBindings3);
      assertNotSame(typeBindings0, typeBindings2);
      assertNotSame(typeBindings0, typeBindings1);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      MockException mockException0 = new MockException("ALLOW_UNQUOTED_CONTROL_CHARS", sQLIntegrityConstraintViolationException0);
      assertNotNull(mockException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: org.evosuite.runtime.mock.java.lang.MockThrowable: ALLOW_UNQUOTED_CONTROL_CHARS", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ALLOW_UNQUOTED_CONTROL_CHARS", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: ALLOW_UNQUOTED_CONTROL_CHARS
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      String string0 = "(_E7sP1B>eY";
      String string1 = ClassUtil.quotedOr(class0, "(_E7sP1B>eY");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"class java.lang.Float\"", string1);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, (String) null);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      
      // Undeclared exception!
//      try { 
        filteringGeneratorDelegate0.overrideStdFeatures(47, 47);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, class0, "&ebC");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ReferenceType) must override method '&ebC'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Short> class1 = Short.class;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Short has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(28, methodArray0.length);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.nameOf(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      Short short0 = new Short((short)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotNull(objectReader0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      assertNotNull(filterOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, objectReader0, filterOutputStream0, byteArray0, (byte) (-103), false);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-103), (byte)2}, byteArray0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals((-103), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, byteArray0.length);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-103), (byte)2}, byteArray0);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals((-103), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(9, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals((-103), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(9, uTF8JsonGenerator1.getFeatureMask());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 57343;
      intArray0[1] = 3;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=hG6u`^XXpq|");
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: =hG6u`^XXpq|", sQLTransientConnectionException0.toString());
      assertEquals("=hG6u`^XXpq|", sQLTransientConnectionException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}", sQLTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: =hG6u`^XXpq|", sQLTransientConnectionException0.toString());
      assertEquals("=hG6u`^XXpq|", sQLTransientConnectionException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("g^PFlX^>Bx|z0\"\"O:k", "+t<", intArray0, sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {57343, 3}, intArray0);
      assertNotNull(batchUpdateException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: =hG6u`^XXpq|", sQLTransientConnectionException0.toString());
      assertEquals("=hG6u`^XXpq|", sQLTransientConnectionException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("+t<", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("g^PFlX^>Bx|z0\"\"O:k", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: g^PFlX^>Bx|z0\"\"O:k", batchUpdateException0.toString());
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) batchUpdateException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.BatchUpdateException: g^PFlX^>Bx|z0\"\"O:k
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "+`^QE5o\"Al{]";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = "6$^ +?*v";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6$^ +?*v", "AUTO");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("-Infinity", hashMap0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+`^QE5o\"Al{]", sQLClientInfoException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException1.toString());
      
      sQLClientInfoException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+`^QE5o\"Al{]", "NULL", sQLNonTransientConnectionException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: +`^QE5o\"Al{]", sQLRecoverableException0.toString());
      assertEquals("NULL", sQLRecoverableException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      sQLRecoverableException0.addSuppressed(sQLNonTransientConnectionException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("AUTO", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6$^ +?*v", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("6$^ +?*v", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: -Infinity", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("-Infinity", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: +`^QE5o\"Al{]", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("+`^QE5o\"Al{]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: +`^QE5o\"Al{]", sQLRecoverableException0.toString());
      assertEquals("NULL", sQLRecoverableException0.getSQLState());
      assertEquals("+`^QE5o\"Al{]", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNotNull(type0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      
      Iterable<ValueInstantiators> iterable0 = deserializerFactoryConfig1.valueInstantiators();
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(iterable0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      
      JsonParser jsonParser0 = null;
      Class<Long> class2 = Long.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonToken jsonToken1 = JsonToken.VALUE_STRING;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, class1, jsonToken1, "PQnEH+'{ %p2_N@d|^`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = true;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
//      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot pass null DeserializerFactory
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertNull(annotation0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      String string0 = ClassUtil.quotedOr((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      String string0 = ClassUtil.nullOrToString(byte0);
      assertNotNull(string0);
      
      Long long0 = new Long((byte) (-99));
      assertNotNull(long0);
      assertEquals((-99L), (long)long0);
      
      String string1 = ClassUtil.getClassDescription(long0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.Long`", string1);
      
      Class<Byte> class2 = Byte.class;
      boolean boolean1 = ClassUtil.isProxyType(class2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
//      try { 
        ClassUtil.createInstance(class3, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "java.lang", true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1298), true);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1298), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1298), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(256, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals((-1298), uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(256, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 56320;
      intArray0[1] = 55296;
      intArray0[2] = 55296;
      intArray0[3] = 55296;
      intArray0[4] = 57343;
      intArray0[5] = 0;
      intArray0[6] = 56320;
      intArray0[7] = 2609;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {56320, 55296, 55296, 55296, 57343, 0, 56320, 2609}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(8, intArray0.length);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%ur(fX9!yz.DtM\u0006%c@", "%ur(fX9!yz.DtM\u0006%c@", 2, batchUpdateException0);
      assertArrayEquals(new int[] {56320, 55296, 55296, 55296, 57343, 0, 56320, 2609}, intArray0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: %ur(fX9!yz.DtM\u0006%c@", sQLTransientConnectionException0.toString());
      assertEquals("%ur(fX9!yz.DtM\u0006%c@", sQLTransientConnectionException0.getMessage());
      assertEquals("%ur(fX9!yz.DtM\u0006%c@", sQLTransientConnectionException0.getSQLState());
      assertEquals(2, sQLTransientConnectionException0.getErrorCode());
      assertEquals(8, intArray0.length);
      
      SQLDataException sQLDataException0 = new SQLDataException("java.lang", sQLTransientConnectionException0);
      assertArrayEquals(new int[] {56320, 55296, 55296, 55296, 57343, 0, 56320, 2609}, intArray0);
      assertNotNull(sQLDataException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: %ur(fX9!yz.DtM\u0006%c@", sQLTransientConnectionException0.toString());
      assertEquals("%ur(fX9!yz.DtM\u0006%c@", sQLTransientConnectionException0.getMessage());
      assertEquals("%ur(fX9!yz.DtM\u0006%c@", sQLTransientConnectionException0.getSQLState());
      assertEquals(2, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.lang", sQLDataException0.toString());
      assertEquals("java.lang", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLDataException: java.lang
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertNotNull(annotatedType0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertNotNull(annotatedTypeArray0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotatedTypeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = classUtil_Ctor1.getDeclaredAnnotations();
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(annotationArray0);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      
      AnnotatedType[] annotatedTypeArray1 = constructor0.getAnnotatedExceptionTypes();
      assertFalse(annotatedTypeArray1.equals((Object)annotatedTypeArray0));
      assertNotNull(annotatedTypeArray1);
      assertNotSame(annotatedTypeArray1, annotatedTypeArray0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotatedTypeArray1.length);
      
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(constructor1);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Error()", constructor1.toString());
      
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Error()", constructor1.toString());
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.annotation.Annotation`", string0);
      
      Class<Void> class2 = Void.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Void is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<CollectionType> class2 = CollectionType.class;
//      try { 
        ClassUtil.createInstance(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "S-ZmqgHLB");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.findSuperTypes(class4, class5);
      Class<MapType> class6 = MapType.class;
      ClassUtil.getGenericInterfaces(class6);
      Class<Object> class7 = Object.class;
      ClassUtil.getConstructors(class7);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getExceptionTypes();
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.backticked("x043GHcj'Z__(");
      ClassUtil.isObjectOrPrimitive(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "e");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(jsonMappingException0);
      Throwable throwable0 = ClassUtil.getRootCause(batchUpdateException0);
      assertSame(throwable0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ClassUtil.backticked("7N");
      ClassUtil.nonNullString("OaoT~4");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("OaoT~4", "POJO");
      SQLException sQLException0 = new SQLException("POJO", "ZERO_LENGTH_ENUM_ARRAY", sQLRecoverableException0);
      DataTruncation dataTruncation0 = new DataTruncation((-993), true, false, (-2579), (-2579), sQLException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
