/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:05:04 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Date;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Long> class0 = Long.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<BeanSerializer> class1 = BeanSerializer.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.defaultValue(class0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-102);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0, (int) (byte) (-5), (-1808662384));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "I:O[i,7<E]0`.v ");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonParser0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: I:O[i,7<E]0`.v 
//         //  at [Source: (byte[])\"\uFFFD\u0000w\uFFFD\u0001\uFFFD\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.defaultValue(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isJacksonStdImpl(class0);
      int[] intArray0 = new int[7];
      intArray0[0] = 70;
      intArray0[1] = (-1028);
      intArray0[2] = (-562);
      intArray0[3] = 8;
      intArray0[4] = 96;
      intArray0[5] = 1536;
      intArray0[6] = (-699427978);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Boolean boolean0 = Boolean.TRUE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      JsonParser jsonParser0 = objectMapper2.treeAsTokens(objectNode0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) batchUpdateException0);
      batchUpdateException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, ">}ym.kc~zN@HQxM:?<");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.wrapperType(class0);
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Class<InputStream> class3 = InputStream.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      MapType mapType1 = mapType0.withTypeHandler(class0);
      MapLikeType mapLikeType0 = mapType1.withKeyType(mapType0);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class4, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString((String) null);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class1 = Long.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class0, class1);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.Long` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Class`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isLocalType(class0, true);
      Class<MapType> class1 = MapType.class;
      Class<CollectionType> class2 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler((Object) null);
      TypeBindings.create(class1, (List<JavaType>) null);
      Short short0 = new Short((short) (-9198));
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) short0, (Object) class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(short0);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<IOException>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Byte> class1 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Boolean> class1 = Boolean.class;
      Class<Double> class2 = Double.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf((Named) null);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getOuterClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, " 3.3JN*#2B8UM4Y");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLRecoverableException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("JSON");
      stringBuffer0.append(stringBuffer1);
      charArrayWriter0.append((CharSequence) stringBuffer0);
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getPackageName(class0);
      ClassUtil.findEnumType((Enum<?>) jsonFactory_Feature0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.remove(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<?> class0 = ClassUtil.classOf(enumSet0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "java.lang.RuntimeEx");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.backticked("java.lang.RuntimeEx");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      Class<Error> class3 = Error.class;
      Error error0 = ClassUtil.createInstance(class3, false);
      ClassUtil.primitiveType(class2);
      Error error1 = (Error)ClassUtil.throwRootCauseIfIOE(error0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) error1, "`java.lang.RuntimeEx`");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isBogusClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ClassUtil.rawClass(javaType0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1680);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2414), (ObjectCodec) null, pipedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.");
      MockIOException mockIOException0 = new MockIOException(sQLInvalidAuthorizationSpecException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Long long0 = new Long(0L);
      ClassUtil.classNameOf(long0);
      Class<AccessPattern> class2 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(resolvedRecursiveType1);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      ClassUtil.findEnumType(enumSet0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.hasClass(accessPattern1, class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isBogusClass(class1);
      String string0 = " has no default (no arg) constructor";
      MockError mockError0 = new MockError(" has no default (no arg) constructor");
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement(" )ZRdwO*Qx?|!", " )ZRdwO*Qx?|!", " )ZRdwO*Qx?|!", (-2428));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(" )ZRdwO*Qx?|!", "|6)a<%P7 ;", " )ZRdwO*Qx?|!", (-2428));
      MockException mockException0 = new MockException(" )ZRdwO*Qx?|!", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(mockException0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("|6)a<%P7 ;", "|6)a<%P7 ;", " )ZRdwO*Qx?|!", 65280);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(" )ZRdwO*Qx?|!", "net.sf.cglib.proxy.java.lang.Integer", "t^zab?Q7", 65280);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("|6)a<%P7 ;", "net.sf.cglib.proxy.java.lang.Integer", " )ZRdwO*Qx?|!", 14);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("|6)a<%P7 ;", "net.sf.cglib.proxy.java.lang.Integer", " )ZRdwO*Qx?|!", 8);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement(" is not a primitive type", "net.sf.cglib.proxy.java.lang.Integer", "net.sf.cglib.proxy.java.lang.Integer", 13);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      Object object0 = new Object();
      ClassUtil.verifyMustOverride(class0, object0, " ?:CMdZSWdt>GCp");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass((Object) null, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "`";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`");
      SQLException sQLException0 = new SQLException("`", "`", 443, mockRuntimeException0);
      sQLException0.fillInStackTrace();
      sQLException0.spliterator();
      Throwable throwable0 = mockRuntimeException0.initCause(sQLException0);
      mockRuntimeException0.getCause();
      ClassUtil.classOf(mockRuntimeException0);
      SQLDataException sQLDataException0 = new SQLDataException("`", "`", throwable0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "Qs";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qs");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getDeclaringClass(class0);
      Character character0 = Character.valueOf('7');
      ClassUtil.classNameOf(character0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0, accessPattern0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      MockError mockError0 = new MockError();
      String string0 = "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("primitive", class0, "oaD;-Ena0e$;&?PC1");
      ClassUtil.throwIfError(jsonMappingException0);
      System.setCurrentTimeMillis((-3149L));
      jsonMappingException0.getPathReference();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isBogusClass(class1);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.io.IOException` from String \"primitive\": oaD;-Ena0e$;&?PC1
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "n)");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.Long", "", 13, hashMap0, jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // n)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<BeanSerializer> class0 = BeanSerializer.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<InputStream> class2 = InputStream.class;
//      try { 
        ClassUtil.createInstance(class2, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class java.io.InputStream, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isConcrete(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "org.hibernate.proxy.java.lang.Integer");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.remove(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      int[] intArray0 = new int[2];
      intArray0[0] = 127;
      intArray0[1] = (-1096);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Z");
      mockRuntimeException0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "Z");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "m]R3YX", 2729);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation", (int[]) null, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("array", "com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation", batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLSyntaxErrorException0);
      ClassUtil.throwIfError(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getClassMethods(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isBogusClass(class0);
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      IOException iOException0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
//      try { 
        ClassUtil.throwIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isLocalType(class0, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Should not be called on this type", "short", 0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Should not be called on this type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      ClassUtil.findEnumType(enumMap0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, objectMapper1, (OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("JSON");
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockRuntimeException0, class0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `org.evosuite.runtime.mock.java.lang.MockRuntimeException`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getOuterClass(class1);
      Class<Boolean> class2 = Boolean.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, "Hp[S&@uv95zMh7JE");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("Hp[S&@uv95zMh7JE");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      String string0 = ".G";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".G");
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Cannot figure out type for EnumSet (odd JDK platform?)");
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Cannot figure out type for EnumSet (odd JDK platform?)");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockIOException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isConcrete(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapLikeType mapLikeType0 = mapType0.withStaticTyping();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(mapLikeType0, " has no default (no arg) constructor", " has no default (no arg) constructor");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id ' has no default (no arg) constructor' as a subtype of [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]:  has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<Character> class1 = Character.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      // Undeclared exception!
//      try { 
        typeFactory0.constructMapType(class2, (JavaType) null, (JavaType) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf((Named) null);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.nonNullString("[null]");
      ClassUtil.nameOf(class0);
      SQLWarning sQLWarning0 = new SQLWarning("[null]");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "[null]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass(class0, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) collectionType0, "<{k@iy6w[sIe|c'w'%");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(jsonMappingException1);
      mockRuntimeException0.getSuppressed();
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.nonNullString((String) null);
      ClassUtil.getOuterClass(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getConstructors(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      Class<Module> class2 = Module.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.nameOf((Named) null);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findEnumType(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("[null]");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "[null]");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float(157.02863F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      MockError mockError0 = new MockError((String) null, (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "IwIJkW06TRy");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<Class<Long>> arrayList0 = new ArrayList<Class<Long>>();
      TreeSet<Float> treeSet0 = new TreeSet<Float>();
      arrayList0.containsAll(treeSet0);
      Class<Long> class0 = Long.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.hasClass(arrayList0, class1);
      Class<Byte> class2 = Byte.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(452);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Byte> class3 = Byte.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class3, "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter", placeholderForType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "Cannot figure out type for EnumSet (odd JDK platform?)");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayList<Class<Long>> arrayList0 = new ArrayList<Class<Long>>();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.hasClass(arrayList0, class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<Void> class1 = Void.class;
      mapType0.findSuperType(class1);
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      ClassUtil.throwIfError(sQLNonTransientException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      enumMap0.put(accessPattern0, noClass0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.throwIfError(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, (NoClass) null);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "net.sf.cglib.proxy.java.lang.Float");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.java.lang.Float
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<CollectionType> class1 = CollectionType.class;
      ArrayList<Class<Long>> arrayList0 = new ArrayList<Class<Long>>();
      ClassUtil.hasClass(class0, class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.findRawSuperTypes(class1, class1, false);
      MockError mockError0 = new MockError("6MnVfi:KqGu0pl");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      mockError0.addSuppressed(sQLClientInfoException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("enum");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory1.disable(jsonFactory_Feature0);
      Class<Float> class0 = Float.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.from((JsonParser) null, "\"%s\"", (Throwable) sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class1);
      EnumMap<AccessPattern, NoClass> enumMap1 = new EnumMap<AccessPattern, NoClass>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLFeatureNotSupportedException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      ClassUtil.nameOf(class1);
      Class<Long> class3 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class3, true);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.String is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("(", (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      charArrayWriter0.append((CharSequence) stringBuffer0);
      charArrayWriter0.append('m');
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mapType0.withValueHandler(mockRuntimeException0);
      mapType0.findSuperType(class0);
      MapLikeType mapLikeType0 = mapType0.withValueHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("i3iw!zBJg_Gcss6", mockError0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("0aG1ouDR", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("net.sf.cglib.proxy.java.lang.Long", "|rrak", 31, sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException1);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasClass(mockIOException0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findConstructor(class1, false);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.findSuperTypes(class2, class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, false);
      MockIOException mockIOException0 = new MockIOException();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[2]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(simpleModule0);
      JavaType javaType1 = referenceType2.withContentType(javaType0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(javaType1, class1, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Object object0 = new Object();
      ClassUtil.classNameOf(object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      LinkedList<SimpleModule> linkedList0 = new LinkedList<SimpleModule>();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      ClassUtil.throwIfRTE(jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isConcrete(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isProxyType(class0);
      Class<Void> class2 = Void.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Void is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getClassMethods(class0);
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.findClassAnnotations(class1);
      Double double0 = new Double(0.0);
      ClassUtil.getClassDescription(type0);
      ClassUtil.isJacksonStdImpl(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("`com.fasterxml.jackson.core.JsonProcessingException`", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException1);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findEnumType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.canBeABeanType(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-712));
      ObjectReader objectReader0 = objectMapper2.readerFor((JavaType) placeholderForType0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`java.lang.Double`");
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLDataException sQLDataException0 = new SQLDataException("WRITE_DATE_KEYS_AS_TIMESTAMPS", "vs6G`O.<EjJsT", (-1233860954));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZERO_LENGTH_ENUM_ARRAY", "elementType", sQLDataException0);
      sQLTransactionRollbackException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGeneratorDelegate0, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", sQLTransactionRollbackException0);
      ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class2, false);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<Boolean> class3 = Boolean.class;
//      try { 
        ClassUtil.createInstance(class3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Boolean has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'o<");
      ClassUtil.classOf((Object) null);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      Class<Boolean> class3 = Boolean.class;
//      try { 
        ClassUtil.createInstance(class3, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Boolean has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      MapType mapType1 = mapType0.withKeyType(referenceType1);
      referenceType1.withContentTypeHandler(referenceType0);
      MapType mapType2 = mapType0.withContentValueHandler(mapType1);
      mapType2.withValueHandler(mapType0);
      Float float0 = new Float(761.7F);
      Class<Character> class2 = Character.class;
      ClassUtil.hasClass(float0, class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.nameOf(class4);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class4, 1);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.nullOrToString(class1);
      Class<Character> class5 = Character.class;
      Class<PlaceholderForType> class6 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class5, class6);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "wbRZ]H");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      HashSet<SimpleModule> hashSet0 = new HashSet<SimpleModule>(115);
      PriorityQueue<SimpleModule> priorityQueue0 = new PriorityQueue<SimpleModule>(hashSet0);
      objectMapper0.registerModules((Iterable<? extends Module>) priorityQueue0);
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("t", "type");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.nonNullString("WqE1K.=NR.7US]@mx^i");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, list0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SQLDataException sQLDataException0 = new SQLDataException("WqE1K.=NR.7US]@mx^i", "WqE1K.=NR.7US]@mx^i", 0);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLDataException: WqE1K.=NR.7US]@mx^i
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      mapType0.withValueHandler(typeFactory0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasClass((Object) null, class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.nameOf(class3);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, 1);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.nullOrToString(accessPattern0);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class4);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<NoClass> class1 = NoClass.class;
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.rawClass((JavaType) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLDataException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLDataException0);
      ClassUtil.classOf(class2);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class3, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withValueHandler(typeFactory0);
      JavaType javaType0 = mapLikeType0.findSuperType(class0);
      mapLikeType0.withValueHandler(javaType0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.rawClass(javaType0);
      SQLDataException sQLDataException0 = new SQLDataException();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLDataException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLDataException0);
      Class<?> class2 = ClassUtil.classOf(mapLikeType0);
      ClassUtil.isObjectOrPrimitive(class2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("%W6`(N%7", "yA0_&C", (Map<String, ClientInfoStatus>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException1.forEach(consumer0);
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException1);
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0, "IO3%dy\"3CCNAC!#");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // IO3%dy\"3CCNAC!#
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class1, true);
      constructor1.getAnnotatedParameterTypes();
      constructor1.getAnnotations();
      constructor1.getDeclaredAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor1.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constructor1.getAnnotationsByType(class3);
      constructor1.isAnnotationPresent(class3);
      constructor1.getAnnotatedParameterTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Long> class5 = Long.class;
      ClassUtil.findClassAnnotations(class5);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.primitiveType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, (Throwable) null);
      ClassUtil.getClassDescription(jsonMappingException0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class2);
      Class<IOException> class3 = IOException.class;
      Class<String> class4 = String.class;
      Constructor<String> constructor1 = ClassUtil.findConstructor(class4, false);
      constructor1.getDeclaredAnnotations();
      ClassUtil.isConcrete(class3);
      ClassUtil.quotedOr("?$H/", "?$H/");
      ClassUtil.emptyIterator();
      Class<Integer> class5 = Integer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isLocalType(class5, true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.RuntimeException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.nonNullString("Internal error: unable to locate supertype (%s) from resolved subtype %s");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.isAnnotationPresent(class1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getClassMethods(class3);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class4);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaringClass();
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short) (-3));
      Short short1 = new Short((short) (-2390));
      ClassUtil.nonNull((Short) null, short1);
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class0);
      System.setCurrentTimeMillis((-1628L));
      ClassUtil.emptyIterator();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON");
      JsonMappingException.from(jsonParser0, "Default constructor for ", (Throwable) sQLNonTransientException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-661868634), objectMapper2, (OutputStream) null, byteArray0, 45, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", " [truncated]");
      MockIOException mockIOException0 = new MockIOException("JSON", sQLWarning0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.primitiveType(class1);
      ClassUtil.nullOrToString((Object) null);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor1.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<Object> class1 = Object.class;
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      ClassUtil.canBeABeanType(class2);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Short short0 = new Short((short)92);
      Short short1 = new Short((short)1399);
      ClassUtil.nonNull(short1, (Short) null);
      Class<Character> class1 = Character.class;
      ClassUtil.canBeABeanType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, (String) null, (Throwable) sQLTransientException0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",v:ur;e");
      ClassUtil.emptyIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "fbM}e<@ZSam", (Throwable) sQLNonTransientConnectionException0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // fbM}e<@ZSam
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<IOException> class1 = IOException.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.getClassMethods(class1);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getConstructors(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.canBeABeanType(class4);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.isLocalType(class5, true);
      Class<PlaceholderForType> class6 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class6);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getConstructors(class1);
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.nonNullString(")wF[)&[.p$8j5j=gj\"+");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.getOuterClass(class1);
      ClassUtil.classNameOf(list0);
      Class<Float> class2 = Float.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getGenericSuperclass(class3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class4 = HashMap.class;
      Class<Error> class5 = Error.class;
      MapType mapType0 = typeFactory0.constructMapType(class4, class5, class0);
      ReferenceType.upgradeFrom(mapType0, mapType0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = ClassUtil.nonNull(accessPattern0, accessPattern0);
      ClassUtil.classOf(accessPattern1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getOuterClass(class0);
      ClassUtil.classNameOf(list0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getGenericSuperclass(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      Class<NoClass> class4 = NoClass.class;
      typeFactory0.constructRawCollectionLikeType(class4);
      Class<Short> class5 = Short.class;
      typeFactory0.constructMapType(class3, class5, class3);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`java.util.LinkedList`", (String) null, 1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("w%UW<IwW|&7`GT", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("w%UW<IwW|&7`GT", sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0, ".\"<F;&nGMz,lZRElm");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // .\"<F;&nGMz,lZRElm
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      SQLDataException sQLDataException0 = new SQLDataException("awr1ukLI^kD2?>Pt4_I");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      SQLDataException sQLDataException0 = new SQLDataException("awr1ukLI^kD2?>Pt4_I");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.throwIfError(sQLDataException0);
      Class<Long> class2 = Long.class;
      ClassUtil.isLocalType(class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class3);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withValueHandler(typeFactory0);
      JavaType javaType0 = mapLikeType0.findSuperType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(javaType0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.rawClass(javaType0);
      SQLDataException sQLDataException0 = new SQLDataException();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLDataException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLDataException0);
      ClassUtil.isJacksonStdImpl((Object) mapLikeType1);
      Class<?> class2 = ClassUtil.classOf(mapLikeType0);
      ClassUtil.isObjectOrPrimitive(class2);
      Long long0 = new Long(1L);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, long0, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Long (of class java.lang.String) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-3));
      ClassUtil.nonNull(short0, short1);
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Short short0 = new Short((short) (-3));
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.nonNullString("Default constructor for ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericSuperclass(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class2 = Short.class;
      Class<HashMap> class3 = HashMap.class;
      Class<Object> class4 = Object.class;
      typeFactory0.constructMapType(class3, class4, class4);
      ClassUtil.classOf(class2);
      ClassUtil.emptyIterator();
      Class<IOException> class5 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class5, false);
      constructor0.getParameters();
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getOuterClass(class1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2146);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Short short0 = new Short((short)3165);
      ClassUtil.nonNull(short0, short0);
      Class<IOException> class0 = IOException.class;
      Class<String> class1 = String.class;
      ClassUtil.isProxyType(class1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";{?qD:#@BttcSgL");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      Class<Object> class2 = Object.class;
      Object object0 = ClassUtil.createInstance(class2, true);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) short0;
      objectArray0[3] = (Object) ";{?qD:#@BttcSgL";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) short0;
      PrintStream printStream0 = mockPrintStream0.printf(";{?qD:#@BttcSgL", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JsonIgnoreProperties.Value(ignored=%s,ignoreUnknown=%s,allowGetters=%s,allowSetters=%s,merge=%s)", ".vFBkdVh-=3$");
      sQLTransactionRollbackException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";{?qD:#@BttcSgL", ";{?qD:#@BttcSgL");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Short short0 = new Short((short)3165);
      Short short1 = new Short((short)3165);
      ClassUtil.nonNull(short1, short0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      constructor0.getAnnotation(class1);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getAnnotations();
      constructor0.getDeclaredAnnotations();
      constructor0.isAnnotationPresent(class1);
      Class<Annotation> class2 = Annotation.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      constructor0.isAnnotationPresent(class2);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<NoClass> class4 = NoClass.class;
      Class<IOException> class5 = IOException.class;
      ClassUtil.findRawSuperTypes(class4, class5, false);
      ClassUtil.primitiveType(class4);
      ClassUtil.nullOrToString(class2);
      Class<CollectionType> class6 = CollectionType.class;
      ClassUtil.findConstructor(class6, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.Class@0000000001", "java.lang.Class@0000000001", (-2841));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "java.lang.Class@0000000001", 5, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "JLOW,";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("F})", "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId");
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransactionRollbackException0);
      sQLWarning0.fillInStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("JLOW,", "net.sf.cglib.proxy.", sQLWarning0);
      sQLDataException0.getStackTrace();
      sQLDataException0.setNextException(sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 3, sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // F})
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findEnumType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory1.disable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.util.ClassUtil");
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLDataException sQLDataException0 = new SQLDataException("vs6G`O.<EjJsT", "JSON", (-2424));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.JsonDeserializer", "Internal error: Cannot resolve sub-type for Class ", sQLDataException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "ar&=,ae&j+GG#z>6", sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLDataException: vs6G`O.<EjJsT
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findEnumType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonFactory0.disable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.core.util.MinimalPrettyPrinter", ".", 203);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Fc}^b8m", "vs6G`O.<EjJsT", batchUpdateException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGeneratorDelegate0, ".", sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransactionRollbackException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransactionRollbackException: Fc}^b8m
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Short short0 = new Short((short)3165);
      ClassUtil.nonNull(short0, short0);
      SQLDataException sQLDataException0 = new SQLDataException("bH*E9> `+XD+_#", "org.hibernate.proxy.java.lang.Double", 96);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("bH*E9> `+XD+_#", "org.hibernate.proxy.java.lang.Double", sQLDataException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "net.sf.cglib.proxy.", sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getClassMethods(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.getDeclaredFields(class3);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil classUtil0 = new ClassUtil();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.isJacksonStdImpl((Object) classUtil0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class1 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Character> class1 = Character.TYPE;
      Class<RuntimeException> class2 = RuntimeException.class;
      Type type0 = ClassUtil.getGenericSuperclass(class2);
      ClassUtil.nullOrToString(type0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "annotation");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, mockThrowable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot handle managed/back reference '%s': back reference type (%s) not compatible with managed type (%s)", "annotation", sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("m&/'v8P>", sQLNonTransientConnectionException0);
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Character> class1 = Character.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.getClassMethods(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class3);
      ClassUtil.getConstructors(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.isObjectOrPrimitive(class4);
      ClassUtil.nullOrToString(class4);
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.backticked("t3R^8KUAmC&7B 3S7");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Short short0 = new Short((short) (-3));
      ClassUtil.nonNull((Short) null, (Short) null);
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Short short0 = new Short((short)3165);
      ClassUtil.nonNull(short0, short0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getClassDescription(constructor0);
      constructor0.getDeclaredAnnotations();
      Class<IOException> class1 = IOException.class;
      constructor0.getDeclaredAnnotations();
      ClassUtil.quotedOr(constructor0, "`java.lang.reflect.Constructor`");
      ClassUtil.emptyIterator();
      Class<IOException> class2 = IOException.class;
      ClassUtil.isLocalType(class2, false);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nonNullString("Default constructor for ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getGenericSuperclass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<Short> class2 = Short.class;
      Class<Double> class3 = Double.class;
      typeFactory0.constructMapType(class1, class1, class3);
      ClassUtil.classOf(class2);
      ClassUtil.emptyIterator();
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, false);
      constructor0.getParameters();
      ClassUtil.isConcrete((Member) constructor0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Object is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findEnumType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.canBeABeanType(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer("serialVersionUID");
      charArrayWriter0.append((CharSequence) "serialVersionUID");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('P');
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) charArrayWriter1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      MockIOException mockIOException0 = new MockIOException();
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLDataException sQLDataException0 = new SQLDataException("vs6G`O.<EjJsT", "Internal error: Cannot resolve sub-type for Class ", 318);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZERO_LENGTH_ENUM_ARRAY", "vs6G`O.<EjJsT", sQLDataException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", sQLTransactionRollbackException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<NoClass> class1 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2146);
      placeholderForType0.actualType();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.throwIfError((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(317);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class1 = CollectionType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      Character character0 = new Character('J');
      ArrayType arrayType1 = arrayType0.withContentValueHandler(character0);
      TypeBindings typeBindings0 = arrayType1.getBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable((String) null);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) arrayType1;
      javaTypeArray0[2] = (JavaType) arrayType1;
      javaTypeArray0[3] = (JavaType) arrayType0;
      javaTypeArray0[4] = (JavaType) arrayType1;
      javaTypeArray0[5] = (JavaType) arrayType1;
      // Undeclared exception!
//      try { 
        placeholderForType0.refine(class0, typeBindings1, arrayType1, javaTypeArray0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil.classNameOf("Current token (%s) not of boolean type");
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLNonTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientConnectionException0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLNonTransientConnectionException
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getOuterClass(class0);
      ClassUtil.classNameOf(list0);
      Class<Float> class1 = Float.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getGenericSuperclass(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      Class<Short> class4 = Short.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class4, class3);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ClassUtil.classOf(referenceType0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
//      try { 
        ClassUtil.createInstance(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Integer has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nonNullString("Default constructor for ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      MockDate mockDate0 = null;
//      try {
        mockDate0 = new MockDate("ZERO_LENGTH_ENUM_ARRAY");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Date", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class1, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLException sQLException0 = new SQLException("vals", "vals", (-536), sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vals", "vals", (-536), sQLException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "NULL");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // NULL
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      String string0 = "awr1ukLI^kD2?>Pt4_I";
      SQLDataException sQLDataException0 = new SQLDataException("awr1ukLI^kD2?>Pt4_I");
      Throwable throwable0 = null;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("elementType", ":24u=$%qX)r45Gl", "elementType", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY", "awr1ukLI^kD2?>Pt4_I", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
//      try {
        stackTraceElement2 = new StackTraceElement((String) null, "vals", "^6W5yn^", 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nameOf((Named) null);
      ClassUtil.isBogusClass(class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.java.io.IOException", "[null]", intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateException1.getNextException();
      SQLWarning sQLWarning0 = new SQLWarning("[null]", (Throwable) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "org.hibernate.proxy.java.io.IOException");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // org.hibernate.proxy.java.io.IOException
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredMethods(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("4UM[jOd]R1d!`Cxlp/", "6VLT)rD3");
      ClassUtil.throwIfRTE(sQLTimeoutException0);
      Class<Short> class1 = Short.class;
      ClassUtil.getConstructors(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringBuffer stringBuffer0 = new StringBuffer("ZERO_LENGTH_ENUM_ARRAY");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('P');
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) charArrayWriter2);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) charArrayWriter2, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getClassMethods(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.getDeclaredFields(class3);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil classUtil0 = new ClassUtil();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isBogusClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class1);
      int int0 = 9999;
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, 9999);
      ClassUtil.throwIfIOE(sQLWarning0);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaringClass();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getConstructors(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class2);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getOuterClass(class1);
      TypeResolutionContext typeResolutionContext0 = null;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 7);
      Class<Character> class2 = Character.class;
      classArray0[0] = class2;
      Class<Character> class3 = Character.class;
      classArray0[1] = class3;
      Class<Character> class4 = Character.class;
      classArray0[2] = class4;
      Class<Character> class5 = Character.class;
      classArray0[3] = class5;
      Class<Character> class6 = Character.class;
      classArray0[4] = class6;
      Class<Character> class7 = Character.class;
      classArray0[5] = class7;
      Class<Character> class8 = Character.class;
      classArray0[6] = class8;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isLocalType((Class<?>) null, true);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getAnnotations();
      constructor0.getDeclaredAnnotations();
      constructor0.isAnnotationPresent(class1);
      Class<Annotation> class2 = Annotation.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      constructor0.isAnnotationPresent(class2);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<NoClass> class4 = NoClass.class;
      Class<IOException> class5 = IOException.class;
      ClassUtil.findRawSuperTypes(class4, class5, false);
      ClassUtil.primitiveType(class4);
      ClassUtil.nullOrToString(class2);
      Class<CollectionType> class6 = CollectionType.class;
      ClassUtil.findConstructor(class6, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.Class@0000000001", "java.lang.Class@0000000001", (-2841));
      Throwable throwable0 = ClassUtil.getRootCause(sQLSyntaxErrorException0);
      ClassUtil.getRootCause(throwable0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = true;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getParameterAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.instantiationException(class3, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<String> class0 = String.class;
      Long long0 = new Long(0L);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, long0, "Zo<h+t^DH]#");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Long (of class java.lang.String) must override method 'Zo<h+t^DH]#'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1196);
      intArray0[1] = 0;
      intArray0[2] = (-53);
      intArray0[3] = 0;
      intArray0[4] = 1299;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Elc0OH}", intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "size", (Throwable) batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", problem: ", "qC ijDU#c-FK[F3^", jsonMappingException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientConnectionException0);
      ClassUtil.getClassDescription(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "elementType";
      ClassUtil.backticked("elementType");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString("elementType");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      String string1 = null;
      int int0 = (-2642);
      StackTraceElement stackTraceElement0 = null;
//      try {
        stackTraceElement0 = new StackTraceElement((String) null, "elementType", "size", (-2642));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.Reflection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
//      try { 
        ClassUtil.findConstructor(class0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Byte> class2 = Byte.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("0T|Z/}&iX\"7Y+~", "0T|Z/}&iX\"7Y+~", (-518));
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("0T|Z/}&iX\"7Y+~", (String) null, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLTransactionRollbackException1);
      sQLTransactionRollbackException1.spliterator();
      sQLTransactionRollbackException1.getStackTrace();
      sQLTransactionRollbackException0.setNextException(sQLTransactionRollbackException1);
      sQLTransactionRollbackException0.addSuppressed(sQLTransactionRollbackException1);
      sQLTransactionRollbackException0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jackson.databind.util.ClassUtil$Ctor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.RuntimeException is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.fillInStackTrace();
      sQLWarning0.printStackTrace();
      sQLWarning0.getLocalizedMessage();
      SQLWarning sQLWarning1 = new SQLWarning((String) null, (String) null, 0, sQLWarning0);
      sQLWarning1.fillInStackTrace();
      // Undeclared exception!
//      try { 
        sQLWarning1.initCause(sQLWarning0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Can't overwrite cause with java.sql.SQLWarning
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.nameOf(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.hasEnclosingMethod(class1);
      Class<Float> class4 = Float.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription(constructor0);
      constructor0.getDeclaredAnnotations();
      Class<IOException> class1 = IOException.class;
      constructor0.getDeclaredAnnotations();
      ClassUtil.isConcrete(class1);
      ClassUtil.quotedOr(constructor0, "`java.lang.reflect.Constructor`");
      ClassUtil.emptyIterator();
      Class<IOException> class2 = IOException.class;
      ClassUtil.isLocalType(class2, false);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isLocalType(class0, false);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 3);
      Class<Character> class1 = Character.class;
      classArray0[0] = class1;
      Class<Character> class2 = Character.class;
      classArray0[1] = class2;
      basicBeanDescription0.removeProperty("elementType");
      Class<Character> class3 = Character.class;
      classArray0[2] = class3;
      // Undeclared exception!
//      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }
}
