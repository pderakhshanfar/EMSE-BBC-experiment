/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:24:03 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)116;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected token (null), expected VALUE_FALSE: JSON
//         //  at [Source: (byte[])\"Z[t\"; line: 1, column: 0]
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      JavaType javaType0 = objectMapper1.constructType(class0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(constructor0);
      Class<AccessPattern> class2 = AccessPattern.class;
      mapLikeType1.isTypeOrSubTypeOf(class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType1, mapLikeType1);
      referenceType0.getInterfaces();
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class1, true);
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("]K-G?i8)", "JSON");
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) sQLTransientException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientException: ]K-G?i8)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("non-static member class");
      mockRuntimeException0.getMessage();
      mockRuntimeException0.fillInStackTrace();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockException mockException0 = new MockException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, (Throwable) mockThrowable0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot construct instance of [null], problem: `org.evosuite.runtime.mock.java.lang.MockThrowable`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockException mockException0 = new MockException();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.nameOf(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Byte> class1 = Byte.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class1 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectReader objectReader2 = objectReader1.withRootName(propertyName0);
      objectReaderArray0[4] = objectReader2;
      ObjectReader objectReader3 = objectReader1.withFormatDetection(objectReaderArray0);
      TypeFactory typeFactory0 = objectReader3.getTypeFactory();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Module> class2 = Module.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(simpleType0, collectionLikeType0);
      SimpleType simpleType1 = referenceType0.withStaticTyping();
      SimpleType simpleType2 = referenceType1.withTypeHandler(simpleType1);
      SimpleType simpleType3 = simpleType2.withValueHandler(objectReader2);
      JavaType javaType0 = referenceType1.withContentType(collectionLikeType0);
      JavaType javaType1 = typeFactory0.moreSpecificType(simpleType3, javaType0);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes(javaType1, class3, true);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-73);
      SQLException sQLException0 = new SQLException((String) null, "VkcTl");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("JSON", "7/a}|[X645YSx", (-73), longArray0, sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", "7/a}|[X645YSx", (-1466), batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "JSON", (Throwable) sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      ClassUtil.nullOrToString(object0);
      String string0 = " gj!kSi,;7";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Object@0000000001");
      ClassUtil.nonNullString(" gj!kSi,;7");
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate1, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransientException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Character> class0 = Character.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.getOuterClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isLocalType(class0, false);
      DataTruncation dataTruncation0 = new DataTruncation((-4068), false, false, (-1983), (-4068));
      MockException mockException0 = new MockException(dataTruncation0);
      dataTruncation0.initCause(mockException0);
      // Undeclared exception!
      ClassUtil.getRootCause(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      List<Class<?>> list0 = new Stack<Class<CollectionType>>();
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(inputStreamReader0, (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", jsonMappingException0);
//      try { 
        ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.createInstance((Class<String>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getClassMethods(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = new Byte((byte) (-91));
      Class<Module> class1 = Module.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(byte0, class1);
//      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `com.fasterxml.jackson.databind.Module` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Byte`: incompatible types
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1, list0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
//      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Byte> class0 = Byte.class;
      ClassUtil.findSuperTypes(class0, class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "Cannot access ");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Integer> enumMap0 = new EnumMap<AccessPattern, Integer>(class0);
      ClassUtil.findEnumType(enumMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n<c`d7}?Def", (String) null, (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2224;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeReference<Boolean> typeReference0 = (TypeReference<Boolean>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
//      try { 
        objectReader0.forType(typeReference0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unrecognized Type: [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jackson.core.type.TypeReference");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "com.fasterxml.jackson.core.type.TypeReference");
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      JavaType javaType0 = objectMapper3.constructType(class0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<String> class1 = String.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.findClassAnnotations(class0);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
//      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)86);
      ClassUtil.hasClass(short0, class0);
      SQLException sQLException0 = new SQLException("bU8F?Xo[$#-J$ju", "bU8F?Xo[$#-J$ju");
      sQLException0.getLocalizedMessage();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // bU8F?Xo[$#-J$ju
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.enable(jsonGenerator_Feature0);
      jsonFactory0.configure(jsonParser_Feature0, true);
      jsonFactory0._getBufferRecycler();
      jsonFactory0._getBufferRecycler();
      Class<Void> class0 = Void.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.backticked("JSON");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      DataTruncation dataTruncation0 = new DataTruncation(1536, false, false, 1536, 1536);
      dataTruncation0.getNextWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("0123456789abcdef", "0123456789abcdef", (Throwable) null);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasClass(class0, class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) class0, 10);
      ClassUtil.throwIfRTE(jsonMappingException0);
      ClassUtil.primitiveType(class0);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (was java.sql.SQLTimeoutException) (through reference chain: com.fasterxml.jackson.databind.type.PlaceholderForType[10])
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Integer> enumMap0 = new EnumMap<AccessPattern, Integer>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Integer integer0 = new Integer((-1894));
      enumMap0.put(accessPattern0, integer0);
      EnumMap<AccessPattern, Integer> enumMap1 = new EnumMap<AccessPattern, Integer>(enumMap0);
      ClassUtil.findEnumType(enumMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!i&5pcl", "!i&5pcl");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("overflow, value cannot be represented as 16-bit value", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLInvalidAuthorizationSpecException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short)1168);
      ClassUtil.getClassDescription(short0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getPackageName(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class1);
      Class<Object> class2 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (short)1168);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
      IOContext iOContext0 = null;
      int int0 = 1969;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "java.lang.Integer");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // java.lang.Integer
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
//      try { 
        ClassUtil.throwIfIOE(iOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Integer> enumMap0 = new EnumMap<AccessPattern, Integer>(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumMap<AccessPattern, Integer> enumMap1 = new EnumMap<AccessPattern, Integer>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      MockPrintWriter mockPrintWriter0 = null;
//      try {
        mockPrintWriter0 = new MockPrintWriter("");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.emptyIterator();
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getClassMethods(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.canBeABeanType(class2);
      Class<Module> class3 = Module.class;
//      try { 
        ClassUtil.createInstance(class3, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern1, accessPattern2);
      ClassUtil.findEnumType(enumSet0);
      TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withKeyValueHandler((Object) null);
      MapType mapType3 = mapType2.withKeyTypeHandler(typeFactory0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("sb+3~W?'a\"}", "sb+3~W?'a\"}", 2);
      MockIOException mockIOException0 = new MockIOException("sb+3~W?'a\"}", sQLInvalidAuthorizationSpecException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockIOException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "sb+3~W?'a\"}");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Short> class1 = Short.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      typeFactory0.clearCache();
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern2, accessPattern3);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      Class<LinkedList> class2 = LinkedList.class;
      Class<String> class3 = String.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class3);
      MapType mapType0 = typeFactory1.constructMapType((Class<? extends Map>) class1, (JavaType) collectionType0, (JavaType) collectionType0);
      MapType mapType1 = mapType0.withKeyType(collectionType0);
      mapType1.isTypeOrSubTypeOf(class1);
      ClassUtil.rawClass(mapType1);
      ClassUtil.isConcrete(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("##irrelevant", "##irrelevant", sQLTransactionRollbackException0);
      ClassUtil.throwIfIOE(sQLTransientException0);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class4);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[6];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      annotationMapArray0[3] = null;
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = null;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, (AnnotationMap) null, annotationMapArray0);
      AnnotatedParameter annotatedParameter0 = annotatedConstructor0.getParameter(907);
      Member member0 = annotatedParameter0.getMember();
      collectionLikeType0.isReferenceType();
      ClassUtil.checkAndFixAccess(member0, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      MockError mockError0 = new MockError();
      mockError0.getStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findClassAnnotations(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isNonStaticInnerClass(class0);
      JavaType javaType0 = null;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<AccessPattern> class1 = AccessPattern.class;
      Byte byte0 = new Byte((byte) (-83));
      String string0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, byte0, (String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Byte (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'null'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Object> class0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.getConstructors((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, (OutputStream) null, byteArray0, (byte)114, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.Void");
      SQLDataException sQLDataException1 = new SQLDataException("net.sf.cglib.proxy.java.lang.Void", "net.sf.cglib.proxy.java.lang.Void", (-450), sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "net.sf.cglib.proxy.java.lang.Void", (Throwable) sQLDataException1);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // net.sf.cglib.proxy.java.lang.Void
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "-l';V^]e");
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Enum<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("%g/[5P5", "primitive", "", 3);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      sQLTransactionRollbackException0.printStackTrace(printWriter0);
      StackTraceElement stackTraceElement1 = new StackTraceElement("[null]", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", 229);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLDataException sQLDataException0 = new SQLDataException("bS,0f", "bS,0f", 3, sQLTransactionRollbackException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0, "[null]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // [null]
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double((-1852.55));
      Class<?> class0 = ClassUtil.classOf(double0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription(class1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Integer");
      Class<Float> class0 = Float.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
//      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[6];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      annotationMapArray0[3] = null;
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = null;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, (AnnotationMap) null, annotationMapArray0);
      AnnotatedParameter annotatedParameter0 = annotatedConstructor0.getParameter(907);
      annotatedParameter0.getMember();
      Class<SimpleType> class2 = SimpleType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 907);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassUtil.nonNullString("_$*|2;bo~KNi=x");
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class1, true);
      constructor1.getDeclaredAnnotations();
      Constructor<IOException> constructor2 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor2);
      Integer integer0 = new Integer((-1746839910));
      classUtil_Ctor1.getParamCount();
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor1._ctor);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`v!~}:92\td");
      ClassUtil.getClassDescription(mockRuntimeException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nullOrToString(class0);
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      Constructor<SimpleObjectIdResolver> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getParameterCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      constructor0.getParameters();
      constructor0.getTypeParameters();
      constructor0.getAnnotations();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<Annotation> class3 = Annotation.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constructor0.getAnnotation(class3);
      constructor0.getTypeParameters();
      constructor0.getDeclaredAnnotation(class3);
      constructor0.getAnnotatedReceiverType();
      ClassUtil.getGenericInterfaces(class2);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotation(class4);
      ClassUtil.getClassDescription(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<MapType> class5 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class5);
      ClassUtil.getPackageName(class4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.findSuperTypes(javaType0, class0, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("double");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) sQLNonTransientException0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ClassUtil.isProxyType(class1);
      ClassUtil.isJacksonStdImpl((Object) sQLNonTransientException0);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      jsonFactory1.enable(jsonParser_Feature0);
      jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "JSON");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findEnumType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1802));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".[GmU&:5Wo~N6QsH,z");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<DoubleNode> class1 = DoubleNode.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.findSuperTypes(javaType0, class0, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("double");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) sQLNonTransientException0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) arrayType0);
      ClassUtil.nonNull(mapType0, mapType0);
      ArrayType arrayType2 = arrayType1.withValueHandler(sQLNonTransientException0);
      ClassUtil.findSuperTypes((JavaType) arrayType2, (Class<?>) class2, true);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.findSuperTypes(javaType0, class0, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("double");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) sQLNonTransientException0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findSuperTypes(javaType0, class1, false);
      Class<Float> class2 = Float.class;
      ClassUtil.findRawSuperTypes(class2, class0, true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.findSuperTypes(javaType0, class0, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("double");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) sQLNonTransientException0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class0, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory5 = jsonFactory4.setRootValueSeparator((String) null);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((OutputStream) byteArrayBuilder0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "M^GAL_O.$h=-}0?0");
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isProxyType(class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.getStackTrace();
      MockError mockError0 = new MockError(">^I$T~;WO%}gMpyJ", sQLDataException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwIfError(mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1802));
      placeholderForType0.actualType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(placeholderForType0, "%m1", (String) null);
//      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id '%m1' as a subtype of $-1801
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Long> class0 = Long.class;
      MockException mockException0 = new MockException(",%Wiasd@d)u0");
      ClassUtil.throwIfRTE(mockException0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.quotedOr(class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<String> class1 = String.class;
      Class<Integer> class2 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withValueHandler(class0);
      JavaType javaType0 = referenceType1.withContentType(resolvedRecursiveType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaTypeArray0[2], referenceType1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "D66!K7l", mapLikeType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      annotatedField0.getMember();
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findConstructor(class3, true);
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<ArrayType> class1 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, ",S7NUMD5Tuqp#4", simpleType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      annotatedField0.getMember();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("serialVersionUID");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2872);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      MockError mockError0 = new MockError();
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
//        fail("Expecting exception: Error");
      
//      } catch(Error e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "unknown";
      SQLDataException sQLDataException0 = new SQLDataException("unknown", "eleaentTHpe");
      SQLException sQLException0 = new SQLException("unknown", "unknown", sQLDataException0);
      sQLDataException0.initCause(sQLException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "eleaentTHpe");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null, (Throwable) sQLNonTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): N/A
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.throwIfRTE((Throwable) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<Double> class2 = Double.class;
      ClassUtil.nameOf(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.getClassMethods(class0);
      ClassUtil.hasClass(class2, class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError("; actual type: ");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      mockError0.getStackTrace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)32;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      objectMapper1.configure(jsonGenerator_Feature0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper2, (OutputStream) null, byteArray0, 45, true);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Float float0 = new Float(0.0F);
      ClassUtil.nonNull(float0, (Float) null);
      Character character0 = new Character('Z');
      ClassUtil.nonNull((Character) null, character0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Void> class2 = Void.class;
      ClassUtil.hasClass((Object) null, class2);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.util.ClassUtil", "Failed to instantiate class ", 1130);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jackson.databind.util.ClassUtil
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.primitiveType(class1);
      Integer integer0 = new Integer(1536);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.nameOf(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getClassMethods(class0);
      ClassUtil.hasClass((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Integer> class2 = Integer.TYPE;
      ClassUtil.findConstructor(class2, false);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.isConcrete((Member) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`com.fasterxml.jackson.databind.type.ReferenceType`");
      String string0 = "2^}LKrjvys5|cx";
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "2^}LKrjvys5|cx");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(27);
      ClassUtil.nullOrToString(integer0);
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, integer0, "keyUniverse");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Integer (of class int) must override method 'keyUniverse'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning("gvEE m|;s", "gvEE m|;s");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("gvEE m|;s", "gvEE m|;s", 1440);
      sQLWarning0.initCause(sQLTimeoutException0);
      ClassUtil.getRootCause(sQLWarning0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gvEE m|;s");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class3);
      Character character0 = new Character('\'');
      ClassUtil.nonNull(character0, character0);
      ClassUtil.isLocalType(class2, false);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("-jAg>");
      ClassUtil.nonNullString("-jAg>");
      Class<Character> class0 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Short");
//      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isBogusClass(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
//      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.emptyIterator();
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      jsonFormat_Features0.get(jsonFormat_Feature0);
      ClassUtil.isJacksonStdImpl((Object) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapType mapType1 = mapType0.withKeyValueHandler((Object) null);
      MapType mapType2 = mapType1.withTypeHandler(class0);
      ClassUtil.getClassDescription(mapType2);
      Long long0 = new Long((-3276L));
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, long0, "`com.fasterxml.jackson.databind.type.MapType`");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Long (of class java.lang.Object) must override method '`com.fasterxml.jackson.databind.type.MapType`'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class1 = String.class;
      ClassUtil.canBeABeanType(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.findEnumType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("=n>:L4Ux~T,@,-A");
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, "=n>:L4Ux~T,@,-A", "com.fasterxml.jackson.databind.desq<.std.StdKeyDeserializer$DelegatingKD");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.String (of class com.fasterxml.jackson.databind.type.CollectionLikeType) must override method 'com.fasterxml.jackson.databind.desq<.std.StdKeyDeserializer$DelegatingKD'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("G*-w.^", "6[");
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      Class<Character> class1 = Character.TYPE;
      // Undeclared exception!
//      try { 
        ClassUtil.getPackageName((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getClassMethods((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getClassMethods(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class3);
      // Undeclared exception!
//      try { 
        ClassUtil.getRootCause((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.nameOf(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.classOf("`com.fasterxml.jackson.databind.type.CollectionType`");
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Void> class0 = Void.class;
      // Undeclared exception!
//      try { 
        ClassUtil.primitiveType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.getOuterClass(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isJacksonStdImpl((Object) defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
//      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.nameOf(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      objectMapper1.reader();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N!P}^ ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1258, objectMapper1, mockFileOutputStream0, byteArray0, 0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      Class<IOException> class1 = IOException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(placeholderForType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "size", "?+L");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("entrySet", "entrySet", (-393805500), jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: entrySet
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[1];
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      accessibleObjectArray0[0] = (AccessibleObject) constructor1;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParamCount();
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(constructor0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      MockException mockException0 = new MockException("~lmXTTj\"U0s~#N]2Q");
      mockException0.getSuppressed();
      ClassUtil.throwIfRTE(mockException0);
      ClassUtil.nameOf(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.");
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor1.getConstructor();
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      ClassUtil.getPackageName(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.emptyIterator();
      String string0 = "l+K<J";
      ClassUtil.backticked("l+K<J");
      Float float0 = new Float((-873.3F));
      ClassUtil.nonNull(float0, (Float) null);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.getClassDescription(list0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getConstructors(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.isProxyType(class1);
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getEnclosingClass(class0);
      Class<ReferenceType> class3 = ReferenceType.class;
      Class<Character> class4 = Character.class;
//      try { 
        ClassUtil.createInstance(class4, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Character has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~lmXTTj\"U0s~#N]2Q");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~lmXTTj\"U0s~#N]2Q");
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      MockException mockException0 = new MockException("~lmXTTj\"U0s~#N]2Q");
      Throwable throwable0 = ClassUtil.throwIfRTE(mockException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ~lmXTTj\"U0s~#N]2Q
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLException sQLException0 = new SQLException();
      ClassUtil.getPackageName(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getRootCause(sQLTimeoutException0);
      ClassUtil.canBeABeanType(class2);
      Class<String> class3 = String.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class3, (Object) null, "Up9r]j7N6X_~w,=4");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
//      try { 
        ClassUtil.isProxyType((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(short1, class0, "Unresolved forward reference but no identity info.");
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Cannot deserialize value of type `java.lang.annotation.Annotation` from number 2: Unresolved forward reference but no identity info.
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8+5[yV|H");
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isProxyType(class2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.nameOf(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.toGenericString();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedParameterTypes();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getAnnotatedParameterTypes();
      constructor0.isAnnotationPresent(class1);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) classUtil_Ctor0._ctor;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findEnumType(class1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClassUtil.nonNull(clientInfoStatus0, clientInfoStatus1);
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("class to register value instantiator for");
      Class<MapLikeType> class2 = MapLikeType.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("DEFAULT", "");
      MockError mockError0 = new MockError("`class to register value instantiator for`", sQLRecoverableException0);
      // Undeclared exception!
//      try { 
        defaultSerializerProvider_Impl1.setAttribute((Object) null, mockError0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaringClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdKeyException((Class<?>) null, (String) null, (String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      TypeFactory.defaultInstance();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      Class<Character> class1 = Character.class;
      ClassUtil.getPackageName(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getRootCause(throwable0);
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findEnumType(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClassUtil.nonNull(clientInfoStatus0, clientInfoStatus0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.backticked("class to register value instantiator for");
      String string0 = "DEFAULT";
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, clientInfoStatus1, "DEFAULT");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.sql.ClientInfoStatus (of class java.lang.Integer) must override method 'DEFAULT'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isProxyType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getDeclaredMethods(class1);
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.printStackTrace();
      String string0 = " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type";
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         //  is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.backticked("`com.fasterxml.jackson.databind.type.MapLikeType`");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(0.0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectReader objectReader0 = objectMapper1.reader();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N!P}^ ");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader0, mockFileOutputStream0, byteArray0, 0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(placeholderForType0, "N!P}^ ", "?+L");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("size", "``com.fasterxml.jackson.databind.type.MapLikeType``", 2529, jsonMappingException0);
      // Undeclared exception!
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransientConnectionException0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.sql.SQLTransientConnectionException: size
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassUtil.backticked("Exgm#]");
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean0 = false;
//      try { 
        ClassUtil.createInstance(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Type type0 = ClassUtil.getGenericSuperclass(class1);
      ClassUtil.emptyIterator();
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      jsonFormat_Features0.get(jsonFormat_Feature0);
      ClassUtil.isJacksonStdImpl((Object) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      MapType mapType1 = mapType0.withKeyValueHandler(type0);
      MapType mapType2 = mapType1.withTypeHandler(class0);
      ClassUtil.getClassDescription(mapType2);
      Long long0 = new Long((-3276L));
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class0, long0, "`com.fasterxml.jackson.databind.type.MapType`");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Long (of class java.lang.Object) must override method '`com.fasterxml.jackson.databind.type.MapType`'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.nameOf(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(172);
      placeholderForType0.actualType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "elementType", "y{?YXr/5o/jUbA[g`");
//      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not resolve type id 'elementType' as a subtype of null: y{?YXr/5o/jUbA[g`
//         //
//         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~lmXTTj\"U0s~#N]2Q");
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      MockException mockException0 = new MockException("com.fasterxml.jackson.annotation.JacksonInject$Value");
      mockException0.getMessage();
      Throwable throwable0 = ClassUtil.throwIfRTE(mockException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE(throwable0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // com.fasterxml.jackson.annotation.JacksonInject$Value
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Double> class0 = Double.class;
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): null
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString((Object) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getClassMethods(class1);
      Class<NoClass> class2 = NoClass.class;
      NoClass noClass0 = ClassUtil.createInstance(class2, true);
      ClassUtil.quotedOr(noClass0, (String) null);
      ClassUtil.emptyIterator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class3 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class3);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, (String) null, arrayType0);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
      String string0 = "n/~oh%#okPaQ9~i(y";
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("n/~oh%#okPaQ9~i(y", "n/~oh%#okPaQ9~i(y", (Throwable) null);
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n/~oh%#okPaQ9~i(y", "", (-2850), sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.lang.Throwable", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isConcrete(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.findClassAnnotations(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.getConstructors(class4);
      Class<IOException> class5 = IOException.class;
      ClassUtil.getClassMethods(class5);
      ClassUtil.emptyIterator();
      ClassUtil.classOf(class5);
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.nullOrToString(integer0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getConstructors(class0);
      ClassUtil.verifyMustOverride(class0, integer0, "keyUniverse");
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("Xy?$o9Iio-jG'&uqg\"Z");
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getPackageName(class2);
      Class<String> class3 = String.class;
      ClassUtil.isNonStaticInnerClass(class3);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      // Undeclared exception!
//      try { 
        beanSerializerBuilder0.getClassInfo();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      ClassUtil.isConcrete(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.getConstructors(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.getConstructors(class4);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.toGenericString();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedParameterTypes();
      constructor0.isAnnotationPresent(class2);
      accessibleObjectArray0[1] = (AccessibleObject) classUtil_Ctor0._ctor;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete(class0);
      Class<Double> class3 = Double.class;
      ClassUtil.findClassAnnotations(class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class4);
      Class<Short> class5 = Short.class;
      ClassUtil.getConstructors(class5);
      Class<Short> class6 = Short.class;
      ClassUtil.getConstructors(class6);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Long> class0 = Long.class;
      // Undeclared exception!
//      try { 
        ClassUtil.wrapperType(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class java.lang.Long is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      ClassUtil.isConcrete(class1);
      TypeResolutionContext typeResolutionContext0 = null;
      String string0 = " ... (truncated ";
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      String string1 = "Illegal index ";
//      try { 
        typeFactory0.constructFromCanonical("Illegal index ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Failed to parse type 'Illegal index' (remaining: ''): Cannot locate class 'Illegal index', problem: Illegal index
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      MockIOException mockIOException0 = new MockIOException("EjAg>");
      mockIOException0.getLocalizedMessage();
      mockIOException0.fillInStackTrace();
      // Undeclared exception!
//      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.nullOrToString(integer0);
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getEnclosingClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
//      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<Double> class1 = Double.class;
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.backticked("yh_J-eF(4@nHj)K8");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("yh_J-eF(4@nHj)K8");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      sQLRecoverableException0.spliterator();
      sQLRecoverableException0.getSuppressed();
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLRecoverableException0);
      Class<Double> class3 = Double.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.isLocalType(class1, false);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.getPackageName(class4);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.canBeABeanType(class0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findConstructor(class3, true);
      Class<Integer> class4 = Integer.class;
      ClassUtil.getDeclaringClass(class4);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.getClassMethods(class5);
      ClassUtil.getOuterClass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParameterAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.backticked((String) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isProxyType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "unknown", arrayType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
//      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1701));
      placeholderForType0.getTypeName();
      Class<CollectionType> class1 = CollectionType.class;
      placeholderForType0.isTypeOrSubTypeOf(class1);
      // Undeclared exception!
//      try { 
        placeholderForType0.withValueHandler(class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
//         //
//         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean0 = true;
//      try { 
        ClassUtil.createInstance(class1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.defaultValue(class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Short short0 = new Short((short) (-320));
      ClassUtil.classOf(short0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(">K$?*!^%Us$mZ.X");
      sQLTransientException0.spliterator();
      ClassUtil.throwIfError(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getOuterClass(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "entrySet", (-82));
      sQLTransientException0.spliterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLTransientException0);
      File file0 = MockFile.createTempFile("non-static member class", "non-static member class");
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream(file0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      ClassUtil.nonNullString("[null]");
      SQLDataException sQLDataException0 = new SQLDataException("[null]", (String) null, (-1225));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`java.lang.Error`", "[null]", sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string0 = "JQV:foN,7X%E][)<U>k";
      StackTraceElement stackTraceElement0 = new StackTraceElement("JQV:foN,7X%E][)<U>k", "[3d;", "`java.lang.Error`", (-1225));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("[null]", "JQV:foN,7X%E][)<U>k", (String) null, (-1225));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
//      try {
        stackTraceElement2 = new StackTraceElement((String) null, "[null]", (String) null, (-1225));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Declaring class is null
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getPackageName(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getPackageName(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("n}}J@8r", "n}}J@8r");
      sQLIntegrityConstraintViolationException0.spliterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("n}}J@8r", " ?S_I(ih9oP@#", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLIntegrityConstraintViolationException1);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class1, class0, "com.fasterxml.jackson.databind.type");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ReferenceType) must override method 'com.fasterxml.jackson.databind.type'
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.classNameOf("java.io");
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
//      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.annotation.NoClass with 2 type parameters: class expects 0
//         //
//         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isProxyType(class0);
      TypeFactory.defaultInstance();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getPackageName(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[6];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      annotationMapArray0[3] = null;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = null;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, (AnnotationMap) null, annotationMapArray0);
      AnnotatedParameter annotatedParameter0 = annotatedConstructor0.getParameter(907);
      Member member0 = annotatedParameter0.getMember();
      ClassUtil.checkAndFixAccess(member0, false);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Integer integer0 = new Integer(0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Object> class0 = Object.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString((Object) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getClassMethods(class1);
      Class<NoClass> class2 = NoClass.class;
      NoClass noClass0 = ClassUtil.createInstance(class2, true);
      ClassUtil.quotedOr(noClass0, (String) null);
      ClassUtil.emptyIterator();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.toGenericString();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedParameterTypes();
      constructor0.isAnnotationPresent(class2);
      accessibleObjectArray0[1] = (AccessibleObject) classUtil_Ctor0._ctor;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete(class0);
      Class<Double> class3 = Double.class;
      ClassUtil.findClassAnnotations(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class4);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<Error> class2 = Error.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.isLocalType(class2, true);
      ClassUtil.findRawSuperTypes(class2, class0, true);
      int int0 = 1569;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1569);
      placeholderForType0.toString();
      ClassUtil.getClassDescription(placeholderForType0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      // Undeclared exception!
//      try { 
        ClassUtil.hasGetterSignature((Method) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.setAccessible(true);
      constructor0.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.hasEnclosingMethod(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyType", "dafG]vYMa,g");
      sQLTransientException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      ClassUtil.throwIfError(sQLTransientException0);
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      // Undeclared exception!
//      try { 
        stack0.removeElementAt((-1455));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // Array index out of range: -1455
//         //
//         verifyException("java.util.Vector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<NoClass> class1 = NoClass.class;
//      try { 
        ClassUtil.findConstructor(class1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
//      try { 
        classUtil_Ctor0.getParamCount();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cannot figure out type for EnumMap (odd JDK platform?)", "NON_CONCRETE_AND_ARRAYS", 3);
      sQLTimeoutException0.getSuppressed();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("}~>ZD-}", (String) null, sQLTimeoutException0);
      sQLRecoverableException0.getLocalizedMessage();
      sQLRecoverableException0.addSuppressed(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Cannot figure out type for EnumMap (odd JDK platform?)");
      sQLTimeoutException0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
//      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "keyType");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // keyType
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.nullOrToString(integer0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaringClass(class0);
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      String string0 = "^tYK.f.h4-";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^tYK.f.h4-", "^tYK.f.h4-", (-1822));
      ByteArrayBuilder byteArrayBuilder0 = null;
//      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-1822));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(2, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) "=b";
      objectArray0[3] = (Object) deserializerFactoryConfig0;
      // Undeclared exception!
//      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "=b", objectArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Type type0 = ClassUtil.getGenericSuperclass(class1);
      Iterator<MapType> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) type0);
      ClassUtil.getClassDescription(iterator0);
      Class<NoClass> class2 = NoClass.class;
      // Undeclared exception!
//      try { 
        ClassUtil.verifyMustOverride(class2, class1, "','");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method '',''
//         //
//         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
//      }
  }
}
